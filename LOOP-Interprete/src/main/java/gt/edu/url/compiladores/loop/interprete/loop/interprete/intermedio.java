// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/intermedio.flex



package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class intermedio implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\10\1\11\1\10\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\12\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\34\1\35"+
    "\11\34\1\36\1\37\1\40\1\34\1\41\10\34\1\10"+
    "\1\12\1\10\1\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\52\1\53\2\52\1\54\1\52"+
    "\1\55\1\56\1\57\1\52\1\60\1\61\1\62\1\63"+
    "\1\64\4\52\4\10\6\0\1\3\33\0\1\10\22\0"+
    "\1\65\12\0\1\65\1\0\1\66\1\31\1\67\5\0"+
    "\1\66\3\0\1\66\3\0\1\66\1\0\1\66\6\0"+
    "\1\66\1\0\1\66\4\0\1\70\7\0\1\70\3\0"+
    "\1\70\3\0\1\70\1\0\1\70\6\0\1\70\1\0"+
    "\1\70\303\0\1\43\2\0\1\43\365\0\1\67\12\0"+
    "\1\43\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\3\5\1\6\1\7"+
    "\1\10\2\6\1\11\1\6\1\12\1\6\1\13\1\14"+
    "\1\15\3\16\1\12\13\17\2\5\1\0\1\20\2\5"+
    "\1\13\1\12\1\21\1\22\1\5\2\12\1\0\1\5"+
    "\2\16\1\23\2\12\20\17\1\20\2\5\3\0\1\5"+
    "\1\12\1\24\1\12\1\16\1\12\20\17\1\24\1\25"+
    "\1\21\1\5\1\0\7\17\1\26\2\17\1\27\1\17"+
    "\1\25\1\30\4\0\5\17\1\31\3\17\1\0\1\17"+
    "\4\0\1\17\1\32\1\17\1\33\3\17\3\0\1\17"+
    "\4\0\1\34\5\17\3\0\1\17\4\0\1\35\1\36"+
    "\3\17\3\0\1\37\10\0\1\35\1\17\1\40\1\41"+
    "\6\0\2\30\1\17\15\0\1\30\22\0\1\30\34\0"+
    "\1\42\11\0\1\30\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\71\0\344\0\u011d"+
    "\0\u0156\0\u0156\0\71\0\71\0\71\0\u018f\0\71\0\u01c8"+
    "\0\u0201\0\u023a\0\u0273\0\71\0\344\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u0156"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u02e5\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\71\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u0dce\0\u0e07\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u0390\0\u15d2\0\u160b\0\u1644\0\u167d\0\u0e79\0\71\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u0390\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1644\0\u1af1\0\u1644\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1644\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u0390\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u0156\0\u0156\0\u2484\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\71\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae"+
    "\0\u3fe7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\11\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\11\1\24\1\12\1\25"+
    "\1\12\2\2\1\26\3\27\1\30\2\27\1\31\1\11"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\32\1\40"+
    "\1\41\2\32\1\42\1\43\3\32\1\44\1\11\1\45"+
    "\1\2\1\11\72\0\1\3\71\0\1\4\74\0\5\11"+
    "\3\0\1\11\1\0\5\11\1\0\1\11\1\12\1\11"+
    "\2\0\10\45\1\11\21\46\1\11\1\45\1\0\1\11"+
    "\1\0\1\47\3\0\1\47\1\10\1\50\1\10\2\11"+
    "\3\47\1\10\1\47\5\10\1\47\3\10\2\47\10\51"+
    "\1\11\21\52\1\10\1\45\1\0\1\11\6\0\5\11"+
    "\3\0\1\11\1\0\5\11\1\0\3\11\2\0\10\45"+
    "\1\11\21\46\1\11\1\45\1\0\1\11\6\0\5\11"+
    "\3\0\1\12\1\0\5\11\1\0\3\11\2\0\10\45"+
    "\1\11\21\46\1\11\1\45\1\0\1\11\6\0\5\11"+
    "\3\0\1\11\1\0\1\12\2\11\1\53\1\11\1\0"+
    "\3\11\2\0\10\45\1\11\21\46\1\11\1\45\1\0"+
    "\1\11\6\0\5\11\3\0\1\11\1\0\1\11\1\21"+
    "\1\11\1\21\1\11\1\0\3\11\2\0\10\31\1\11"+
    "\21\54\1\11\1\45\1\0\1\11\15\0\1\55\4\0"+
    "\1\56\54\0\5\57\3\0\1\57\1\0\1\57\1\60"+
    "\1\11\1\23\1\57\1\0\3\57\2\0\7\61\1\31"+
    "\1\57\21\54\1\57\1\45\1\0\1\57\6\0\5\11"+
    "\1\62\2\0\1\11\1\0\1\11\1\21\1\63\1\21"+
    "\1\11\1\0\3\11\2\0\3\27\1\64\3\27\1\31"+
    "\1\11\21\65\1\11\1\45\1\0\1\11\6\0\5\11"+
    "\1\62\2\0\1\11\1\0\1\11\1\21\1\63\1\21"+
    "\1\11\1\0\3\11\2\0\7\27\1\31\1\11\21\65"+
    "\1\11\1\45\1\0\1\11\6\0\5\11\1\62\2\0"+
    "\1\11\1\0\1\11\1\21\1\63\1\21\1\11\1\0"+
    "\3\11\2\0\6\27\1\66\1\31\1\11\21\65\1\11"+
    "\1\45\1\0\1\11\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\21\1\63\1\21\1\11\1\0\3\11\2\0"+
    "\10\31\1\11\21\67\1\11\1\45\1\0\1\11\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\21\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\12\32\1\75\6\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\1\76\20\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\4\32\1\77\14\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\11\32\1\100\3\32\1\101\3\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\1\102\20\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\11\32\1\103\7\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\4\32\1\104"+
    "\14\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\14\32\1\105\2\32\1\106"+
    "\1\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\4\32\1\107\14\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\4\32\1\110\14\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\2\11\1\63"+
    "\2\11\1\0\3\11\2\0\10\45\1\11\21\0\1\11"+
    "\1\45\1\0\1\11\6\0\5\11\3\0\1\11\1\0"+
    "\2\11\1\63\2\11\1\0\3\11\2\0\10\45\1\11"+
    "\21\46\1\11\1\45\1\0\1\11\1\0\1\47\3\0"+
    "\2\47\1\111\1\47\2\0\30\47\1\0\22\47\4\0"+
    "\1\47\3\0\1\47\1\10\1\50\1\10\2\11\3\47"+
    "\1\10\1\47\2\10\1\112\2\10\1\47\3\10\2\47"+
    "\10\51\1\11\21\47\1\10\1\45\1\0\1\11\1\0"+
    "\1\47\3\0\1\47\1\10\1\50\1\10\2\11\3\47"+
    "\1\10\1\47\2\10\1\112\2\10\1\47\3\10\2\47"+
    "\10\51\1\11\21\52\1\10\1\45\1\0\1\11\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\113\1\11\1\53"+
    "\1\11\1\0\3\11\2\0\10\45\1\11\21\46\1\11"+
    "\1\45\1\0\1\11\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\21\1\63\1\21\1\11\1\0\3\11\2\0"+
    "\10\31\1\11\21\54\1\11\1\45\1\0\1\11\5\0"+
    "\1\114\5\55\2\114\1\115\1\55\1\114\2\55\1\116"+
    "\2\55\1\114\3\55\1\0\1\114\34\55\1\114\1\55"+
    "\5\0\24\56\1\0\37\56\6\0\5\57\3\0\1\57"+
    "\1\0\2\57\2\11\1\57\1\0\3\57\2\0\7\117"+
    "\1\45\1\57\21\46\1\57\1\45\1\0\1\57\6\0"+
    "\5\57\3\0\1\57\1\0\1\57\1\120\1\11\1\121"+
    "\1\57\1\0\3\57\2\0\7\122\1\31\1\57\21\54"+
    "\1\57\1\45\1\0\1\57\5\0\24\61\1\0\37\61"+
    "\14\0\1\123\76\0\1\63\54\0\5\11\1\62\2\0"+
    "\1\11\1\0\1\11\1\21\1\63\1\21\1\11\1\0"+
    "\3\11\2\0\2\27\1\66\4\27\1\31\1\11\21\65"+
    "\1\11\1\45\1\0\1\11\13\0\1\62\5\0\1\67"+
    "\1\0\1\67\7\0\7\65\1\67\1\0\21\65\25\0"+
    "\1\67\1\0\1\67\7\0\10\67\1\0\21\67\12\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\21\1\11\1\21"+
    "\1\11\1\0\3\11\2\0\10\31\1\11\21\124\1\11"+
    "\1\45\1\0\1\11\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\21\1\11\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\21\125\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\21\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\21\126\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\2\11\1\63\1\74\1\11\1\0\3\11\2\0\10\73"+
    "\1\11\21\127\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\3\11\1\74\1\11\1\0\3\11"+
    "\2\0\10\73\1\11\21\130\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\12\32"+
    "\1\131\6\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\3\32\1\132\15\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\20\32\1\133\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\16\32\1\134\2\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\2\32\1\135"+
    "\16\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\10\32\1\136\10\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\15\32\1\137\3\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\4\32\1\140\14\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\7\32\1\141"+
    "\11\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\1\32\1\142\17\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\1\143\20\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\14\32"+
    "\1\144\4\32\1\11\1\73\1\0\1\74\1\0\1\47"+
    "\3\0\2\47\1\111\1\47\2\0\7\47\1\112\20\47"+
    "\1\0\22\47\11\0\5\11\3\0\1\11\1\0\3\11"+
    "\1\145\1\11\1\0\3\11\2\0\10\45\1\11\21\46"+
    "\1\11\1\45\1\0\1\11\5\0\10\114\1\115\13\114"+
    "\1\0\37\114\5\0\10\114\1\115\4\114\1\146\6\114"+
    "\1\0\37\114\5\0\10\55\1\147\5\55\1\114\3\55"+
    "\2\114\1\0\1\55\7\114\1\55\24\114\1\55\1\114"+
    "\6\0\5\57\3\0\1\57\1\0\2\57\1\150\1\11"+
    "\1\57\1\0\3\57\2\0\7\117\1\45\1\57\21\0"+
    "\1\57\1\45\1\0\1\57\6\0\5\57\3\0\1\57"+
    "\1\0\1\57\1\120\1\11\1\21\1\57\1\0\3\57"+
    "\2\0\7\122\1\31\1\57\21\54\1\57\1\45\1\0"+
    "\1\57\6\0\5\11\3\0\1\11\1\0\1\11\1\21"+
    "\1\11\1\121\1\11\1\0\3\11\2\0\10\31\1\11"+
    "\21\54\1\11\1\45\1\0\1\11\6\0\5\57\3\0"+
    "\1\57\1\0\1\57\1\120\1\150\1\21\1\57\1\0"+
    "\3\57\2\0\7\122\1\31\1\57\21\67\1\57\1\45"+
    "\1\0\1\57\13\0\1\62\63\0\5\11\1\151\2\0"+
    "\1\11\1\0\1\11\1\21\1\63\1\21\1\11\1\0"+
    "\3\11\2\0\10\31\1\11\21\124\1\11\1\45\1\0"+
    "\1\11\6\0\5\11\3\0\1\11\1\0\1\11\1\21"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\21\125\1\11\1\73\1\0\1\74\21\0\1\67\1\0"+
    "\1\126\7\0\10\126\1\0\21\126\1\0\1\127\1\0"+
    "\1\127\23\0\1\127\7\0\10\127\1\0\21\127\1\0"+
    "\1\127\1\0\1\127\6\0\5\11\3\0\1\11\1\0"+
    "\2\11\1\63\1\74\1\11\1\0\3\11\2\0\10\73"+
    "\1\11\21\130\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\10\32\1\152\10\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\4\32\1\153\14\32\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\12\32\1\154\6\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\4\32"+
    "\1\155\14\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\14\32\1\156\4\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\15\32\1\157\3\32\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\16\32\1\160\2\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\14\32"+
    "\1\161\4\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\20\32\1\162\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\10\32\1\163\10\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\10\32\1\164\10\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\3\32\1\165"+
    "\15\32\1\11\1\73\1\0\1\74\5\0\1\114\5\55"+
    "\2\114\1\115\1\55\1\114\2\55\1\166\2\55\1\114"+
    "\3\55\1\0\1\114\34\55\1\114\1\55\6\0\5\150"+
    "\3\0\1\150\1\0\5\150\1\0\3\150\12\0\1\150"+
    "\21\0\1\150\2\0\1\150\14\0\1\167\30\0\1\170"+
    "\1\171\1\0\1\172\7\0\1\173\16\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\4\32\1\174\14\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\11\32\1\175\7\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\10\32\1\176\10\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\14\32\1\177"+
    "\4\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\7\32\1\200\11\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\12\32\1\201\6\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\1\202\20\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\1\203\20\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\7\32\1\204\11\32\1\11\1\73\1\0"+
    "\1\74\5\0\1\205\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\21\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\1\206\20\32\1\11"+
    "\1\73\1\0\1\74\56\0\1\207\56\0\1\210\101\0"+
    "\1\211\63\0\1\212\26\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\1\213\20\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\1\214"+
    "\20\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\20\32\1\215\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\12\32\1\216\6\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\1\32"+
    "\1\217\17\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\11\32\1\220\7\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\3\32\1\221\15\32\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\2\32\1\221\16\32\1\11\1\73\1\0\1\74"+
    "\5\0\1\222\32\0\1\223\3\0\21\224\12\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\3\32\1\225\15\32"+
    "\1\11\1\73\1\0\1\74\56\0\1\226\61\0\1\227"+
    "\103\0\1\230\52\0\1\231\32\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\11\32\1\232\7\32\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\11\1\0\3\11\2\0\10\72"+
    "\1\11\4\32\1\233\14\32\1\11\1\73\1\0\1\74"+
    "\6\0\5\11\3\0\1\11\1\0\1\11\1\70\1\63"+
    "\1\71\1\11\1\0\3\11\2\0\10\72\1\11\7\32"+
    "\1\234\11\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\2\32\1\235\16\32"+
    "\1\11\1\73\1\0\1\74\6\0\5\11\3\0\1\11"+
    "\1\0\1\11\1\70\1\63\1\71\1\11\1\0\3\11"+
    "\2\0\10\72\1\11\1\236\11\32\1\237\6\32\1\11"+
    "\1\73\1\0\1\74\5\0\1\222\36\0\21\224\64\0"+
    "\1\240\15\0\1\241\5\0\1\242\17\0\7\224\2\0"+
    "\21\224\12\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\4\32\1\243\14\32\1\11\1\73\1\0\1\74\54\0"+
    "\1\244\64\0\1\245\70\0\1\246\74\0\1\247\22\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\14\32\1\250"+
    "\4\32\1\11\1\73\1\0\1\74\6\0\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\14\32\1\251\4\32\1\11"+
    "\1\73\1\0\1\74\6\0\5\11\3\0\1\11\1\0"+
    "\1\11\1\70\1\63\1\71\1\11\1\0\3\11\2\0"+
    "\10\72\1\11\7\32\1\252\11\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\15\32\1\253\3\32\1\11\1\73\1\0\1\74\6\0"+
    "\5\11\3\0\1\11\1\0\1\11\1\70\1\63\1\71"+
    "\1\11\1\0\3\11\2\0\10\72\1\11\15\32\1\254"+
    "\3\32\1\11\1\73\1\0\1\74\53\0\1\255\22\0"+
    "\1\241\5\0\1\256\62\0\1\257\6\0\1\260\30\0"+
    "\1\261\1\262\1\0\1\263\7\0\1\264\16\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\14\32\1\157\4\32"+
    "\1\11\1\73\1\0\1\74\50\0\1\265\75\0\1\266"+
    "\73\0\1\267\15\0\1\270\70\0\1\271\5\11\3\0"+
    "\1\11\1\0\1\11\1\70\1\63\1\71\1\11\1\0"+
    "\3\11\2\0\10\72\1\11\21\32\1\11\1\73\1\0"+
    "\1\74\6\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\1\272\20\32\1\11\1\73\1\0\1\74\6\0\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\273"+
    "\1\0\3\11\2\0\10\72\1\11\21\32\1\11\1\73"+
    "\1\0\1\74\6\0\5\11\3\0\1\11\1\0\1\11"+
    "\1\70\1\63\1\71\1\274\1\0\3\11\2\0\10\72"+
    "\1\11\21\32\1\11\1\73\1\0\1\74\55\0\1\275"+
    "\27\0\1\260\61\0\1\257\37\0\1\261\1\262\1\0"+
    "\1\263\7\0\1\264\15\0\1\260\141\0\1\276\56\0"+
    "\1\277\101\0\1\300\63\0\1\301\64\0\1\302\70\0"+
    "\1\247\102\0\1\247\35\0\1\303\20\0\21\304\11\0"+
    "\1\271\71\0\5\11\3\0\1\11\1\0\1\11\1\70"+
    "\1\63\1\71\1\11\1\0\3\11\2\0\10\72\1\11"+
    "\14\32\1\305\4\32\1\11\1\73\1\0\1\74\46\0"+
    "\1\306\100\0\1\307\61\0\1\310\103\0\1\311\52\0"+
    "\1\312\101\0\1\247\32\0\1\313\3\0\1\303\20\0"+
    "\21\304\23\0\1\313\3\0\1\304\7\0\10\304\1\0"+
    "\21\304\1\0\1\304\1\0\1\304\5\0\1\314\5\11"+
    "\3\0\1\11\1\0\1\11\1\70\1\63\1\71\1\11"+
    "\1\0\3\11\2\0\10\72\1\11\21\32\1\11\1\73"+
    "\1\0\1\74\53\0\1\315\71\0\1\316\64\0\1\317"+
    "\70\0\1\320\74\0\1\321\21\0\1\322\116\0\7\323"+
    "\106\0\1\324\61\0\1\325\75\0\1\326\73\0\1\327"+
    "\15\0\1\321\36\0\21\330\11\0\1\322\37\0\1\331"+
    "\1\332\1\0\1\333\7\0\1\334\23\0\1\335\17\0"+
    "\7\323\2\0\21\323\50\0\1\336\70\0\1\337\70\0"+
    "\1\321\102\0\1\321\17\0\1\340\6\0\1\260\2\0"+
    "\1\341\3\0\1\330\7\0\10\330\1\0\21\330\1\0"+
    "\1\330\1\0\1\330\56\0\1\342\56\0\1\343\101\0"+
    "\1\344\63\0\1\345\34\0\1\346\6\0\1\335\20\0"+
    "\21\347\60\0\1\350\71\0\1\321\20\0\1\340\6\0"+
    "\1\260\61\0\1\341\37\0\1\351\1\352\1\0\1\353"+
    "\7\0\1\354\66\0\1\355\61\0\1\356\103\0\1\357"+
    "\52\0\1\360\37\0\1\335\71\0\1\346\6\0\1\347"+
    "\7\0\10\347\1\0\21\347\1\0\1\347\1\0\1\347"+
    "\5\0\1\361\141\0\1\362\56\0\1\363\101\0\1\364"+
    "\63\0\1\365\74\0\1\366\64\0\1\367\70\0\1\370"+
    "\74\0\1\371\27\0\1\372\133\0\1\373\61\0\1\374"+
    "\103\0\1\375\52\0\1\376\74\0\1\377\75\0\1\u0100"+
    "\73\0\1\u0101\15\0\1\u0102\77\0\1\u0103\30\0\1\u0104"+
    "\1\u0105\1\0\1\u0106\7\0\1\u0107\64\0\1\u0108\64\0"+
    "\1\u0109\70\0\1\u010a\74\0\1\u010b\60\0\1\u010c\70\0"+
    "\1\371\102\0\1\371\17\0\1\u0102\6\0\1\u010d\6\0"+
    "\1\u010e\20\0\21\u010f\62\0\1\u0110\56\0\1\u0111\101\0"+
    "\1\u0112\63\0\1\u0113\70\0\1\u0114\75\0\1\u0115\73\0"+
    "\1\u0116\15\0\1\321\140\0\1\371\32\0\1\313\65\0"+
    "\1\u010d\6\0\1\u010e\20\0\21\u010f\20\0\1\u010d\6\0"+
    "\1\u010f\7\0\10\u010f\1\0\21\u010f\1\0\1\u010f\1\0"+
    "\1\u010f\56\0\1\u0117\61\0\1\u0118\103\0\1\u0119\52\0"+
    "\1\u011a\70\0\1\u011b\70\0\1\u010b\102\0\1\u010b\66\0"+
    "\1\u011c\64\0\1\u011d\70\0\1\u011e\74\0\1\u011f\71\0"+
    "\1\u010b\63\0\1\u0120\75\0\1\u0121\73\0\1\u0122\15\0"+
    "\1\u0123\127\0\1\u0124\70\0\1\u011f\102\0\1\u011f\56\0"+
    "\21\u0125\61\0\1\u011f\27\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125\1\u0128\7\u0125"+
    "\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103"+
    "\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127"+
    "\1\u0125\1\u0128\5\u0125\1\u012a\1\u0125\1\u0129\4\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u012b\1\u0126\1\u0127\1\u0125\1\u0128\7\u0125"+
    "\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103"+
    "\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127"+
    "\1\u0125\1\u0128\4\u0125\1\u012c\2\u0125\1\u0129\4\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125\1\u012d\7\u0125"+
    "\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103"+
    "\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127"+
    "\1\u0125\1\u0128\5\u0125\1\u012e\1\u0125\1\u0129\4\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u012f\1\u0128\7\u0125"+
    "\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103"+
    "\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127"+
    "\1\u0125\1\u0128\7\u0125\1\u0129\1\u0125\1\u0130\2\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0131\1\u0126\1\u0127\1\u0125\1\u0128\4\u0125"+
    "\1\u012c\2\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125"+
    "\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125"+
    "\1\u0126\1\u0127\1\u0125\1\u0128\3\u0125\1\u0132\3\u0125\1\u0129"+
    "\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0"+
    "\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125"+
    "\1\u0133\7\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125"+
    "\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125"+
    "\1\u0126\1\u0127\1\u0125\1\u0134\7\u0125\1\u0129\4\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125\1\u0128\3\u0125"+
    "\1\u0135\3\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125"+
    "\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125"+
    "\1\u0126\1\u0127\1\u0125\1\u0136\7\u0125\1\u0129\4\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0"+
    "\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125\1\u0128\4\u0125"+
    "\1\u0137\2\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125"+
    "\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125"+
    "\1\u0126\1\u0127\1\u0125\1\u0128\4\u0125\1\u012c\2\u0125\1\u0138"+
    "\4\u0125\1\0\1\u0125\1\0\1\u0125\5\0\1\u0123\6\0"+
    "\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0125\1\u0126"+
    "\1\u0127\1\u0125\1\u0128\7\u0125\1\u0129\4\u0125\1\0\1\u0125"+
    "\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125"+
    "\1\0\1\u0139\1\u0126\1\u0127\1\u0125\1\u0128\4\u0125\1\u012c"+
    "\2\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125\14\0"+
    "\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0\1\u0135\1\u0126"+
    "\1\u0127\1\u0125\1\u0128\7\u0125\1\u0129\1\u0125\1\u0130\2\u0125"+
    "\1\0\1\u0125\1\0\1\u0125\14\0\1\u0103\6\0\1\u0125"+
    "\7\0\10\u0125\1\0\1\u0125\1\u0126\1\u0127\1\u0125\1\u012d"+
    "\5\u0125\1\u0135\1\u0125\1\u0129\4\u0125\1\0\1\u0125\1\0"+
    "\1\u0125\14\0\1\u0103\6\0\1\u0125\7\0\10\u0125\1\0"+
    "\1\u0125\1\u0126\1\u0127\1\u0125\1\u0128\4\u0125\1\u0135\2\u0125"+
    "\1\u0129\4\u0125\1\0\1\u0125\1\0\1\u0125";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\1\1\1\11\4\1\3\11"+
    "\1\1\1\11\4\1\1\11\22\1\1\0\12\1\1\0"+
    "\26\1\1\11\2\1\3\0\32\1\1\0\15\1\1\11"+
    "\4\0\11\1\1\0\1\1\4\0\7\1\3\0\1\1"+
    "\4\0\6\1\3\0\1\1\4\0\5\1\3\0\1\1"+
    "\10\0\4\1\6\0\3\1\15\0\1\1\22\0\1\1"+
    "\34\0\1\11\11\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  intermedio(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 35: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 36: break;
          case 3:
            { return new Symbol(sym.newline,yytext());
            }
            // fall through
          case 37: break;
          case 4:
            { return new Symbol(sym.libre,yytext());
            }
            // fall through
          case 38: break;
          case 5:
            { lexeme=yytext();
                        return new Symbol(sym.error);
            }
            // fall through
          case 39: break;
          case 6:
            { lexeme=yytext(); 
                          return new Symbol(sym.operadores,yytext());
            }
            // fall through
          case 40: break;
          case 7:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 41: break;
          case 8:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 42: break;
          case 9:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 43: break;
          case 10:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 44: break;
          case 11:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 45: break;
          case 12:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 46: break;
          case 13:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 47: break;
          case 14:
            { lexeme=yytext(); 
                         return new Symbol(sym.clases,yytext());
            }
            // fall through
          case 48: break;
          case 15:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 49: break;
          case 16:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 50: break;
          case 17:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 51: break;
          case 18:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 52: break;
          case 19:
            { lexeme=yytext(); 
                         return new Symbol(sym.operador_Logico,yytext());
            }
            // fall through
          case 53: break;
          case 20:
            { lexeme=yytext();  return new Symbol(sym.real,Double.parseDouble(yytext()));
            }
            // fall through
          case 54: break;
          case 21:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 55: break;
          case 22:
            { lexeme=yytext(); 
                        return new Symbol(sym.salida,yytext());
            }
            // fall through
          case 56: break;
          case 23:
            { lexeme=yytext(); return new Symbol(sym.tipo_real,yytext());
            }
            // fall through
          case 57: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.instancias,yytext());
            }
            // fall through
          case 58: break;
          case 25:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 59: break;
          case 26:
            { lexeme=yytext(); return new Symbol(sym.tipo_cadena,yytext());
            }
            // fall through
          case 60: break;
          case 27:
            { lexeme=yytext(); return new Symbol(sym.tipo_ent,yytext());
            }
            // fall through
          case 61: break;
          case 28:
            { lexeme=yytext(); return new Symbol(sym.tipo_bol,yytext());
            }
            // fall through
          case 62: break;
          case 29:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 63: break;
          case 30:
            { lexeme=yytext(); 
                        return new Symbol(sym.entrada,yytext());
            }
            // fall through
          case 64: break;
          case 31:
            { lexeme=yytext(); 
                         return new Symbol(sym.funcion,yytext());
            }
            // fall through
          case 65: break;
          case 32:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.propiedades,yytext());
            }
            // fall through
          case 66: break;
          case 33:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.metodos,yytext());
            }
            // fall through
          case 67: break;
          case 34:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.principal,yytext());
            }
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
