// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/intermedio.flex



package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class intermedio implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\7\1\31\1\32\1\33"+
    "\1\34\1\35\10\33\1\36\1\37\1\40\1\33\1\41"+
    "\10\33\1\42\1\11\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\2\60\1\61\1\62\1\63\1\64\1\65\1\60\1\66"+
    "\1\67\1\70\1\71\1\72\1\60\1\73\1\60\1\74"+
    "\1\75\1\76\1\77\1\7\6\0\1\3\33\0\1\7"+
    "\22\0\1\7\12\0\1\100\1\0\1\101\1\30\1\11"+
    "\5\0\1\101\3\0\1\101\3\0\1\101\1\0\1\101"+
    "\6\0\1\101\1\0\1\101\4\0\1\102\7\0\1\102"+
    "\3\0\1\102\3\0\1\102\1\0\1\102\6\0\1\102"+
    "\1\0\1\102\303\0\1\46\2\0\1\46\365\0\1\11"+
    "\12\0\1\46\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\2\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\17\30\1\31\1\32\3\0\1\33\3\0\1\34\4\0"+
    "\1\35\1\36\1\37\1\40\1\17\1\41\1\42\1\0"+
    "\1\23\25\30\1\43\2\30\11\0\1\44\1\23\36\30"+
    "\1\45\1\0\1\46\1\0\1\23\24\30\1\47\7\30"+
    "\1\50\1\51\1\52\1\53\2\30\1\0\1\54\1\0"+
    "\1\23\2\30\1\55\3\30\1\56\10\30\1\57\1\60"+
    "\14\30\2\0\1\23\1\30\1\61\1\30\1\62\4\30"+
    "\1\63\20\30\1\0\1\64\1\23\1\65\12\30\1\66"+
    "\3\30\1\67\11\30\1\1\1\23\6\30\1\70\1\30"+
    "\1\71\1\72\1\73\1\74\3\30\1\75\6\30\1\76"+
    "\1\77\6\30\1\100\2\30\1\101\1\102\1\103\3\30"+
    "\1\104\1\105\5\30\1\106\7\30\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\3\30\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\u010c\0\u014f\0\103"+
    "\0\103\0\103\0\u0192\0\u01d5\0\103\0\u0218\0\103\0\u025b"+
    "\0\u029e\0\103\0\103\0\u010c\0\u02e1\0\u0324\0\103\0\103"+
    "\0\103\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\103\0\103\0\u0797\0\u07da\0\u081d\0\103\0\u0860"+
    "\0\u014f\0\u08a3\0\u08e6\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2"+
    "\0\103\0\103\0\103\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u0afe\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\103\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u03aa\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398"+
    "\0\u23db\0\u241e\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u2461\0\u24a4"+
    "\0\u24e7\0\103\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u03aa\0\u2636"+
    "\0\u2679\0\u26bc\0\u03aa\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u03aa\0\u03aa\0\u2917\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u03aa"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u03aa\0\u2ed9\0\u2f1c\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\103\0\u334c"+
    "\0\u03aa\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521"+
    "\0\u3564\0\u35a7\0\u35ea\0\u03aa\0\u362d\0\u3670\0\u36b3\0\u03aa"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u1c44\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\u03aa\0\u3b26\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u3b69"+
    "\0\u3bac\0\u3bef\0\u03aa\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e"+
    "\0\u3d81\0\u03aa\0\u02e1\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\103\0\u3f56\0\u3f99\0\u03aa\0\103\0\103\0\u3fdc"+
    "\0\u401f\0\u4062\0\103\0\103\0\u40a5\0\u40e8\0\u412b\0\u416e"+
    "\0\u41b1\0\u03aa\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343"+
    "\0\u4386\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\103\0\u03aa\0\103"+
    "\0\103\0\u43c9\0\u440c\0\u444f\0\u03aa\0\u03aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\2"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\23"+
    "\1\2\7\25\1\26\1\25\1\27\1\30\1\31\1\32"+
    "\1\2\1\33\1\34\1\35\1\36\1\37\1\40\1\33"+
    "\1\41\1\42\1\33\1\43\1\44\2\33\1\45\1\46"+
    "\1\47\1\50\1\33\1\51\2\33\1\52\1\4\1\53"+
    "\3\2\105\0\1\4\73\0\1\4\10\0\1\54\24\0"+
    "\1\55\5\0\1\56\71\0\1\57\55\0\1\60\2\0"+
    "\1\61\1\62\1\63\1\62\2\64\6\62\1\65\1\62"+
    "\1\61\3\62\16\60\2\62\1\0\26\66\1\60\1\62"+
    "\2\60\1\0\1\67\14\0\1\70\4\0\1\71\76\0"+
    "\1\72\104\0\1\73\2\0\1\74\74\0\1\75\4\0"+
    "\1\76\101\0\1\77\1\0\1\21\6\0\11\32\3\0"+
    "\1\32\1\0\26\32\30\0\1\32\6\0\11\25\3\0"+
    "\1\32\1\0\26\25\30\0\1\32\6\0\11\25\3\0"+
    "\1\32\1\0\17\25\1\100\6\25\30\0\1\32\6\0"+
    "\11\32\3\0\1\32\1\0\26\32\30\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\26\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\15\33\1\101"+
    "\10\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\1\102\11\33\1\103\2\33\1\104\10\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\105\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\12\33\1\106\1\33"+
    "\1\107\3\33\1\110\3\33\1\111\1\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\1\112"+
    "\25\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\1\113\25\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\14\33\1\114\11\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\115\10\33\1\116\10\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\4\33"+
    "\1\117\3\33\1\120\15\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\17\33\1\121\2\33"+
    "\1\122\3\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\1\123\3\33\1\124\21\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\4\33\1\125\3\33\1\126\15\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\1\127\25\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\130\21\33\4\0\2\33\4\0\1\131"+
    "\134\0\1\132\105\0\1\133\42\0\1\134\2\0\2\134"+
    "\1\0\1\134\2\0\6\134\1\135\25\134\1\0\32\134"+
    "\1\0\1\64\1\0\1\60\2\0\2\62\1\63\1\62"+
    "\2\64\6\62\1\65\1\62\1\60\3\62\16\60\2\62"+
    "\1\0\27\60\1\62\2\60\1\0\1\64\1\0\1\136"+
    "\2\0\2\137\1\63\1\137\2\64\6\137\1\136\1\137"+
    "\1\136\3\137\16\136\2\137\1\0\27\136\1\137\2\136"+
    "\3\0\1\134\2\0\2\134\1\0\1\134\2\0\6\134"+
    "\1\135\25\134\1\0\12\134\1\140\17\134\1\0\1\64"+
    "\1\0\1\60\2\0\1\61\1\62\1\63\1\62\2\64"+
    "\6\62\1\65\1\62\1\66\3\62\3\60\11\66\2\60"+
    "\1\62\1\66\1\0\26\66\1\60\1\62\2\60\2\141"+
    "\1\0\1\136\2\0\1\67\1\137\1\63\1\137\2\64"+
    "\6\137\1\136\1\137\1\67\3\137\16\136\2\137\1\0"+
    "\26\141\1\136\1\137\2\136\1\0\1\67\4\0\14\70"+
    "\1\0\7\70\1\0\11\70\2\0\31\70\1\0\1\70"+
    "\1\0\3\70\20\0\1\77\1\0\1\74\64\0\14\75"+
    "\1\0\7\75\1\0\11\75\2\0\31\75\1\0\1\75"+
    "\1\0\3\75\4\0\14\76\1\0\7\76\1\0\11\76"+
    "\2\0\31\76\1\0\1\76\1\0\3\76\22\0\1\142"+
    "\102\0\1\32\6\0\11\25\3\0\1\32\1\0\10\25"+
    "\1\143\15\25\30\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\12\33\1\144\13\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\3\33\1\145\22\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\1\146\25\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\14\33\1\147\3\33\1\150"+
    "\5\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\2\33\1\151\15\33\1\152\2\33\1\153"+
    "\2\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\10\33\1\154\15\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\21\33\1\155"+
    "\4\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\2\33\1\156\16\33\1\157\4\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\21\33\1\160\4\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\12\33\1\161\13\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\2\33\1\162\23\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\2\33\1\163\15\33\1\164"+
    "\5\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\4\33\1\165\21\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\6\33\1\166"+
    "\17\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\21\33\1\167\4\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\4\33\1\170"+
    "\21\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\10\33\1\171\4\33\1\172\10\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\1\33\1\173\24\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\10\33\1\174\15\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\1\175\25\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\14\33\1\176\11\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\14\33"+
    "\1\177\11\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\14\33\1\200\11\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\17\33"+
    "\1\201\6\33\4\0\2\33\4\0\1\202\132\0\1\203"+
    "\52\0\1\204\77\0\1\134\2\0\2\134\1\0\1\134"+
    "\2\0\6\134\1\135\25\134\1\0\32\134\3\0\1\134"+
    "\2\0\2\134\1\0\1\134\2\0\6\134\1\135\25\134"+
    "\1\0\12\134\1\140\17\134\104\0\1\64\1\0\1\136"+
    "\2\0\2\137\1\63\1\137\2\64\6\137\1\136\1\137"+
    "\1\136\3\137\16\136\2\137\1\0\27\136\1\137\2\136"+
    "\1\0\1\64\1\0\1\134\2\0\2\134\1\0\1\134"+
    "\2\0\6\134\1\135\25\134\1\0\15\134\1\205\14\134"+
    "\3\0\1\136\2\0\1\67\1\137\1\63\1\137\2\64"+
    "\6\137\1\136\1\137\1\141\3\137\3\136\11\141\2\136"+
    "\1\137\1\141\1\0\26\141\1\136\1\137\2\136\2\141"+
    "\22\0\1\32\6\0\11\25\3\0\1\32\1\0\14\25"+
    "\1\206\11\25\30\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\207\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\4\33\1\210\21\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\20\33\1\211\5\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\20\33\1\212\5\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\213\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\17\33\1\214\6\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\3\33\1\215\15\33\1\216\4\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\15\33"+
    "\1\217\10\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\13\33\1\220\12\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\4\33"+
    "\1\221\10\33\1\222\10\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\17\33\1\223\6\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\1\224\25\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\10\33\1\225\15\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\20\33\1\226\5\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\4\33\1\227\21\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\12\33\1\230\4\33\1\231\6\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\21\33\1\232"+
    "\4\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\17\33\1\233\6\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\1\234\25\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\15\33\1\235\10\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\14\33\1\236\11\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\23\33\1\237\2\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\16\33\1\240\2\33"+
    "\1\241\4\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\12\33\1\242\13\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\25\33"+
    "\1\243\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\12\33\1\244\13\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\15\33\1\245"+
    "\10\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\15\33\1\246\10\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\6\33\1\247"+
    "\17\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\3\33\1\250\22\33\4\0\2\33\4\0"+
    "\1\251\102\0\1\252\77\0\1\134\2\0\2\134\1\0"+
    "\1\134\2\0\6\134\1\135\25\134\1\0\15\134\1\253"+
    "\14\134\24\0\1\32\6\0\11\25\3\0\1\32\1\0"+
    "\2\25\1\254\23\25\30\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\1\255\25\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\14\33\1\256\11\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\257\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\21\33\1\260\4\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\14\33\1\261\11\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\4\33\1\262\21\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\263\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\17\33\1\264\6\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\12\33\1\265\13\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\10\33\1\266\15\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\17\33\1\267\6\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\14\33\1\270\11\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\10\33\1\271\15\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\21\33\1\272\4\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\273\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\15\33\1\274\10\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\17\33\1\275\6\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\22\33\1\276\3\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\277\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\1\300\25\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\17\33\1\301\6\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\3\33\1\302\22\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\21\33\1\303\4\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\1\304\25\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\10\33"+
    "\1\305\15\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\4\33\1\306\21\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\10\33"+
    "\1\307\15\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\4\33\1\310\21\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\1\311"+
    "\25\33\4\0\2\33\4\0\1\312\77\0\1\134\2\0"+
    "\2\134\1\0\1\134\2\0\6\134\1\135\25\134\1\0"+
    "\16\134\1\313\13\134\24\0\1\32\6\0\11\25\3\0"+
    "\1\32\1\0\10\25\1\314\15\25\30\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\14\33\1\315\11\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\1\316\25\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\17\33\1\317\6\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\15\33"+
    "\1\320\10\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\13\33\1\321\12\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\22\33"+
    "\1\322\3\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\23\33\1\323\2\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\14\33"+
    "\1\324\11\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\15\33\1\325\10\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\2\33"+
    "\1\326\23\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\1\33\1\327\24\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\10\33"+
    "\1\330\15\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\14\33\1\331\11\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\10\33"+
    "\1\332\15\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\13\33\1\333\12\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\14\33"+
    "\1\334\11\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\10\33\1\335\15\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\15\33"+
    "\1\336\10\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\17\33\1\337\6\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\3\33"+
    "\1\340\22\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\4\33\1\341\21\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\6\33"+
    "\1\342\17\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\2\33\1\343\23\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\14\33"+
    "\1\344\11\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\3\33\1\345\22\33\4\0\2\33"+
    "\4\0\1\346\77\0\1\134\2\0\2\134\1\347\1\134"+
    "\2\0\6\134\1\135\25\134\1\0\32\134\24\0\1\32"+
    "\6\0\11\25\3\0\1\32\1\0\16\25\1\350\7\25"+
    "\30\0\1\33\6\0\11\33\3\0\1\33\1\0\15\33"+
    "\1\351\10\33\4\0\2\33\22\0\1\33\6\0\1\352"+
    "\10\33\3\0\1\33\1\0\26\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\22\33\1\353"+
    "\3\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\4\33\1\354\21\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\2\33\1\355"+
    "\23\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\4\33\1\356\21\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\1\357\25\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\360\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\10\33\1\361\15\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\2\33\1\362\23\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\3\33\1\363\22\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\17\33\1\364\6\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\4\33\1\365\21\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\2\33\1\366\23\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\21\33\1\367\4\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\20\33\1\370\5\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\1\371\25\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\1\372\14\33\1\373\10\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\3\33\1\374\22\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\10\33\1\375\15\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\1\376\14\33\1\377"+
    "\10\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\21\33\1\u0100\4\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\4\33\1\u0101"+
    "\21\33\4\0\2\33\4\0\1\u0102\120\0\1\32\6\0"+
    "\11\25\3\0\1\32\1\0\1\u0103\25\25\30\0\1\33"+
    "\6\0\1\33\1\u0104\2\33\1\u0105\3\33\1\u0106\3\0"+
    "\1\33\1\0\26\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\2\33\1\u0107\23\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\14\33\1\u0108\11\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\21\33\1\u0109\4\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\17\33\1\u010a\6\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\17\33\1\u010b\6\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\20\33\1\u010c\5\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\17\33\1\u010d\6\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\15\33\1\u010e\10\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\4\33\1\u010f\21\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\14\33\1\u0110\11\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\10\33\1\u0111\15\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\13\33\1\u0112\12\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\20\33\1\u0113\5\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\20\33\1\u0114\5\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\20\33\1\u0115\5\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\1\u0116\25\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\3\33\1\u0117\22\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\20\33"+
    "\1\u0118\5\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\20\33\1\u0119\5\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\4\33"+
    "\1\u011a\21\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\17\33\1\226\6\33\4\0\2\33"+
    "\22\0\1\32\6\0\11\25\3\0\1\32\1\0\12\25"+
    "\1\u011b\13\25\30\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\15\33\1\u011c\10\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\14\33\1\u011d\11\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\4\33\1\u011e\21\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\21\33\1\u011f\4\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\21\33\1\u0120\4\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\15\33\1\u0121\10\33"+
    "\4\0\2\33\4\0\1\u0122\15\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\26\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\21\33\1\u0123\4\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\1\u0124\25\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\15\33\1\u0125\10\33\4\0"+
    "\2\33\22\0\1\33\1\u0126\5\0\11\33\3\0\1\33"+
    "\1\0\26\33\4\0\2\33\22\0\1\33\1\u0127\5\0"+
    "\11\33\3\0\1\33\1\0\26\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\3\33\1\u0128"+
    "\22\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\1\u0129\14\33\1\u012a\10\33\4\0\2\33"+
    "\22\0\1\33\1\u012b\5\0\11\33\3\0\1\33\1\0"+
    "\26\33\4\0\2\33\22\0\1\33\1\u012c\5\0\11\33"+
    "\3\0\1\33\1\0\26\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\12\33\1\u012d\13\33"+
    "\4\0\2\33\22\0\1\33\6\0\11\33\3\0\1\33"+
    "\1\0\21\33\1\u012e\4\33\4\0\2\33\22\0\1\33"+
    "\6\0\11\33\3\0\1\33\1\0\1\u012f\25\33\4\0"+
    "\2\33\22\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\15\33\1\u0130\10\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\1\u0131\25\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\17\33"+
    "\1\u0132\6\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\1\u0133\25\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\17\33\1\u0134"+
    "\6\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\4\33\1\u0135\21\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\20\33\1\u0136"+
    "\5\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\20\33\1\u0137\5\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\4\33\1\u0138"+
    "\21\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\4\33\1\u0139\21\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\12\33\1\u013a"+
    "\13\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\17\33\1\u013b\6\33\4\0\2\33\22\0"+
    "\1\33\6\0\11\33\3\0\1\33\1\0\17\33\1\u013c"+
    "\6\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\17\33\1\u013d\6\33\4\0\2\33\4\0"+
    "\1\u013e\15\0\1\33\6\0\11\33\3\0\1\33\1\0"+
    "\26\33\4\0\2\33\22\0\1\33\6\0\11\33\3\0"+
    "\1\33\1\0\20\33\1\u013f\5\33\4\0\2\33\22\0"+
    "\1\33\1\u0140\5\0\11\33\3\0\1\33\1\0\26\33"+
    "\4\0\2\33\22\0\1\33\1\u0141\5\0\11\33\3\0"+
    "\1\33\1\0\26\33\4\0\2\33\22\0\1\33\6\0"+
    "\11\33\3\0\1\33\1\0\1\u0142\25\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\17\33"+
    "\1\u0143\6\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\14\33\1\u0144\11\33\4\0\2\33"+
    "\22\0\1\33\6\0\11\33\3\0\1\33\1\0\15\33"+
    "\1\u0145\10\33\4\0\2\33\22\0\1\33\6\0\11\33"+
    "\3\0\1\33\1\0\15\33\1\u0146\10\33\4\0\2\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17554];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\4\1\3\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\3\11\20\1\2\11\3\0\1\11"+
    "\3\0\1\1\4\0\1\1\3\11\3\1\1\0\31\1"+
    "\11\0\41\1\1\0\1\11\1\0\43\1\1\0\1\11"+
    "\1\0\36\1\2\0\32\1\1\0\1\11\72\1\1\11"+
    "\3\1\2\11\3\1\2\11\21\1\1\11\1\1\2\11"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  intermedio(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 81: break;
          case 2:
            { System.out.println("Error verificar . "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 82: break;
          case 3:
            { return new Symbol(sym.salto,yytext());
            }
            // fall through
          case 83: break;
          case 4:
            { return new Symbol(sym.newline,yytext());
            }
            // fall through
          case 84: break;
          case 5:
            { return new Symbol(sym.libre,yytext());
            }
            // fall through
          case 85: break;
          case 6:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIGpor,yytext());
            }
            // fall through
          case 86: break;
          case 7:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 87: break;
          case 8:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 88: break;
          case 9:
            { lexeme=yytext();  return new Symbol(sym.porc,yytext());
            }
            // fall through
          case 89: break;
          case 10:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIG,yytext());
            }
            // fall through
          case 90: break;
          case 11:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 91: break;
          case 12:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIGme,yytext());
            }
            // fall through
          case 92: break;
          case 13:
            { lexeme=yytext(); 
                        return new Symbol(sym.pun,yytext());
            }
            // fall through
          case 93: break;
          case 14:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIGdiv,yytext());
            }
            // fall through
          case 94: break;
          case 15:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 95: break;
          case 16:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 96: break;
          case 17:
            { lexeme=yytext(); 
                          return new Symbol(sym.condicionales,yytext());
            }
            // fall through
          case 97: break;
          case 18:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 98: break;
          case 19:
            { lexeme=yytext(); return new Symbol(sym.IDmayu,yytext());
            }
            // fall through
          case 99: break;
          case 20:
            { return new Symbol(sym.corchetea,yytext());
            }
            // fall through
          case 100: break;
          case 21:
            { return new Symbol(sym.corcheteb,yytext());
            }
            // fall through
          case 101: break;
          case 22:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIGex,yytext());
            }
            // fall through
          case 102: break;
          case 23:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 103: break;
          case 24:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 104: break;
          case 25:
            { return new Symbol(sym.llava,yytext());
            }
            // fall through
          case 105: break;
          case 26:
            { return new Symbol(sym.llavb,yytext());
            }
            // fall through
          case 106: break;
          case 27:
            { lexeme=yytext(); 
                          return new Symbol(sym.opcadnum,yytext());
            }
            // fall through
          case 107: break;
          case 28:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 108: break;
          case 29:
            { lexeme=yytext();  return new Symbol(sym.comentariose,yytext());
            }
            // fall through
          case 109: break;
          case 30:
            { lexeme=yytext();  return new Symbol(sym.comfin,yytext());
            }
            // fall through
          case 110: break;
          case 31:
            { lexeme=yytext(); 
                        return new Symbol(sym.SI,yytext());
            }
            // fall through
          case 111: break;
          case 32:
            { lexeme=yytext(); 
                        return new Symbol(sym.SIme,yytext());
            }
            // fall through
          case 112: break;
          case 33:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 113: break;
          case 34:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 114: break;
          case 35:
            { lexeme=yytext(); 
                         return new Symbol(sym.ifs,yytext());
            }
            // fall through
          case 115: break;
          case 36:
            { lexeme=yytext();  return new Symbol(sym.real,Double.parseDouble(yytext()));
            }
            // fall through
          case 116: break;
          case 37:
            { return new Symbol(sym.tabu,yytext());
            }
            // fall through
          case 117: break;
          case 38:
            { lexeme=yytext(); 
                         return new Symbol(sym.or,yytext());
            }
            // fall through
          case 118: break;
          case 39:
            { lexeme=yytext(); 
                        return new Symbol(sym.salida,yytext());
            }
            // fall through
          case 119: break;
          case 40:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca8,yytext());
            }
            // fall through
          case 120: break;
          case 41:
            { lexeme=yytext(); return new Symbol(sym.tipo_real,yytext());
            }
            // fall through
          case 121: break;
          case 42:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca4,yytext());
            }
            // fall through
          case 122: break;
          case 43:
            { lexeme=yytext(); 
                         return new Symbol(sym.els,yytext());
            }
            // fall through
          case 123: break;
          case 44:
            { lexeme=yytext(); 
                         return new Symbol(sym.and,yytext());
            }
            // fall through
          case 124: break;
          case 45:
            { lexeme=yytext(); 
                         return new Symbol(sym.clase,yytext());
            }
            // fall through
          case 125: break;
          case 46:
            { lexeme=yytext(); 
                         return new Symbol(sym.desdes,yytext());
            }
            // fall through
          case 126: break;
          case 47:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 127: break;
          case 48:
            { lexeme=yytext(); 
                         return new Symbol(sym.haccer,yytext());
            }
            // fall through
          case 128: break;
          case 49:
            { lexeme=yytext(); return new Symbol(sym.tipo_cadena,yytext());
            }
            // fall through
          case 129: break;
          case 50:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca5,yytext());
            }
            // fall through
          case 130: break;
          case 51:
            { lexeme=yytext(); return new Symbol(sym.tipo_ent,yytext());
            }
            // fall through
          case 131: break;
          case 52:
            { lexeme=yytext(); 
                         return new Symbol(sym.extension,yytext());
            }
            // fall through
          case 132: break;
          case 53:
            { lexeme=yytext(); return new Symbol(sym.tipo_bol,yytext());
            }
            // fall through
          case 133: break;
          case 54:
            { lexeme=yytext(); 
                         return new Symbol(sym.paquetes,yytext());
            }
            // fall through
          case 134: break;
          case 55:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.metodos,yytext());
            }
            // fall through
          case 135: break;
          case 56:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 136: break;
          case 57:
            { lexeme=yytext(); 
                         return new Symbol(sym.entoncess,yytext());
            }
            // fall through
          case 137: break;
          case 58:
            { lexeme=yytext(); 
                        return new Symbol(sym.entrada,yytext());
            }
            // fall through
          case 138: break;
          case 59:
            { lexeme=yytext(); 
                         return new Symbol(sym.estatico,yytext());
            }
            // fall through
          case 139: break;
          case 60:
            { lexeme = yytext();
                           return new Symbol(sym.herencia,yytext());
            }
            // fall through
          case 140: break;
          case 61:
            { lexeme=yytext(); 
                         return new Symbol(sym.whiles,yytext());
            }
            // fall through
          case 141: break;
          case 62:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca6,yytext());
            }
            // fall through
          case 142: break;
          case 63:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.principal,yytext());
            }
            // fall through
          case 143: break;
          case 64:
            { lexeme=yytext();                return new Symbol(sym.borrar,yytext());
            }
            // fall through
          case 144: break;
          case 65:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca7,yytext());
            }
            // fall through
          case 145: break;
          case 66:
            { lexeme=yytext();  return new Symbol(sym.propri,yytext());
            }
            // fall through
          case 146: break;
          case 67:
            { lexeme=yytext();  return new Symbol(sym.proprim,yytext());
            }
            // fall through
          case 147: break;
          case 68:
            { lexeme=yytext();  return new Symbol(sym.propu,yytext());
            }
            // fall through
          case 148: break;
          case 69:
            { lexeme=yytext();  return new Symbol(sym.propum,yytext());
            }
            // fall through
          case 149: break;
          case 70:
            { lexeme=yytext();       return new Symbol(sym.destruir,yytext());
            }
            // fall through
          case 150: break;
          case 71:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca2,yytext());
            }
            // fall through
          case 151: break;
          case 72:
            { lexeme=yytext(); return new Symbol(sym.constru,yytext());
            }
            // fall through
          case 152: break;
          case 73:
            { lexeme=yytext(); 
                         return new Symbol(sym.restarr,yytext());
            }
            // fall through
          case 153: break;
          case 74:
            { lexeme=yytext(); 
                         return new Symbol(sym.sumarr,yytext());
            }
            // fall through
          case 154: break;
          case 75:
            { lexeme=yytext(); 
                         return new Symbol(sym.insta,yytext());
            }
            // fall through
          case 155: break;
          case 76:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.propiedades,yytext());
            }
            // fall through
          case 156: break;
          case 77:
            { lexeme=yytext();  return new Symbol(sym.propro,yytext());
            }
            // fall through
          case 157: break;
          case 78:
            { lexeme=yytext();  return new Symbol(sym.proprom,yytext());
            }
            // fall through
          case 158: break;
          case 79:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca,yytext());
            }
            // fall through
          case 159: break;
          case 80:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca3,yytext());
            }
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
