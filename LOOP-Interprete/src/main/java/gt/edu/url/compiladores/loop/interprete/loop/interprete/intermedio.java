// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/intermedio.flex



package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class intermedio implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\34"+
    "\11\33\1\35\1\36\1\37\1\33\1\40\10\33\1\7"+
    "\1\11\1\7\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\51\1\54"+
    "\1\55\1\56\1\57\1\60\1\51\1\61\1\62\1\63"+
    "\1\64\1\65\1\51\1\66\2\51\1\7\1\67\2\7"+
    "\6\0\1\3\33\0\1\7\22\0\1\70\12\0\1\70"+
    "\1\0\1\71\1\30\1\72\5\0\1\71\3\0\1\71"+
    "\3\0\1\71\1\0\1\71\6\0\1\71\1\0\1\71"+
    "\4\0\1\73\7\0\1\73\3\0\1\73\3\0\1\73"+
    "\1\0\1\73\6\0\1\73\1\0\1\73\303\0\1\42"+
    "\2\0\1\42\365\0\1\72\12\0\1\42\u0163\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\3\3\4\1\5\1\6\1\7"+
    "\2\5\1\10\1\5\1\11\1\5\1\12\1\13\1\14"+
    "\3\15\1\11\16\16\1\1\2\4\1\0\1\17\2\4"+
    "\1\12\1\11\1\20\1\21\1\4\2\11\1\0\1\4"+
    "\2\15\1\22\2\11\26\16\1\23\1\16\1\17\2\4"+
    "\3\0\1\4\1\11\1\24\1\11\1\15\1\11\32\16"+
    "\1\24\1\25\1\20\1\4\1\0\17\16\1\23\5\16"+
    "\1\26\1\16\1\25\1\27\4\0\11\16\1\30\10\16"+
    "\1\0\1\16\4\0\1\16\1\31\3\16\1\32\10\16"+
    "\3\0\1\16\4\0\1\33\7\16\3\0\1\16\4\0"+
    "\1\16\1\23\5\16\3\0\1\34\10\0\1\35\1\16"+
    "\1\36\1\37\6\0\2\27\1\16\15\0\1\27\22\0"+
    "\1\27\34\0\1\40\11\0\1\27\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\74\0\264\0\360\0\u012c"+
    "\0\u012c\0\74\0\74\0\74\0\u0168\0\74\0\u01a4\0\u01e0"+
    "\0\u021c\0\u0258\0\74\0\264\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u012c\0\u06cc"+
    "\0\u0708\0\u0744\0\u012c\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u02d0\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u10e0\0\u111c\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u0384\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1194\0\74\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c"+
    "\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u0384\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\u1eb4\0\u25bc\0\u25f8\0\u2634"+
    "\0\u1eb4\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u1eb4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c"+
    "\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc"+
    "\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u012c\0\u012c"+
    "\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444"+
    "\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4"+
    "\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84"+
    "\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164"+
    "\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc\0\74\0\u4308"+
    "\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8"+
    "\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8"+
    "\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8"+
    "\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88"+
    "\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68"+
    "\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48"+
    "\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\10\1\23\1\11\1\24\1\11"+
    "\2\2\1\25\3\26\1\27\2\26\1\30\1\10\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\31\1\37\1\40"+
    "\1\41\1\42\2\31\1\43\1\44\1\45\2\31\1\46"+
    "\1\31\1\47\1\10\1\50\1\2\1\10\75\0\1\3"+
    "\77\0\5\10\3\0\1\10\1\0\5\10\1\0\1\10"+
    "\1\11\1\10\2\0\10\50\1\10\24\51\2\10\1\50"+
    "\1\0\1\10\1\0\1\52\2\0\1\52\1\7\1\53"+
    "\1\7\2\10\3\52\1\7\1\52\5\7\1\52\3\7"+
    "\2\52\10\54\1\10\24\55\2\7\1\50\1\0\1\10"+
    "\5\0\5\10\3\0\1\10\1\0\5\10\1\0\3\10"+
    "\2\0\10\50\1\10\24\51\2\10\1\50\1\0\1\10"+
    "\5\0\5\10\3\0\1\11\1\0\5\10\1\0\3\10"+
    "\2\0\10\50\1\10\24\51\2\10\1\50\1\0\1\10"+
    "\5\0\5\10\3\0\1\10\1\0\1\11\2\10\1\56"+
    "\1\10\1\0\3\10\2\0\10\50\1\10\24\51\2\10"+
    "\1\50\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\20\1\10\1\20\1\10\1\0\3\10\2\0"+
    "\10\30\1\10\24\57\2\10\1\50\1\0\1\10\14\0"+
    "\1\60\4\0\1\61\57\0\5\62\3\0\1\62\1\0"+
    "\1\62\1\63\1\10\1\22\1\62\1\0\3\62\2\0"+
    "\7\64\1\30\1\62\24\57\2\62\1\50\1\0\1\62"+
    "\5\0\5\10\1\65\2\0\1\10\1\0\1\10\1\20"+
    "\1\66\1\20\1\10\1\0\3\10\2\0\3\26\1\67"+
    "\3\26\1\30\1\10\24\70\2\10\1\50\1\0\1\10"+
    "\5\0\5\10\1\65\2\0\1\10\1\0\1\10\1\20"+
    "\1\66\1\20\1\10\1\0\3\10\2\0\7\26\1\30"+
    "\1\10\24\70\2\10\1\50\1\0\1\10\5\0\5\10"+
    "\1\65\2\0\1\10\1\0\1\10\1\20\1\66\1\20"+
    "\1\10\1\0\3\10\2\0\6\26\1\71\1\30\1\10"+
    "\24\70\2\10\1\50\1\0\1\10\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\20\1\66\1\20\1\10\1\0"+
    "\3\10\2\0\10\30\1\10\24\72\2\10\1\50\1\0"+
    "\1\10\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\24\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\14\31\1\100\7\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\1\101\10\31\1\102\2\31\1\103\7\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\4\31\1\104\17\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\11\31\1\105\1\31\1\106\3\31\1\107\3\31"+
    "\1\110\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\1\111\23\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\1\112\23\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\13\31\1\113"+
    "\10\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\4\31\1\114\17\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\4\31\1\115\3\31\1\116\13\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\16\31\1\117\2\31\1\120\2\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\4\31\1\121\17\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\10\31\1\122\13\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\4\31\1\123"+
    "\17\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\2\10\1\66\2\10\1\0\3\10\2\0"+
    "\10\50\1\10\24\0\2\10\1\50\1\0\1\10\5\0"+
    "\5\10\3\0\1\10\1\0\2\10\1\66\2\10\1\0"+
    "\3\10\2\0\10\50\1\10\24\51\2\10\1\50\1\0"+
    "\1\10\1\0\1\52\2\0\2\52\1\124\1\52\2\0"+
    "\30\52\1\0\26\52\4\0\1\52\2\0\1\52\1\7"+
    "\1\53\1\7\2\10\3\52\1\7\1\52\2\7\1\125"+
    "\2\7\1\52\3\7\2\52\10\54\1\10\24\52\2\7"+
    "\1\50\1\0\1\10\1\0\1\52\2\0\1\52\1\7"+
    "\1\53\1\7\2\10\3\52\1\7\1\52\2\7\1\125"+
    "\2\7\1\52\3\7\2\52\10\54\1\10\24\55\2\7"+
    "\1\50\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\126\1\10\1\56\1\10\1\0\3\10\2\0"+
    "\10\50\1\10\24\51\2\10\1\50\1\0\1\10\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\20\1\66\1\20"+
    "\1\10\1\0\3\10\2\0\10\30\1\10\24\57\2\10"+
    "\1\50\1\0\1\10\4\0\1\127\5\60\2\127\1\130"+
    "\1\60\1\127\2\60\1\131\2\60\1\127\3\60\1\0"+
    "\1\127\40\60\1\127\1\60\4\0\24\61\1\0\43\61"+
    "\5\0\5\62\3\0\1\62\1\0\2\62\2\10\1\62"+
    "\1\0\3\62\2\0\7\132\1\50\1\62\24\51\2\62"+
    "\1\50\1\0\1\62\5\0\5\62\3\0\1\62\1\0"+
    "\1\62\1\133\1\10\1\134\1\62\1\0\3\62\2\0"+
    "\7\135\1\30\1\62\24\57\2\62\1\50\1\0\1\62"+
    "\4\0\24\64\1\0\43\64\13\0\1\136\101\0\1\66"+
    "\57\0\5\10\1\65\2\0\1\10\1\0\1\10\1\20"+
    "\1\66\1\20\1\10\1\0\3\10\2\0\2\26\1\71"+
    "\4\26\1\30\1\10\24\70\2\10\1\50\1\0\1\10"+
    "\12\0\1\65\5\0\1\72\1\0\1\72\7\0\7\70"+
    "\1\72\1\0\24\70\25\0\1\72\1\0\1\72\7\0"+
    "\10\72\1\0\24\72\12\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\20\1\10\1\20\1\10\1\0\3\10\2\0"+
    "\10\30\1\10\24\137\2\10\1\50\1\0\1\10\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\20\1\10\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\24\140\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\20\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\24\141\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\2\10\1\66\1\77\1\10"+
    "\1\0\3\10\2\0\10\76\1\10\24\142\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\3\10"+
    "\1\77\1\10\1\0\3\10\2\0\10\76\1\10\24\143"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\14\31\1\144\7\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\3\31\1\145\20\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\1\146"+
    "\23\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\13\31\1\147\10\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\17\31\1\150\2\31\1\151\1\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\10\31\1\152\13\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\20\31\1\153\3\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\2\31\1\154"+
    "\21\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\20\31\1\155\3\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\11\31\1\156\12\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\2\31\1\114\21\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\2\31\1\157"+
    "\14\31\1\160\4\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\4\31\1\161"+
    "\17\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\20\31\1\162\3\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\4\31\1\163\17\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\10\31\1\164\3\31\1\165\7\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\1\31\1\166\22\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\1\167\23\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\13\31\1\170\10\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\16\31\1\171\5\31\2\10\1\76\1\0\1\77"+
    "\1\0\1\52\2\0\2\52\1\124\1\52\2\0\7\52"+
    "\1\125\20\52\1\0\26\52\10\0\5\10\3\0\1\10"+
    "\1\0\3\10\1\172\1\10\1\0\3\10\2\0\10\50"+
    "\1\10\24\51\2\10\1\50\1\0\1\10\4\0\10\127"+
    "\1\130\13\127\1\0\43\127\4\0\10\127\1\130\4\127"+
    "\1\173\6\127\1\0\43\127\4\0\10\60\1\174\5\60"+
    "\1\127\3\60\2\127\1\0\1\60\7\127\1\60\25\127"+
    "\1\60\2\127\1\60\1\127\5\0\5\62\3\0\1\62"+
    "\1\0\2\62\1\175\1\10\1\62\1\0\3\62\2\0"+
    "\7\132\1\50\1\62\24\0\2\62\1\50\1\0\1\62"+
    "\5\0\5\62\3\0\1\62\1\0\1\62\1\133\1\10"+
    "\1\20\1\62\1\0\3\62\2\0\7\135\1\30\1\62"+
    "\24\57\2\62\1\50\1\0\1\62\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\20\1\10\1\134\1\10\1\0"+
    "\3\10\2\0\10\30\1\10\24\57\2\10\1\50\1\0"+
    "\1\10\5\0\5\62\3\0\1\62\1\0\1\62\1\133"+
    "\1\175\1\20\1\62\1\0\3\62\2\0\7\135\1\30"+
    "\1\62\24\72\2\62\1\50\1\0\1\62\12\0\1\65"+
    "\66\0\5\10\1\176\2\0\1\10\1\0\1\10\1\20"+
    "\1\66\1\20\1\10\1\0\3\10\2\0\10\30\1\10"+
    "\24\137\2\10\1\50\1\0\1\10\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\20\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\24\140\2\10\1\76\1\0"+
    "\1\77\20\0\1\72\1\0\1\141\7\0\10\141\1\0"+
    "\24\141\2\0\1\142\1\0\1\142\22\0\1\142\7\0"+
    "\10\142\1\0\24\142\2\0\1\142\1\0\1\142\5\0"+
    "\5\10\3\0\1\10\1\0\2\10\1\66\1\77\1\10"+
    "\1\0\3\10\2\0\10\76\1\10\24\143\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\11\31\1\177\12\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\4\31"+
    "\1\200\17\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\17\31\1\201\4\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\17\31\1\202\4\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\3\31\1\201\14\31\1\203\3\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\14\31\1\204\7\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\12\31"+
    "\1\205\11\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\4\31\1\206\7\31"+
    "\1\207\7\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\16\31\1\210\5\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\10\31\1\211\13\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\17\31\1\212\4\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\11\31"+
    "\1\213\4\31\1\214\5\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\20\31"+
    "\1\215\3\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\16\31\1\216\5\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\14\31\1\217\7\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\13\31\1\220\10\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\22\31"+
    "\1\221\1\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\15\31\1\222\6\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\11\31\1\223\12\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\11\31\1\224\12\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\14\31"+
    "\1\216\7\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\3\31\1\225\20\31"+
    "\2\10\1\76\1\0\1\77\4\0\1\127\5\60\2\127"+
    "\1\130\1\60\1\127\2\60\1\226\2\60\1\127\3\60"+
    "\1\0\1\127\40\60\1\127\1\60\5\0\5\175\3\0"+
    "\1\175\1\0\5\175\1\0\3\175\12\0\1\175\24\0"+
    "\2\175\2\0\1\175\13\0\1\227\30\0\1\230\1\231"+
    "\1\0\1\232\11\0\1\233\17\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\4\31\1\234\17\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\13\31\1\235\10\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\4\31"+
    "\1\216\17\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\20\31\1\203\3\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\16\31\1\236\5\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\11\31\1\237\12\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\10\31"+
    "\1\240\13\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\16\31\1\241\5\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\13\31\1\242\10\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\10\31\1\243\13\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\4\31"+
    "\1\244\17\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\14\31\1\245\7\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\21\31\1\246\2\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\4\31\1\247\17\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\1\250"+
    "\23\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\3\31\1\251\20\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\20\31\1\252\3\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\1\253\23\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\10\31\1\254\13\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\10\31\1\255\13\31\2\10\1\76"+
    "\1\0\1\77\4\0\1\256\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\24\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\1\257\23\31"+
    "\2\10\1\76\1\0\1\77\57\0\1\260\57\0\1\261"+
    "\106\0\1\262\64\0\1\263\31\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\1\264\23\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\1\265\23\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\21\31\1\266\2\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\22\31\1\267\1\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\13\31\1\270\10\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\14\31"+
    "\1\271\7\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\2\31\1\272\21\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\1\31\1\246\22\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\13\31\1\273\10\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\10\31"+
    "\1\161\13\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\12\31\1\274\11\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\13\31\1\275\10\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\14\31\1\276\7\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\16\31"+
    "\1\277\5\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\3\31\1\300\20\31"+
    "\2\10\1\76\1\0\1\77\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\4\31\1\301\17\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\2\31\1\300\21\31\2\10\1\76\1\0\1\77"+
    "\4\0\1\302\32\0\1\303\3\0\24\304\12\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\3\31\1\305\20\31"+
    "\2\10\1\76\1\0\1\77\57\0\1\306\62\0\1\307"+
    "\110\0\1\310\53\0\1\311\35\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\73\1\66\1\74\1\10\1\0\3\10"+
    "\2\0\10\75\1\10\13\31\1\312\10\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\2\31\1\313\21\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\4\31"+
    "\1\314\17\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\1\161\23\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\4\31\1\276\17\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\3\31\1\201\20\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\4\31\1\315"+
    "\17\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\2\31\1\316\21\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\17\31\1\216\4\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\1\276\23\31\2\10\1\76\1\0\1\77\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\1\317\13\31\1\320"+
    "\7\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\3\31\1\321\20\31\2\10"+
    "\1\76\1\0\1\77\4\0\1\302\36\0\24\304\66\0"+
    "\1\322\16\0\1\323\5\0\1\324\17\0\7\304\2\0"+
    "\24\304\12\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\4\31\1\325\17\31\2\10\1\76\1\0\1\77\54\0"+
    "\1\326\66\0\1\327\73\0\1\330\100\0\1\331\24\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\20\31\1\332"+
    "\3\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\16\31\1\333\5\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\13\31\1\334\10\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\10\31\1\335\13\31\2\10\1\76\1\0\1\77\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\17\31\1\336"+
    "\4\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\17\31\1\337\4\31\2\10"+
    "\1\76\1\0\1\77\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\1\340\23\31\2\10\1\76\1\0\1\77"+
    "\53\0\1\341\24\0\1\323\5\0\1\342\65\0\1\343"+
    "\6\0\1\344\30\0\1\345\1\346\1\0\1\347\11\0"+
    "\1\350\17\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\10\1\0\3\10\2\0\10\75\1\10"+
    "\16\31\1\212\5\31\2\10\1\76\1\0\1\77\47\0"+
    "\1\351\102\0\1\352\76\0\1\353\16\0\1\354\74\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\73\1\66\1\74"+
    "\1\10\1\0\3\10\2\0\10\75\1\10\14\31\1\161"+
    "\7\31\2\10\1\76\1\0\1\77\4\0\1\355\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\24\31\2\10\1\76"+
    "\1\0\1\77\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\73\1\66\1\74\1\10\1\0\3\10\2\0\10\75"+
    "\1\10\20\31\1\270\3\31\2\10\1\76\1\0\1\77"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\73\1\66"+
    "\1\74\1\10\1\0\3\10\2\0\10\75\1\10\1\356"+
    "\23\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\357\1\0"+
    "\3\10\2\0\10\75\1\10\24\31\2\10\1\76\1\0"+
    "\1\77\5\0\5\10\3\0\1\10\1\0\1\10\1\73"+
    "\1\66\1\74\1\360\1\0\3\10\2\0\10\75\1\10"+
    "\24\31\2\10\1\76\1\0\1\77\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\73\1\66\1\74\1\10\1\0"+
    "\3\10\2\0\10\75\1\10\3\31\1\272\20\31\2\10"+
    "\1\76\1\0\1\77\56\0\1\361\30\0\1\344\64\0"+
    "\1\343\37\0\1\345\1\346\1\0\1\347\11\0\1\350"+
    "\16\0\1\344\146\0\1\362\57\0\1\363\106\0\1\364"+
    "\64\0\1\365\67\0\1\366\73\0\1\331\107\0\1\331"+
    "\36\0\1\367\20\0\24\370\11\0\1\355\74\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\73\1\66\1\74\1\10"+
    "\1\0\3\10\2\0\10\75\1\10\16\31\1\371\5\31"+
    "\2\10\1\76\1\0\1\77\45\0\1\372\105\0\1\373"+
    "\62\0\1\374\110\0\1\375\53\0\1\376\106\0\1\331"+
    "\33\0\1\377\3\0\1\367\20\0\24\370\23\0\1\377"+
    "\3\0\1\370\7\0\10\370\1\0\24\370\2\0\1\370"+
    "\1\0\1\370\4\0\1\u0100\5\10\3\0\1\10\1\0"+
    "\1\10\1\73\1\66\1\74\1\10\1\0\3\10\2\0"+
    "\10\75\1\10\24\31\2\10\1\76\1\0\1\77\53\0"+
    "\1\u0101\74\0\1\u0102\66\0\1\u0103\73\0\1\u0104\100\0"+
    "\1\u0105\23\0\1\u0106\121\0\7\u0107\113\0\1\u0108\62\0"+
    "\1\u0109\102\0\1\u010a\76\0\1\u010b\16\0\1\u0105\36\0"+
    "\24\u010c\11\0\1\u0106\37\0\1\u010d\1\u010e\1\0\1\u010f"+
    "\11\0\1\u0110\24\0\1\u0111\17\0\7\u0107\2\0\24\u0107"+
    "\50\0\1\u0112\73\0\1\u0113\73\0\1\u0105\107\0\1\u0105"+
    "\20\0\1\u0114\6\0\1\344\2\0\1\u0115\3\0\1\u010c"+
    "\7\0\10\u010c\1\0\24\u010c\2\0\1\u010c\1\0\1\u010c"+
    "\57\0\1\u0116\57\0\1\u0117\106\0\1\u0118\64\0\1\u0119"+
    "\37\0\1\u011a\6\0\1\u0111\20\0\24\u011b\61\0\1\u011c"+
    "\75\0\1\u0105\21\0\1\u0114\6\0\1\344\64\0\1\u0115"+
    "\37\0\1\u011d\1\u011e\1\0\1\u011f\11\0\1\u0120\71\0"+
    "\1\u0121\62\0\1\u0122\110\0\1\u0123\53\0\1\u0124\42\0"+
    "\1\u0111\74\0\1\u011a\6\0\1\u011b\7\0\10\u011b\1\0"+
    "\24\u011b\2\0\1\u011b\1\0\1\u011b\4\0\1\u0125\146\0"+
    "\1\u0126\57\0\1\u0127\106\0\1\u0128\64\0\1\u0129\100\0"+
    "\1\u012a\66\0\1\u012b\73\0\1\u012c\100\0\1\u012d\31\0"+
    "\1\u012e\140\0\1\u012f\62\0\1\u0130\110\0\1\u0131\53\0"+
    "\1\u0132\77\0\1\u0133\102\0\1\u0134\76\0\1\u0135\16\0"+
    "\1\u0136\102\0\1\u0137\30\0\1\u0138\1\u0139\1\0\1\u013a"+
    "\11\0\1\u013b\66\0\1\u013c\66\0\1\u013d\73\0\1\u013e"+
    "\100\0\1\u013f\62\0\1\u0140\73\0\1\u012d\107\0\1\u012d"+
    "\20\0\1\u0136\6\0\1\u0141\6\0\1\u0142\20\0\24\u0143"+
    "\64\0\1\u0144\57\0\1\u0145\106\0\1\u0146\64\0\1\u0147"+
    "\73\0\1\u0148\102\0\1\u0149\76\0\1\u014a\16\0\1\u0105"+
    "\145\0\1\u012d\33\0\1\377\70\0\1\u0141\6\0\1\u0142"+
    "\20\0\24\u0143\20\0\1\u0141\6\0\1\u0143\7\0\10\u0143"+
    "\1\0\24\u0143\2\0\1\u0143\1\0\1\u0143\57\0\1\u014b"+
    "\62\0\1\u014c\110\0\1\u014d\53\0\1\u014e\73\0\1\u014f"+
    "\73\0\1\u013f\107\0\1\u013f\70\0\1\u0150\66\0\1\u0151"+
    "\73\0\1\u0152\100\0\1\u0153\75\0\1\u013f\64\0\1\u0154"+
    "\102\0\1\u0155\76\0\1\u0156\16\0\1\u0157\132\0\1\u0158"+
    "\73\0\1\u0153\107\0\1\u0153\57\0\24\u0159\63\0\1\u0153"+
    "\30\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159"+
    "\1\u015a\1\u015b\1\u0159\1\u015c\11\u0159\1\u015d\5\u0159\2\0"+
    "\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0"+
    "\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u015c\7\u0159"+
    "\1\u015e\1\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u015f"+
    "\1\u015a\1\u015b\1\u0159\1\u015c\11\u0159\1\u015d\5\u0159\2\0"+
    "\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0"+
    "\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u015c\6\u0159"+
    "\1\u0160\2\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159"+
    "\1\u015a\1\u015b\1\u0159\1\u0161\11\u0159\1\u015d\5\u0159\2\0"+
    "\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0"+
    "\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u015c\7\u0159"+
    "\1\u0162\1\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159"+
    "\1\u015a\1\u015b\1\u0163\1\u015c\11\u0159\1\u015d\5\u0159\2\0"+
    "\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0"+
    "\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u015c\11\u0159"+
    "\1\u015d\1\u0159\1\u0164\3\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0165"+
    "\1\u015a\1\u015b\1\u0159\1\u015c\6\u0159\1\u0160\2\u0159\1\u015d"+
    "\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0"+
    "\1\u0159\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159"+
    "\1\u015c\4\u0159\1\u0166\4\u0159\1\u015d\5\u0159\2\0\1\u0159"+
    "\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159"+
    "\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u0167\11\u0159\1\u015d"+
    "\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0"+
    "\1\u0159\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159"+
    "\1\u0168\11\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159"+
    "\1\u015a\1\u015b\1\u0159\1\u015c\4\u0159\1\u0169\4\u0159\1\u015d"+
    "\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0"+
    "\1\u0159\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159"+
    "\1\u016a\11\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159"+
    "\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159"+
    "\1\u015a\1\u015b\1\u0159\1\u015c\6\u0159\1\u016b\2\u0159\1\u015d"+
    "\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0"+
    "\1\u0159\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159"+
    "\1\u015c\6\u0159\1\u0160\2\u0159\1\u016c\5\u0159\2\0\1\u0159"+
    "\1\0\1\u0159\4\0\1\u0157\6\0\1\u0137\6\0\1\u0159"+
    "\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b\1\u0159\1\u015c"+
    "\11\u0159\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0"+
    "\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0\1\u016d\1\u015a"+
    "\1\u015b\1\u0159\1\u015c\6\u0159\1\u0160\2\u0159\1\u015d\5\u0159"+
    "\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137\6\0\1\u0159"+
    "\7\0\10\u0159\1\0\1\u0169\1\u015a\1\u015b\1\u0159\1\u015c"+
    "\11\u0159\1\u015d\1\u0159\1\u0164\3\u0159\2\0\1\u0159\1\0"+
    "\1\u0159\13\0\1\u0137\6\0\1\u0159\7\0\10\u0159\1\0"+
    "\1\u0159\1\u015a\1\u015b\1\u0159\1\u0161\7\u0159\1\u0169\1\u0159"+
    "\1\u015d\5\u0159\2\0\1\u0159\1\0\1\u0159\13\0\1\u0137"+
    "\6\0\1\u0159\7\0\10\u0159\1\0\1\u0159\1\u015a\1\u015b"+
    "\1\u0159\1\u015c\6\u0159\1\u0169\2\u0159\1\u015d\5\u0159\2\0"+
    "\1\u0159\1\0\1\u0159";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\2\11\4\1\3\11\1\1\1\11"+
    "\4\1\1\11\26\1\1\0\12\1\1\0\36\1\1\11"+
    "\2\1\3\0\44\1\1\0\30\1\1\11\4\0\22\1"+
    "\1\0\1\1\4\0\16\1\3\0\1\1\4\0\10\1"+
    "\3\0\1\1\4\0\7\1\3\0\1\1\10\0\4\1"+
    "\6\0\3\1\15\0\1\1\22\0\1\1\34\0\1\11"+
    "\11\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  intermedio(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 33: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 34: break;
          case 3:
            { return new Symbol(sym.libre,yytext());
            }
            // fall through
          case 35: break;
          case 4:
            { lexeme=yytext();
                        return new Symbol(sym.error);
            }
            // fall through
          case 36: break;
          case 5:
            { lexeme=yytext(); 
                          return new Symbol(sym.operadores,yytext());
            }
            // fall through
          case 37: break;
          case 6:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 38: break;
          case 7:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 39: break;
          case 8:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 40: break;
          case 9:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 41: break;
          case 10:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 42: break;
          case 11:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 43: break;
          case 12:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 44: break;
          case 13:
            { lexeme=yytext(); 
                         return new Symbol(sym.clases,yytext());
            }
            // fall through
          case 45: break;
          case 14:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 46: break;
          case 15:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 47: break;
          case 16:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 48: break;
          case 17:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 49: break;
          case 18:
            { lexeme=yytext(); 
                         return new Symbol(sym.operador_Logico,yytext());
            }
            // fall through
          case 50: break;
          case 19:
            { lexeme=yytext(); 
                        return new Symbol(sym.palabras_reservadas,yytext());
            }
            // fall through
          case 51: break;
          case 20:
            { lexeme=yytext();  return new Symbol(sym.real,Integer.parseInt(yytext()));
            }
            // fall through
          case 52: break;
          case 21:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 53: break;
          case 22:
            { lexeme=yytext(); return new Symbol(sym.tipo_real,yytext());
            }
            // fall through
          case 54: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.instancias,yytext());
            }
            // fall through
          case 55: break;
          case 24:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 56: break;
          case 25:
            { lexeme=yytext(); return new Symbol(sym.tipo_cadena,yytext());
            }
            // fall through
          case 57: break;
          case 26:
            { lexeme=yytext(); return new Symbol(sym.tipo_ent,yytext());
            }
            // fall through
          case 58: break;
          case 27:
            { lexeme=yytext(); return new Symbol(sym.tipo_bol,yytext());
            }
            // fall through
          case 59: break;
          case 28:
            { lexeme=yytext(); 
                         return new Symbol(sym.funcion,yytext());
            }
            // fall through
          case 60: break;
          case 29:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 61: break;
          case 30:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.propiedades,yytext());
            }
            // fall through
          case 62: break;
          case 31:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.metodos,yytext());
            }
            // fall through
          case 63: break;
          case 32:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.principal,yytext());
            }
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
