// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\34"+
    "\11\33\1\35\1\36\1\37\1\33\1\40\10\33\1\7"+
    "\1\11\1\7\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\51\1\54"+
    "\1\55\1\56\1\57\1\60\1\51\1\61\1\62\1\63"+
    "\1\64\1\65\1\51\1\66\2\51\1\7\1\67\2\7"+
    "\6\0\1\3\33\0\1\7\22\0\1\70\12\0\1\70"+
    "\1\0\1\71\1\30\1\72\5\0\1\71\3\0\1\71"+
    "\3\0\1\71\1\0\1\71\6\0\1\71\1\0\1\71"+
    "\4\0\1\73\7\0\1\73\3\0\1\73\3\0\1\73"+
    "\1\0\1\73\6\0\1\73\1\0\1\73\303\0\1\42"+
    "\2\0\1\42\365\0\1\72\12\0\1\42\u0163\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\3\3\1\4\1\5\1\6\2\4"+
    "\1\7\1\4\1\10\1\4\1\11\1\12\1\13\3\14"+
    "\1\10\16\15\1\1\2\3\1\0\1\16\2\3\1\11"+
    "\1\10\1\17\1\20\1\3\2\10\1\0\1\3\2\14"+
    "\1\21\2\10\26\15\1\22\1\15\1\16\2\3\3\0"+
    "\1\3\1\10\1\23\1\10\1\14\1\10\32\15\1\23"+
    "\1\24\1\17\1\3\1\0\17\15\1\22\5\15\1\25"+
    "\1\15\1\24\1\26\4\0\11\15\1\27\10\15\1\0"+
    "\1\15\4\0\14\15\3\0\1\15\4\0\7\15\3\0"+
    "\1\15\4\0\1\15\1\22\5\15\3\0\1\30\10\0"+
    "\1\31\1\15\1\32\1\33\6\0\2\26\1\15\15\0"+
    "\1\26\22\0\1\26\34\0\1\34\11\0\1\26\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u012c"+
    "\0\74\0\74\0\74\0\u0168\0\74\0\u01a4\0\u01e0\0\u021c"+
    "\0\u0258\0\74\0\264\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u012c\0\u06cc\0\u0708"+
    "\0\u0744\0\u012c\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u02d0"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u10e0\0\u111c\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u0384\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1194\0\74\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u0384\0\u2238\0\u2274\0\u22b0\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c"+
    "\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u012c\0\u012c\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714"+
    "\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4"+
    "\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4"+
    "\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4"+
    "\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94"+
    "\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074"+
    "\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\74\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\7\1\22\1\10\1\23\1\10"+
    "\2\2\1\24\3\25\1\26\2\25\1\27\1\7\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\30\1\36\1\37"+
    "\1\40\1\41\2\30\1\42\1\43\1\44\2\30\1\45"+
    "\1\30\1\46\1\7\1\47\1\2\1\7\75\0\1\3"+
    "\77\0\5\7\3\0\1\7\1\0\5\7\1\0\1\7"+
    "\1\10\1\7\2\0\10\47\1\7\24\50\2\7\1\47"+
    "\1\0\1\7\1\0\1\51\2\0\1\51\1\6\1\52"+
    "\1\6\2\7\3\51\1\6\1\51\5\6\1\51\3\6"+
    "\2\51\10\53\1\7\24\54\2\6\1\47\1\0\1\7"+
    "\5\0\5\7\3\0\1\7\1\0\5\7\1\0\3\7"+
    "\2\0\10\47\1\7\24\50\2\7\1\47\1\0\1\7"+
    "\5\0\5\7\3\0\1\10\1\0\5\7\1\0\3\7"+
    "\2\0\10\47\1\7\24\50\2\7\1\47\1\0\1\7"+
    "\5\0\5\7\3\0\1\7\1\0\1\10\2\7\1\55"+
    "\1\7\1\0\3\7\2\0\10\47\1\7\24\50\2\7"+
    "\1\47\1\0\1\7\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\17\1\7\1\17\1\7\1\0\3\7\2\0"+
    "\10\27\1\7\24\56\2\7\1\47\1\0\1\7\14\0"+
    "\1\57\4\0\1\60\57\0\5\61\3\0\1\61\1\0"+
    "\1\61\1\62\1\7\1\21\1\61\1\0\3\61\2\0"+
    "\7\63\1\27\1\61\24\56\2\61\1\47\1\0\1\61"+
    "\5\0\5\7\1\64\2\0\1\7\1\0\1\7\1\17"+
    "\1\65\1\17\1\7\1\0\3\7\2\0\3\25\1\66"+
    "\3\25\1\27\1\7\24\67\2\7\1\47\1\0\1\7"+
    "\5\0\5\7\1\64\2\0\1\7\1\0\1\7\1\17"+
    "\1\65\1\17\1\7\1\0\3\7\2\0\7\25\1\27"+
    "\1\7\24\67\2\7\1\47\1\0\1\7\5\0\5\7"+
    "\1\64\2\0\1\7\1\0\1\7\1\17\1\65\1\17"+
    "\1\7\1\0\3\7\2\0\6\25\1\70\1\27\1\7"+
    "\24\67\2\7\1\47\1\0\1\7\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\17\1\65\1\17\1\7\1\0"+
    "\3\7\2\0\10\27\1\7\24\71\2\7\1\47\1\0"+
    "\1\7\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\24\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\14\30\1\77\7\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\1\100\10\30\1\101\2\30\1\102\7\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\4\30\1\103\17\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\11\30\1\104\1\30\1\105\3\30\1\106\3\30"+
    "\1\107\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\1\110\23\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\1\111\23\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\13\30\1\112"+
    "\10\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\4\30\1\113\17\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\4\30\1\114\3\30\1\115\13\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\16\30\1\116\2\30\1\117\2\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\4\30\1\120\17\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\10\30\1\121\13\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\4\30\1\122"+
    "\17\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\2\7\1\65\2\7\1\0\3\7\2\0"+
    "\10\47\1\7\24\0\2\7\1\47\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\2\7\1\65\2\7\1\0"+
    "\3\7\2\0\10\47\1\7\24\50\2\7\1\47\1\0"+
    "\1\7\1\0\1\51\2\0\2\51\1\123\1\51\2\0"+
    "\30\51\1\0\26\51\4\0\1\51\2\0\1\51\1\6"+
    "\1\52\1\6\2\7\3\51\1\6\1\51\2\6\1\124"+
    "\2\6\1\51\3\6\2\51\10\53\1\7\24\51\2\6"+
    "\1\47\1\0\1\7\1\0\1\51\2\0\1\51\1\6"+
    "\1\52\1\6\2\7\3\51\1\6\1\51\2\6\1\124"+
    "\2\6\1\51\3\6\2\51\10\53\1\7\24\54\2\6"+
    "\1\47\1\0\1\7\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\125\1\7\1\55\1\7\1\0\3\7\2\0"+
    "\10\47\1\7\24\50\2\7\1\47\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\17\1\65\1\17"+
    "\1\7\1\0\3\7\2\0\10\27\1\7\24\56\2\7"+
    "\1\47\1\0\1\7\4\0\1\126\5\57\2\126\1\127"+
    "\1\57\1\126\2\57\1\130\2\57\1\126\3\57\1\0"+
    "\1\126\40\57\1\126\1\57\4\0\24\60\1\0\43\60"+
    "\5\0\5\61\3\0\1\61\1\0\2\61\2\7\1\61"+
    "\1\0\3\61\2\0\7\131\1\47\1\61\24\50\2\61"+
    "\1\47\1\0\1\61\5\0\5\61\3\0\1\61\1\0"+
    "\1\61\1\132\1\7\1\133\1\61\1\0\3\61\2\0"+
    "\7\134\1\27\1\61\24\56\2\61\1\47\1\0\1\61"+
    "\4\0\24\63\1\0\43\63\13\0\1\135\101\0\1\65"+
    "\57\0\5\7\1\64\2\0\1\7\1\0\1\7\1\17"+
    "\1\65\1\17\1\7\1\0\3\7\2\0\2\25\1\70"+
    "\4\25\1\27\1\7\24\67\2\7\1\47\1\0\1\7"+
    "\12\0\1\64\5\0\1\71\1\0\1\71\7\0\7\67"+
    "\1\71\1\0\24\67\25\0\1\71\1\0\1\71\7\0"+
    "\10\71\1\0\24\71\12\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\17\1\7\1\17\1\7\1\0\3\7\2\0"+
    "\10\27\1\7\24\136\2\7\1\47\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\17\1\7\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\24\137\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\17\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\24\140\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\2\7\1\65\1\76\1\7"+
    "\1\0\3\7\2\0\10\75\1\7\24\141\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\3\7"+
    "\1\76\1\7\1\0\3\7\2\0\10\75\1\7\24\142"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\14\30\1\143\7\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\3\30\1\144\20\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\1\145"+
    "\23\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\13\30\1\146\10\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\17\30\1\147\2\30\1\150\1\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\10\30\1\151\13\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\20\30\1\152\3\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\2\30\1\153"+
    "\21\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\20\30\1\154\3\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\11\30\1\155\12\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\2\30\1\113\21\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\2\30\1\156"+
    "\14\30\1\157\4\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\4\30\1\160"+
    "\17\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\20\30\1\161\3\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\4\30\1\162\17\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\10\30\1\163\3\30\1\164\7\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\1\30\1\165\22\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\1\166\23\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\13\30\1\167\10\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\16\30\1\170\5\30\2\7\1\75\1\0\1\76"+
    "\1\0\1\51\2\0\2\51\1\123\1\51\2\0\7\51"+
    "\1\124\20\51\1\0\26\51\10\0\5\7\3\0\1\7"+
    "\1\0\3\7\1\171\1\7\1\0\3\7\2\0\10\47"+
    "\1\7\24\50\2\7\1\47\1\0\1\7\4\0\10\126"+
    "\1\127\13\126\1\0\43\126\4\0\10\126\1\127\4\126"+
    "\1\172\6\126\1\0\43\126\4\0\10\57\1\173\5\57"+
    "\1\126\3\57\2\126\1\0\1\57\7\126\1\57\25\126"+
    "\1\57\2\126\1\57\1\126\5\0\5\61\3\0\1\61"+
    "\1\0\2\61\1\174\1\7\1\61\1\0\3\61\2\0"+
    "\7\131\1\47\1\61\24\0\2\61\1\47\1\0\1\61"+
    "\5\0\5\61\3\0\1\61\1\0\1\61\1\132\1\7"+
    "\1\17\1\61\1\0\3\61\2\0\7\134\1\27\1\61"+
    "\24\56\2\61\1\47\1\0\1\61\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\17\1\7\1\133\1\7\1\0"+
    "\3\7\2\0\10\27\1\7\24\56\2\7\1\47\1\0"+
    "\1\7\5\0\5\61\3\0\1\61\1\0\1\61\1\132"+
    "\1\174\1\17\1\61\1\0\3\61\2\0\7\134\1\27"+
    "\1\61\24\71\2\61\1\47\1\0\1\61\12\0\1\64"+
    "\66\0\5\7\1\175\2\0\1\7\1\0\1\7\1\17"+
    "\1\65\1\17\1\7\1\0\3\7\2\0\10\27\1\7"+
    "\24\136\2\7\1\47\1\0\1\7\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\17\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\24\137\2\7\1\75\1\0"+
    "\1\76\20\0\1\71\1\0\1\140\7\0\10\140\1\0"+
    "\24\140\2\0\1\141\1\0\1\141\22\0\1\141\7\0"+
    "\10\141\1\0\24\141\2\0\1\141\1\0\1\141\5\0"+
    "\5\7\3\0\1\7\1\0\2\7\1\65\1\76\1\7"+
    "\1\0\3\7\2\0\10\75\1\7\24\142\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\11\30\1\176\12\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\4\30"+
    "\1\177\17\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\17\30\1\200\4\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\17\30\1\201\4\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\3\30\1\200\14\30\1\202\3\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\14\30\1\203\7\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\12\30"+
    "\1\204\11\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\4\30\1\205\7\30"+
    "\1\206\7\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\16\30\1\207\5\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\10\30\1\210\13\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\17\30\1\211\4\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\11\30"+
    "\1\212\4\30\1\213\5\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\20\30"+
    "\1\214\3\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\16\30\1\215\5\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\14\30\1\216\7\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\13\30\1\217\10\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\22\30"+
    "\1\220\1\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\15\30\1\221\6\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\11\30\1\222\12\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\11\30\1\223\12\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\14\30"+
    "\1\215\7\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\3\30\1\224\20\30"+
    "\2\7\1\75\1\0\1\76\4\0\1\126\5\57\2\126"+
    "\1\127\1\57\1\126\2\57\1\225\2\57\1\126\3\57"+
    "\1\0\1\126\40\57\1\126\1\57\5\0\5\174\3\0"+
    "\1\174\1\0\5\174\1\0\3\174\12\0\1\174\24\0"+
    "\2\174\2\0\1\174\13\0\1\226\30\0\1\227\1\230"+
    "\1\0\1\231\11\0\1\232\17\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\4\30\1\233\17\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\13\30\1\234\10\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\4\30"+
    "\1\215\17\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\20\30\1\202\3\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\16\30\1\235\5\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\11\30\1\236\12\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\10\30"+
    "\1\237\13\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\16\30\1\240\5\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\13\30\1\241\10\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\10\30\1\242\13\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\4\30"+
    "\1\243\17\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\14\30\1\244\7\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\21\30\1\245\2\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\4\30\1\246\17\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\1\247"+
    "\23\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\3\30\1\250\20\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\20\30\1\251\3\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\1\252\23\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\10\30\1\253\13\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\10\30\1\254\13\30\2\7\1\75"+
    "\1\0\1\76\4\0\1\255\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\24\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\1\256\23\30"+
    "\2\7\1\75\1\0\1\76\57\0\1\257\57\0\1\260"+
    "\106\0\1\261\64\0\1\262\31\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\1\263\23\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\1\223\23\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\21\30\1\264\2\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\22\30\1\265\1\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\13\30\1\266\10\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\14\30"+
    "\1\223\7\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\2\30\1\267\21\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\1\30\1\245\22\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\13\30\1\270\10\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\10\30"+
    "\1\160\13\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\12\30\1\271\11\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\13\30\1\272\10\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\14\30\1\273\7\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\16\30"+
    "\1\274\5\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\3\30\1\275\20\30"+
    "\2\7\1\75\1\0\1\76\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\4\30\1\276\17\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\2\30\1\275\21\30\2\7\1\75\1\0\1\76"+
    "\4\0\1\277\32\0\1\300\3\0\24\301\12\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\3\30\1\302\20\30"+
    "\2\7\1\75\1\0\1\76\57\0\1\303\62\0\1\304"+
    "\110\0\1\305\53\0\1\306\35\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\72\1\65\1\73\1\7\1\0\3\7"+
    "\2\0\10\74\1\7\13\30\1\223\10\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\2\30\1\307\21\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\4\30"+
    "\1\310\17\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\1\160\23\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\4\30\1\273\17\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\3\30\1\200\20\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\4\30\1\311"+
    "\17\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\2\30\1\312\21\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\17\30\1\215\4\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\1\273\23\30\2\7\1\75\1\0\1\76\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\1\313\13\30\1\314"+
    "\7\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\3\30\1\315\20\30\2\7"+
    "\1\75\1\0\1\76\4\0\1\277\36\0\24\301\66\0"+
    "\1\316\16\0\1\317\5\0\1\320\17\0\7\301\2\0"+
    "\24\301\12\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\4\30\1\321\17\30\2\7\1\75\1\0\1\76\54\0"+
    "\1\322\66\0\1\323\73\0\1\324\100\0\1\325\24\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\20\30\1\326"+
    "\3\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\16\30\1\327\5\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\13\30\1\330\10\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\10\30\1\331\13\30\2\7\1\75\1\0\1\76\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\17\30\1\332"+
    "\4\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\17\30\1\333\4\30\2\7"+
    "\1\75\1\0\1\76\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\1\334\23\30\2\7\1\75\1\0\1\76"+
    "\53\0\1\335\24\0\1\317\5\0\1\336\65\0\1\337"+
    "\6\0\1\340\30\0\1\341\1\342\1\0\1\343\11\0"+
    "\1\344\17\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\7\1\0\3\7\2\0\10\74\1\7"+
    "\16\30\1\211\5\30\2\7\1\75\1\0\1\76\47\0"+
    "\1\345\102\0\1\346\76\0\1\347\16\0\1\350\74\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\72\1\65\1\73"+
    "\1\7\1\0\3\7\2\0\10\74\1\7\14\30\1\160"+
    "\7\30\2\7\1\75\1\0\1\76\4\0\1\351\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\24\30\2\7\1\75"+
    "\1\0\1\76\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\72\1\65\1\73\1\7\1\0\3\7\2\0\10\74"+
    "\1\7\20\30\1\266\3\30\2\7\1\75\1\0\1\76"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\72\1\65"+
    "\1\73\1\7\1\0\3\7\2\0\10\74\1\7\1\352"+
    "\23\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\353\1\0"+
    "\3\7\2\0\10\74\1\7\24\30\2\7\1\75\1\0"+
    "\1\76\5\0\5\7\3\0\1\7\1\0\1\7\1\72"+
    "\1\65\1\73\1\354\1\0\3\7\2\0\10\74\1\7"+
    "\24\30\2\7\1\75\1\0\1\76\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\72\1\65\1\73\1\7\1\0"+
    "\3\7\2\0\10\74\1\7\3\30\1\267\20\30\2\7"+
    "\1\75\1\0\1\76\56\0\1\355\30\0\1\340\64\0"+
    "\1\337\37\0\1\341\1\342\1\0\1\343\11\0\1\344"+
    "\16\0\1\340\146\0\1\356\57\0\1\357\106\0\1\360"+
    "\64\0\1\361\67\0\1\362\73\0\1\325\107\0\1\325"+
    "\36\0\1\363\20\0\24\364\11\0\1\351\74\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\72\1\65\1\73\1\7"+
    "\1\0\3\7\2\0\10\74\1\7\16\30\1\365\5\30"+
    "\2\7\1\75\1\0\1\76\45\0\1\366\105\0\1\367"+
    "\62\0\1\370\110\0\1\371\53\0\1\372\106\0\1\325"+
    "\33\0\1\373\3\0\1\363\20\0\24\364\23\0\1\373"+
    "\3\0\1\364\7\0\10\364\1\0\24\364\2\0\1\364"+
    "\1\0\1\364\4\0\1\374\5\7\3\0\1\7\1\0"+
    "\1\7\1\72\1\65\1\73\1\7\1\0\3\7\2\0"+
    "\10\74\1\7\24\30\2\7\1\75\1\0\1\76\53\0"+
    "\1\375\74\0\1\376\66\0\1\377\73\0\1\u0100\100\0"+
    "\1\u0101\23\0\1\u0102\121\0\7\u0103\113\0\1\u0104\62\0"+
    "\1\u0105\102\0\1\u0106\76\0\1\u0107\16\0\1\u0101\36\0"+
    "\24\u0108\11\0\1\u0102\37\0\1\u0109\1\u010a\1\0\1\u010b"+
    "\11\0\1\u010c\24\0\1\u010d\17\0\7\u0103\2\0\24\u0103"+
    "\50\0\1\u010e\73\0\1\u010f\73\0\1\u0101\107\0\1\u0101"+
    "\20\0\1\u0110\6\0\1\340\2\0\1\u0111\3\0\1\u0108"+
    "\7\0\10\u0108\1\0\24\u0108\2\0\1\u0108\1\0\1\u0108"+
    "\57\0\1\u0112\57\0\1\u0113\106\0\1\u0114\64\0\1\u0115"+
    "\37\0\1\u0116\6\0\1\u010d\20\0\24\u0117\61\0\1\u0118"+
    "\75\0\1\u0101\21\0\1\u0110\6\0\1\340\64\0\1\u0111"+
    "\37\0\1\u0119\1\u011a\1\0\1\u011b\11\0\1\u011c\71\0"+
    "\1\u011d\62\0\1\u011e\110\0\1\u011f\53\0\1\u0120\42\0"+
    "\1\u010d\74\0\1\u0116\6\0\1\u0117\7\0\10\u0117\1\0"+
    "\24\u0117\2\0\1\u0117\1\0\1\u0117\4\0\1\u0121\146\0"+
    "\1\u0122\57\0\1\u0123\106\0\1\u0124\64\0\1\u0125\100\0"+
    "\1\u0126\66\0\1\u0127\73\0\1\u0128\100\0\1\u0129\31\0"+
    "\1\u012a\140\0\1\u012b\62\0\1\u012c\110\0\1\u012d\53\0"+
    "\1\u012e\77\0\1\u012f\102\0\1\u0130\76\0\1\u0131\16\0"+
    "\1\u0132\102\0\1\u0133\30\0\1\u0134\1\u0135\1\0\1\u0136"+
    "\11\0\1\u0137\66\0\1\u0138\66\0\1\u0139\73\0\1\u013a"+
    "\100\0\1\u013b\62\0\1\u013c\73\0\1\u0129\107\0\1\u0129"+
    "\20\0\1\u0132\6\0\1\u013d\6\0\1\u013e\20\0\24\u013f"+
    "\64\0\1\u0140\57\0\1\u0141\106\0\1\u0142\64\0\1\u0143"+
    "\73\0\1\u0144\102\0\1\u0145\76\0\1\u0146\16\0\1\u0101"+
    "\145\0\1\u0129\33\0\1\373\70\0\1\u013d\6\0\1\u013e"+
    "\20\0\24\u013f\20\0\1\u013d\6\0\1\u013f\7\0\10\u013f"+
    "\1\0\24\u013f\2\0\1\u013f\1\0\1\u013f\57\0\1\u0147"+
    "\62\0\1\u0148\110\0\1\u0149\53\0\1\u014a\73\0\1\u014b"+
    "\73\0\1\u013b\107\0\1\u013b\70\0\1\u014c\66\0\1\u014d"+
    "\73\0\1\u014e\100\0\1\u014f\75\0\1\u013b\64\0\1\u0150"+
    "\102\0\1\u0151\76\0\1\u0152\16\0\1\u0153\132\0\1\u0154"+
    "\73\0\1\u014f\107\0\1\u014f\57\0\24\u0155\63\0\1\u014f"+
    "\30\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155"+
    "\1\u0156\1\u0157\1\u0155\1\u0158\11\u0155\1\u0159\5\u0155\2\0"+
    "\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0"+
    "\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0158\7\u0155"+
    "\1\u015a\1\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u015b"+
    "\1\u0156\1\u0157\1\u0155\1\u0158\11\u0155\1\u0159\5\u0155\2\0"+
    "\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0"+
    "\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0158\6\u0155"+
    "\1\u015c\2\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155"+
    "\1\u0156\1\u0157\1\u0155\1\u015d\11\u0155\1\u0159\5\u0155\2\0"+
    "\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0"+
    "\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0158\7\u0155"+
    "\1\u015e\1\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155"+
    "\1\u0156\1\u0157\1\u015f\1\u0158\11\u0155\1\u0159\5\u0155\2\0"+
    "\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0"+
    "\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0158\11\u0155"+
    "\1\u0159\1\u0155\1\u0160\3\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0161"+
    "\1\u0156\1\u0157\1\u0155\1\u0158\6\u0155\1\u015c\2\u0155\1\u0159"+
    "\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0"+
    "\1\u0155\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155"+
    "\1\u0158\4\u0155\1\u0162\4\u0155\1\u0159\5\u0155\2\0\1\u0155"+
    "\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155"+
    "\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0163\11\u0155\1\u0159"+
    "\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0"+
    "\1\u0155\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155"+
    "\1\u0164\11\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155"+
    "\1\u0156\1\u0157\1\u0155\1\u0158\4\u0155\1\u0165\4\u0155\1\u0159"+
    "\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0"+
    "\1\u0155\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155"+
    "\1\u0166\11\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155"+
    "\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155"+
    "\1\u0156\1\u0157\1\u0155\1\u0158\6\u0155\1\u0167\2\u0155\1\u0159"+
    "\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0"+
    "\1\u0155\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155"+
    "\1\u0158\6\u0155\1\u015c\2\u0155\1\u0168\5\u0155\2\0\1\u0155"+
    "\1\0\1\u0155\4\0\1\u0153\6\0\1\u0133\6\0\1\u0155"+
    "\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157\1\u0155\1\u0158"+
    "\11\u0155\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0"+
    "\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0\1\u0169\1\u0156"+
    "\1\u0157\1\u0155\1\u0158\6\u0155\1\u015c\2\u0155\1\u0159\5\u0155"+
    "\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133\6\0\1\u0155"+
    "\7\0\10\u0155\1\0\1\u0165\1\u0156\1\u0157\1\u0155\1\u0158"+
    "\11\u0155\1\u0159\1\u0155\1\u0160\3\u0155\2\0\1\u0155\1\0"+
    "\1\u0155\13\0\1\u0133\6\0\1\u0155\7\0\10\u0155\1\0"+
    "\1\u0155\1\u0156\1\u0157\1\u0155\1\u015d\7\u0155\1\u0165\1\u0155"+
    "\1\u0159\5\u0155\2\0\1\u0155\1\0\1\u0155\13\0\1\u0133"+
    "\6\0\1\u0155\7\0\10\u0155\1\0\1\u0155\1\u0156\1\u0157"+
    "\1\u0155\1\u0158\6\u0155\1\u0165\2\u0155\1\u0159\5\u0155\2\0"+
    "\1\u0155\1\0\1\u0155";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\3\11\1\1\1\11"+
    "\4\1\1\11\26\1\1\0\12\1\1\0\36\1\1\11"+
    "\2\1\3\0\44\1\1\0\30\1\1\11\4\0\22\1"+
    "\1\0\1\1\4\0\14\1\3\0\1\1\4\0\7\1"+
    "\3\0\1\1\4\0\7\1\3\0\1\1\10\0\4\1"+
    "\6\0\3\1\15\0\1\1\22\0\1\1\34\0\1\11"+
    "\11\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[361];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Tokens next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 29: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 30: break;
          case 3:
            { lexeme=yytext();
                        return new Symbol(sym.error);
            }
            // fall through
          case 31: break;
          case 4:
            { lexeme=yytext(); 
                          return new Symbol(sym.operadores,yytext());
            }
            // fall through
          case 32: break;
          case 5:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 33: break;
          case 6:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 34: break;
          case 7:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 35: break;
          case 8:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 36: break;
          case 9:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 37: break;
          case 10:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 38: break;
          case 11:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 39: break;
          case 12:
            { lexeme=yytext(); 
                         return new Symbol(sym.clases,yytext());
            }
            // fall through
          case 40: break;
          case 13:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 41: break;
          case 14:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 42: break;
          case 15:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 43: break;
          case 16:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 44: break;
          case 17:
            { lexeme=yytext(); 
                         return new Symbol(sym.operador_Logico,yytext());
            }
            // fall through
          case 45: break;
          case 18:
            { lexeme=yytext(); 
                        return new Symbol(sym.palabras_reservadas,yytext());
            }
            // fall through
          case 46: break;
          case 19:
            { lexeme=yytext();  return new Symbol(sym.real,Integer.parseInt(yytext()));
            }
            // fall through
          case 47: break;
          case 20:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 48: break;
          case 21:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.tipo,yytext());
            }
            // fall through
          case 49: break;
          case 22:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.instancias,yytext());
            }
            // fall through
          case 50: break;
          case 23:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 51: break;
          case 24:
            { lexeme=yytext(); 
                         return new Symbol(sym.funcion,yytext());
            }
            // fall through
          case 52: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 53: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.propiedades,yytext());
            }
            // fall through
          case 54: break;
          case 27:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.metodos,yytext());
            }
            // fall through
          case 55: break;
          case 28:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.principal,yytext());
            }
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
