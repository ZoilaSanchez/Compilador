// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\10\34\1\37\1\40\1\41\1\34\1\42"+
    "\10\34\1\30\1\11\1\30\1\25\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\2\56\1\57\1\60\1\61\1\62\1\63\1\56\1\64"+
    "\1\65\1\66\1\67\1\70\1\56\1\71\1\56\1\72"+
    "\1\30\1\73\1\30\1\7\6\0\1\3\33\0\1\7"+
    "\22\0\1\74\12\0\1\74\1\0\1\75\1\30\1\76"+
    "\5\0\1\75\3\0\1\75\3\0\1\75\1\0\1\75"+
    "\6\0\1\75\1\0\1\75\4\0\1\77\7\0\1\77"+
    "\3\0\1\77\3\0\1\77\1\0\1\77\6\0\1\77"+
    "\1\0\1\77\303\0\1\44\2\0\1\44\365\0\1\76"+
    "\12\0\1\44\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\3\3\3\4\1\5\1\4\1\6"+
    "\1\4\1\7\1\10\1\4\3\11\1\6\17\12\1\1"+
    "\2\3\1\0\1\13\2\3\1\7\1\14\1\6\1\15"+
    "\1\16\1\3\3\6\1\0\1\3\1\6\2\11\1\17"+
    "\1\6\31\12\1\20\2\12\1\13\1\3\1\0\1\15"+
    "\2\0\1\3\1\21\1\22\1\11\1\1\1\12\1\0"+
    "\34\12\1\21\1\23\1\3\1\1\16\12\1\20\6\12"+
    "\1\24\1\25\13\12\1\26\10\12\1\0\3\12\1\25"+
    "\13\12\1\0\12\12\1\0\6\12\1\20\4\12\1\0"+
    "\3\12\1\27\1\30\1\31\1\0\3\12\1\0\2\12"+
    "\1\24\1\0\2\12\5\0\1\32\52\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0140\0\u0140"+
    "\0\100\0\u0180\0\100\0\u01c0\0\u0200\0\u0240\0\u0280\0\100"+
    "\0\300\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640"+
    "\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0140\0\u0780\0\u07c0\0\u0800"+
    "\0\u0140\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0300\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\100"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u0a00\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1380\0\100\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\u2080\0\u20c0\0\u03c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u2240\0\u03c0\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u03c0\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u0140\0\u0140\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u1580\0\u3440\0\u3480\0\u34c0"+
    "\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\100\0\u3640\0\u3680"+
    "\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880"+
    "\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80"+
    "\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\2\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\7\1\20\1\10\1\21\1\10\2\2"+
    "\1\22\5\23\1\24\2\23\1\25\1\7\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\26"+
    "\1\36\1\37\2\26\1\40\1\41\1\42\1\43\1\26"+
    "\1\44\2\26\1\45\1\7\1\46\1\2\1\7\101\0"+
    "\1\3\103\0\5\7\3\0\1\7\1\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\10\1\7\2\0\12\46\1\7"+
    "\26\47\2\7\1\46\1\0\1\7\1\0\1\50\2\0"+
    "\1\50\1\6\1\51\1\6\2\7\3\50\1\6\1\50"+
    "\1\6\1\50\3\6\1\50\3\6\2\50\12\52\1\7"+
    "\26\53\2\6\1\46\1\0\1\7\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\0\3\7\1\0\3\7\2\0"+
    "\12\46\1\7\26\47\2\7\1\46\1\0\1\7\5\0"+
    "\5\7\3\0\1\10\1\0\1\7\1\0\3\7\1\0"+
    "\3\7\2\0\12\46\1\7\26\47\2\7\1\46\1\0"+
    "\1\7\5\0\5\7\3\0\1\7\1\0\1\10\1\0"+
    "\1\7\1\54\1\7\1\0\3\7\2\0\12\46\1\7"+
    "\26\47\2\7\1\46\1\0\1\7\20\0\1\55\1\0"+
    "\1\56\7\0\12\56\1\0\26\56\21\0\1\57\4\0"+
    "\1\60\63\0\5\61\3\0\1\61\1\0\1\61\1\62"+
    "\1\7\1\17\1\61\1\0\3\61\2\0\11\63\1\25"+
    "\1\61\26\64\2\61\1\46\1\0\1\61\5\0\5\7"+
    "\1\65\2\0\1\7\1\0\1\7\1\56\1\66\1\67"+
    "\1\7\1\0\3\7\2\0\5\23\1\70\3\23\1\25"+
    "\1\7\26\71\2\7\1\46\1\0\1\7\5\0\5\7"+
    "\1\65\2\0\1\7\1\0\1\7\1\56\1\66\1\67"+
    "\1\7\1\0\3\7\2\0\11\23\1\25\1\7\26\71"+
    "\2\7\1\46\1\0\1\7\5\0\5\7\1\65\2\0"+
    "\1\7\1\0\1\7\1\56\1\66\1\67\1\7\1\0"+
    "\3\7\2\0\10\23\1\72\1\25\1\7\26\71\2\7"+
    "\1\46\1\0\1\7\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\56\1\66\1\67\1\7\1\0\3\7\2\0"+
    "\12\25\1\7\26\56\2\7\1\46\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\26\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\15\26\1\100\10\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\1\101\11\26\1\102\2\26\1\103\10\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\4\26\1\104\21\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\12\26"+
    "\1\105\1\26\1\106\3\26\1\107\3\26\1\110\1\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\1\111\25\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\1\112\25\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\14\26\1\113\11\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\4\26\1\114\10\26\1\115\10\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\4\26\1\116\3\26\1\117\15\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\17\26\1\120\2\26\1\121\3\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\1\122\3\26\1\123\21\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\4\26\1\124\3\26\1\125\15\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\1\126\25\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\4\26"+
    "\1\127\21\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\0\1\66\2\7\1\0"+
    "\3\7\2\0\12\46\1\7\26\0\2\7\1\46\1\0"+
    "\1\7\5\0\5\7\3\0\1\7\1\0\1\7\1\0"+
    "\1\66\2\7\1\0\3\7\2\0\12\46\1\7\26\47"+
    "\2\7\1\46\1\0\1\7\1\0\1\50\2\0\2\50"+
    "\1\130\1\50\2\0\32\50\1\0\30\50\4\0\1\50"+
    "\2\0\1\50\1\6\1\51\1\6\2\7\3\50\1\6"+
    "\1\50\1\6\1\50\1\131\2\6\1\50\3\6\2\50"+
    "\12\52\1\7\26\50\2\6\1\46\1\0\1\7\1\0"+
    "\1\50\2\0\1\50\1\6\1\51\1\6\2\7\3\50"+
    "\1\6\1\50\1\6\1\50\1\131\2\6\1\50\3\6"+
    "\2\50\12\52\1\7\26\53\2\6\1\46\1\0\1\7"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\132\1\7"+
    "\1\54\1\7\1\0\3\7\2\0\12\46\1\7\26\47"+
    "\2\7\1\46\1\0\1\7\20\0\1\56\1\0\1\56"+
    "\7\0\12\56\1\0\26\56\12\0\5\133\2\0\1\134"+
    "\1\133\1\0\1\133\1\0\1\135\2\133\1\0\3\133"+
    "\2\0\44\133\1\0\1\133\4\0\14\60\1\0\7\60"+
    "\1\0\47\60\5\0\5\61\3\0\1\61\1\0\1\61"+
    "\1\0\2\7\1\61\1\0\3\61\2\0\11\136\1\46"+
    "\1\61\26\47\2\61\1\46\1\0\1\61\20\0\1\56"+
    "\1\0\1\137\7\0\12\56\1\0\26\56\11\0\14\140"+
    "\1\56\1\140\1\63\5\140\1\0\1\140\12\63\1\140"+
    "\26\63\5\140\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\56\1\66\1\67\1\7\1\0\3\7\2\0\12\25"+
    "\1\7\26\64\2\7\1\46\1\0\1\7\13\0\1\141"+
    "\105\0\1\66\63\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\56\1\7\1\67\1\7\1\0\3\7\2\0\12\25"+
    "\1\7\26\64\2\7\1\46\1\0\1\7\5\0\5\7"+
    "\1\65\2\0\1\7\1\0\1\7\1\56\1\66\1\67"+
    "\1\7\1\0\3\7\2\0\3\23\1\72\5\23\1\25"+
    "\1\7\26\71\2\7\1\46\1\0\1\7\12\0\1\65"+
    "\5\0\1\56\1\0\1\56\7\0\11\71\1\56\1\0"+
    "\26\71\25\0\1\56\1\0\1\56\7\0\12\56\1\0"+
    "\26\142\12\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\7\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\26\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\26\143\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\144"+
    "\1\66\1\77\1\7\1\0\3\7\2\0\12\76\1\7"+
    "\26\145\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\144\1\7\1\77\1\7\1\0"+
    "\3\7\2\0\12\76\1\7\26\146\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\15\26\1\147\10\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\3\26\1\150"+
    "\22\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\1\151\25\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\14\26\1\152\3\26\1\153\5\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\20\26\1\154\2\26\1\155\2\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\10\26\1\156\15\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\21\26"+
    "\1\157\4\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\2\26\1\160\23\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\21\26\1\161\4\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\12\26\1\162\13\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\2\26"+
    "\1\114\23\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\2\26\1\163\23\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\4\26\1\164\21\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\6\26\1\165\17\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\21\26"+
    "\1\166\4\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\4\26\1\167\21\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\10\26\1\170\4\26\1\171\10\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\1\26\1\172\24\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\10\26\1\173\15\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\1\174"+
    "\25\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\14\26\1\175\11\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\14\26\1\176\11\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\14\26\1\177\11\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\17\26\1\200"+
    "\6\26\2\7\1\76\1\0\1\77\1\0\1\50\2\0"+
    "\2\50\1\130\1\50\2\0\7\50\1\131\22\50\1\0"+
    "\30\50\25\0\1\201\62\0\5\133\3\0\1\133\1\0"+
    "\1\133\1\0\1\135\2\133\1\0\3\133\2\0\44\133"+
    "\1\0\1\133\21\0\1\202\62\0\14\133\1\0\1\133"+
    "\1\0\3\133\3\0\1\133\11\0\1\133\27\0\1\133"+
    "\2\0\1\133\6\0\5\61\3\0\1\61\1\0\1\61"+
    "\1\0\1\203\1\7\1\61\1\0\3\61\2\0\11\136"+
    "\1\46\1\61\26\0\2\61\1\46\1\0\1\61\4\0"+
    "\14\140\1\0\7\140\1\0\47\140\12\0\1\65\105\0"+
    "\1\56\1\0\1\142\7\0\12\142\1\0\26\142\2\0"+
    "\1\204\1\0\1\204\20\0\1\73\1\0\1\143\7\0"+
    "\12\143\1\0\26\143\2\0\1\145\1\0\1\145\45\0"+
    "\26\204\25\0\1\144\1\0\1\145\7\0\12\145\1\0"+
    "\26\145\2\0\1\145\1\0\1\145\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\144\1\66\1\77\1\7\1\0"+
    "\3\7\2\0\12\76\1\7\26\146\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\12\26\1\205\13\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\4\26\1\206"+
    "\21\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\20\26\1\207\5\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\20\26\1\210\5\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\4\26\1\124\21\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\3\26\1\207"+
    "\15\26\1\211\4\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\15\26\1\212"+
    "\10\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\13\26\1\213\12\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\4\26\1\214\10\26\1\215\10\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\17\26\1\216\6\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\10\26\1\217\15\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\20\26\1\220"+
    "\5\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\12\26\1\221\4\26\1\222"+
    "\6\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\17\26\1\223\6\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\1\224\25\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\15\26"+
    "\1\225\10\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\14\26\1\226\11\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\23\26\1\227\2\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\16\26\1\230\7\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\12\26"+
    "\1\231\13\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\25\26\1\232\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\12\26\1\233\13\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\15\26\1\232\10\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\15\26\1\223"+
    "\10\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\6\26\1\234\17\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\3\26\1\235\22\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\203\3\0\1\203\1\0\1\203\1\0"+
    "\3\203\1\0\3\203\14\0\1\203\26\0\2\203\2\0"+
    "\1\203\22\0\1\204\7\0\12\204\1\0\26\204\2\0"+
    "\1\204\1\0\1\204\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\4\26\1\236\21\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\14\26\1\237\11\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\4\26\1\223"+
    "\21\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\21\26\1\211\4\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\17\26\1\240\6\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\12\26\1\241\13\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\10\26\1\242"+
    "\15\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\17\26\1\243\6\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\14\26\1\244\11\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\10\26\1\245\15\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\4\26\1\246"+
    "\21\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\15\26\1\247\10\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\22\26\1\250\3\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\4\26\1\251\21\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\17\26\1\252"+
    "\6\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\3\26\1\253\22\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\21\26\1\254\4\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\1\255\25\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\10\26\1\256\15\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\10\26\1\257\15\26\2\7\1\76"+
    "\1\0\1\77\4\0\1\260\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\26\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\4\26\1\261"+
    "\21\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\1\262\25\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\1\263\25\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\1\264\25\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\22\26\1\265\3\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\23\26\1\266\2\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\14\26"+
    "\1\267\11\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\15\26\1\233\10\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\2\26\1\270\23\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\1\26\1\250\24\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\14\26"+
    "\1\271\11\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\10\26\1\164\15\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\13\26\1\272\12\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\10\26\1\273\15\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\15\26"+
    "\1\274\10\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\17\26\1\275\6\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\3\26\1\276\22\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\4\26\1\277\21\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\2\26"+
    "\1\276\23\26\2\7\1\76\1\0\1\77\41\0\1\300"+
    "\43\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\14\26"+
    "\1\301\11\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\3\26\1\302\22\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\14\26\1\233\11\26\2\7\1\76"+
    "\1\0\1\77\4\0\1\260\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\1\303\11\75\1\7\26\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\2\26"+
    "\1\304\23\26\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\4\26\1\305\21\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\1\164\25\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\4\26\1\274\21\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\3\26\1\207"+
    "\22\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\4\26\1\306\21\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\21\26\1\307\4\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\20\26\1\223\5\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\1\274\25\26"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\1\310\14\26\1\311\10\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\3\26\1\312\22\26\2\7\1\76\1\0"+
    "\1\77\64\0\1\313\20\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\21\26\1\314\4\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\4\26\1\315\21\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\1\75\1\316\2\75\1\317"+
    "\3\75\1\320\1\75\1\7\26\143\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\21\26\1\321\4\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\17\26\1\322"+
    "\6\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\14\26\1\323\11\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\13\26\1\175\12\26\2\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\20\26\1\324\5\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\3\7\2\0\12\75\1\7\20\26\1\325"+
    "\5\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\1\326\25\26\2\7\1\76"+
    "\1\0\1\77\55\0\1\327\27\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\4\26\1\232\21\26\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\17\26\1\220\6\26\2\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\3\7\2\0\12\75\1\7\15\143"+
    "\1\330\10\143\2\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\3\7\2\0\12\75\1\7\14\143\1\331\11\143"+
    "\2\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\3\7"+
    "\2\0\12\75\1\7\4\143\1\332\21\143\2\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\3\7\2\0\12\75"+
    "\1\7\15\26\1\164\10\26\2\7\1\76\1\0\1\77"+
    "\4\0\1\333\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\3\7\2\0\12\75\1\7"+
    "\26\26\2\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\3\7\2\0\12\75\1\7\21\26\1\267\4\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\334\1\0\3\7\2\0"+
    "\12\75\1\7\26\26\2\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\335\1\0\3\7\2\0\12\75\1\7\26\26\2\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\3\7\2\0"+
    "\12\75\1\7\3\26\1\270\22\26\2\7\1\76\1\0"+
    "\1\77\61\0\1\336\36\0\1\73\1\0\1\143\7\0"+
    "\12\143\1\0\12\143\1\337\13\143\2\0\1\145\1\0"+
    "\1\145\20\0\1\73\1\0\1\143\7\0\12\143\1\0"+
    "\21\143\1\340\4\143\2\0\1\145\1\0\1\145\20\0"+
    "\1\73\1\0\1\143\7\0\12\143\1\0\1\341\25\143"+
    "\2\0\1\145\1\0\1\145\4\0\1\333\142\0\1\342"+
    "\50\0\1\73\1\0\1\143\7\0\12\143\1\0\4\143"+
    "\1\343\21\143\2\0\1\145\1\0\1\145\20\0\1\73"+
    "\1\0\1\143\7\0\12\143\1\0\4\143\1\344\21\143"+
    "\2\0\1\145\1\0\1\145\20\0\1\73\1\0\1\143"+
    "\7\0\12\143\1\0\12\143\1\345\13\143\2\0\1\145"+
    "\1\0\1\145\55\0\1\346\42\0\1\73\1\0\1\143"+
    "\7\0\12\143\1\0\1\347\25\143\2\0\1\145\1\0"+
    "\1\145\20\0\1\73\1\0\1\143\7\0\12\143\1\0"+
    "\17\143\1\350\6\143\2\0\1\145\1\0\1\145\63\0"+
    "\1\351\34\0\1\73\1\0\1\143\7\0\12\143\1\0"+
    "\14\143\1\350\11\143\2\0\1\145\1\0\1\145\20\0"+
    "\1\73\1\0\1\143\7\0\12\143\1\0\15\143\1\345"+
    "\10\143\2\0\1\145\1\0\1\145\45\0\1\352\111\0"+
    "\1\353\24\0\1\354\105\0\1\355\100\0\1\356\32\0"+
    "\1\357\1\360\1\0\1\361\12\0\1\362\75\0\1\363"+
    "\62\0\1\364\113\0\1\365\67\0\1\366\110\0\1\367"+
    "\65\0\1\370\115\0\1\371\56\0\1\372\111\0\1\373"+
    "\71\0\1\374\77\0\1\375\105\0\1\376\71\0\1\377"+
    "\107\0\1\u0100\102\0\1\u0101\17\0\1\u0102\140\0\1\u0103"+
    "\77\0\1\376\114\0\1\376\62\0\26\u0104\66\0\1\376"+
    "\31\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\1\u0104\1\u0107\12\u0104\1\u0108\6\u0104\2\0"+
    "\1\u0104\1\0\1\u0104\13\0\1\356\6\0\1\u0104\7\0"+
    "\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0107\10\u0104"+
    "\1\u0109\1\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u010a"+
    "\1\u0105\1\u0106\1\u0104\1\u0107\12\u0104\1\u0108\6\u0104\2\0"+
    "\1\u0104\1\0\1\u0104\13\0\1\356\6\0\1\u0104\7\0"+
    "\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0107\7\u0104"+
    "\1\u010b\2\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\1\u0104\1\u010c\12\u0104\1\u0108\6\u0104\2\0"+
    "\1\u0104\1\0\1\u0104\13\0\1\356\6\0\1\u0104\7\0"+
    "\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0107\10\u0104"+
    "\1\u010d\1\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\1\u010e\1\u0107\12\u0104\1\u0108\6\u0104\2\0"+
    "\1\u0104\1\0\1\u0104\13\0\1\356\6\0\1\u0104\7\0"+
    "\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0107\12\u0104"+
    "\1\u0108\1\u0104\1\u010f\4\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0110"+
    "\1\u0105\1\u0106\1\u0104\1\u0107\7\u0104\1\u010b\2\u0104\1\u0108"+
    "\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0\1\356\6\0"+
    "\1\u0104\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104"+
    "\1\u0107\5\u0104\1\u0111\4\u0104\1\u0108\6\u0104\2\0\1\u0104"+
    "\1\0\1\u0104\13\0\1\356\6\0\1\u0104\7\0\12\u0104"+
    "\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0112\12\u0104\1\u0108"+
    "\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0\1\356\6\0"+
    "\1\u0104\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104"+
    "\1\u0113\12\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\1\u0104\1\u0107\5\u0104\1\u0114\4\u0104\1\u0108"+
    "\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0\1\356\6\0"+
    "\1\u0104\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104"+
    "\1\u0115\12\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104"+
    "\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104"+
    "\1\u0105\1\u0106\1\u0104\1\u0107\7\u0104\1\u0116\2\u0104\1\u0108"+
    "\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0\1\356\6\0"+
    "\1\u0104\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104"+
    "\1\u0107\7\u0104\1\u010b\2\u0104\1\u0117\6\u0104\2\0\1\u0104"+
    "\1\0\1\u0104\4\0\1\u0102\6\0\1\356\6\0\1\u0104"+
    "\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106\1\u0104\1\u0107"+
    "\12\u0104\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0"+
    "\1\356\6\0\1\u0104\7\0\12\u0104\1\0\1\u0118\1\u0105"+
    "\1\u0106\1\u0104\1\u0107\7\u0104\1\u010b\2\u0104\1\u0108\6\u0104"+
    "\2\0\1\u0104\1\0\1\u0104\13\0\1\356\6\0\1\u0104"+
    "\7\0\12\u0104\1\0\1\u0114\1\u0105\1\u0106\1\u0104\1\u0107"+
    "\12\u0104\1\u0108\1\u0104\1\u010f\4\u0104\2\0\1\u0104\1\0"+
    "\1\u0104\13\0\1\356\6\0\1\u0104\7\0\12\u0104\1\0"+
    "\1\u0104\1\u0105\1\u0106\1\u0104\1\u010c\10\u0104\1\u0114\1\u0104"+
    "\1\u0108\6\u0104\2\0\1\u0104\1\0\1\u0104\13\0\1\356"+
    "\6\0\1\u0104\7\0\12\u0104\1\0\1\u0104\1\u0105\1\u0106"+
    "\1\u0104\1\u0107\7\u0104\1\u0114\2\u0104\1\u0108\6\u0104\2\0"+
    "\1\u0104\1\0\1\u0104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\4\1\1\11\27\1\1\0\14\1\1\0\42\1\1\11"+
    "\1\1\1\0\1\1\2\0\6\1\1\0\35\1\1\11"+
    "\55\1\1\0\17\1\1\0\12\1\1\0\13\1\1\0"+
    "\6\1\1\0\3\1\1\0\3\1\1\0\2\1\5\0"+
    "\1\11\52\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 27: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
            }
            // fall through
          case 28: break;
          case 3:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 29: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 30: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 31: break;
          case 6:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 32: break;
          case 7:
            { lexeme=yytext();  return entero;
            }
            // fall through
          case 33: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 34: break;
          case 9:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 35: break;
          case 10:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 36: break;
          case 11:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 37: break;
          case 12:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return opcional2;
            }
            // fall through
          case 38: break;
          case 13:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return nocom;
            }
            // fall through
          case 39: break;
          case 14:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 40: break;
          case 15:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 41: break;
          case 16:
            { lexeme=yytext(); 
                        return palabras_reservadas;
            }
            // fall through
          case 42: break;
          case 17:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 43: break;
          case 18:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 44: break;
          case 19:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 45: break;
          case 20:
            { lexeme=yytext();  return funcionespecial;
            }
            // fall through
          case 46: break;
          case 21:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 47: break;
          case 22:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 48: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 49: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 50: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 51: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
