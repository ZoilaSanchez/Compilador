// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\10\33\1\36\1\37\1\40\1\33\1\41"+
    "\10\33\1\27\1\11\1\27\1\25\1\42\1\11\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\2\54\1\55\1\56\1\57\1\60\1\61\1\54\1\62"+
    "\1\63\1\64\1\65\1\66\1\54\1\67\1\54\1\70"+
    "\1\27\1\71\1\27\1\7\6\0\1\3\33\0\1\7"+
    "\22\0\1\7\12\0\1\7\1\0\1\72\1\27\1\73"+
    "\5\0\1\72\3\0\1\72\3\0\1\72\1\0\1\72"+
    "\6\0\1\72\1\0\1\72\4\0\1\74\7\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\6\0\1\74"+
    "\1\0\1\74\303\0\1\11\2\0\1\11\365\0\1\73"+
    "\12\0\1\11\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\3\3\3\4\1\5\1\4\1\6"+
    "\1\4\1\7\1\10\1\4\3\11\1\6\17\12\1\1"+
    "\2\3\1\0\1\13\2\3\1\7\1\14\1\6\1\15"+
    "\1\16\1\3\3\6\1\0\1\3\1\6\2\11\1\17"+
    "\1\6\31\12\1\20\2\12\1\13\1\3\1\0\1\3"+
    "\1\21\1\22\1\11\1\1\1\12\1\0\34\12\1\21"+
    "\1\3\1\1\16\12\1\20\6\12\1\23\1\24\13\12"+
    "\1\25\10\12\1\0\3\12\1\24\13\12\1\0\12\12"+
    "\1\0\6\12\1\20\4\12\1\0\3\12\1\26\1\27"+
    "\1\30\1\0\3\12\1\0\2\12\1\23\1\0\2\12"+
    "\5\0\1\31\52\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\u0131\0\u0131"+
    "\0\75\0\u016e\0\75\0\u01ab\0\u01e8\0\u0225\0\u0262\0\75"+
    "\0\267\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0131\0\u0726\0\u0763\0\u07a0"+
    "\0\u0131\0\u07dd\0\u081a\0\u0857\0\u0894\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u02dc\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\75"+
    "\0\u1259\0\u1296\0\u12d3\0\u0988\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1296\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u0393\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u0393\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u0393\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u0131"+
    "\0\u0131\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u13c7\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284"+
    "\0\u32c1\0\75\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f"+
    "\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617"+
    "\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff"+
    "\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7"+
    "\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\2\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\7\1\20\1\10\1\21\2\2\1\22"+
    "\5\23\1\24\2\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\26\1\34\1\35\1\26\1\36\1\37"+
    "\2\26\1\40\1\41\1\42\1\43\1\26\1\44\2\26"+
    "\1\45\1\46\1\2\1\7\76\0\1\3\100\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\10\2\0\12\46\26\47\1\7\1\46\1\0\1\7"+
    "\1\0\1\50\2\0\1\50\1\6\1\51\1\6\2\7"+
    "\3\50\1\6\1\50\1\6\1\50\3\6\1\50\2\6"+
    "\2\50\12\52\26\53\1\6\1\46\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\0\3\7\1\0"+
    "\2\7\2\0\12\46\26\47\1\7\1\46\1\0\1\7"+
    "\5\0\5\7\3\0\1\10\1\0\1\7\1\0\3\7"+
    "\1\0\2\7\2\0\12\46\26\47\1\7\1\46\1\0"+
    "\1\7\5\0\5\7\3\0\1\7\1\0\1\10\1\0"+
    "\1\7\1\54\1\7\1\0\2\7\2\0\12\46\26\47"+
    "\1\7\1\46\1\0\1\7\20\0\1\55\1\0\1\56"+
    "\6\0\40\56\20\0\1\57\4\0\1\60\60\0\5\61"+
    "\3\0\1\61\1\0\1\61\1\62\1\7\1\17\1\61"+
    "\1\0\2\61\2\0\11\63\1\25\26\64\1\61\1\46"+
    "\1\0\1\61\5\0\5\7\1\65\2\0\1\7\1\0"+
    "\1\7\1\56\1\66\1\67\1\7\1\0\2\7\2\0"+
    "\5\23\1\70\3\23\1\25\26\71\1\7\1\46\1\0"+
    "\1\7\5\0\5\7\1\65\2\0\1\7\1\0\1\7"+
    "\1\56\1\66\1\67\1\7\1\0\2\7\2\0\11\23"+
    "\1\25\26\71\1\7\1\46\1\0\1\7\5\0\5\7"+
    "\1\65\2\0\1\7\1\0\1\7\1\56\1\66\1\67"+
    "\1\7\1\0\2\7\2\0\10\23\1\72\1\25\26\71"+
    "\1\7\1\46\1\0\1\7\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\56\1\66\1\67\1\7\1\0\2\7"+
    "\2\0\12\25\26\56\1\7\1\46\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\26\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\15\26\1\100\10\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\1\101\11\26\1\102"+
    "\2\26\1\103\10\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\4\26\1\104\21\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\12\26\1\105\1\26\1\106\3\26\1\107"+
    "\3\26\1\110\1\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\1\111\25\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\1\112\25\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\14\26\1\113\11\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\4\26\1\114\10\26\1\115\10\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\4\26\1\116\3\26\1\117\15\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\17\26\1\120\2\26\1\121\3\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\1\122"+
    "\3\26\1\123\21\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\4\26\1\124\3\26"+
    "\1\125\15\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\1\126\25\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\4\26\1\127\21\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\0\1\66\2\7"+
    "\1\0\2\7\2\0\12\46\26\0\1\7\1\46\1\0"+
    "\1\7\5\0\5\7\3\0\1\7\1\0\1\7\1\0"+
    "\1\66\2\7\1\0\2\7\2\0\12\46\26\47\1\7"+
    "\1\46\1\0\1\7\1\0\1\50\2\0\2\50\1\130"+
    "\1\50\2\0\60\50\4\0\1\50\2\0\1\50\1\6"+
    "\1\51\1\6\2\7\3\50\1\6\1\50\1\6\1\50"+
    "\1\131\2\6\1\50\2\6\2\50\12\52\26\50\1\6"+
    "\1\46\1\0\1\7\1\0\1\50\2\0\1\50\1\6"+
    "\1\51\1\6\2\7\3\50\1\6\1\50\1\6\1\50"+
    "\1\131\2\6\1\50\2\6\2\50\12\52\26\53\1\6"+
    "\1\46\1\0\1\7\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\132\1\7\1\54\1\7\1\0\2\7\2\0"+
    "\12\46\26\47\1\7\1\46\1\0\1\7\20\0\1\56"+
    "\1\0\1\56\6\0\40\56\10\0\14\57\1\0\6\57"+
    "\1\0\45\57\4\0\14\60\1\0\6\60\1\0\45\60"+
    "\5\0\5\61\3\0\1\61\1\0\1\61\1\0\2\7"+
    "\1\61\1\0\2\61\2\0\11\133\1\46\26\47\1\61"+
    "\1\46\1\0\1\61\20\0\1\56\1\0\1\134\6\0"+
    "\40\56\10\0\14\135\1\56\1\135\1\63\4\135\1\0"+
    "\1\135\40\63\4\135\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\56\1\66\1\67\1\7\1\0\2\7\2\0"+
    "\12\25\26\64\1\7\1\46\1\0\1\7\13\0\1\136"+
    "\102\0\1\66\60\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\56\1\7\1\67\1\7\1\0\2\7\2\0\12\25"+
    "\26\64\1\7\1\46\1\0\1\7\5\0\5\7\1\65"+
    "\2\0\1\7\1\0\1\7\1\56\1\66\1\67\1\7"+
    "\1\0\2\7\2\0\3\23\1\72\5\23\1\25\26\71"+
    "\1\7\1\46\1\0\1\7\12\0\1\65\5\0\1\56"+
    "\1\0\1\56\6\0\11\71\1\56\26\71\24\0\1\56"+
    "\1\0\1\56\6\0\12\56\26\137\11\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\7\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\26\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\26\140\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\141\1\66\1\77\1\7\1\0\2\7\2\0"+
    "\12\76\26\142\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\141\1\7\1\77\1\7"+
    "\1\0\2\7\2\0\12\76\26\143\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\15\26"+
    "\1\144\10\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\3\26\1\145\22\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\1\146\25\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\14\26\1\147\3\26"+
    "\1\150\5\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\20\26\1\151\2\26\1\152"+
    "\2\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\10\26\1\153\15\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\21\26\1\154\4\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\2\26\1\155\23\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\21\26\1\156\4\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\12\26"+
    "\1\157\13\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\2\26\1\114\23\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\2\26\1\160\23\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\4\26\1\161"+
    "\21\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\6\26\1\162\17\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\21\26\1\163\4\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\4\26\1\164\21\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\10\26\1\165\4\26\1\166\10\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\1\26\1\167\24\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\10\26\1\170"+
    "\15\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\1\171\25\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\14\26"+
    "\1\172\11\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\14\26\1\173\11\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\14\26\1\174\11\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\17\26\1\175"+
    "\6\26\1\7\1\76\1\0\1\77\1\0\1\50\2\0"+
    "\2\50\1\130\1\50\2\0\7\50\1\131\50\50\25\0"+
    "\1\176\57\0\5\61\3\0\1\61\1\0\1\61\1\0"+
    "\1\177\1\7\1\61\1\0\2\61\2\0\11\133\1\46"+
    "\26\0\1\61\1\46\1\0\1\61\4\0\14\135\1\0"+
    "\6\135\1\0\45\135\12\0\1\65\102\0\1\56\1\0"+
    "\1\137\6\0\40\137\1\0\1\200\1\0\1\200\20\0"+
    "\1\73\1\0\1\140\6\0\40\140\1\0\1\142\1\0"+
    "\1\142\43\0\26\200\24\0\1\141\1\0\1\142\6\0"+
    "\40\142\1\0\1\142\1\0\1\142\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\141\1\66\1\77\1\7\1\0"+
    "\2\7\2\0\12\76\26\143\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\12\26\1\201"+
    "\13\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\4\26\1\202\21\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\20\26\1\203\5\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\20\26\1\204\5\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\4\26\1\124\21\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\3\26"+
    "\1\203\15\26\1\205\4\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\15\26\1\206"+
    "\10\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\13\26\1\207\12\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\4\26\1\210\10\26\1\211\10\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\17\26"+
    "\1\212\6\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\10\26\1\213\15\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\20\26\1\214\5\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\12\26\1\215"+
    "\4\26\1\216\6\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\17\26\1\217\6\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\1\220\25\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\15\26\1\221"+
    "\10\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\14\26\1\222\11\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\23\26\1\223\2\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\16\26\1\224\7\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\12\26\1\225\13\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\25\26"+
    "\1\226\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\12\26\1\227\13\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\15\26\1\226\10\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\15\26\1\217\10\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\6\26\1\230\17\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\3\26"+
    "\1\231\22\26\1\7\1\76\1\0\1\77\5\0\5\177"+
    "\3\0\1\177\1\0\1\177\1\0\3\177\1\0\2\177"+
    "\42\0\1\177\2\0\1\177\22\0\1\200\6\0\40\200"+
    "\1\0\1\200\1\0\1\200\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\4\26\1\232\21\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\14\26"+
    "\1\233\11\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\4\26\1\217\21\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\21\26\1\205\4\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\17\26\1\234"+
    "\6\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\12\26\1\235\13\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\10\26\1\236\15\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\17\26\1\237\6\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\14\26\1\240\11\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\10\26"+
    "\1\241\15\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\4\26\1\242\21\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\15\26\1\243\10\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\22\26\1\244"+
    "\3\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\4\26\1\245\21\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\17\26\1\246\6\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\3\26\1\247\22\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\21\26\1\250\4\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\1\251"+
    "\25\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\10\26\1\252\15\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\10\26\1\253\15\26\1\7\1\76\1\0\1\77\4\0"+
    "\1\254\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\26\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\4\26\1\255\21\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\1\256\25\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\1\257\25\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\1\260\25\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\22\26\1\261\3\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\23\26"+
    "\1\262\2\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\14\26\1\263\11\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\15\26\1\227\10\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\2\26\1\264"+
    "\23\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\1\26\1\244\24\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\14\26\1\265\11\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\10\26\1\161\15\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\13\26\1\266\12\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\10\26"+
    "\1\267\15\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\15\26\1\270\10\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\17\26\1\271\6\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\3\26\1\272"+
    "\22\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\4\26\1\273\21\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\2\26\1\272\23\26\1\7\1\76\1\0\1\77\40\0"+
    "\1\274\41\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\14\26"+
    "\1\275\11\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\3\26\1\276\22\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\14\26\1\227\11\26\1\7\1\76\1\0\1\77"+
    "\4\0\1\254\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\1\277\11\75"+
    "\26\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\2\26\1\300\23\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\4\26\1\301\21\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\1\161\25\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\4\26\1\270\21\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\3\26\1\203"+
    "\22\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\4\26\1\302\21\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\21\26\1\303\4\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\20\26\1\217\5\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\1\270\25\26\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\1\304\14\26"+
    "\1\305\10\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\3\26\1\306\22\26\1\7"+
    "\1\76\1\0\1\77\62\0\1\307\17\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\21\26\1\310\4\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\4\26\1\311\21\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\1\75\1\312\2\75\1\313"+
    "\3\75\1\314\1\75\26\140\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\21\26\1\315"+
    "\4\26\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\17\26\1\316\6\26\1\7\1\76"+
    "\1\0\1\77\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\73\1\66\1\74\1\7\1\0\2\7\2\0\12\75"+
    "\14\26\1\317\11\26\1\7\1\76\1\0\1\77\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\73\1\66\1\74"+
    "\1\7\1\0\2\7\2\0\12\75\13\26\1\172\12\26"+
    "\1\7\1\76\1\0\1\77\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\20\26\1\320\5\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\20\26"+
    "\1\321\5\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\1\322\25\26\1\7\1\76"+
    "\1\0\1\77\53\0\1\323\26\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\73\1\66\1\74\1\7\1\0\2\7"+
    "\2\0\12\75\4\26\1\226\21\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\17\26"+
    "\1\214\6\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\15\140\1\324\10\140\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\14\140\1\325\11\140\1\7\1\76\1\0\1\77"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\73\1\66"+
    "\1\74\1\7\1\0\2\7\2\0\12\75\4\140\1\326"+
    "\21\140\1\7\1\76\1\0\1\77\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\73\1\66\1\74\1\7\1\0"+
    "\2\7\2\0\12\75\15\26\1\161\10\26\1\7\1\76"+
    "\1\0\1\77\4\0\1\327\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\7\1\0\2\7\2\0"+
    "\12\75\26\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\7"+
    "\1\0\2\7\2\0\12\75\21\26\1\263\4\26\1\7"+
    "\1\76\1\0\1\77\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\73\1\66\1\74\1\330\1\0\2\7\2\0"+
    "\12\75\26\26\1\7\1\76\1\0\1\77\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\73\1\66\1\74\1\331"+
    "\1\0\2\7\2\0\12\75\26\26\1\7\1\76\1\0"+
    "\1\77\5\0\5\7\3\0\1\7\1\0\1\7\1\73"+
    "\1\66\1\74\1\7\1\0\2\7\2\0\12\75\3\26"+
    "\1\264\22\26\1\7\1\76\1\0\1\77\57\0\1\332"+
    "\35\0\1\73\1\0\1\140\6\0\24\140\1\333\13\140"+
    "\1\0\1\142\1\0\1\142\20\0\1\73\1\0\1\140"+
    "\6\0\33\140\1\334\4\140\1\0\1\142\1\0\1\142"+
    "\20\0\1\73\1\0\1\140\6\0\12\140\1\335\25\140"+
    "\1\0\1\142\1\0\1\142\4\0\1\327\135\0\1\336"+
    "\47\0\1\73\1\0\1\140\6\0\16\140\1\337\21\140"+
    "\1\0\1\142\1\0\1\142\20\0\1\73\1\0\1\140"+
    "\6\0\16\140\1\340\21\140\1\0\1\142\1\0\1\142"+
    "\20\0\1\73\1\0\1\140\6\0\24\140\1\341\13\140"+
    "\1\0\1\142\1\0\1\142\53\0\1\342\41\0\1\73"+
    "\1\0\1\140\6\0\12\140\1\343\25\140\1\0\1\142"+
    "\1\0\1\142\20\0\1\73\1\0\1\140\6\0\31\140"+
    "\1\344\6\140\1\0\1\142\1\0\1\142\61\0\1\345"+
    "\33\0\1\73\1\0\1\140\6\0\26\140\1\344\11\140"+
    "\1\0\1\142\1\0\1\142\20\0\1\73\1\0\1\140"+
    "\6\0\27\140\1\341\10\140\1\0\1\142\1\0\1\142"+
    "\43\0\1\346\106\0\1\347\23\0\1\350\102\0\1\351"+
    "\75\0\1\352\30\0\1\353\1\354\1\0\1\355\12\0"+
    "\1\356\72\0\1\357\57\0\1\360\110\0\1\361\64\0"+
    "\1\362\105\0\1\363\62\0\1\364\112\0\1\365\53\0"+
    "\1\366\106\0\1\367\66\0\1\370\74\0\1\371\102\0"+
    "\1\372\66\0\1\373\104\0\1\374\77\0\1\375\16\0"+
    "\1\376\133\0\1\377\74\0\1\372\111\0\1\372\57\0"+
    "\26\u0100\63\0\1\372\30\0\1\352\6\0\1\u0100\6\0"+
    "\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\12\u0100\1\u0104\6\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100"+
    "\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\10\u0100\1\u0105"+
    "\1\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100\13\0"+
    "\1\352\6\0\1\u0100\6\0\12\u0100\1\u0106\1\u0101\1\u0102"+
    "\1\u0100\1\u0103\12\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101"+
    "\1\u0102\1\u0100\1\u0103\7\u0100\1\u0107\2\u0100\1\u0104\6\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100"+
    "\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0108\12\u0100\1\u0104"+
    "\6\u0100\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0"+
    "\1\u0100\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\10\u0100"+
    "\1\u0109\1\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101\1\u0102"+
    "\1\u010a\1\u0103\12\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101"+
    "\1\u0102\1\u0100\1\u0103\12\u0100\1\u0104\1\u0100\1\u010b\4\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100"+
    "\6\0\12\u0100\1\u010c\1\u0101\1\u0102\1\u0100\1\u0103\7\u0100"+
    "\1\u0107\2\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101\1\u0102"+
    "\1\u0100\1\u0103\5\u0100\1\u010d\4\u0100\1\u0104\6\u0100\1\0"+
    "\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100\6\0"+
    "\13\u0100\1\u0101\1\u0102\1\u0100\1\u010e\12\u0100\1\u0104\6\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100"+
    "\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u010f\12\u0100\1\u0104"+
    "\6\u0100\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0"+
    "\1\u0100\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\5\u0100"+
    "\1\u0110\4\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100"+
    "\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101\1\u0102"+
    "\1\u0100\1\u0111\12\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\13\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101"+
    "\1\u0102\1\u0100\1\u0103\7\u0100\1\u0112\2\u0100\1\u0104\6\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0\1\u0100"+
    "\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\7\u0100\1\u0107"+
    "\2\u0100\1\u0113\6\u0100\1\0\1\u0100\1\0\1\u0100\4\0"+
    "\1\376\6\0\1\352\6\0\1\u0100\6\0\13\u0100\1\u0101"+
    "\1\u0102\1\u0100\1\u0103\12\u0100\1\u0104\6\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\13\0\1\352\6\0\1\u0100\6\0\12\u0100"+
    "\1\u0114\1\u0101\1\u0102\1\u0100\1\u0103\7\u0100\1\u0107\2\u0100"+
    "\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100\13\0\1\352"+
    "\6\0\1\u0100\6\0\12\u0100\1\u0110\1\u0101\1\u0102\1\u0100"+
    "\1\u0103\12\u0100\1\u0104\1\u0100\1\u010b\4\u0100\1\0\1\u0100"+
    "\1\0\1\u0100\13\0\1\352\6\0\1\u0100\6\0\13\u0100"+
    "\1\u0101\1\u0102\1\u0100\1\u0108\10\u0100\1\u0110\1\u0100\1\u0104"+
    "\6\u0100\1\0\1\u0100\1\0\1\u0100\13\0\1\352\6\0"+
    "\1\u0100\6\0\13\u0100\1\u0101\1\u0102\1\u0100\1\u0103\7\u0100"+
    "\1\u0110\2\u0100\1\u0104\6\u0100\1\0\1\u0100\1\0\1\u0100";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\4\1\1\11\27\1\1\0\14\1\1\0\42\1\1\11"+
    "\1\1\1\0\6\1\1\0\112\1\1\0\17\1\1\0"+
    "\12\1\1\0\13\1\1\0\6\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\5\0\1\11\52\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 26: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
            }
            // fall through
          case 27: break;
          case 3:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 28: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 29: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 30: break;
          case 6:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 31: break;
          case 7:
            { lexeme=yytext();  return entero;
            }
            // fall through
          case 32: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 33: break;
          case 9:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 34: break;
          case 10:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 35: break;
          case 11:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 36: break;
          case 12:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return opcional2;
            }
            // fall through
          case 37: break;
          case 13:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 38: break;
          case 14:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 39: break;
          case 15:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 40: break;
          case 16:
            { lexeme=yytext(); 
                        return palabras_reservadas;
            }
            // fall through
          case 41: break;
          case 17:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 42: break;
          case 18:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 43: break;
          case 19:
            { lexeme=yytext();  return funcionespecial;
            }
            // fall through
          case 44: break;
          case 20:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 45: break;
          case 21:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 46: break;
          case 22:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 47: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 48: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 49: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
