// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/intermedio.flex



package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class intermedio implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\33"+
    "\1\34\14\33\1\35\10\33\1\36\1\11\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\52\1\54\1\55\1\56\1\57"+
    "\1\60\1\52\1\61\1\62\1\63\1\64\1\65\1\52"+
    "\1\66\1\52\1\67\1\70\1\71\1\72\1\7\6\0"+
    "\1\3\33\0\1\7\22\0\1\73\12\0\1\73\1\0"+
    "\1\74\1\27\1\75\5\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\6\0\1\74\1\0\1\74\4\0"+
    "\1\76\7\0\1\76\3\0\1\76\3\0\1\76\1\0"+
    "\1\76\6\0\1\76\1\0\1\76\303\0\1\42\2\0"+
    "\1\42\365\0\1\75\12\0\1\42\u0163\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\3\6\1\7\1\10"+
    "\1\11\2\7\1\12\1\7\1\13\1\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\15\24\1\25"+
    "\1\4\1\26\1\6\1\0\1\27\1\6\1\0\1\30"+
    "\2\6\1\31\1\14\1\32\1\33\1\6\1\0\2\23"+
    "\1\6\1\23\1\20\1\23\26\24\1\0\1\30\1\6"+
    "\3\0\1\6\1\34\1\6\24\24\1\35\3\24\1\36"+
    "\1\37\1\32\16\24\1\40\2\24\1\41\1\42\1\43"+
    "\3\24\1\0\1\37\2\24\1\44\11\24\1\45\3\24"+
    "\1\46\2\24\1\0\1\24\1\47\1\24\1\50\3\24"+
    "\1\51\10\24\1\0\1\52\15\24\1\1\10\24\1\53"+
    "\1\54\3\24\1\55\5\24\1\56\1\57\1\60\1\24"+
    "\1\61\5\24\1\62\4\24\1\63\1\64\1\65\1\66"+
    "\3\24\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u017a\0\77\0\77\0\77\0\u01b9\0\77\0\u01f8\0\77"+
    "\0\u0237\0\u0276\0\77\0\u017a\0\374\0\u02b5\0\77\0\77"+
    "\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\77\0\u0666"+
    "\0\77\0\u06a5\0\u06e4\0\u017a\0\u0723\0\u0762\0\u017a\0\u07a1"+
    "\0\u07e0\0\u017a\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a"+
    "\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\77\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u091b\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\77\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u10bc\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u0333\0\u1b90\0\u1bcf"+
    "\0\u0333\0\u0333\0\u0333\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u113a"+
    "\0\u1d0a\0\u1d49\0\u0333\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u0333\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\77\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u0333"+
    "\0\u21f6\0\u2235\0\u2274\0\u0333\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u0333\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u2760\0\u279f\0\u27de\0\u17a0\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u0333\0\u0333\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u0333\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\77"+
    "\0\77\0\77\0\u2c0d\0\u0333\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u0333\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u11f7\0\u0333"+
    "\0\77\0\u0333\0\u2e83\0\u2ec2\0\u2f01\0\u11f7\0\u11f7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\24\2\2"+
    "\5\26\1\27\1\30\1\11\1\31\1\10\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\32\1\40\1\41\3\32"+
    "\1\42\1\43\1\44\1\45\1\32\1\46\2\32\1\47"+
    "\1\50\1\51\1\10\1\52\1\2\1\10\101\0\1\4"+
    "\66\0\1\4\11\0\1\53\77\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\1\10\1\54\1\10"+
    "\2\0\5\52\2\0\1\10\1\52\1\10\25\55\1\0"+
    "\1\10\1\0\1\10\1\52\1\0\1\10\1\0\1\56"+
    "\2\0\1\56\1\7\1\57\1\7\2\10\3\56\1\7"+
    "\1\56\1\7\1\56\2\7\1\56\3\7\2\56\5\60"+
    "\2\56\1\7\1\60\1\10\25\61\1\56\1\7\1\56"+
    "\1\7\1\52\1\0\1\10\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\2\10\1\0\3\10\2\0\5\52"+
    "\2\0\1\10\1\52\1\10\25\55\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\5\0\5\10\3\0\1\62"+
    "\1\0\1\10\1\0\2\10\1\0\3\10\2\0\5\52"+
    "\2\0\1\10\1\52\1\10\25\55\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\5\0\5\10\3\0\1\10"+
    "\1\0\1\62\1\0\1\10\1\63\1\0\3\10\2\0"+
    "\5\52\2\0\1\10\1\52\1\10\25\55\1\0\1\10"+
    "\1\0\1\10\1\52\1\0\1\10\14\0\1\64\4\0"+
    "\1\65\62\0\5\66\3\0\1\66\1\0\1\66\1\67"+
    "\1\10\1\22\1\0\3\66\2\0\5\70\2\0\1\66"+
    "\1\31\1\66\25\71\1\0\1\66\1\0\1\66\1\52"+
    "\1\0\1\66\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\73\1\0\3\10\2\0\5\26\2\0"+
    "\1\10\1\31\1\10\25\74\1\0\1\10\1\0\1\10"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\73\1\0\3\10\2\0\5\31"+
    "\2\0\1\10\1\31\1\10\25\75\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\25\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\32\1\100"+
    "\10\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\1\101\10\32\1\102\2\32\1\103\10\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\32"+
    "\1\104\20\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\11\32\1\105\1\32\1\106\3\32\1\107"+
    "\3\32\1\110\1\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\1\111\24\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\13\32\1\112\11\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\32\1\113\7\32\1\114\10\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\16\32\1\115\6\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\116\3\32\1\117\20\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\4\32\1\120\3\32\1\121"+
    "\14\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\1\122\24\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\32\1\123\20\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\2\0\1\4\2\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\2\10\1\0"+
    "\3\10\2\0\5\52\2\0\1\10\1\52\1\10\25\55"+
    "\1\0\1\50\1\0\1\10\1\52\1\0\1\10\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\10"+
    "\1\0\3\10\2\0\5\52\2\0\1\10\1\52\1\10"+
    "\26\0\1\10\1\0\1\10\1\52\1\0\1\10\4\0"+
    "\1\124\77\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\10\1\0\3\10\2\0\5\52\2\0\1\10"+
    "\1\52\1\10\25\55\1\0\1\10\1\0\1\10\1\52"+
    "\1\0\1\10\1\0\1\56\2\0\2\56\1\125\1\56"+
    "\2\0\30\56\1\0\31\56\4\0\1\56\2\0\1\56"+
    "\1\7\1\57\1\7\2\10\3\56\1\7\1\56\1\7"+
    "\1\56\1\126\1\7\1\56\3\7\2\56\5\60\2\56"+
    "\1\7\1\60\1\10\26\56\1\7\1\56\1\7\1\52"+
    "\1\0\1\10\1\0\1\56\2\0\1\56\1\7\1\57"+
    "\1\7\2\10\3\56\1\7\1\56\1\7\1\56\1\126"+
    "\1\7\1\56\3\7\2\56\5\60\2\56\1\7\1\60"+
    "\1\10\25\61\1\56\1\7\1\56\1\7\1\52\1\0"+
    "\1\10\5\0\5\10\3\0\1\10\1\0\1\10\1\67"+
    "\1\10\1\63\1\0\3\10\2\0\5\52\2\0\1\10"+
    "\1\52\1\10\25\55\1\0\1\10\1\0\1\10\1\52"+
    "\1\0\1\10\2\0\1\127\1\0\1\127\5\64\2\0"+
    "\1\130\1\64\1\127\1\64\1\0\1\131\1\64\1\127"+
    "\3\64\1\0\1\127\5\64\2\0\30\64\1\0\1\64"+
    "\1\0\2\64\1\127\1\64\4\0\6\65\2\0\4\65"+
    "\1\0\6\65\1\0\6\65\2\0\30\65\1\0\1\65"+
    "\1\0\4\65\5\0\5\66\3\0\1\66\1\0\1\66"+
    "\1\0\2\10\1\0\3\66\2\0\5\132\2\0\1\66"+
    "\1\52\1\66\25\55\1\0\1\66\1\0\1\66\1\52"+
    "\1\0\1\66\22\0\1\133\61\0\5\66\3\0\1\66"+
    "\1\0\1\66\1\0\1\134\1\73\1\0\3\66\2\0"+
    "\5\70\2\0\1\66\1\31\1\66\25\75\1\0\1\66"+
    "\1\0\1\66\1\52\1\0\1\66\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\73\1\0\3\10"+
    "\2\0\5\31\2\0\1\10\1\31\1\10\25\71\1\0"+
    "\1\10\1\0\1\10\1\52\1\0\1\10\21\0\1\72"+
    "\62\0\5\10\3\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\73\1\0\3\10\2\0\5\31\2\0\1\10\1\31"+
    "\1\10\25\71\1\0\1\10\1\0\1\10\1\52\1\0"+
    "\1\10\22\0\1\75\6\0\5\74\3\0\1\75\1\0"+
    "\25\74\31\0\1\75\6\0\5\75\3\0\1\75\1\0"+
    "\25\75\14\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\25\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\25\135\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\14\32\1\136\10\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\3\32"+
    "\1\137\21\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\1\140\24\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\13\32\1\141\3\32\1\142"+
    "\5\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\17\32\1\143\2\32\1\144\2\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\10\32\1\145"+
    "\14\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\20\32\1\146\4\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\2\32\1\147\22\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\20\32"+
    "\1\150\4\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\11\32\1\151\13\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\17\32\1\152\5\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\32\1\153\20\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\6\32\1\154\16\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\32\1\155"+
    "\10\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\10\32\1\156\14\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\157\24\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\32\1\160"+
    "\11\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\4\0\1\161\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\32\1\162\11\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\13\32\1\163\11\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\16\32\1\164\6\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\4\0\1\165\73\0\1\56\2\0\2\56"+
    "\1\125\1\56\2\0\7\56\1\126\20\56\1\0\31\56"+
    "\5\0\1\127\1\0\6\127\2\0\1\130\3\127\1\0"+
    "\6\127\1\0\6\127\2\0\30\127\1\0\1\127\1\0"+
    "\4\127\2\0\1\127\1\0\6\127\2\0\1\130\3\127"+
    "\1\0\1\166\5\127\1\0\6\127\2\0\30\127\1\0"+
    "\1\127\1\0\4\127\2\0\1\127\1\0\6\64\2\0"+
    "\1\167\3\64\1\0\1\64\1\127\2\64\2\127\1\0"+
    "\1\64\5\127\2\0\2\64\26\127\1\0\1\64\1\0"+
    "\2\127\1\64\1\127\5\0\5\66\3\0\1\66\1\0"+
    "\1\66\1\0\1\134\1\10\1\0\3\66\2\0\5\132"+
    "\2\0\1\66\1\52\1\66\26\0\1\66\1\0\1\66"+
    "\1\52\1\0\1\66\5\0\5\134\3\0\1\134\1\0"+
    "\1\134\1\0\2\134\1\0\3\134\11\0\1\134\1\0"+
    "\1\134\26\0\1\134\1\0\1\134\2\0\1\134\22\0"+
    "\1\135\6\0\5\135\3\0\1\135\1\0\25\135\4\0"+
    "\1\135\1\0\1\135\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\11\32\1\170\13\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\32"+
    "\1\171\20\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\17\32\1\172\5\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\17\32\1\173\5\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\32\1\174\20\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\20\32\1\175\4\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\32\1\176"+
    "\10\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\12\32\1\177\12\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\4\32\1\200\7\32\1\201"+
    "\10\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\16\32\1\202\6\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\10\32\1\203\14\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\17\32"+
    "\1\204\5\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\20\32\1\205\4\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\16\32\1\206\6\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\207\24\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\15\32\1\210\7\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\24\32\1\211\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\11\32"+
    "\1\212\13\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\14\32\1\213\10\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\14\32\1\214\10\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\6\32\1\215\16\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\3\32\1\216\21\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\4\0\1\217\74\0"+
    "\1\127\1\0\1\127\5\64\2\0\1\130\1\64\1\127"+
    "\1\64\1\0\1\220\1\64\1\127\3\64\1\0\1\127"+
    "\5\64\2\0\30\64\1\0\1\64\1\0\2\64\1\127"+
    "\1\64\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\4\32\1\221\20\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\13\32\1\222\11\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\32\1\223\20\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\20\32\1\224\4\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\32\1\225"+
    "\11\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\16\32\1\226\6\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\11\32\1\227\13\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\10\32"+
    "\1\230\14\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\16\32\1\231\6\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\13\32\1\232\11\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\10\32\1\233\14\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\32\1\234\20\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\32\1\235"+
    "\10\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\1\236\24\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\16\32\1\237\6\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\10\32\1\240"+
    "\14\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\4\0\1\241\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\25\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\32\1\242\20\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\1\243\24\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\4\0"+
    "\1\244\77\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\1\245\24\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\246\24\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\16\32\1\247"+
    "\6\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\14\32\1\250\10\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\21\32\1\251\3\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\22\32"+
    "\1\252\2\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\32\1\253\11\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\14\32\1\254\10\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\2\32\1\255\22\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\1\32\1\256\23\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\32\1\257"+
    "\11\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\13\32\1\260\11\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\10\32\1\261\14\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\32"+
    "\1\262\20\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\32\1\263\11\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\3\32\1\264\21\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\4\0"+
    "\1\265\77\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\32\1\266\11\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\1\267\4\77\2\0\1\10\1\77\1\10\25\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\21\32"+
    "\1\270\3\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\2\32\1\271\22\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\4\32\1\272\20\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\273\24\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\4\32\1\274\20\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\10\32\1\275\14\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\3\32\1\276\21\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\2\32\1\277\22\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\20\32\1\300"+
    "\4\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\3\32\1\301\21\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\20\32\1\302\4\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\32"+
    "\1\303\20\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\4\0\1\304\77\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\1\77"+
    "\1\305\1\77\1\306\1\307\2\0\1\10\1\77\1\10"+
    "\25\135\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\2\32\1\310\22\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\20\32\1\311\4\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\16\32"+
    "\1\312\6\32\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\16\32\1\313\6\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\17\32\1\314\5\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\16\32\1\315\6\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\32\1\316\20\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\10\32\1\317"+
    "\14\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\12\32\1\320\12\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\321\24\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\4\32\1\322"+
    "\20\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\16\32\1\204\6\32\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\14\135\1\323\10\135\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\13\135"+
    "\1\324\11\135\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\4\135\1\325\20\135\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\20\32\1\326\4\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\14\32\1\327\10\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\4\0\1\330\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\25\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\4\0\1\331\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\25\32\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\4\0\1\332"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\25\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\1\333\24\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\14\32\1\334\10\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\3\32\1\335"+
    "\21\32\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\22\0\1\135\6\0\5\135\3\0\1\135\1\0\11\135"+
    "\1\336\13\135\4\0\1\135\1\0\1\135\22\0\1\135"+
    "\6\0\5\135\3\0\1\135\1\0\20\135\1\337\4\135"+
    "\4\0\1\135\1\0\1\135\22\0\1\135\6\0\5\135"+
    "\3\0\1\135\1\0\1\340\24\135\4\0\1\135\1\0"+
    "\1\135\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\14\32\1\341\10\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\16\32\1\342\6\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\16\32\1\343\6\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\32\1\344\20\32\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\22\0\1\135\6\0"+
    "\5\135\3\0\1\135\1\0\4\135\1\345\20\135\4\0"+
    "\1\135\1\0\1\135\22\0\1\135\6\0\5\135\3\0"+
    "\1\135\1\0\4\135\1\346\20\135\4\0\1\135\1\0"+
    "\1\135\22\0\1\135\6\0\5\135\3\0\1\135\1\0"+
    "\11\135\1\347\13\135\4\0\1\135\1\0\1\135\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\16\32\1\350\6\32\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\4\0\1\351\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\25\32\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\17\32\1\352\5\32"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\22\0"+
    "\1\135\6\0\5\135\3\0\1\135\1\0\1\353\24\135"+
    "\4\0\1\135\1\0\1\135\22\0\1\135\6\0\5\135"+
    "\3\0\1\135\1\0\16\135\1\354\6\135\4\0\1\135"+
    "\1\0\1\135\22\0\1\135\6\0\5\135\3\0\1\135"+
    "\1\0\13\135\1\355\11\135\4\0\1\135\1\0\1\135"+
    "\22\0\1\135\6\0\5\135\3\0\1\135\1\0\14\135"+
    "\1\356\10\135\4\0\1\135\1\0\1\135\22\0\1\135"+
    "\6\0\5\135\3\0\1\135\1\0\14\135\1\357\10\135"+
    "\4\0\1\135\1\0\1\135";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\6\1\3\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\16\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\10\1\1\0\34\1\1\0"+
    "\1\11\1\1\3\0\27\1\1\11\35\1\1\0\21\1"+
    "\1\11\2\1\1\0\20\1\1\0\42\1\3\11\16\1"+
    "\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  intermedio(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 57: break;
          case 2:
            { System.out.println("Error verificar . "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 58: break;
          case 3:
            { return new Symbol(sym.salto,yytext());
            }
            // fall through
          case 59: break;
          case 4:
            { return new Symbol(sym.newline,yytext());
            }
            // fall through
          case 60: break;
          case 5:
            { return new Symbol(sym.libre,yytext());
            }
            // fall through
          case 61: break;
          case 6:
            { lexeme=yytext();
                        return new Symbol(sym.error);
            }
            // fall through
          case 62: break;
          case 7:
            { lexeme=yytext(); 
                          return new Symbol(sym.opnum,yytext());
            }
            // fall through
          case 63: break;
          case 8:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 64: break;
          case 9:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 65: break;
          case 10:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 66: break;
          case 11:
            { lexeme=yytext(); 
                        return new Symbol(sym.pun,yytext());
            }
            // fall through
          case 67: break;
          case 12:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 68: break;
          case 13:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 69: break;
          case 14:
            { lexeme=yytext(); 
                          return new Symbol(sym.condicionales,yytext());
            }
            // fall through
          case 70: break;
          case 15:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 71: break;
          case 16:
            { lexeme=yytext(); return new Symbol(sym.IDmayu,yytext());
            }
            // fall through
          case 72: break;
          case 17:
            { return new Symbol(sym.corchetea,yytext());
            }
            // fall through
          case 73: break;
          case 18:
            { return new Symbol(sym.corcheteb,yytext());
            }
            // fall through
          case 74: break;
          case 19:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 75: break;
          case 20:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 76: break;
          case 21:
            { return new Symbol(sym.llava,yytext());
            }
            // fall through
          case 77: break;
          case 22:
            { return new Symbol(sym.llavb,yytext());
            }
            // fall through
          case 78: break;
          case 23:
            { lexeme=yytext(); 
                          return new Symbol(sym.opcadnum,yytext());
            }
            // fall through
          case 79: break;
          case 24:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 80: break;
          case 25:
            { lexeme=yytext(); 
                          return new Symbol(sym.aumento,yytext());
            }
            // fall through
          case 81: break;
          case 26:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 82: break;
          case 27:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 83: break;
          case 28:
            { lexeme=yytext();  return new Symbol(sym.real,Double.parseDouble(yytext()));
            }
            // fall through
          case 84: break;
          case 29:
            { lexeme=yytext(); 
                         return new Symbol(sym.ifs,yytext());
            }
            // fall through
          case 85: break;
          case 30:
            { return new Symbol(sym.tabu,yytext());
            }
            // fall through
          case 86: break;
          case 31:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 87: break;
          case 32:
            { lexeme=yytext(); 
                        return new Symbol(sym.salida,yytext());
            }
            // fall through
          case 88: break;
          case 33:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca8,yytext());
            }
            // fall through
          case 89: break;
          case 34:
            { lexeme=yytext(); return new Symbol(sym.tipo_real,yytext());
            }
            // fall through
          case 90: break;
          case 35:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca4,yytext());
            }
            // fall through
          case 91: break;
          case 36:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificadorC,yytext());
            }
            // fall through
          case 92: break;
          case 37:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 93: break;
          case 38:
            { lexeme=yytext(); 
                         return new Symbol(sym.els,yytext());
            }
            // fall through
          case 94: break;
          case 39:
            { lexeme=yytext(); return new Symbol(sym.tipo_cadena,yytext());
            }
            // fall through
          case 95: break;
          case 40:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca5,yytext());
            }
            // fall through
          case 96: break;
          case 41:
            { lexeme=yytext(); return new Symbol(sym.tipo_ent,yytext());
            }
            // fall through
          case 97: break;
          case 42:
            { lexeme=yytext(); return new Symbol(sym.tipo_bol,yytext());
            }
            // fall through
          case 98: break;
          case 43:
            { lexeme=yytext(); 
                        return new Symbol(sym.entrada,yytext());
            }
            // fall through
          case 99: break;
          case 44:
            { lexeme = yytext();
                           return new Symbol(sym.herencia,yytext());
            }
            // fall through
          case 100: break;
          case 45:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca6,yytext());
            }
            // fall through
          case 101: break;
          case 46:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 102: break;
          case 47:
            { lexeme=yytext();                return new Symbol(sym.borrar,yytext());
            }
            // fall through
          case 103: break;
          case 48:
            { lexeme=yytext(); 
                         return new Symbol(sym.entoncess,yytext());
            }
            // fall through
          case 104: break;
          case 49:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca7,yytext());
            }
            // fall through
          case 105: break;
          case 50:
            { lexeme=yytext();       return new Symbol(sym.destruir,yytext());
            }
            // fall through
          case 106: break;
          case 51:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca2,yytext());
            }
            // fall through
          case 107: break;
          case 52:
            { lexeme=yytext(); return new Symbol(sym.constru,yytext());
            }
            // fall through
          case 108: break;
          case 53:
            { lexeme=yytext(); 
                         return new Symbol(sym.insta,yytext());
            }
            // fall through
          case 109: break;
          case 54:
            { lexeme = yytext();
                           return new Symbol(sym.propiedades,yytext());
            }
            // fall through
          case 110: break;
          case 55:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca,yytext());
            }
            // fall through
          case 111: break;
          case 56:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca3,yytext());
            }
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
