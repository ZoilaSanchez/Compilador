// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/intermedio.flex



package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import java_cup.runtime.Symbol; 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class intermedio implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\7\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\33"+
    "\1\34\14\33\1\35\10\33\1\36\1\11\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\52\1\54\1\55\1\56\1\57"+
    "\2\52\1\60\1\61\1\62\1\63\1\64\3\52\1\65"+
    "\1\66\1\67\1\70\1\7\6\0\1\3\33\0\1\7"+
    "\22\0\1\71\12\0\1\71\1\0\1\72\1\27\1\73"+
    "\5\0\1\72\3\0\1\72\3\0\1\72\1\0\1\72"+
    "\6\0\1\72\1\0\1\72\4\0\1\74\7\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\6\0\1\74"+
    "\1\0\1\74\303\0\1\42\2\0\1\42\365\0\1\73"+
    "\12\0\1\42\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\3\6\1\7\1\10"+
    "\1\11\2\7\1\12\1\7\1\13\1\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\14\25"+
    "\1\26\1\4\1\27\1\6\1\0\1\30\1\6\1\0"+
    "\1\31\2\6\1\32\1\14\1\33\1\34\1\6\1\0"+
    "\2\24\1\6\1\24\1\21\1\24\24\25\1\0\1\31"+
    "\1\6\3\0\1\6\1\35\1\6\22\25\1\36\3\25"+
    "\1\37\1\40\1\33\15\25\1\41\1\25\1\42\1\43"+
    "\1\44\3\25\1\0\1\40\2\25\1\45\10\25\1\46"+
    "\2\25\1\47\2\25\1\0\1\25\1\50\1\25\1\51"+
    "\3\25\1\52\6\25\1\0\1\53\13\25\1\1\10\25"+
    "\1\54\2\25\1\55\5\25\1\56\1\57\1\60\1\25"+
    "\1\61\4\25\1\62\3\25\1\63\1\64\1\65\3\25"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\364\0\u0131\0\u016e"+
    "\0\u016e\0\75\0\75\0\75\0\u01ab\0\75\0\u01e8\0\75"+
    "\0\u0225\0\u0262\0\75\0\u016e\0\364\0\u016e\0\u029f\0\75"+
    "\0\75\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a"+
    "\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\75\0\u05f5"+
    "\0\75\0\u0632\0\u066f\0\u016e\0\u06ac\0\u06e9\0\u016e\0\u0726"+
    "\0\u0763\0\u016e\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\75\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u0894\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\75\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u0f7d\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905"+
    "\0\u0319\0\u1942\0\u0319\0\u0319\0\u0319\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u0ff7\0\u1a73\0\u1ab0\0\u0319\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u0319\0\u1cd5\0\u1d12"+
    "\0\75\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u0319"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\u0319\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u0319\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u15af"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569"+
    "\0\u0319\0\u25a6\0\u25e3\0\u0319\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\75\0\75\0\75\0\u2751\0\u0319\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\u0319\0\u2882\0\u28bf\0\u28fc\0\u10ae\0\u0319"+
    "\0\75\0\u2939\0\u2976\0\u29b3\0\u10ae\0\u10ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\10\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\2"+
    "\5\27\1\30\1\31\1\11\1\32\1\10\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\33\1\41\1\42\3\33"+
    "\1\43\1\44\1\45\1\33\1\46\1\33\1\47\1\50"+
    "\1\51\1\10\1\52\1\2\1\10\77\0\1\4\64\0"+
    "\1\4\11\0\1\53\75\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\0\1\10\1\54\1\10\2\0"+
    "\5\52\2\0\1\10\1\52\1\10\23\55\1\0\1\10"+
    "\1\0\1\10\1\52\1\0\1\10\1\0\1\56\2\0"+
    "\1\56\1\7\1\57\1\7\2\10\3\56\1\7\1\56"+
    "\1\7\1\56\2\7\1\56\3\7\2\56\5\60\2\56"+
    "\1\7\1\60\1\10\23\61\1\56\1\7\1\56\1\7"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\2\10\1\0\3\10\2\0\5\52\2\0"+
    "\1\10\1\52\1\10\23\55\1\0\1\10\1\0\1\10"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\62\1\0"+
    "\1\10\1\0\2\10\1\0\3\10\2\0\5\52\2\0"+
    "\1\10\1\52\1\10\23\55\1\0\1\10\1\0\1\10"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\62\1\0\1\10\1\63\1\0\3\10\2\0\5\52"+
    "\2\0\1\10\1\52\1\10\23\55\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\14\0\1\64\4\0\1\65"+
    "\60\0\5\66\3\0\1\66\1\0\1\66\1\67\1\10"+
    "\1\22\1\0\3\66\2\0\5\70\2\0\1\66\1\32"+
    "\1\66\23\71\1\0\1\66\1\0\1\66\1\52\1\0"+
    "\1\66\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\73\1\0\3\10\2\0\5\27\2\0\1\10"+
    "\1\32\1\10\23\74\1\0\1\10\1\0\1\10\1\52"+
    "\1\0\1\10\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\73\1\0\3\10\2\0\5\32\2\0"+
    "\1\10\1\32\1\10\23\75\1\0\1\10\1\0\1\10"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\23\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\14\33\1\100\6\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\101\10\33\1\102\2\33\1\103\6\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\4\33\1\104"+
    "\16\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\11\33\1\105\1\33\1\106\2\33\1\107\4\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\110\22\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\33\1\111\7\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\4\33\1\112\7\33"+
    "\1\113\6\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\1\114\3\33\1\115\16\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\4\33\1\116"+
    "\3\33\1\117\12\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\1\120\22\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\4\33\1\121\16\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\2\0"+
    "\1\4\2\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\3\10\2\0\5\52\2\0\1\10\1\52"+
    "\1\10\23\55\1\0\1\50\1\0\1\10\1\52\1\0"+
    "\1\10\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\10\1\0\3\10\2\0\5\52\2\0\1\10"+
    "\1\52\1\10\24\0\1\10\1\0\1\10\1\52\1\0"+
    "\1\10\4\0\1\122\75\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\10\1\0\3\10\2\0\5\52"+
    "\2\0\1\10\1\52\1\10\23\55\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\1\0\1\56\2\0\2\56"+
    "\1\123\1\56\2\0\30\56\1\0\27\56\4\0\1\56"+
    "\2\0\1\56\1\7\1\57\1\7\2\10\3\56\1\7"+
    "\1\56\1\7\1\56\1\124\1\7\1\56\3\7\2\56"+
    "\5\60\2\56\1\7\1\60\1\10\24\56\1\7\1\56"+
    "\1\7\1\52\1\0\1\10\1\0\1\56\2\0\1\56"+
    "\1\7\1\57\1\7\2\10\3\56\1\7\1\56\1\7"+
    "\1\56\1\124\1\7\1\56\3\7\2\56\5\60\2\56"+
    "\1\7\1\60\1\10\23\61\1\56\1\7\1\56\1\7"+
    "\1\52\1\0\1\10\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\67\1\10\1\63\1\0\3\10\2\0\5\52"+
    "\2\0\1\10\1\52\1\10\23\55\1\0\1\10\1\0"+
    "\1\10\1\52\1\0\1\10\2\0\1\125\1\0\1\125"+
    "\5\64\2\0\1\126\1\64\1\125\1\64\1\0\1\127"+
    "\1\64\1\125\3\64\1\0\1\125\5\64\2\0\26\64"+
    "\1\0\1\64\1\0\2\64\1\125\1\64\4\0\6\65"+
    "\2\0\4\65\1\0\6\65\1\0\6\65\2\0\26\65"+
    "\1\0\1\65\1\0\4\65\5\0\5\66\3\0\1\66"+
    "\1\0\1\66\1\0\2\10\1\0\3\66\2\0\5\130"+
    "\2\0\1\66\1\52\1\66\23\55\1\0\1\66\1\0"+
    "\1\66\1\52\1\0\1\66\22\0\1\131\57\0\5\66"+
    "\3\0\1\66\1\0\1\66\1\0\1\132\1\73\1\0"+
    "\3\66\2\0\5\70\2\0\1\66\1\32\1\66\23\75"+
    "\1\0\1\66\1\0\1\66\1\52\1\0\1\66\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\73"+
    "\1\0\3\10\2\0\5\32\2\0\1\10\1\32\1\10"+
    "\23\71\1\0\1\10\1\0\1\10\1\52\1\0\1\10"+
    "\21\0\1\72\60\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\73\1\0\3\10\2\0\5\32\2\0"+
    "\1\10\1\32\1\10\23\71\1\0\1\10\1\0\1\10"+
    "\1\52\1\0\1\10\22\0\1\75\6\0\5\74\3\0"+
    "\1\75\1\0\23\74\31\0\1\75\6\0\5\75\3\0"+
    "\1\75\1\0\23\75\14\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\23\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\23\133\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\33\1\134"+
    "\6\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\3\33\1\135\17\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\136\22\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\33\1\137"+
    "\2\33\1\140\4\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\16\33\1\141\2\33\1\142\1\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\10\33\1\143\12\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\17\33\1\144\3\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\2\33\1\145"+
    "\20\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\11\33\1\146\11\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\16\33\1\147\4\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\33"+
    "\1\150\16\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\6\33\1\151\14\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\10\33\1\152\12\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\153\22\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\33\1\154\7\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\4\0\1\155\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\33\1\156"+
    "\7\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\13\33\1\157\7\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\15\33\1\160\5\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\4\0\1\161"+
    "\71\0\1\56\2\0\2\56\1\123\1\56\2\0\7\56"+
    "\1\124\20\56\1\0\27\56\5\0\1\125\1\0\6\125"+
    "\2\0\1\126\3\125\1\0\6\125\1\0\6\125\2\0"+
    "\26\125\1\0\1\125\1\0\4\125\2\0\1\125\1\0"+
    "\6\125\2\0\1\126\3\125\1\0\1\162\5\125\1\0"+
    "\6\125\2\0\26\125\1\0\1\125\1\0\4\125\2\0"+
    "\1\125\1\0\6\64\2\0\1\163\3\64\1\0\1\64"+
    "\1\125\2\64\2\125\1\0\1\64\5\125\2\0\2\64"+
    "\24\125\1\0\1\64\1\0\2\125\1\64\1\125\5\0"+
    "\5\66\3\0\1\66\1\0\1\66\1\0\1\132\1\10"+
    "\1\0\3\66\2\0\5\130\2\0\1\66\1\52\1\66"+
    "\24\0\1\66\1\0\1\66\1\52\1\0\1\66\5\0"+
    "\5\132\3\0\1\132\1\0\1\132\1\0\2\132\1\0"+
    "\3\132\11\0\1\132\1\0\1\132\24\0\1\132\1\0"+
    "\1\132\2\0\1\132\22\0\1\133\6\0\5\133\3\0"+
    "\1\133\1\0\23\133\4\0\1\133\1\0\1\133\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\11\33\1\164\11\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\33\1\165\16\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\16\33\1\166"+
    "\4\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\16\33\1\167\4\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\4\33\1\170\16\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\17\33"+
    "\1\171\3\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\14\33\1\172\6\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\12\33\1\173\10\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\33\1\174\7\33\1\175\6\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\15\33\1\176\5\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\16\33\1\177\4\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\17\33\1\200\3\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\15\33\1\201"+
    "\5\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\1\202\22\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\22\33\1\203\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\11\33\1\204\11\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\14\33\1\205\6\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\14\33\1\206\6\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\6\33\1\207"+
    "\14\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\3\33\1\210\17\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\4\0\1\211\72\0\1\125\1\0"+
    "\1\125\5\64\2\0\1\126\1\64\1\125\1\64\1\0"+
    "\1\212\1\64\1\125\3\64\1\0\1\125\5\64\2\0"+
    "\26\64\1\0\1\64\1\0\2\64\1\125\1\64\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\4\33\1\213\16\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\13\33\1\214\7\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\4\33\1\215"+
    "\16\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\17\33\1\216\3\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\13\33\1\217\7\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\15\33"+
    "\1\220\5\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\11\33\1\221\11\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\10\33\1\222\12\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\15\33\1\223\5\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\13\33\1\224\7\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\10\33\1\225"+
    "\12\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\14\33\1\226\6\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\227\22\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\15\33\1\230"+
    "\5\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\4\0\1\231\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\23\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\33\1\232\16\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\1\233\22\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\4\0"+
    "\1\234\75\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\1\235\22\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\1\236\22\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\15\33\1\237"+
    "\5\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\14\33\1\240\6\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\20\33\1\241\2\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\21\33"+
    "\1\242\1\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\13\33\1\243\7\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\14\33\1\244\6\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\2\33\1\245\20\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\1\33\1\246\21\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\33\1\247"+
    "\7\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\10\33\1\250\12\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\13\33\1\251\7\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\3\33"+
    "\1\252\17\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\4\0\1\253\75\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\13\33\1\254\7\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\1\255\4\77\2\0\1\10\1\77\1\10"+
    "\23\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\20\33\1\256\2\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\2\33\1\257\20\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\4\33"+
    "\1\260\16\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\1\261\22\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\4\33\1\262\16\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\10\33"+
    "\1\263\12\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\2\33\1\264\20\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\17\33\1\265\3\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\17\33\1\266\3\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\4\33\1\267\16\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\4\0\1\270\75\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\1\77\1\271\1\77\1\272\1\273"+
    "\2\0\1\10\1\77\1\10\23\133\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\2\33\1\274\20\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\17\33\1\275\3\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\15\33\1\276\5\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\15\33\1\277"+
    "\5\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\16\33\1\300\4\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\15\33\1\301\5\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\10\33"+
    "\1\302\12\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\12\33\1\303\10\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\5\0\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\4\33\1\304\16\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\15\33\1\177\5\33\1\0\1\10\1\0\1\10\1\77"+
    "\1\0\1\76\5\0\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\14\133\1\305\6\133\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\13\133\1\306"+
    "\7\133\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\4\133\1\307\16\133\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\17\33\1\310\3\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\5\0\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\14\33"+
    "\1\311\6\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\4\0\1\312\5\10\3\0\1\10\1\0\1\10"+
    "\1\0\1\72\1\76\1\0\3\10\2\0\5\77\2\0"+
    "\1\10\1\77\1\10\23\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\4\0\1\313\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\23\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\4\0\1\314\5\10"+
    "\3\0\1\10\1\0\1\10\1\0\1\72\1\76\1\0"+
    "\3\10\2\0\5\77\2\0\1\10\1\77\1\10\23\33"+
    "\1\0\1\10\1\0\1\10\1\77\1\0\1\76\5\0"+
    "\5\10\3\0\1\10\1\0\1\10\1\0\1\72\1\76"+
    "\1\0\3\10\2\0\5\77\2\0\1\10\1\77\1\10"+
    "\1\315\22\33\1\0\1\10\1\0\1\10\1\77\1\0"+
    "\1\76\5\0\5\10\3\0\1\10\1\0\1\10\1\0"+
    "\1\72\1\76\1\0\3\10\2\0\5\77\2\0\1\10"+
    "\1\77\1\10\14\33\1\316\6\33\1\0\1\10\1\0"+
    "\1\10\1\77\1\0\1\76\22\0\1\133\6\0\5\133"+
    "\3\0\1\133\1\0\11\133\1\317\11\133\4\0\1\133"+
    "\1\0\1\133\22\0\1\133\6\0\5\133\3\0\1\133"+
    "\1\0\17\133\1\320\3\133\4\0\1\133\1\0\1\133"+
    "\22\0\1\133\6\0\5\133\3\0\1\133\1\0\1\321"+
    "\22\133\4\0\1\133\1\0\1\133\5\0\5\10\3\0"+
    "\1\10\1\0\1\10\1\0\1\72\1\76\1\0\3\10"+
    "\2\0\5\77\2\0\1\10\1\77\1\10\14\33\1\322"+
    "\6\33\1\0\1\10\1\0\1\10\1\77\1\0\1\76"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\15\33\1\323\5\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\5\0\5\10\3\0\1\10\1\0"+
    "\1\10\1\0\1\72\1\76\1\0\3\10\2\0\5\77"+
    "\2\0\1\10\1\77\1\10\15\33\1\324\5\33\1\0"+
    "\1\10\1\0\1\10\1\77\1\0\1\76\22\0\1\133"+
    "\6\0\5\133\3\0\1\133\1\0\4\133\1\325\16\133"+
    "\4\0\1\133\1\0\1\133\22\0\1\133\6\0\5\133"+
    "\3\0\1\133\1\0\4\133\1\326\16\133\4\0\1\133"+
    "\1\0\1\133\22\0\1\133\6\0\5\133\3\0\1\133"+
    "\1\0\11\133\1\327\11\133\4\0\1\133\1\0\1\133"+
    "\5\0\5\10\3\0\1\10\1\0\1\10\1\0\1\72"+
    "\1\76\1\0\3\10\2\0\5\77\2\0\1\10\1\77"+
    "\1\10\15\33\1\330\5\33\1\0\1\10\1\0\1\10"+
    "\1\77\1\0\1\76\4\0\1\331\5\10\3\0\1\10"+
    "\1\0\1\10\1\0\1\72\1\76\1\0\3\10\2\0"+
    "\5\77\2\0\1\10\1\77\1\10\23\33\1\0\1\10"+
    "\1\0\1\10\1\77\1\0\1\76\22\0\1\133\6\0"+
    "\5\133\3\0\1\133\1\0\1\332\22\133\4\0\1\133"+
    "\1\0\1\133\22\0\1\133\6\0\5\133\3\0\1\133"+
    "\1\0\15\133\1\333\5\133\4\0\1\133\1\0\1\133"+
    "\22\0\1\133\6\0\5\133\3\0\1\133\1\0\13\133"+
    "\1\334\7\133\4\0\1\133\1\0\1\133\22\0\1\133"+
    "\6\0\5\133\3\0\1\133\1\0\14\133\1\335\6\133"+
    "\4\0\1\133\1\0\1\133\22\0\1\133\6\0\5\133"+
    "\3\0\1\133\1\0\14\133\1\336\6\133\4\0\1\133"+
    "\1\0\1\133";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\6\1\3\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\4\1\2\11\15\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\10\1\1\0\32\1\1\0"+
    "\1\11\1\1\3\0\25\1\1\11\33\1\1\0\17\1"+
    "\1\11\2\1\1\0\16\1\1\0\36\1\3\11\14\1"+
    "\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  intermedio(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 56: break;
          case 2:
            { System.out.println("Error verificar . "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 57: break;
          case 3:
            { return new Symbol(sym.salto,yytext());
            }
            // fall through
          case 58: break;
          case 4:
            { return new Symbol(sym.newline,yytext());
            }
            // fall through
          case 59: break;
          case 5:
            { return new Symbol(sym.libre,yytext());
            }
            // fall through
          case 60: break;
          case 6:
            { lexeme=yytext();
                        return new Symbol(sym.error);
            }
            // fall through
          case 61: break;
          case 7:
            { lexeme=yytext(); 
                          return new Symbol(sym.opnum,yytext());
            }
            // fall through
          case 62: break;
          case 8:
            { return new Symbol(sym.para,yytext());
            }
            // fall through
          case 63: break;
          case 9:
            { return new Symbol(sym.parb,yytext());
            }
            // fall through
          case 64: break;
          case 10:
            { lexeme=yytext(); 
                        return new Symbol(sym.coma,yytext());
            }
            // fall through
          case 65: break;
          case 11:
            { lexeme=yytext(); 
                        return new Symbol(sym.pun,yytext());
            }
            // fall through
          case 66: break;
          case 12:
            { lexeme=yytext();   return new Symbol(sym.entero,Integer.parseInt(yytext()));
            }
            // fall through
          case 67: break;
          case 13:
            { lexeme=yytext(); 
                         return  new Symbol(sym.fin_de_linea,yytext());
            }
            // fall through
          case 68: break;
          case 14:
            { lexeme = yytext();
                           return new Symbol(sym.signoMenor,yytext());
            }
            // fall through
          case 69: break;
          case 15:
            { lexeme=yytext(); 
                        return new Symbol(sym.asignacion,yytext());
            }
            // fall through
          case 70: break;
          case 16:
            { lexeme=yytext(); 
                          return new Symbol(sym.condicionales,yytext());
            }
            // fall through
          case 71: break;
          case 17:
            { lexeme=yytext(); return new Symbol(sym.IDmayu,yytext());
            }
            // fall through
          case 72: break;
          case 18:
            { return new Symbol(sym.corchetea,yytext());
            }
            // fall through
          case 73: break;
          case 19:
            { return new Symbol(sym.corcheteb,yytext());
            }
            // fall through
          case 74: break;
          case 20:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 75: break;
          case 21:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificador,yytext());
            }
            // fall through
          case 76: break;
          case 22:
            { return new Symbol(sym.llava,yytext());
            }
            // fall through
          case 77: break;
          case 23:
            { return new Symbol(sym.llavb,yytext());
            }
            // fall through
          case 78: break;
          case 24:
            { lexeme=yytext(); 
                          return new Symbol(sym.opcadnum,yytext());
            }
            // fall through
          case 79: break;
          case 25:
            { lexeme=yytext();  return new Symbol(sym.cadena,yytext());
            }
            // fall through
          case 80: break;
          case 26:
            { lexeme=yytext(); 
                          return new Symbol(sym.aumento,yytext());
            }
            // fall through
          case 81: break;
          case 27:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return new Symbol(sym.error);
            }
            // fall through
          case 82: break;
          case 28:
            { lexeme=yytext();  return new Symbol(sym.comentario,yytext());
            }
            // fall through
          case 83: break;
          case 29:
            { lexeme=yytext();  return new Symbol(sym.real,Double.parseDouble(yytext()));
            }
            // fall through
          case 84: break;
          case 30:
            { lexeme=yytext(); 
                         return new Symbol(sym.ifs,yytext());
            }
            // fall through
          case 85: break;
          case 31:
            { return new Symbol(sym.tabu,yytext());
            }
            // fall through
          case 86: break;
          case 32:
            { lexeme=yytext();  return new Symbol(sym.comentarios,yytext());
            }
            // fall through
          case 87: break;
          case 33:
            { lexeme=yytext(); 
                        return new Symbol(sym.salida,yytext());
            }
            // fall through
          case 88: break;
          case 34:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca8,yytext());
            }
            // fall through
          case 89: break;
          case 35:
            { lexeme=yytext(); return new Symbol(sym.tipo_real,yytext());
            }
            // fall through
          case 90: break;
          case 36:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca4,yytext());
            }
            // fall through
          case 91: break;
          case 37:
            { lexeme=yytext(); 
                         return new Symbol(sym.identificadorC,yytext());
            }
            // fall through
          case 92: break;
          case 38:
            { lexeme=yytext();  
                        return new Symbol(sym.boleano,yytext());
            }
            // fall through
          case 93: break;
          case 39:
            { lexeme=yytext(); 
                         return new Symbol(sym.els,yytext());
            }
            // fall through
          case 94: break;
          case 40:
            { lexeme=yytext(); return new Symbol(sym.tipo_cadena,yytext());
            }
            // fall through
          case 95: break;
          case 41:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca5,yytext());
            }
            // fall through
          case 96: break;
          case 42:
            { lexeme=yytext(); return new Symbol(sym.tipo_ent,yytext());
            }
            // fall through
          case 97: break;
          case 43:
            { lexeme=yytext(); return new Symbol(sym.tipo_bol,yytext());
            }
            // fall through
          case 98: break;
          case 44:
            { lexeme=yytext(); 
                        return new Symbol(sym.entrada,yytext());
            }
            // fall through
          case 99: break;
          case 45:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca6,yytext());
            }
            // fall through
          case 100: break;
          case 46:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return new Symbol(sym.retornar,yytext());
            }
            // fall through
          case 101: break;
          case 47:
            { lexeme=yytext();                return new Symbol(sym.borrar,yytext());
            }
            // fall through
          case 102: break;
          case 48:
            { lexeme=yytext(); 
                         return new Symbol(sym.entoncess,yytext());
            }
            // fall through
          case 103: break;
          case 49:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca7,yytext());
            }
            // fall through
          case 104: break;
          case 50:
            { lexeme=yytext();       return new Symbol(sym.destruir,yytext());
            }
            // fall through
          case 105: break;
          case 51:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca2,yytext());
            }
            // fall through
          case 106: break;
          case 52:
            { lexeme=yytext(); return new Symbol(sym.constru,yytext());
            }
            // fall through
          case 107: break;
          case 53:
            { lexeme=yytext(); 
                         return new Symbol(sym.insta,yytext());
            }
            // fall through
          case 108: break;
          case 54:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca,yytext());
            }
            // fall through
          case 109: break;
          case 55:
            { lexeme=yytext(); return new Symbol(sym.tipo_ca3,yytext());
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
