// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\0\2\2\23\0\1\3\1\4\1\5"+
    "\2\6\1\7\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\32\1\33\11\32"+
    "\1\34\1\35\1\36\1\32\1\37\10\32\1\6\1\10"+
    "\1\6\1\24\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\50\1\51\2\50\1\52\1\53\1\54"+
    "\1\55\1\56\1\50\1\57\1\60\1\61\1\62\1\63"+
    "\4\50\1\6\1\64\2\6\6\0\1\2\33\0\1\6"+
    "\22\0\1\65\12\0\1\65\1\0\1\66\1\27\6\0"+
    "\1\66\3\0\1\66\3\0\1\66\1\0\1\66\6\0"+
    "\1\66\1\0\1\66\4\0\1\67\7\0\1\67\3\0"+
    "\1\67\3\0\1\67\1\0\1\67\6\0\1\67\1\0"+
    "\1\67\303\0\1\41\2\0\1\41\365\0\1\70\12\0"+
    "\1\41\u0163\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\1\2\2\3\3\1\4\1\3\1\5\1\3\1\6"+
    "\1\7\1\3\3\10\1\5\14\11\1\1\1\2\1\0"+
    "\1\2\1\6\3\5\1\12\1\13\2\5\1\2\2\5"+
    "\2\10\1\14\2\5\21\11\1\2\1\15\1\2\1\5"+
    "\3\0\1\2\1\5\1\16\2\5\1\17\1\10\2\0"+
    "\1\5\21\11\1\16\1\0\1\20\1\2\1\5\1\10"+
    "\1\5\10\11\1\21\2\11\1\22\1\11\1\23\4\0"+
    "\6\11\1\24\3\11\1\5\1\11\4\0\1\11\1\22"+
    "\1\5\5\11\1\5\2\0\1\11\4\0\1\5\1\11"+
    "\1\10\5\11\2\0\1\11\4\0\1\5\2\11\1\25"+
    "\1\11\1\5\1\11\1\0\1\26\10\0\1\15\1\11"+
    "\1\5\1\27\1\11\1\0\1\11\6\0\2\23\1\11"+
    "\1\27\1\11\2\0\1\11\6\0\1\11\1\5\2\0"+
    "\1\11\6\0\1\11\1\23\2\0\1\5\11\0\1\5"+
    "\13\0\1\23\33\0\1\30\2\0\1\31\5\0\1\23"+
    "\21\0\1\32\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u011d\0\71"+
    "\0\u0156\0\71\0\u018f\0\u01c8\0\u0201\0\u023a\0\71\0\344"+
    "\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u011d\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u02ac\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\71\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u0e07"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u0357\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u06e7\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u0357\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u0357\0\u24f6\0\u252f\0\u2568\0\u25a1\0\71"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u06e7\0\u27a2\0\u27db\0\u0a05\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\71\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e"+
    "\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\71\0\u3b73\0\u3bac\0\71"+
    "\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74"+
    "\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c"+
    "\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\71"+
    "\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293"+
    "\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b"+
    "\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\4\1\5\2\6\1\7\1\6"+
    "\2\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\6\1\17\1\7\1\20\1\7\2\2\1\21\3\22"+
    "\1\23\2\22\1\24\1\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\25\1\33\1\34\1\35\2\25\1\36"+
    "\1\37\3\25\1\40\1\41\1\6\1\42\1\6\1\2"+
    "\72\0\1\3\74\0\1\43\67\0\5\6\3\0\1\6"+
    "\1\0\5\6\1\0\1\6\1\7\1\6\2\0\10\42"+
    "\1\6\22\44\2\6\1\42\1\6\5\0\5\6\3\0"+
    "\1\6\1\0\5\6\1\0\3\6\2\0\10\42\1\6"+
    "\22\44\2\6\1\42\1\6\5\0\5\6\3\0\1\7"+
    "\1\0\5\6\1\0\3\6\2\0\10\42\1\6\22\44"+
    "\2\6\1\42\1\6\5\0\5\6\3\0\1\6\1\0"+
    "\1\7\2\6\1\45\1\6\1\0\3\6\2\0\10\42"+
    "\1\6\22\44\2\6\1\42\1\6\4\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\14\1\47\1\14\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\24\1\6\22\50"+
    "\1\47\1\6\1\42\1\6\1\46\13\0\1\51\4\0"+
    "\1\52\53\0\1\46\5\53\3\46\1\53\1\46\1\53"+
    "\1\54\1\47\1\16\1\53\1\46\1\53\2\55\1\0"+
    "\1\46\7\56\1\24\1\55\22\50\1\53\1\55\1\42"+
    "\1\55\1\46\3\0\1\46\5\47\1\57\2\46\1\47"+
    "\1\46\1\47\1\14\1\46\1\14\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\3\22\1\60\3\22\1\24\1\6"+
    "\22\61\1\47\1\6\1\42\1\6\1\46\3\0\1\46"+
    "\5\47\1\57\2\46\1\47\1\46\1\47\1\14\1\46"+
    "\1\14\1\47\1\46\1\47\2\6\1\0\1\46\7\22"+
    "\1\24\1\6\22\61\1\47\1\6\1\42\1\6\1\46"+
    "\3\0\1\46\5\47\1\57\2\46\1\47\1\46\1\47"+
    "\1\14\1\46\1\14\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\6\22\1\62\1\24\1\6\22\61\1\47\1\6"+
    "\1\42\1\6\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\14\1\46\1\14\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\24\1\6\22\63\1\47\1\6"+
    "\1\42\1\6\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\22\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\13\25\1\71\6\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\1\72"+
    "\7\25\1\73\11\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\4\25\1\74\15\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\12\25\1\75\3\25\1\76"+
    "\3\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\1\77\21\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\12\25\1\100\7\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\4\25\1\101\15\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\4\25\1\102\15\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\15\25"+
    "\1\103\4\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\4\25\1\104\15\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\4\25\1\105\15\25\1\47\1\6"+
    "\1\67\1\70\1\46\4\0\5\6\3\0\1\6\1\0"+
    "\2\6\1\106\2\6\1\0\3\6\2\0\10\42\1\6"+
    "\22\0\2\6\1\42\1\6\2\0\1\43\1\0\2\43"+
    "\1\107\1\43\2\0\30\43\1\0\24\43\7\0\5\6"+
    "\3\0\1\6\1\0\2\6\1\106\2\6\1\0\3\6"+
    "\2\0\10\42\1\6\22\44\2\6\1\42\1\6\5\0"+
    "\5\6\3\0\1\6\1\0\1\6\1\110\1\6\1\45"+
    "\1\6\1\0\3\6\2\0\10\42\1\6\22\44\2\6"+
    "\1\42\1\6\4\0\16\46\1\0\3\46\3\0\1\46"+
    "\7\0\1\46\23\0\1\46\3\0\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\3\47\1\6\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\7\42\1\111\1\6\22\44"+
    "\1\47\1\6\1\42\1\6\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\14\1\46\1\14\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\24\1\6\22\50"+
    "\1\47\1\6\1\42\1\6\1\46\3\0\1\112\5\51"+
    "\2\0\1\113\1\51\1\0\2\51\1\114\2\51\1\0"+
    "\3\51\2\0\37\51\4\0\24\52\1\0\41\52\3\0"+
    "\1\46\5\53\3\46\1\53\1\46\2\53\1\47\1\6"+
    "\1\53\1\46\1\53\2\55\1\0\1\46\7\115\1\111"+
    "\1\55\22\44\1\53\1\55\1\42\1\55\1\46\3\0"+
    "\1\46\5\53\3\46\1\53\1\46\1\53\1\116\1\47"+
    "\1\117\1\53\1\46\1\53\2\55\1\0\1\46\7\120"+
    "\1\24\1\55\22\50\1\53\1\55\1\42\1\55\1\46"+
    "\4\0\5\55\3\0\1\55\1\0\2\55\2\6\1\55"+
    "\1\0\3\55\2\0\7\115\1\42\1\55\22\44\2\55"+
    "\1\42\1\55\4\0\14\121\1\56\1\121\1\56\3\121"+
    "\2\122\1\0\1\121\10\56\1\122\22\56\1\121\3\122"+
    "\1\121\3\0\7\46\1\123\6\46\1\124\3\46\3\0"+
    "\1\46\7\0\1\46\1\0\22\125\1\46\3\0\1\46"+
    "\3\0\1\46\5\47\1\57\2\46\1\47\1\46\1\47"+
    "\1\14\1\46\1\14\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\2\22\1\62\4\22\1\24\1\6\22\61\1\47"+
    "\1\6\1\42\1\6\1\46\3\0\6\46\1\57\5\46"+
    "\1\63\1\46\1\63\3\46\3\0\1\46\7\61\1\63"+
    "\1\0\22\61\1\46\3\0\1\46\3\0\14\46\1\63"+
    "\1\46\1\63\3\46\3\0\1\46\10\63\1\0\22\63"+
    "\1\46\3\0\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\14\1\47\1\14\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\24\1\6\22\126\1\47\1\6"+
    "\1\42\1\6\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\14\1\47\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\22\127\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\14\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\22\130\1\47\1\6"+
    "\1\67\1\70\1\46\4\0\5\6\3\0\1\6\1\0"+
    "\2\6\1\106\1\70\1\6\1\0\3\6\2\0\10\67"+
    "\1\6\22\131\2\6\1\67\1\70\5\0\5\6\3\0"+
    "\1\6\1\0\3\6\1\70\1\6\1\0\3\6\2\0"+
    "\10\67\1\6\22\132\2\6\1\67\1\70\4\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\13\25\1\133\6\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\3\25\1\134\16\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\1\135\21\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\21\25\1\136\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\17\25\1\137"+
    "\2\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\2\25\1\140\17\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\10\25\1\141\11\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\16\25\1\142\3\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\4\25\1\143"+
    "\15\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\17\25\1\144\2\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\13\25\1\145\6\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\1\146\21\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\15\25\1\147\4\25"+
    "\1\47\1\6\1\67\1\70\1\46\20\0\1\106\54\0"+
    "\5\6\3\0\1\6\1\0\3\6\1\150\1\6\1\0"+
    "\3\6\2\0\10\42\1\6\22\44\2\6\1\42\1\6"+
    "\4\0\1\46\5\47\3\46\1\47\1\46\2\47\1\46"+
    "\1\6\1\47\1\46\1\47\2\6\1\0\1\46\7\42"+
    "\1\111\1\6\22\0\1\47\1\6\1\42\1\6\1\46"+
    "\3\0\6\112\2\0\1\113\1\112\1\0\2\112\1\151"+
    "\2\112\1\0\3\112\2\0\37\112\21\0\1\152\53\0"+
    "\16\51\1\0\3\51\3\0\1\51\7\0\1\51\23\0"+
    "\1\51\3\0\1\51\4\0\5\55\3\0\1\55\1\0"+
    "\2\55\1\153\1\6\1\55\1\0\3\55\2\0\7\115"+
    "\1\42\1\55\22\0\2\55\1\42\1\55\4\0\1\46"+
    "\5\53\3\46\1\53\1\46\1\53\1\116\1\47\1\14"+
    "\1\53\1\46\1\53\2\55\1\0\1\46\7\120\1\24"+
    "\1\55\22\50\1\53\1\55\1\42\1\55\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\14\1\47"+
    "\1\117\1\47\1\46\1\47\2\6\1\0\1\46\10\24"+
    "\1\6\22\50\1\47\1\6\1\42\1\6\1\46\3\0"+
    "\1\46\5\53\3\46\1\53\1\46\1\53\1\116\1\154"+
    "\1\14\1\53\1\46\1\53\2\55\1\0\1\46\7\120"+
    "\1\24\1\55\22\63\1\53\1\55\1\42\1\55\1\46"+
    "\3\0\16\121\1\122\3\121\2\122\1\0\1\121\7\122"+
    "\1\121\23\122\1\121\3\122\1\121\3\0\24\122\1\0"+
    "\41\122\3\0\6\46\1\57\7\46\1\0\3\46\3\0"+
    "\1\46\7\0\1\46\23\0\1\46\3\0\1\46\12\0"+
    "\1\155\6\0\1\124\20\0\22\125\17\0\1\155\6\0"+
    "\1\125\7\0\10\125\1\0\22\125\2\0\2\125\4\0"+
    "\1\46\5\47\1\156\2\46\1\47\1\46\1\47\1\14"+
    "\1\46\1\14\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\24\1\6\22\126\1\47\1\6\1\42\1\6\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\14"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\22\127\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\14\46\1\63\1\46\1\130\3\46\3\0\1\46"+
    "\10\130\1\0\22\130\1\46\1\0\2\131\1\46\21\0"+
    "\1\131\7\0\10\131\1\0\22\131\2\0\2\131\5\0"+
    "\5\6\3\0\1\6\1\0\2\6\1\106\1\70\1\6"+
    "\1\0\3\6\2\0\10\67\1\6\22\132\2\6\1\67"+
    "\1\70\4\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\10\25\1\157\11\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\4\25\1\160\15\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\16\25"+
    "\1\161\3\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\13\25\1\162\6\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\4\25\1\163\15\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\15\25\1\164\4\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\16\25"+
    "\1\165\3\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\17\25\1\166\2\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\15\25\1\167\4\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\13\25\1\170\6\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\14\25"+
    "\1\171\5\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\10\25\1\172\11\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\3\25\1\173\16\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\16\112\1\0\3\112\3\0"+
    "\1\112\7\0\1\112\23\0\1\112\3\0\1\112\13\0"+
    "\1\113\61\0\5\153\3\0\1\153\1\0\5\153\1\0"+
    "\3\153\12\0\1\153\22\0\2\153\1\0\1\153\4\0"+
    "\1\46\5\154\3\46\1\154\1\46\3\154\1\153\1\154"+
    "\1\46\1\154\2\153\1\0\1\46\7\0\1\46\1\153"+
    "\22\0\1\154\1\153\1\0\1\153\1\46\11\0\1\124"+
    "\62\0\7\46\1\174\6\46\1\0\3\46\3\0\1\46"+
    "\7\0\1\46\2\0\1\175\1\176\1\0\1\177\10\0"+
    "\1\200\4\0\1\46\3\0\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\4\25"+
    "\1\201\15\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\12\25\1\202\7\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\4\25\1\203\15\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\10\25\1\204\11\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\15\25"+
    "\1\205\4\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\7\25\1\206\12\25\1\47\1\6\1\67\1\70"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\13\25\1\207\6\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\1\210\21\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\3\25\1\211"+
    "\16\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\7\25\1\212\12\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\213\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\22\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\1\214\21\25\1\47\1\6\1\67\1\70"+
    "\1\46\55\0\1\215\55\0\1\216\102\0\1\217\62\0"+
    "\1\220\25\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\1\221\21\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\1\222\21\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\223\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\22\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\21\25\1\224\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\13\25\1\172"+
    "\6\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\1\25\1\225\20\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\12\25\1\226\7\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\13\25\1\227\6\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\4\25\1\230"+
    "\15\25\1\47\1\6\1\67\1\70\1\46\3\0\1\231"+
    "\15\46\1\0\3\46\3\0\1\46\5\0\1\232\1\0"+
    "\1\46\1\0\22\233\1\46\3\0\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\3\25\1\234\16\25\1\47\1\6\1\67\1\70\1\46"+
    "\55\0\1\235\60\0\1\236\104\0\1\237\51\0\1\240"+
    "\31\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\12\25\1\172\7\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\241\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\2\25\1\242\17\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\16\46\1\0\3\46"+
    "\3\0\1\46\7\243\1\46\23\0\1\46\3\0\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\4\25\1\244\15\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\7\25\1\245\12\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\2\25\1\246"+
    "\17\25\1\47\1\6\1\67\1\70\1\46\3\0\1\46"+
    "\5\47\3\46\1\47\1\46\1\47\1\64\1\46\1\65"+
    "\1\47\1\46\1\47\2\6\1\0\1\46\10\66\1\6"+
    "\16\25\1\247\3\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\3\25\1\250\16\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\231\15\46\1\0\3\46\3\0"+
    "\1\46\7\0\1\46\1\0\22\233\1\46\3\0\1\46"+
    "\57\0\1\251\22\0\1\252\17\0\7\233\2\0\22\233"+
    "\10\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\4\25\1\253\15\25\1\47\1\6\1\67"+
    "\1\70\1\46\52\0\1\254\64\0\1\255\70\0\1\256"+
    "\74\0\1\257\21\0\1\231\1\46\1\260\13\46\1\0"+
    "\3\46\3\0\1\46\5\0\1\232\1\0\1\46\1\0"+
    "\22\233\1\46\3\0\1\46\3\0\1\46\5\47\3\46"+
    "\1\47\1\46\1\47\1\64\1\46\1\65\1\47\1\46"+
    "\1\47\2\6\1\0\1\46\10\66\1\6\1\261\21\25"+
    "\1\47\1\6\1\67\1\70\1\46\31\0\7\243\2\0"+
    "\22\243\10\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\15\25\1\262\4\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\15\25\1\263\4\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\7\25"+
    "\1\264\12\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\265\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\22\25\1\47\1\6\1\67\1\70\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\1\266\21\25\1\47\1\6\1\67\1\70\1\46"+
    "\51\0\1\267\31\0\1\270\30\0\1\271\1\272\1\0"+
    "\1\273\10\0\1\274\14\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\15\25\1\165\4\25"+
    "\1\47\1\6\1\67\1\70\1\46\46\0\1\275\76\0"+
    "\1\276\73\0\1\277\14\0\1\300\66\0\1\43\1\0"+
    "\2\260\1\301\1\260\2\46\10\260\1\43\3\260\3\43"+
    "\1\260\7\43\1\260\1\0\22\43\1\260\1\43\2\0"+
    "\1\46\3\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\3\25\1\302\16\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\303\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\304\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\22\25\1\47\1\6"+
    "\1\67\1\70\1\46\3\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\1\305\21\25\1\47"+
    "\1\6\1\67\1\70\1\46\3\0\16\46\1\0\3\46"+
    "\3\0\1\46\7\0\1\46\15\0\1\306\5\0\1\46"+
    "\3\0\1\46\3\0\1\46\5\47\3\46\1\47\1\46"+
    "\1\47\1\64\1\46\1\65\1\47\1\46\1\47\2\6"+
    "\1\0\1\46\10\66\1\6\3\25\1\307\16\25\1\47"+
    "\1\6\1\67\1\70\1\46\54\0\1\310\71\0\1\311"+
    "\55\0\1\312\102\0\1\313\62\0\1\314\64\0\1\315"+
    "\70\0\1\257\103\0\1\257\34\0\1\316\20\0\22\317"+
    "\10\0\1\46\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\4\25\1\320\15\25\1\47\1\6\1\67"+
    "\1\70\1\46\3\0\1\303\15\46\1\321\3\46\3\0"+
    "\1\46\7\0\1\46\23\0\1\46\3\0\1\46\3\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\15\25\1\322\4\25\1\47\1\6\1\67\1\70"+
    "\1\46\57\0\1\323\2\0\1\324\11\0\1\46\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\4\25"+
    "\1\325\15\25\1\47\1\6\1\67\1\70\1\46\44\0"+
    "\1\326\101\0\1\327\60\0\1\330\104\0\1\331\51\0"+
    "\1\332\102\0\1\257\31\0\1\333\3\0\1\316\20\0"+
    "\22\317\22\0\1\333\3\0\1\317\7\0\10\317\1\0"+
    "\22\317\2\0\2\317\4\0\1\46\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\12\25\1\334\7\25"+
    "\1\47\1\6\1\67\1\70\1\46\3\0\1\335\5\47"+
    "\3\46\1\47\1\46\1\47\1\64\1\46\1\65\1\47"+
    "\1\46\1\47\2\6\1\0\1\46\10\66\1\6\22\25"+
    "\1\47\1\6\1\67\1\70\1\46\51\0\1\336\62\0"+
    "\1\337\30\0\1\46\5\47\3\46\1\47\1\46\1\47"+
    "\1\64\1\46\1\65\1\47\1\46\1\47\2\6\1\0"+
    "\1\46\10\66\1\6\16\25\1\340\3\25\1\47\1\6"+
    "\1\67\1\70\1\46\51\0\1\341\71\0\1\342\64\0"+
    "\1\343\70\0\1\344\74\0\1\345\21\0\1\346\70\0"+
    "\1\46\5\47\3\46\1\47\1\46\1\47\1\64\1\46"+
    "\1\65\1\47\1\46\1\47\2\6\1\0\1\46\10\66"+
    "\1\6\1\347\21\25\1\47\1\6\1\67\1\70\1\46"+
    "\3\0\16\46\1\0\3\46\3\0\1\46\7\350\1\46"+
    "\23\0\1\46\3\0\1\46\63\0\1\351\57\0\1\352"+
    "\21\0\1\353\5\47\3\46\1\47\1\46\1\47\1\64"+
    "\1\46\1\65\1\47\1\46\1\47\2\6\1\0\1\46"+
    "\10\66\1\6\22\25\1\47\1\6\1\67\1\70\1\46"+
    "\56\0\1\354\60\0\1\355\76\0\1\356\73\0\1\357"+
    "\14\0\1\360\70\0\1\346\37\0\1\361\1\362\1\0"+
    "\1\363\10\0\1\364\14\0\1\365\5\47\3\46\1\47"+
    "\1\46\1\47\1\64\1\46\1\65\1\47\1\46\1\47"+
    "\2\6\1\0\1\46\10\66\1\6\2\25\1\242\17\25"+
    "\1\47\1\6\1\67\1\70\1\46\11\0\1\366\17\0"+
    "\7\350\2\0\22\350\47\0\1\367\77\0\1\370\22\0"+
    "\16\46\1\0\3\46\3\0\1\46\7\0\1\46\15\0"+
    "\1\371\5\0\1\46\3\0\1\46\42\0\1\372\70\0"+
    "\1\373\70\0\1\345\103\0\1\345\16\0\1\360\36\0"+
    "\22\374\62\0\1\375\55\0\1\376\102\0\1\377\62\0"+
    "\1\u0100\25\0\2\46\1\260\13\46\1\0\3\46\3\0"+
    "\1\46\7\0\1\46\23\0\1\46\3\0\1\46\12\0"+
    "\1\u0101\6\0\1\366\20\0\22\u0102\52\0\1\u0103\67\0"+
    "\1\u0103\103\0\1\u0104\2\0\1\u0105\60\0\1\u0106\72\0"+
    "\1\345\26\0\1\270\2\0\1\u0107\3\0\1\374\7\0"+
    "\10\374\1\0\22\374\2\0\2\374\56\0\1\u0108\60\0"+
    "\1\u0109\104\0\1\u010a\51\0\1\u010b\37\0\1\366\71\0"+
    "\1\u0101\6\0\1\u0102\7\0\10\u0102\1\0\22\u0102\2\0"+
    "\2\u0102\56\0\1\u010c\64\0\1\u010d\62\0\1\u010e\30\0"+
    "\1\u010f\70\0\1\u0110\137\0\1\u0111\64\0\1\u0112\70\0"+
    "\1\u0113\74\0\1\u0114\76\0\1\u0115\73\0\1\u0116\57\0"+
    "\1\u0117\27\0\1\u0118\62\0\1\u0110\37\0\1\271\1\272"+
    "\1\0\1\273\10\0\1\274\57\0\1\u0119\76\0\1\u011a"+
    "\73\0\1\u011b\14\0\1\u011c\107\0\1\u011d\110\0\1\u011e"+
    "\77\0\1\u011f\31\0\1\u0120\30\0\1\u0121\1\u0122\1\0"+
    "\1\u0123\10\0\1\u0124\53\0\1\u0125\70\0\1\u0114\103\0"+
    "\1\u0114\16\0\1\u011c\6\0\1\u0126\6\0\1\u0127\20\0"+
    "\22\u0128\52\0\1\u0129\67\0\1\u0129\101\0\1\u012a\55\0"+
    "\1\u012b\102\0\1\u012c\62\0\1\u012d\76\0\1\u0114\31\0"+
    "\1\333\65\0\1\u0126\6\0\1\u0127\20\0\22\u0128\17\0"+
    "\1\u0126\6\0\1\u0128\7\0\10\u0128\1\0\22\u0128\2\0"+
    "\2\u0128\43\0\1\u012e\103\0\1\u012f\60\0\1\u0130\104\0"+
    "\1\u0131\51\0\1\u0132\106\0\1\u0133\62\0\1\u0134\64\0"+
    "\1\u0135\70\0\1\u0136\74\0\1\u0137\40\0\1\u0138\114\0"+
    "\1\u0139\76\0\1\u013a\73\0\1\u013b\14\0\1\u013c\127\0"+
    "\1\u013d\70\0\1\u0137\103\0\1\u0137\55\0\22\u013e\61\0"+
    "\1\u0137\26\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0"+
    "\1\u013e\1\u013f\1\u0140\1\u013e\1\u0141\10\u013e\1\u0142\4\u013e"+
    "\2\0\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e"+
    "\1\0\1\u013e\1\u013f\1\u0140\1\u013e\1\u0141\6\u013e\1\u0143"+
    "\1\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120\6\0"+
    "\1\u013e\7\0\10\u013e\1\0\1\u0144\1\u013f\1\u0140\1\u013e"+
    "\1\u0141\10\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120"+
    "\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140"+
    "\1\u013e\1\u0141\5\u013e\1\u0145\2\u013e\1\u0142\4\u013e\2\0"+
    "\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0"+
    "\1\u013e\1\u013f\1\u0140\1\u013e\1\u0146\10\u013e\1\u0142\4\u013e"+
    "\2\0\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e"+
    "\1\0\1\u013e\1\u013f\1\u0140\1\u013e\1\u0141\6\u013e\1\u0147"+
    "\1\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120\6\0"+
    "\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u0148"+
    "\1\u0141\10\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120"+
    "\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140"+
    "\1\u013e\1\u0141\10\u013e\1\u0142\1\u013e\1\u0149\2\u013e\2\0"+
    "\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0"+
    "\1\u014a\1\u013f\1\u0140\1\u013e\1\u0141\5\u013e\1\u0145\2\u013e"+
    "\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120\6\0\1\u013e"+
    "\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u013e\1\u0141"+
    "\3\u013e\1\u014b\4\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0"+
    "\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f"+
    "\1\u0140\1\u013e\1\u014c\10\u013e\1\u0142\4\u013e\2\0\2\u013e"+
    "\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e"+
    "\1\u013f\1\u0140\1\u013e\1\u014d\10\u013e\1\u0142\4\u013e\2\0"+
    "\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0"+
    "\1\u013e\1\u013f\1\u0140\1\u013e\1\u0141\3\u013e\1\u014e\4\u013e"+
    "\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120\6\0\1\u013e"+
    "\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u013e\1\u014f"+
    "\10\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120\6\0"+
    "\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u013e"+
    "\1\u0141\5\u013e\1\u0150\2\u013e\1\u0142\4\u013e\2\0\2\u013e"+
    "\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e"+
    "\1\u013f\1\u0140\1\u013e\1\u0141\5\u013e\1\u0145\2\u013e\1\u0151"+
    "\4\u013e\2\0\2\u013e\4\0\1\u013c\6\0\1\u0120\6\0"+
    "\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u013e"+
    "\1\u0141\10\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0\1\u0120"+
    "\6\0\1\u013e\7\0\10\u013e\1\0\1\u0152\1\u013f\1\u0140"+
    "\1\u013e\1\u0141\5\u013e\1\u0145\2\u013e\1\u0142\4\u013e\2\0"+
    "\2\u013e\13\0\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0"+
    "\1\u014e\1\u013f\1\u0140\1\u013e\1\u0141\10\u013e\1\u0142\1\u013e"+
    "\1\u0149\2\u013e\2\0\2\u013e\13\0\1\u0120\6\0\1\u013e"+
    "\7\0\10\u013e\1\0\1\u013e\1\u013f\1\u0140\1\u013e\1\u0146"+
    "\6\u013e\1\u014e\1\u013e\1\u0142\4\u013e\2\0\2\u013e\13\0"+
    "\1\u0120\6\0\1\u013e\7\0\10\u013e\1\0\1\u013e\1\u013f"+
    "\1\u0140\1\u013e\1\u0141\5\u013e\1\u014e\2\u013e\1\u0142\4\u013e"+
    "\2\0\2\u013e\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18126];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\1\11\1\1\1\11\4\1\1\11"+
    "\23\1\1\0\43\1\1\11\2\1\3\0\7\1\2\0"+
    "\23\1\1\0\23\1\4\0\14\1\4\0\11\1\2\0"+
    "\1\1\4\0\10\1\2\0\1\1\4\0\7\1\1\0"+
    "\1\11\10\0\5\1\1\0\1\1\6\0\3\1\1\11"+
    "\1\1\2\0\1\1\6\0\2\1\2\0\1\1\6\0"+
    "\2\1\2\0\1\1\11\0\1\1\13\0\1\1\33\0"+
    "\1\11\2\0\1\11\5\0\1\1\21\0\1\11\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 27: break;
          case 2:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 28: break;
          case 3:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 29: break;
          case 4:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 30: break;
          case 5:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 31: break;
          case 6:
            { lexeme=yytext();  return inte;
            }
            // fall through
          case 32: break;
          case 7:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 33: break;
          case 8:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 34: break;
          case 9:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 35: break;
          case 10:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return nocom;
            }
            // fall through
          case 36: break;
          case 11:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 37: break;
          case 12:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 38: break;
          case 13:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 39: break;
          case 14:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 40: break;
          case 15:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 41: break;
          case 16:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 42: break;
          case 17:
            { lexeme=yytext(); 
                        return salida;
            }
            // fall through
          case 43: break;
          case 18:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 44: break;
          case 19:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return instancias;
            }
            // fall through
          case 45: break;
          case 20:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 46: break;
          case 21:
            { lexeme=yytext(); 
                        return entrada;
            }
            // fall through
          case 47: break;
          case 22:
            { lexeme=yytext(); 
                         return funcion;
            }
            // fall through
          case 48: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 49: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 50: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 51: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
