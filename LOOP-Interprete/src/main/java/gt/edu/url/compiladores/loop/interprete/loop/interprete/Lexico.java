// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\34"+
    "\11\33\1\35\1\36\1\37\1\33\1\40\10\33\1\7"+
    "\1\11\1\7\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\51\1\52\2\51\1\53\1\54"+
    "\1\55\1\56\1\57\1\51\1\60\1\61\1\62\1\63"+
    "\1\64\4\51\1\7\1\65\2\7\6\0\1\3\33\0"+
    "\1\7\22\0\1\66\12\0\1\66\1\0\1\67\1\30"+
    "\6\0\1\67\3\0\1\67\3\0\1\67\1\0\1\67"+
    "\6\0\1\67\1\0\1\67\4\0\1\70\7\0\1\70"+
    "\3\0\1\70\3\0\1\70\1\0\1\70\6\0\1\70"+
    "\1\0\1\70\303\0\1\42\2\0\1\42\365\0\1\71"+
    "\12\0\1\42\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\1\2\3\3\4\1\5\1\4\1\6"+
    "\1\4\1\7\1\10\1\4\3\11\1\6\14\12\1\1"+
    "\1\3\1\0\1\3\1\7\1\6\1\13\1\14\1\3"+
    "\2\6\1\0\1\3\2\11\1\15\2\6\21\12\1\16"+
    "\1\3\3\0\1\3\1\6\1\17\1\6\1\20\1\11"+
    "\1\0\1\6\21\12\1\17\1\0\1\21\1\3\1\0"+
    "\10\12\1\22\2\12\1\23\1\12\1\24\4\0\6\12"+
    "\1\25\3\12\1\0\1\12\4\0\1\12\1\23\1\0"+
    "\5\12\3\0\1\12\5\0\1\12\1\11\5\12\2\0"+
    "\1\12\4\0\2\12\1\26\1\12\1\0\1\12\1\0"+
    "\1\27\10\0\1\12\1\0\1\30\1\12\1\0\1\12"+
    "\6\0\2\24\1\12\1\30\1\12\2\0\1\12\6\0"+
    "\1\12\3\0\1\12\6\0\1\12\1\24\30\0\1\24"+
    "\33\0\1\31\2\0\1\32\5\0\1\24\21\0\1\33"+
    "\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\350\0\u0122\0\u0122"+
    "\0\72\0\u015c\0\72\0\u0196\0\u01d0\0\u020a\0\u0244\0\72"+
    "\0\350\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\u0122\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u02b8\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\72\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u0d98\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u0366"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\72\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u0366"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u0366\0\u2392\0\u23cc\0\u2406\0\u2440\0\72"+
    "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u09be\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\72"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c"+
    "\0\u30b6\0\u30f0\0\u312a\0\256\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\72\0\u3a3a\0\u3a74\0\72\0\u3aae"+
    "\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e"+
    "\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e"+
    "\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\72\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10"+
    "\1\7\2\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\7\1\20\1\10\1\21\1\10\2\2\1\22"+
    "\3\23\1\24\2\23\1\25\1\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\26\1\34\1\35\1\36\2\26"+
    "\1\37\1\40\3\26\1\41\1\42\1\7\1\43\1\7"+
    "\1\2\73\0\1\3\76\0\1\44\70\0\5\7\3\0"+
    "\1\7\1\0\5\7\1\0\1\7\1\10\1\7\2\0"+
    "\10\43\1\7\22\45\2\7\1\43\1\7\6\0\5\7"+
    "\3\0\1\7\1\0\5\7\1\0\3\7\2\0\10\43"+
    "\1\7\22\45\2\7\1\43\1\7\6\0\5\7\3\0"+
    "\1\10\1\0\5\7\1\0\3\7\2\0\10\43\1\7"+
    "\22\45\2\7\1\43\1\7\6\0\5\7\3\0\1\7"+
    "\1\0\1\10\2\7\1\46\1\7\1\0\3\7\2\0"+
    "\10\43\1\7\22\45\2\7\1\43\1\7\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\15\1\7\1\15\1\7"+
    "\1\0\3\7\2\0\10\25\1\7\22\47\2\7\1\43"+
    "\1\7\15\0\1\50\4\0\1\51\55\0\5\52\3\0"+
    "\1\52\1\0\1\52\1\53\1\7\1\17\1\52\1\0"+
    "\3\52\2\0\7\54\1\25\1\52\22\47\2\52\1\43"+
    "\1\52\6\0\5\7\1\55\2\0\1\7\1\0\1\7"+
    "\1\15\1\56\1\15\1\7\1\0\3\7\2\0\3\23"+
    "\1\57\3\23\1\25\1\7\22\60\2\7\1\43\1\7"+
    "\6\0\5\7\1\55\2\0\1\7\1\0\1\7\1\15"+
    "\1\56\1\15\1\7\1\0\3\7\2\0\7\23\1\25"+
    "\1\7\22\60\2\7\1\43\1\7\6\0\5\7\1\55"+
    "\2\0\1\7\1\0\1\7\1\15\1\56\1\15\1\7"+
    "\1\0\3\7\2\0\6\23\1\61\1\25\1\7\22\60"+
    "\2\7\1\43\1\7\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\15\1\56\1\15\1\7\1\0\3\7\2\0"+
    "\10\25\1\7\22\62\2\7\1\43\1\7\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\22\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\13\26\1\70\6\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\1\71\7\26\1\72"+
    "\11\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\4\26\1\73\15\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\12\26\1\74\3\26\1\75\3\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\1\76"+
    "\21\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\12\26\1\77\7\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\4\26\1\100\15\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\4\26\1\101\15\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\15\26\1\102\4\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\4\26"+
    "\1\103\15\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\4\26\1\104\15\26\2\7"+
    "\1\66\1\67\6\0\5\7\3\0\1\7\1\0\2\7"+
    "\1\56\2\7\1\0\3\7\2\0\10\43\1\7\22\0"+
    "\2\7\1\43\1\7\2\0\1\44\2\0\2\44\1\105"+
    "\1\44\2\0\30\44\1\0\24\44\10\0\5\7\3\0"+
    "\1\7\1\0\2\7\1\56\2\7\1\0\3\7\2\0"+
    "\10\43\1\7\22\45\2\7\1\43\1\7\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\106\1\7\1\46\1\7"+
    "\1\0\3\7\2\0\10\43\1\7\22\45\2\7\1\43"+
    "\1\7\6\0\5\7\3\0\1\7\1\0\1\7\1\15"+
    "\1\56\1\15\1\7\1\0\3\7\2\0\10\25\1\7"+
    "\22\47\2\7\1\43\1\7\5\0\1\107\5\50\2\0"+
    "\1\110\1\50\1\0\2\50\1\111\2\50\1\0\3\50"+
    "\2\0\37\50\5\0\24\51\1\0\41\51\5\0\5\52"+
    "\3\0\1\52\1\0\2\52\2\7\1\52\1\0\3\52"+
    "\2\0\7\112\1\43\1\52\22\45\2\52\1\43\1\52"+
    "\6\0\5\52\3\0\1\52\1\0\1\52\1\113\1\7"+
    "\1\114\1\52\1\0\3\52\2\0\7\115\1\25\1\52"+
    "\22\47\2\52\1\43\1\52\5\0\14\116\1\54\1\116"+
    "\1\54\5\116\1\0\1\116\10\54\1\116\22\54\5\116"+
    "\13\0\1\117\6\0\1\55\20\0\22\120\26\0\1\56"+
    "\55\0\5\7\1\55\2\0\1\7\1\0\1\7\1\15"+
    "\1\56\1\15\1\7\1\0\3\7\2\0\2\23\1\61"+
    "\4\23\1\25\1\7\22\60\2\7\1\43\1\7\13\0"+
    "\1\55\5\0\1\62\1\0\1\62\7\0\7\60\1\62"+
    "\1\0\22\60\25\0\1\62\1\0\1\62\7\0\10\62"+
    "\1\0\22\62\12\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\15\1\7\1\15\1\7\1\0\3\7\2\0\10\25"+
    "\1\7\22\121\2\7\1\43\1\7\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\15\1\7\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\22\122\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\15\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\22\123"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\2\7\1\56\1\67\1\7\1\0\3\7\2\0\10\66"+
    "\1\7\22\124\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\3\7\1\67\1\7\1\0\3\7\2\0"+
    "\10\66\1\7\22\125\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\13\26\1\126\6\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\3\26\1\127\16\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\1\130"+
    "\21\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\21\26\1\131\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\17\26"+
    "\1\132\2\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\2\26\1\133\17\26\2\7"+
    "\1\66\1\67\6\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\10\26\1\134\11\26\2\7\1\66\1\67\6\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\16\26\1\135"+
    "\3\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\4\26\1\136\15\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\17\26\1\137\2\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\13\26\1\140\6\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\1\141\21\26\2\7\1\66\1\67\6\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\15\26\1\142"+
    "\4\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\3\7\1\143\1\7\1\0\3\7\2\0\10\43"+
    "\1\7\22\45\2\7\1\43\1\7\5\0\6\107\2\0"+
    "\1\110\1\107\1\0\2\107\1\144\2\107\1\0\3\107"+
    "\2\0\37\107\22\0\1\145\54\0\16\50\1\0\3\50"+
    "\3\0\1\50\7\0\1\50\23\0\1\50\3\0\1\50"+
    "\5\0\5\52\3\0\1\52\1\0\2\52\1\146\1\7"+
    "\1\52\1\0\3\52\2\0\7\112\1\43\1\52\22\0"+
    "\2\52\1\43\1\52\6\0\5\52\3\0\1\52\1\0"+
    "\1\52\1\113\1\7\1\15\1\52\1\0\3\52\2\0"+
    "\7\115\1\25\1\52\22\47\2\52\1\43\1\52\6\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\15\1\7\1\114"+
    "\1\7\1\0\3\7\2\0\10\25\1\7\22\47\2\7"+
    "\1\43\1\7\6\0\5\52\3\0\1\52\1\0\1\52"+
    "\1\113\1\146\1\15\1\52\1\0\3\52\2\0\7\115"+
    "\1\25\1\52\22\62\2\52\1\43\1\52\5\0\24\116"+
    "\1\0\41\116\12\0\1\55\72\0\1\117\6\0\1\120"+
    "\7\0\10\120\1\0\22\120\2\0\2\120\6\0\5\7"+
    "\1\147\2\0\1\7\1\0\1\7\1\15\1\56\1\15"+
    "\1\7\1\0\3\7\2\0\10\25\1\7\22\121\2\7"+
    "\1\43\1\7\6\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\15\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\22\122\2\7\1\66\1\67\21\0\1\62\1\0"+
    "\1\123\7\0\10\123\1\0\22\123\2\0\2\124\23\0"+
    "\1\124\7\0\10\124\1\0\22\124\2\0\2\124\6\0"+
    "\5\7\3\0\1\7\1\0\2\7\1\56\1\67\1\7"+
    "\1\0\3\7\2\0\10\66\1\7\22\125\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\10\26\1\150\11\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\4\26\1\151\15\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\16\26\1\152\3\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\13\26"+
    "\1\153\6\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\4\26\1\154\15\26\2\7"+
    "\1\66\1\67\6\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\15\26\1\155\4\26\2\7\1\66\1\67\6\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\16\26\1\156"+
    "\3\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\17\26\1\157\2\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\15\26\1\160\4\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\13\26\1\161\6\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\14\26\1\162\5\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\10\26"+
    "\1\163\11\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\3\26\1\164\16\26\2\7"+
    "\1\66\1\67\5\0\16\107\1\0\3\107\3\0\1\107"+
    "\7\0\1\107\23\0\1\107\3\0\1\107\14\0\1\110"+
    "\62\0\5\146\3\0\1\146\1\0\5\146\1\0\3\146"+
    "\12\0\1\146\22\0\2\146\1\0\1\146\14\0\1\165"+
    "\30\0\1\166\1\167\1\0\1\170\10\0\1\171\16\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\4\26\1\172"+
    "\15\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\12\26\1\173\7\26\2\7\1\66"+
    "\1\67\6\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\4\26\1\174\15\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\10\26\1\175\11\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\15\26\1\176\4\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\7\26"+
    "\1\177\12\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\13\26\1\200\6\26\2\7"+
    "\1\66\1\67\6\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\1\201\21\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\3\26\1\202\16\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\7\26\1\203\12\26\2\7\1\66\1\67"+
    "\5\0\1\204\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\22\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\1\205\21\26\2\7\1\66\1\67"+
    "\57\0\1\206\56\0\1\207\103\0\1\210\63\0\1\211"+
    "\27\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\1\212"+
    "\21\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\1\213\21\26\2\7\1\66\1\67"+
    "\5\0\1\214\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\22\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\21\26\1\215\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\13\26"+
    "\1\163\6\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\1\26\1\216\20\26\2\7"+
    "\1\66\1\67\6\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\12\26\1\217\7\26\2\7\1\66\1\67\6\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\13\26\1\220"+
    "\6\26\2\7\1\66\1\67\6\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\4\26\1\221\15\26\2\7\1\66"+
    "\1\67\5\0\1\222\32\0\1\223\3\0\22\224\12\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\63\1\56\1\64"+
    "\1\7\1\0\3\7\2\0\10\65\1\7\3\26\1\225"+
    "\16\26\2\7\1\66\1\67\57\0\1\226\61\0\1\227"+
    "\105\0\1\230\52\0\1\231\33\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\12\26\1\163\7\26\2\7\1\66"+
    "\1\67\5\0\1\232\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\2\26\1\233\17\26\2\7\1\66\1\67\33\0"+
    "\7\234\36\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\4\26\1\235\15\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\7\26\1\236\12\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\2\26\1\237\17\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\16\26"+
    "\1\240\3\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\3\26\1\241\16\26\2\7"+
    "\1\66\1\67\5\0\1\222\36\0\22\224\65\0\1\242"+
    "\23\0\1\243\17\0\7\224\2\0\22\224\12\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\4\26\1\244\15\26"+
    "\2\7\1\66\1\67\54\0\1\245\65\0\1\246\71\0"+
    "\1\247\75\0\1\250\22\0\1\222\1\0\1\44\30\0"+
    "\1\223\3\0\22\224\12\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\1\251\21\26\2\7\1\66\1\67\33\0"+
    "\7\234\2\0\22\234\12\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\15\26\1\252\4\26\2\7\1\66\1\67"+
    "\6\0\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\64\1\7\1\0\3\7\2\0\10\65\1\7\15\26"+
    "\1\253\4\26\2\7\1\66\1\67\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\7\26\1\254\12\26\2\7"+
    "\1\66\1\67\5\0\1\255\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\22\26\2\7\1\66\1\67\6\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\1\256\21\26\2\7"+
    "\1\66\1\67\53\0\1\257\32\0\1\260\30\0\1\261"+
    "\1\262\1\0\1\263\10\0\1\264\16\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\15\26\1\156\4\26\2\7"+
    "\1\66\1\67\50\0\1\265\77\0\1\266\74\0\1\267"+
    "\15\0\1\270\72\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\3\26\1\271\16\26\2\7\1\66\1\67\5\0"+
    "\1\272\5\7\3\0\1\7\1\0\1\7\1\63\1\56"+
    "\1\273\1\7\1\0\3\7\2\0\10\65\1\7\22\26"+
    "\2\7\1\66\1\67\6\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\1\274\21\26\2\7\1\66\1\67\60\0"+
    "\1\275\17\0\5\7\3\0\1\7\1\0\1\7\1\63"+
    "\1\56\1\64\1\7\1\0\3\7\2\0\10\65\1\7"+
    "\3\26\1\276\16\26\2\7\1\66\1\67\56\0\1\277"+
    "\72\0\1\300\56\0\1\301\103\0\1\302\63\0\1\303"+
    "\65\0\1\304\71\0\1\250\104\0\1\250\35\0\1\305"+
    "\20\0\22\306\12\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\4\26\1\307\15\26\2\7\1\66\1\67\5\0"+
    "\1\272\15\0\1\310\54\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\15\26\1\311\4\26\2\7\1\66\1\67"+
    "\61\0\1\312\2\0\1\313\13\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\63\1\56\1\64\1\7\1\0\3\7"+
    "\2\0\10\65\1\7\4\26\1\314\15\26\2\7\1\66"+
    "\1\67\46\0\1\315\102\0\1\316\61\0\1\317\105\0"+
    "\1\320\52\0\1\321\103\0\1\250\32\0\1\322\3\0"+
    "\1\305\20\0\22\306\23\0\1\322\3\0\1\306\7\0"+
    "\10\306\1\0\22\306\2\0\2\306\6\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\12\26\1\323\7\26\2\7"+
    "\1\66\1\67\5\0\1\324\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\22\26\2\7\1\66\1\67\53\0\1\325"+
    "\63\0\1\326\32\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\63\1\56\1\64\1\7\1\0\3\7\2\0\10\65"+
    "\1\7\16\26\1\327\3\26\2\7\1\66\1\67\53\0"+
    "\1\330\72\0\1\331\65\0\1\332\71\0\1\333\75\0"+
    "\1\334\22\0\1\335\72\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\63\1\56\1\64\1\7\1\0\3\7\2\0"+
    "\10\65\1\7\1\336\21\26\2\7\1\66\1\67\33\0"+
    "\7\337\115\0\1\340\60\0\1\341\22\0\1\342\5\7"+
    "\3\0\1\7\1\0\1\7\1\63\1\56\1\64\1\7"+
    "\1\0\3\7\2\0\10\65\1\7\22\26\2\7\1\66"+
    "\1\67\60\0\1\343\61\0\1\344\77\0\1\345\74\0"+
    "\1\346\15\0\1\347\71\0\1\335\37\0\1\350\1\351"+
    "\1\0\1\352\10\0\1\353\15\0\1\354\5\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\56\1\64\1\7\1\0"+
    "\3\7\2\0\10\65\1\7\2\26\1\233\17\26\2\7"+
    "\1\66\1\67\13\0\1\355\17\0\7\337\2\0\22\337"+
    "\50\0\1\356\100\0\1\357\76\0\1\360\55\0\1\361"+
    "\71\0\1\362\71\0\1\334\104\0\1\334\17\0\1\347"+
    "\36\0\22\363\63\0\1\364\56\0\1\365\103\0\1\366"+
    "\63\0\1\367\35\0\1\370\6\0\1\355\20\0\22\371"+
    "\53\0\1\372\70\0\1\372\104\0\1\373\2\0\1\374"+
    "\61\0\1\375\73\0\1\334\27\0\1\260\2\0\1\376"+
    "\3\0\1\363\7\0\10\363\1\0\22\363\2\0\2\363"+
    "\57\0\1\377\61\0\1\u0100\105\0\1\u0101\52\0\1\u0102"+
    "\40\0\1\355\72\0\1\370\6\0\1\371\7\0\10\371"+
    "\1\0\22\371\2\0\2\371\57\0\1\u0103\65\0\1\u0104"+
    "\63\0\1\u0105\31\0\1\u0106\71\0\1\u0107\140\0\1\u0108"+
    "\65\0\1\u0109\71\0\1\u010a\75\0\1\u010b\77\0\1\u010c"+
    "\74\0\1\u010d\60\0\1\u010e\30\0\1\u010f\63\0\1\u0107"+
    "\37\0\1\261\1\262\1\0\1\263\10\0\1\264\60\0"+
    "\1\u0110\77\0\1\u0111\74\0\1\u0112\15\0\1\u0113\110\0"+
    "\1\u0114\111\0\1\u0115\100\0\1\u0116\32\0\1\u0117\30\0"+
    "\1\u0118\1\u0119\1\0\1\u011a\10\0\1\u011b\54\0\1\u011c"+
    "\71\0\1\u010b\104\0\1\u010b\17\0\1\u0113\6\0\1\u011d"+
    "\6\0\1\u011e\20\0\22\u011f\53\0\1\u0120\70\0\1\u0120"+
    "\102\0\1\u0121\56\0\1\u0122\103\0\1\u0123\63\0\1\u0124"+
    "\77\0\1\u010b\32\0\1\322\66\0\1\u011d\6\0\1\u011e"+
    "\20\0\22\u011f\20\0\1\u011d\6\0\1\u011f\7\0\10\u011f"+
    "\1\0\22\u011f\2\0\2\u011f\44\0\1\u0125\104\0\1\u0126"+
    "\61\0\1\u0127\105\0\1\u0128\52\0\1\u0129\107\0\1\u012a"+
    "\63\0\1\u012b\65\0\1\u012c\71\0\1\u012d\75\0\1\u012e"+
    "\41\0\1\u012f\115\0\1\u0130\77\0\1\u0131\74\0\1\u0132"+
    "\15\0\1\u0133\130\0\1\u0134\71\0\1\u012e\104\0\1\u012e"+
    "\56\0\22\u0135\62\0\1\u012e\27\0\1\u0117\6\0\1\u0135"+
    "\7\0\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138"+
    "\10\u0135\1\u0139\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0"+
    "\1\u0135\7\0\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135"+
    "\1\u0138\6\u0135\1\u013a\1\u0135\1\u0139\4\u0135\2\0\2\u0135"+
    "\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u013b"+
    "\1\u0136\1\u0137\1\u0135\1\u0138\10\u0135\1\u0139\4\u0135\2\0"+
    "\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0"+
    "\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138\5\u0135\1\u013c\2\u0135"+
    "\1\u0139\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135"+
    "\7\0\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u013d"+
    "\10\u0135\1\u0139\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0"+
    "\1\u0135\7\0\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135"+
    "\1\u0138\6\u0135\1\u013e\1\u0135\1\u0139\4\u0135\2\0\2\u0135"+
    "\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135"+
    "\1\u0136\1\u0137\1\u013f\1\u0138\10\u0135\1\u0139\4\u0135\2\0"+
    "\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0"+
    "\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138\10\u0135\1\u0139\1\u0135"+
    "\1\u0140\2\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135"+
    "\7\0\10\u0135\1\0\1\u0141\1\u0136\1\u0137\1\u0135\1\u0138"+
    "\5\u0135\1\u013c\2\u0135\1\u0139\4\u0135\2\0\2\u0135\14\0"+
    "\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135\1\u0136"+
    "\1\u0137\1\u0135\1\u0138\3\u0135\1\u0142\4\u0135\1\u0139\4\u0135"+
    "\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135"+
    "\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0143\10\u0135\1\u0139"+
    "\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0"+
    "\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0144\10\u0135"+
    "\1\u0139\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135"+
    "\7\0\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138"+
    "\3\u0135\1\u0145\4\u0135\1\u0139\4\u0135\2\0\2\u0135\14\0"+
    "\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135\1\u0136"+
    "\1\u0137\1\u0135\1\u0146\10\u0135\1\u0139\4\u0135\2\0\2\u0135"+
    "\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135"+
    "\1\u0136\1\u0137\1\u0135\1\u0138\5\u0135\1\u0147\2\u0135\1\u0139"+
    "\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0"+
    "\10\u0135\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138\5\u0135"+
    "\1\u013c\2\u0135\1\u0148\4\u0135\2\0\2\u0135\5\0\1\u0133"+
    "\6\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135"+
    "\1\u0136\1\u0137\1\u0135\1\u0138\10\u0135\1\u0139\4\u0135\2\0"+
    "\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0"+
    "\1\u0149\1\u0136\1\u0137\1\u0135\1\u0138\5\u0135\1\u013c\2\u0135"+
    "\1\u0139\4\u0135\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135"+
    "\7\0\10\u0135\1\0\1\u0145\1\u0136\1\u0137\1\u0135\1\u0138"+
    "\10\u0135\1\u0139\1\u0135\1\u0140\2\u0135\2\0\2\u0135\14\0"+
    "\1\u0117\6\0\1\u0135\7\0\10\u0135\1\0\1\u0135\1\u0136"+
    "\1\u0137\1\u0135\1\u013d\6\u0135\1\u0145\1\u0135\1\u0139\4\u0135"+
    "\2\0\2\u0135\14\0\1\u0117\6\0\1\u0135\7\0\10\u0135"+
    "\1\0\1\u0135\1\u0136\1\u0137\1\u0135\1\u0138\5\u0135\1\u0145"+
    "\2\u0135\1\u0139\4\u0135\2\0\2\u0135\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\4\1\1\11\23\1\1\0\10\1\1\0\27\1\1\11"+
    "\1\1\3\0\6\1\1\0\23\1\1\0\2\1\1\0"+
    "\15\1\1\11\4\0\12\1\1\0\1\1\4\0\2\1"+
    "\1\0\5\1\3\0\1\1\5\0\7\1\2\0\1\1"+
    "\4\0\4\1\1\0\1\1\1\0\1\11\10\0\1\1"+
    "\1\0\2\1\1\0\1\1\6\0\3\1\1\11\1\1"+
    "\2\0\1\1\6\0\1\1\3\0\1\1\6\0\2\1"+
    "\30\0\1\1\33\0\1\11\2\0\1\11\5\0\1\1"+
    "\21\0\1\11\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 28: break;
          case 2:
            { System.out.println("Error verificar"+yytext());
            }
            // fall through
          case 29: break;
          case 3:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 30: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 31: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 32: break;
          case 6:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 33: break;
          case 7:
            { lexeme=yytext();  return inte;
            }
            // fall through
          case 34: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 35: break;
          case 9:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 36: break;
          case 10:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 37: break;
          case 11:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return nocom;
            }
            // fall through
          case 38: break;
          case 12:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 39: break;
          case 13:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 40: break;
          case 14:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 41: break;
          case 15:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 42: break;
          case 16:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 43: break;
          case 17:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 44: break;
          case 18:
            { lexeme=yytext(); 
                        return salida;
            }
            // fall through
          case 45: break;
          case 19:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 46: break;
          case 20:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return instancias;
            }
            // fall through
          case 47: break;
          case 21:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 48: break;
          case 22:
            { lexeme=yytext(); 
                        return entrada;
            }
            // fall through
          case 49: break;
          case 23:
            { lexeme=yytext(); 
                         return funcion;
            }
            // fall through
          case 50: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 51: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 52: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 53: break;
          case 27:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
