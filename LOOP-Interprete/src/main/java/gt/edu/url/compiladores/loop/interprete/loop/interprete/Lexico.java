// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\34"+
    "\11\33\1\35\1\36\1\37\1\33\1\40\10\33\1\7"+
    "\1\11\1\7\1\25\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\51\1\54"+
    "\1\55\1\56\1\57\1\60\1\51\1\61\1\62\1\63"+
    "\1\64\1\65\1\51\1\66\2\51\1\7\1\67\2\7"+
    "\6\0\1\3\33\0\1\7\22\0\1\70\12\0\1\70"+
    "\1\0\1\71\1\30\1\72\5\0\1\71\3\0\1\71"+
    "\3\0\1\71\1\0\1\71\6\0\1\71\1\0\1\71"+
    "\4\0\1\73\7\0\1\73\3\0\1\73\3\0\1\73"+
    "\1\0\1\73\6\0\1\73\1\0\1\73\303\0\1\42"+
    "\2\0\1\42\365\0\1\72\12\0\1\42\u0163\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\3\3\3\4\1\5\1\4\1\6"+
    "\1\4\1\7\1\10\1\4\3\11\1\6\16\12\1\1"+
    "\2\3\1\0\1\13\2\3\1\7\1\6\1\14\1\15"+
    "\1\3\2\6\1\0\1\3\2\11\1\16\2\6\26\12"+
    "\1\17\1\12\1\13\2\3\3\0\1\3\1\6\1\20"+
    "\1\6\1\21\1\11\1\6\32\12\1\20\1\22\1\14"+
    "\1\3\1\0\17\12\1\17\5\12\1\23\1\12\1\22"+
    "\1\24\4\0\11\12\1\25\10\12\1\0\1\12\4\0"+
    "\14\12\3\0\1\12\4\0\7\12\3\0\1\12\4\0"+
    "\1\12\1\17\5\12\3\0\1\26\10\0\1\27\1\12"+
    "\1\30\1\31\6\0\2\24\1\12\15\0\1\24\22\0"+
    "\1\24\34\0\1\32\11\0\1\24\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u012c"+
    "\0\74\0\u0168\0\74\0\u01a4\0\u01e0\0\u021c\0\u0258\0\74"+
    "\0\264\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u012c\0\u06cc\0\u0708\0\u0744\0\u012c"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u02d0\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\74\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u10e0"+
    "\0\u111c\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u0384\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1194\0\74\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u0384\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264"+
    "\0\u32a0\0\u012c\0\u012c\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec"+
    "\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\74\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470"+
    "\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650"+
    "\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\7\2\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\7\1\20\1\10\1\21\1\10\2\2"+
    "\1\22\3\23\1\24\2\23\1\25\1\7\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\26\1\34\1\35\1\36"+
    "\1\37\2\26\1\40\1\41\1\42\2\26\1\43\1\26"+
    "\1\44\1\7\1\45\1\2\1\7\75\0\1\3\77\0"+
    "\5\7\3\0\1\7\1\0\5\7\1\0\1\7\1\10"+
    "\1\7\2\0\10\45\1\7\24\46\2\7\1\45\1\0"+
    "\1\7\1\0\1\47\2\0\1\47\1\6\1\50\1\6"+
    "\2\7\3\47\1\6\1\47\5\6\1\47\3\6\2\47"+
    "\10\51\1\7\24\52\2\6\1\45\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\5\7\1\0\3\7\2\0"+
    "\10\45\1\7\24\46\2\7\1\45\1\0\1\7\5\0"+
    "\5\7\3\0\1\10\1\0\5\7\1\0\3\7\2\0"+
    "\10\45\1\7\24\46\2\7\1\45\1\0\1\7\5\0"+
    "\5\7\3\0\1\7\1\0\1\10\2\7\1\53\1\7"+
    "\1\0\3\7\2\0\10\45\1\7\24\46\2\7\1\45"+
    "\1\0\1\7\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\15\1\7\1\15\1\7\1\0\3\7\2\0\10\25"+
    "\1\7\24\54\2\7\1\45\1\0\1\7\14\0\1\55"+
    "\4\0\1\56\57\0\5\57\3\0\1\57\1\0\1\57"+
    "\1\60\1\7\1\17\1\57\1\0\3\57\2\0\7\61"+
    "\1\25\1\57\24\54\2\57\1\45\1\0\1\57\5\0"+
    "\5\7\1\62\2\0\1\7\1\0\1\7\1\15\1\63"+
    "\1\15\1\7\1\0\3\7\2\0\3\23\1\64\3\23"+
    "\1\25\1\7\24\65\2\7\1\45\1\0\1\7\5\0"+
    "\5\7\1\62\2\0\1\7\1\0\1\7\1\15\1\63"+
    "\1\15\1\7\1\0\3\7\2\0\7\23\1\25\1\7"+
    "\24\65\2\7\1\45\1\0\1\7\5\0\5\7\1\62"+
    "\2\0\1\7\1\0\1\7\1\15\1\63\1\15\1\7"+
    "\1\0\3\7\2\0\6\23\1\66\1\25\1\7\24\65"+
    "\2\7\1\45\1\0\1\7\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\15\1\63\1\15\1\7\1\0\3\7"+
    "\2\0\10\25\1\7\24\67\2\7\1\45\1\0\1\7"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\24\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\14\26\1\75\7\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\1\76\10\26\1\77\2\26\1\100\7\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\4\26\1\101\17\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\11\26\1\102\1\26\1\103\3\26\1\104\3\26\1\105"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\1\106\23\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\1\107\23\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\13\26\1\110\10\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\4\26\1\111\17\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\4\26\1\112\3\26\1\113\13\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\16\26\1\114\2\26\1\115\2\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\4\26\1\116\17\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\10\26"+
    "\1\117\13\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\4\26\1\120\17\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\2\7\1\63\2\7\1\0\3\7\2\0\10\45"+
    "\1\7\24\0\2\7\1\45\1\0\1\7\5\0\5\7"+
    "\3\0\1\7\1\0\2\7\1\63\2\7\1\0\3\7"+
    "\2\0\10\45\1\7\24\46\2\7\1\45\1\0\1\7"+
    "\1\0\1\47\2\0\2\47\1\121\1\47\2\0\30\47"+
    "\1\0\26\47\4\0\1\47\2\0\1\47\1\6\1\50"+
    "\1\6\2\7\3\47\1\6\1\47\2\6\1\122\2\6"+
    "\1\47\3\6\2\47\10\51\1\7\24\47\2\6\1\45"+
    "\1\0\1\7\1\0\1\47\2\0\1\47\1\6\1\50"+
    "\1\6\2\7\3\47\1\6\1\47\2\6\1\122\2\6"+
    "\1\47\3\6\2\47\10\51\1\7\24\52\2\6\1\45"+
    "\1\0\1\7\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\123\1\7\1\53\1\7\1\0\3\7\2\0\10\45"+
    "\1\7\24\46\2\7\1\45\1\0\1\7\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\15\1\63\1\15\1\7"+
    "\1\0\3\7\2\0\10\25\1\7\24\54\2\7\1\45"+
    "\1\0\1\7\4\0\1\124\5\55\2\124\1\125\1\55"+
    "\1\124\2\55\1\126\2\55\1\124\3\55\1\0\1\124"+
    "\40\55\1\124\1\55\4\0\24\56\1\0\43\56\5\0"+
    "\5\57\3\0\1\57\1\0\2\57\2\7\1\57\1\0"+
    "\3\57\2\0\7\127\1\45\1\57\24\46\2\57\1\45"+
    "\1\0\1\57\5\0\5\57\3\0\1\57\1\0\1\57"+
    "\1\130\1\7\1\131\1\57\1\0\3\57\2\0\7\132"+
    "\1\25\1\57\24\54\2\57\1\45\1\0\1\57\4\0"+
    "\14\133\1\61\1\133\1\61\5\133\1\0\1\133\10\61"+
    "\1\133\24\61\5\133\13\0\1\134\101\0\1\63\57\0"+
    "\5\7\1\62\2\0\1\7\1\0\1\7\1\15\1\63"+
    "\1\15\1\7\1\0\3\7\2\0\2\23\1\66\4\23"+
    "\1\25\1\7\24\65\2\7\1\45\1\0\1\7\12\0"+
    "\1\62\5\0\1\67\1\0\1\67\7\0\7\65\1\67"+
    "\1\0\24\65\25\0\1\67\1\0\1\67\7\0\10\67"+
    "\1\0\24\67\12\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\15\1\7\1\15\1\7\1\0\3\7\2\0\10\25"+
    "\1\7\24\135\2\7\1\45\1\0\1\7\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\15\1\7\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\24\136\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\15\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\24\137\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\2\7\1\63\1\74\1\7\1\0"+
    "\3\7\2\0\10\73\1\7\24\140\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\3\7\1\74"+
    "\1\7\1\0\3\7\2\0\10\73\1\7\24\141\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\14\26\1\142\7\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\3\26\1\143\20\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\1\144\23\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\13\26\1\145\10\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\17\26\1\146\2\26\1\147\1\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\10\26\1\150\13\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\20\26"+
    "\1\151\3\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\2\26\1\152\21\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\20\26\1\153\3\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\11\26\1\154\12\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\2\26"+
    "\1\111\21\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\2\26\1\155\14\26"+
    "\1\156\4\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\4\26\1\157\17\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\20\26\1\160\3\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\4\26\1\161\17\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\10\26"+
    "\1\162\3\26\1\163\7\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\1\26"+
    "\1\164\22\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\1\165\23\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\13\26\1\166\10\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\16\26\1\167\5\26\2\7\1\73\1\0\1\74\1\0"+
    "\1\47\2\0\2\47\1\121\1\47\2\0\7\47\1\122"+
    "\20\47\1\0\26\47\10\0\5\7\3\0\1\7\1\0"+
    "\3\7\1\170\1\7\1\0\3\7\2\0\10\45\1\7"+
    "\24\46\2\7\1\45\1\0\1\7\4\0\10\124\1\125"+
    "\13\124\1\0\43\124\4\0\10\124\1\125\4\124\1\171"+
    "\6\124\1\0\43\124\4\0\10\55\1\172\5\55\1\124"+
    "\3\55\2\124\1\0\1\55\7\124\1\55\25\124\1\55"+
    "\2\124\1\55\1\124\5\0\5\57\3\0\1\57\1\0"+
    "\2\57\1\173\1\7\1\57\1\0\3\57\2\0\7\127"+
    "\1\45\1\57\24\0\2\57\1\45\1\0\1\57\5\0"+
    "\5\57\3\0\1\57\1\0\1\57\1\130\1\7\1\15"+
    "\1\57\1\0\3\57\2\0\7\132\1\25\1\57\24\54"+
    "\2\57\1\45\1\0\1\57\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\15\1\7\1\131\1\7\1\0\3\7"+
    "\2\0\10\25\1\7\24\54\2\7\1\45\1\0\1\7"+
    "\5\0\5\57\3\0\1\57\1\0\1\57\1\130\1\173"+
    "\1\15\1\57\1\0\3\57\2\0\7\132\1\25\1\57"+
    "\24\67\2\57\1\45\1\0\1\57\4\0\24\133\1\0"+
    "\43\133\12\0\1\62\66\0\5\7\1\174\2\0\1\7"+
    "\1\0\1\7\1\15\1\63\1\15\1\7\1\0\3\7"+
    "\2\0\10\25\1\7\24\135\2\7\1\45\1\0\1\7"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\15\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\24\136"+
    "\2\7\1\73\1\0\1\74\20\0\1\67\1\0\1\137"+
    "\7\0\10\137\1\0\24\137\2\0\1\140\1\0\1\140"+
    "\22\0\1\140\7\0\10\140\1\0\24\140\2\0\1\140"+
    "\1\0\1\140\5\0\5\7\3\0\1\7\1\0\2\7"+
    "\1\63\1\74\1\7\1\0\3\7\2\0\10\73\1\7"+
    "\24\141\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\11\26\1\175\12\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\4\26\1\176\17\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\17\26\1\177\4\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\17\26\1\200"+
    "\4\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\3\26\1\177\14\26\1\201"+
    "\3\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\14\26\1\202\7\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\12\26\1\203\11\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\4\26\1\204\7\26\1\205\7\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\16\26\1\206\5\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\10\26\1\207"+
    "\13\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\17\26\1\210\4\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\11\26\1\211\4\26\1\212\5\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\20\26\1\213\3\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\16\26\1\214\5\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\14\26\1\215"+
    "\7\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\13\26\1\216\10\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\22\26\1\217\1\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\15\26\1\220\6\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\11\26\1\221"+
    "\12\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\11\26\1\222\12\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\14\26\1\214\7\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\3\26\1\223\20\26\2\7\1\73\1\0\1\74\4\0"+
    "\1\124\5\55\2\124\1\125\1\55\1\124\2\55\1\224"+
    "\2\55\1\124\3\55\1\0\1\124\40\55\1\124\1\55"+
    "\5\0\5\173\3\0\1\173\1\0\5\173\1\0\3\173"+
    "\12\0\1\173\24\0\2\173\2\0\1\173\13\0\1\225"+
    "\30\0\1\226\1\227\1\0\1\230\11\0\1\231\17\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\4\26\1\232"+
    "\17\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\13\26\1\233\10\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\4\26\1\214\17\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\20\26\1\201\3\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\16\26\1\234"+
    "\5\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\11\26\1\235\12\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\10\26\1\236\13\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\16\26\1\237\5\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\13\26\1\240"+
    "\10\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\10\26\1\241\13\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\4\26\1\242\17\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\14\26\1\243\7\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\21\26\1\244"+
    "\2\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\4\26\1\245\17\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\1\246\23\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\3\26"+
    "\1\247\20\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\20\26\1\250\3\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\1\251\23\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\10\26\1\252\13\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\10\26\1\253"+
    "\13\26\2\7\1\73\1\0\1\74\4\0\1\254\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\24\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\1\255\23\26\2\7\1\73\1\0\1\74\57\0"+
    "\1\256\57\0\1\257\106\0\1\260\64\0\1\261\31\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\1\262\23\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\1\222\23\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\21\26\1\263\2\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\22\26\1\264"+
    "\1\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\13\26\1\265\10\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\14\26\1\222\7\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\2\26\1\266\21\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\1\26\1\244"+
    "\22\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\13\26\1\267\10\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\10\26\1\157\13\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\12\26\1\270\11\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\13\26\1\271"+
    "\10\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\14\26\1\272\7\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\16\26\1\273\5\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\3\26\1\274\20\26\2\7\1\73\1\0\1\74\5\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\4\26\1\275"+
    "\17\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\2\26\1\274\21\26\2\7"+
    "\1\73\1\0\1\74\4\0\1\276\32\0\1\277\3\0"+
    "\24\300\12\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\3\26\1\301\20\26\2\7\1\73\1\0\1\74\57\0"+
    "\1\302\62\0\1\303\110\0\1\304\53\0\1\305\35\0"+
    "\5\7\3\0\1\7\1\0\1\7\1\70\1\63\1\71"+
    "\1\7\1\0\3\7\2\0\10\72\1\7\13\26\1\222"+
    "\10\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\2\26\1\306\21\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\4\26\1\307\17\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\1\157\23\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\4\26\1\272\17\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\3\26\1\177\20\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\4\26\1\310\17\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\2\26"+
    "\1\311\21\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\17\26\1\214\4\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\1\272\23\26\2\7\1\73\1\0"+
    "\1\74\5\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\1\312\13\26\1\313\7\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\3\26"+
    "\1\314\20\26\2\7\1\73\1\0\1\74\4\0\1\276"+
    "\36\0\24\300\66\0\1\315\16\0\1\316\5\0\1\317"+
    "\17\0\7\300\2\0\24\300\12\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\4\26\1\320\17\26\2\7\1\73"+
    "\1\0\1\74\54\0\1\321\66\0\1\322\73\0\1\323"+
    "\100\0\1\324\24\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\20\26\1\325\3\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\16\26"+
    "\1\326\5\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\13\26\1\327\10\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\10\26\1\330\13\26\2\7\1\73"+
    "\1\0\1\74\5\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\17\26\1\331\4\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\17\26"+
    "\1\332\4\26\2\7\1\73\1\0\1\74\5\0\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\1\333\23\26\2\7"+
    "\1\73\1\0\1\74\53\0\1\334\24\0\1\316\5\0"+
    "\1\335\65\0\1\336\6\0\1\337\30\0\1\340\1\341"+
    "\1\0\1\342\11\0\1\343\17\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\7\1\0\3\7"+
    "\2\0\10\72\1\7\16\26\1\210\5\26\2\7\1\73"+
    "\1\0\1\74\47\0\1\344\102\0\1\345\76\0\1\346"+
    "\16\0\1\347\74\0\5\7\3\0\1\7\1\0\1\7"+
    "\1\70\1\63\1\71\1\7\1\0\3\7\2\0\10\72"+
    "\1\7\14\26\1\157\7\26\2\7\1\73\1\0\1\74"+
    "\4\0\1\350\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\24\26\2\7\1\73\1\0\1\74\5\0\5\7\3\0"+
    "\1\7\1\0\1\7\1\70\1\63\1\71\1\7\1\0"+
    "\3\7\2\0\10\72\1\7\20\26\1\265\3\26\2\7"+
    "\1\73\1\0\1\74\5\0\5\7\3\0\1\7\1\0"+
    "\1\7\1\70\1\63\1\71\1\7\1\0\3\7\2\0"+
    "\10\72\1\7\1\351\23\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\352\1\0\3\7\2\0\10\72\1\7\24\26"+
    "\2\7\1\73\1\0\1\74\5\0\5\7\3\0\1\7"+
    "\1\0\1\7\1\70\1\63\1\71\1\353\1\0\3\7"+
    "\2\0\10\72\1\7\24\26\2\7\1\73\1\0\1\74"+
    "\5\0\5\7\3\0\1\7\1\0\1\7\1\70\1\63"+
    "\1\71\1\7\1\0\3\7\2\0\10\72\1\7\3\26"+
    "\1\266\20\26\2\7\1\73\1\0\1\74\56\0\1\354"+
    "\30\0\1\337\64\0\1\336\37\0\1\340\1\341\1\0"+
    "\1\342\11\0\1\343\16\0\1\337\146\0\1\355\57\0"+
    "\1\356\106\0\1\357\64\0\1\360\67\0\1\361\73\0"+
    "\1\324\107\0\1\324\36\0\1\362\20\0\24\363\11\0"+
    "\1\350\74\0\5\7\3\0\1\7\1\0\1\7\1\70"+
    "\1\63\1\71\1\7\1\0\3\7\2\0\10\72\1\7"+
    "\16\26\1\364\5\26\2\7\1\73\1\0\1\74\45\0"+
    "\1\365\105\0\1\366\62\0\1\367\110\0\1\370\53\0"+
    "\1\371\106\0\1\324\33\0\1\372\3\0\1\362\20\0"+
    "\24\363\23\0\1\372\3\0\1\363\7\0\10\363\1\0"+
    "\24\363\2\0\1\363\1\0\1\363\4\0\1\373\5\7"+
    "\3\0\1\7\1\0\1\7\1\70\1\63\1\71\1\7"+
    "\1\0\3\7\2\0\10\72\1\7\24\26\2\7\1\73"+
    "\1\0\1\74\53\0\1\374\74\0\1\375\66\0\1\376"+
    "\73\0\1\377\100\0\1\u0100\23\0\1\u0101\121\0\7\u0102"+
    "\113\0\1\u0103\62\0\1\u0104\102\0\1\u0105\76\0\1\u0106"+
    "\16\0\1\u0100\36\0\24\u0107\11\0\1\u0101\37\0\1\u0108"+
    "\1\u0109\1\0\1\u010a\11\0\1\u010b\24\0\1\u010c\17\0"+
    "\7\u0102\2\0\24\u0102\50\0\1\u010d\73\0\1\u010e\73\0"+
    "\1\u0100\107\0\1\u0100\20\0\1\u010f\6\0\1\337\2\0"+
    "\1\u0110\3\0\1\u0107\7\0\10\u0107\1\0\24\u0107\2\0"+
    "\1\u0107\1\0\1\u0107\57\0\1\u0111\57\0\1\u0112\106\0"+
    "\1\u0113\64\0\1\u0114\37\0\1\u0115\6\0\1\u010c\20\0"+
    "\24\u0116\61\0\1\u0117\75\0\1\u0100\21\0\1\u010f\6\0"+
    "\1\337\64\0\1\u0110\37\0\1\u0118\1\u0119\1\0\1\u011a"+
    "\11\0\1\u011b\71\0\1\u011c\62\0\1\u011d\110\0\1\u011e"+
    "\53\0\1\u011f\42\0\1\u010c\74\0\1\u0115\6\0\1\u0116"+
    "\7\0\10\u0116\1\0\24\u0116\2\0\1\u0116\1\0\1\u0116"+
    "\4\0\1\u0120\146\0\1\u0121\57\0\1\u0122\106\0\1\u0123"+
    "\64\0\1\u0124\100\0\1\u0125\66\0\1\u0126\73\0\1\u0127"+
    "\100\0\1\u0128\31\0\1\u0129\140\0\1\u012a\62\0\1\u012b"+
    "\110\0\1\u012c\53\0\1\u012d\77\0\1\u012e\102\0\1\u012f"+
    "\76\0\1\u0130\16\0\1\u0131\102\0\1\u0132\30\0\1\u0133"+
    "\1\u0134\1\0\1\u0135\11\0\1\u0136\66\0\1\u0137\66\0"+
    "\1\u0138\73\0\1\u0139\100\0\1\u013a\62\0\1\u013b\73\0"+
    "\1\u0128\107\0\1\u0128\20\0\1\u0131\6\0\1\u013c\6\0"+
    "\1\u013d\20\0\24\u013e\64\0\1\u013f\57\0\1\u0140\106\0"+
    "\1\u0141\64\0\1\u0142\73\0\1\u0143\102\0\1\u0144\76\0"+
    "\1\u0145\16\0\1\u0100\145\0\1\u0128\33\0\1\372\70\0"+
    "\1\u013c\6\0\1\u013d\20\0\24\u013e\20\0\1\u013c\6\0"+
    "\1\u013e\7\0\10\u013e\1\0\24\u013e\2\0\1\u013e\1\0"+
    "\1\u013e\57\0\1\u0146\62\0\1\u0147\110\0\1\u0148\53\0"+
    "\1\u0149\73\0\1\u014a\73\0\1\u013a\107\0\1\u013a\70\0"+
    "\1\u014b\66\0\1\u014c\73\0\1\u014d\100\0\1\u014e\75\0"+
    "\1\u013a\64\0\1\u014f\102\0\1\u0150\76\0\1\u0151\16\0"+
    "\1\u0152\132\0\1\u0153\73\0\1\u014e\107\0\1\u014e\57\0"+
    "\24\u0154\63\0\1\u014e\30\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154\1\u0157\11\u0154"+
    "\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132"+
    "\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156"+
    "\1\u0154\1\u0157\7\u0154\1\u0159\1\u0154\1\u0158\5\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u015a\1\u0155\1\u0156\1\u0154\1\u0157\11\u0154"+
    "\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132"+
    "\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156"+
    "\1\u0154\1\u0157\6\u0154\1\u015b\2\u0154\1\u0158\5\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154\1\u015c\11\u0154"+
    "\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132"+
    "\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156"+
    "\1\u0154\1\u0157\7\u0154\1\u015d\1\u0154\1\u0158\5\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u015e\1\u0157\11\u0154"+
    "\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132"+
    "\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156"+
    "\1\u0154\1\u0157\11\u0154\1\u0158\1\u0154\1\u015f\3\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0160\1\u0155\1\u0156\1\u0154\1\u0157\6\u0154"+
    "\1\u015b\2\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154"+
    "\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154"+
    "\1\u0155\1\u0156\1\u0154\1\u0157\4\u0154\1\u0161\4\u0154\1\u0158"+
    "\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0"+
    "\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154"+
    "\1\u0162\11\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154"+
    "\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154"+
    "\1\u0155\1\u0156\1\u0154\1\u0163\11\u0154\1\u0158\5\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154\1\u0157\4\u0154"+
    "\1\u0164\4\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154"+
    "\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154"+
    "\1\u0155\1\u0156\1\u0154\1\u0165\11\u0154\1\u0158\5\u0154\2\0"+
    "\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0"+
    "\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154\1\u0157\6\u0154"+
    "\1\u0166\2\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154"+
    "\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154"+
    "\1\u0155\1\u0156\1\u0154\1\u0157\6\u0154\1\u015b\2\u0154\1\u0167"+
    "\5\u0154\2\0\1\u0154\1\0\1\u0154\4\0\1\u0152\6\0"+
    "\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0154\1\u0155"+
    "\1\u0156\1\u0154\1\u0157\11\u0154\1\u0158\5\u0154\2\0\1\u0154"+
    "\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154"+
    "\1\0\1\u0168\1\u0155\1\u0156\1\u0154\1\u0157\6\u0154\1\u015b"+
    "\2\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154\13\0"+
    "\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0\1\u0164\1\u0155"+
    "\1\u0156\1\u0154\1\u0157\11\u0154\1\u0158\1\u0154\1\u015f\3\u0154"+
    "\2\0\1\u0154\1\0\1\u0154\13\0\1\u0132\6\0\1\u0154"+
    "\7\0\10\u0154\1\0\1\u0154\1\u0155\1\u0156\1\u0154\1\u015c"+
    "\7\u0154\1\u0164\1\u0154\1\u0158\5\u0154\2\0\1\u0154\1\0"+
    "\1\u0154\13\0\1\u0132\6\0\1\u0154\7\0\10\u0154\1\0"+
    "\1\u0154\1\u0155\1\u0156\1\u0154\1\u0157\6\u0154\1\u0164\2\u0154"+
    "\1\u0158\5\u0154\2\0\1\u0154\1\0\1\u0154";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\4\1\1\11\26\1\1\0\12\1\1\0\36\1\1\11"+
    "\2\1\3\0\45\1\1\0\30\1\1\11\4\0\22\1"+
    "\1\0\1\1\4\0\14\1\3\0\1\1\4\0\7\1"+
    "\3\0\1\1\4\0\7\1\3\0\1\1\10\0\4\1"+
    "\6\0\3\1\15\0\1\1\22\0\1\1\34\0\1\11"+
    "\11\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 27: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
            }
            // fall through
          case 28: break;
          case 3:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 29: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 30: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 31: break;
          case 6:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 32: break;
          case 7:
            { lexeme=yytext();  return entero;
            }
            // fall through
          case 33: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 34: break;
          case 9:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 35: break;
          case 10:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 36: break;
          case 11:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 37: break;
          case 12:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return nocom;
            }
            // fall through
          case 38: break;
          case 13:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 39: break;
          case 14:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 40: break;
          case 15:
            { System.out.println("palabra reservada " + yytext());
                        lexeme=yytext(); 
                        return palabras_reservadas;
            }
            // fall through
          case 41: break;
          case 16:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 42: break;
          case 17:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 43: break;
          case 18:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 44: break;
          case 19:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 45: break;
          case 20:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return instancias;
            }
            // fall through
          case 46: break;
          case 21:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 47: break;
          case 22:
            { lexeme=yytext(); 
                         return funcion;
            }
            // fall through
          case 48: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 49: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 50: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 51: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
