// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\5\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\2\25\1\26\1\5\1\27\1\30\1\31\1\32"+
    "\1\33\10\31\1\34\1\35\1\36\1\31\1\37\10\31"+
    "\1\26\1\10\1\26\1\14\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\53\1\61\1\62"+
    "\1\63\1\64\1\65\1\53\1\66\1\53\1\67\1\26"+
    "\1\70\1\26\1\5\6\0\1\3\33\0\1\5\22\0"+
    "\1\71\12\0\1\71\1\0\1\72\1\26\1\10\5\0"+
    "\1\72\3\0\1\72\3\0\1\72\1\0\1\72\6\0"+
    "\1\72\1\0\1\72\4\0\1\73\7\0\1\73\3\0"+
    "\1\73\3\0\1\73\1\0\1\73\6\0\1\73\1\0"+
    "\1\73\303\0\1\41\2\0\1\41\365\0\1\10\12\0"+
    "\1\41\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\1\2\1\3\2\4\1\5\1\4"+
    "\1\6\1\4\1\7\1\10\3\11\1\6\17\12\3\0"+
    "\1\13\2\0\1\14\1\7\1\15\1\16\2\6\1\0"+
    "\1\11\1\17\1\6\26\12\1\20\2\12\1\0\1\21"+
    "\1\22\1\11\1\1\1\0\32\12\1\21\1\1\16\12"+
    "\1\20\6\12\1\23\1\24\13\12\1\25\10\12\1\0"+
    "\3\12\1\24\13\12\1\0\12\12\1\0\6\12\1\20"+
    "\4\12\1\0\3\12\1\26\1\27\1\30\1\0\3\12"+
    "\1\0\2\12\6\0\1\31\52\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\74\0\360\0\74"+
    "\0\74\0\u012c\0\u0168\0\u01a4\0\u01e0\0\74\0\u021c\0\u0258"+
    "\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\u0654\0\u0690\0\264\0\u06cc\0\u0708\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u02d0\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0258"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0834\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u0f3c\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u030c\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u030c\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u030c\0\u1e3c"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\74\0\74\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\74\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\2\1\5\1\6"+
    "\1\2\2\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\2\6\1\2\1\17\5\20\1\21"+
    "\2\20\1\22\1\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\23\1\31\1\32\1\23\1\33\1\34\2\23"+
    "\1\35\1\36\1\37\1\40\1\23\1\41\2\23\1\4"+
    "\3\2\75\0\1\3\73\0\1\42\2\0\1\43\1\44"+
    "\1\45\2\46\6\44\1\42\1\44\1\43\3\44\13\42"+
    "\1\44\1\0\26\47\1\44\1\42\1\0\1\43\13\0"+
    "\1\50\101\0\1\51\71\0\1\52\1\0\1\22\5\0"+
    "\12\22\1\0\26\22\17\0\1\50\4\0\1\53\72\0"+
    "\1\54\1\0\1\15\5\0\11\55\1\22\1\0\26\22"+
    "\15\0\1\56\5\0\1\22\1\0\1\22\5\0\5\20"+
    "\1\57\3\20\1\22\1\0\26\20\15\0\1\56\5\0"+
    "\1\22\1\0\1\22\5\0\11\20\1\22\1\0\26\20"+
    "\15\0\1\56\5\0\1\22\1\0\1\22\5\0\10\20"+
    "\1\60\1\22\1\0\26\20\23\0\1\22\1\0\1\22"+
    "\5\0\12\22\1\0\26\22\23\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\26\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\15\23\1\63\10\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\64\11\23\1\65\2\23\1\66\10\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\67\21\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\12\23\1\70\1\23\1\71"+
    "\3\23\1\72\3\23\1\73\1\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\1\74\25\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\75\25\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\14\23\1\76\11\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\77\10\23\1\100\10\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\4\23\1\101"+
    "\3\23\1\102\15\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\17\23\1\103\2\23\1\104"+
    "\3\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\1\105\3\23\1\106\21\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\107\3\23\1\110\15\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\1\111\25\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\112\21\23\2\0\2\62\73\0\1\46\1\0"+
    "\1\42\2\0\2\44\1\45\2\46\6\44\1\42\1\44"+
    "\1\42\3\44\13\42\1\44\1\0\26\42\1\44\1\42"+
    "\1\0\1\46\1\0\1\42\2\0\2\44\1\45\2\46"+
    "\6\44\1\42\1\44\1\42\3\44\13\42\1\44\1\0"+
    "\26\42\1\44\1\42\3\0\1\42\2\0\1\43\1\44"+
    "\1\45\2\46\6\44\1\42\1\44\1\47\3\44\2\42"+
    "\12\47\1\0\26\47\1\44\1\42\2\47\4\0\13\50"+
    "\1\0\6\50\1\0\45\50\17\0\1\113\1\0\1\51"+
    "\56\0\13\53\1\0\6\53\1\0\45\53\17\0\1\22"+
    "\1\0\1\114\5\0\12\22\1\0\26\22\10\0\13\115"+
    "\1\22\1\115\1\55\4\115\1\0\12\55\1\115\26\55"+
    "\4\115\12\0\1\116\72\0\1\56\5\0\1\22\1\0"+
    "\1\22\5\0\3\20\1\60\5\20\1\22\1\0\26\20"+
    "\23\0\1\22\1\0\1\22\5\0\12\22\1\0\26\117"+
    "\23\0\1\120\1\0\1\62\5\0\12\62\1\0\26\62"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\15\23\1\121\10\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\3\23\1\122\22\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\123\25\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\14\23\1\124\3\23\1\125"+
    "\5\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\20\23\1\126\2\23\1\127\2\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\10\23\1\130\15\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\21\23\1\131\4\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\2\23\1\132\23\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\21\23\1\133\4\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\12\23\1\134\13\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\2\23\1\77\23\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\2\23\1\135\23\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\4\23\1\136\21\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\6\23\1\137\17\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\21\23\1\140\4\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\141\21\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\10\23\1\142\4\23\1\143"+
    "\10\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\1\23\1\144\24\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\10\23\1\145"+
    "\15\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\1\146\25\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\14\23\1\147\11\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\14\23\1\150\11\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\14\23\1\151\11\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\17\23\1\152\6\23\2\0\2\62\21\0\1\153"+
    "\56\0\13\115\1\0\6\115\1\0\45\115\11\0\1\56"+
    "\101\0\1\22\1\0\1\117\5\0\12\117\1\0\26\117"+
    "\2\0\2\154\42\0\26\154\23\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\12\23\1\155\13\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\156\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\20\23\1\157\5\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\20\23"+
    "\1\160\5\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\4\23\1\107\21\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\3\23"+
    "\1\157\15\23\1\161\4\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\15\23\1\162\10\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\13\23\1\163\12\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\4\23\1\164\10\23"+
    "\1\165\10\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\17\23\1\166\6\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\10\23"+
    "\1\167\15\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\20\23\1\170\5\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\12\23"+
    "\1\171\4\23\1\172\6\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\17\23\1\173\6\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\174\25\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\15\23\1\175\10\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\14\23\1\176\11\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\23\23\1\177\2\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\16\23\1\200\7\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\12\23\1\201\13\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\25\23\1\202\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\12\23\1\203\13\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\15\23"+
    "\1\202\10\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\15\23\1\173\10\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\6\23"+
    "\1\204\17\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\3\23\1\205\22\23\2\0\2\62"+
    "\21\0\1\154\5\0\12\154\1\0\26\154\2\0\2\154"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\206\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\14\23\1\207\11\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\173\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\21\23\1\161\4\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\17\23"+
    "\1\210\6\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\12\23\1\211\13\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\10\23"+
    "\1\212\15\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\17\23\1\213\6\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\14\23"+
    "\1\214\11\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\10\23\1\215\15\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\216\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\15\23\1\217\10\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\22\23"+
    "\1\220\3\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\4\23\1\221\21\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\17\23"+
    "\1\222\6\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\3\23\1\223\22\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\21\23"+
    "\1\224\4\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\1\225\25\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\10\23\1\226"+
    "\15\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\10\23\1\227\15\23\2\0\2\62\4\0"+
    "\1\230\12\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\26\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\4\23\1\231\21\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\1\232\25\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\233\25\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\1\234\25\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\22\23"+
    "\1\235\3\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\23\23\1\236\2\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\14\23"+
    "\1\237\11\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\15\23\1\203\10\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\2\23"+
    "\1\240\23\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\1\23\1\220\24\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\14\23"+
    "\1\241\11\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\10\23\1\136\15\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\13\23"+
    "\1\242\12\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\10\23\1\243\15\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\15\23"+
    "\1\244\10\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\17\23\1\245\6\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\3\23"+
    "\1\246\22\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\4\23\1\247\21\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\2\23"+
    "\1\246\23\23\2\0\2\62\36\0\1\250\54\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\14\23\1\251\11\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\3\23\1\252\22\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\14\23\1\203\11\23"+
    "\2\0\2\62\4\0\1\230\12\0\1\61\1\0\1\23"+
    "\5\0\1\253\11\23\1\0\26\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\2\23\1\254"+
    "\23\23\2\0\2\62\17\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\4\23\1\255\21\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\1\136\25\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\4\23\1\244\21\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\3\23\1\157\22\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\4\23\1\256\21\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\21\23\1\257\4\23"+
    "\2\0\2\62\17\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\20\23\1\173\5\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\1\244\25\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\1\260\14\23\1\261\10\23\2\0\2\62\17\0\1\61"+
    "\1\0\1\23\5\0\12\23\1\0\3\23\1\262\22\23"+
    "\2\0\2\62\61\0\1\263\31\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\21\23\1\264\4\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\265\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\1\23\1\266\2\23\1\267\3\23\1\270\1\23"+
    "\1\0\26\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\21\23\1\271\4\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\17\23"+
    "\1\272\6\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\14\23\1\273\11\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\13\23"+
    "\1\147\12\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\20\23\1\274\5\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\20\23"+
    "\1\275\5\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\1\276\25\23\2\0\2\62\52\0"+
    "\1\277\40\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\202\21\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\17\23\1\170\6\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\15\23\1\300\10\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\14\23\1\301\11\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\4\23\1\302\21\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\15\23\1\136\10\23\2\0"+
    "\2\62\4\0\1\303\12\0\1\61\1\0\1\23\5\0"+
    "\12\23\1\0\26\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\21\23\1\237\4\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\1\304\4\0\12\23"+
    "\1\0\26\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\1\305\4\0\12\23\1\0\26\23\2\0\2\62\17\0"+
    "\1\61\1\0\1\23\5\0\12\23\1\0\3\23\1\240"+
    "\22\23\2\0\2\62\56\0\1\306\34\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\12\23\1\307\13\23\2\0"+
    "\2\62\17\0\1\61\1\0\1\23\5\0\12\23\1\0"+
    "\21\23\1\310\4\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\1\311\25\23\2\0\2\62"+
    "\4\0\1\303\133\0\1\312\46\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\4\23\1\313\21\23\2\0\2\62"+
    "\17\0\1\61\1\0\1\23\5\0\12\23\1\0\4\23"+
    "\1\314\21\23\2\0\2\62\17\0\1\61\1\0\1\23"+
    "\5\0\12\23\1\0\12\23\1\202\13\23\2\0\2\62"+
    "\52\0\1\315\40\0\1\61\1\0\1\23\5\0\12\23"+
    "\1\0\1\107\25\23\2\0\2\62\17\0\1\61\1\0"+
    "\1\23\5\0\12\23\1\0\17\23\1\147\6\23\2\0"+
    "\2\62\60\0\1\316\55\0\1\317\105\0\1\320\23\0"+
    "\1\321\100\0\1\322\74\0\1\323\30\0\1\324\1\325"+
    "\1\0\1\326\12\0\1\327\71\0\1\330\56\0\1\331"+
    "\107\0\1\332\63\0\1\333\104\0\1\334\61\0\1\335"+
    "\111\0\1\336\52\0\1\337\105\0\1\340\65\0\1\341"+
    "\73\0\1\342\101\0\1\343\65\0\1\344\103\0\1\345"+
    "\76\0\1\346\16\0\1\347\131\0\1\350\73\0\1\343"+
    "\110\0\1\343\56\0\26\351\62\0\1\343\27\0\1\323"+
    "\6\0\1\351\5\0\12\351\1\0\1\351\1\352\1\353"+
    "\1\351\1\354\12\351\1\355\6\351\2\0\2\351\12\0"+
    "\1\323\6\0\1\351\5\0\12\351\1\0\1\351\1\352"+
    "\1\353\1\351\1\354\10\351\1\356\1\351\1\355\6\351"+
    "\2\0\2\351\12\0\1\323\6\0\1\351\5\0\12\351"+
    "\1\0\1\357\1\352\1\353\1\351\1\354\12\351\1\355"+
    "\6\351\2\0\2\351\12\0\1\323\6\0\1\351\5\0"+
    "\12\351\1\0\1\351\1\352\1\353\1\351\1\354\7\351"+
    "\1\360\2\351\1\355\6\351\2\0\2\351\12\0\1\323"+
    "\6\0\1\351\5\0\12\351\1\0\1\351\1\352\1\353"+
    "\1\351\1\361\12\351\1\355\6\351\2\0\2\351\12\0"+
    "\1\323\6\0\1\351\5\0\12\351\1\0\1\351\1\352"+
    "\1\353\1\351\1\354\10\351\1\362\1\351\1\355\6\351"+
    "\2\0\2\351\12\0\1\323\6\0\1\351\5\0\12\351"+
    "\1\0\1\351\1\352\1\353\1\363\1\354\12\351\1\355"+
    "\6\351\2\0\2\351\12\0\1\323\6\0\1\351\5\0"+
    "\12\351\1\0\1\351\1\352\1\353\1\351\1\354\12\351"+
    "\1\355\1\351\1\364\4\351\2\0\2\351\12\0\1\323"+
    "\6\0\1\351\5\0\12\351\1\0\1\365\1\352\1\353"+
    "\1\351\1\354\7\351\1\360\2\351\1\355\6\351\2\0"+
    "\2\351\12\0\1\323\6\0\1\351\5\0\12\351\1\0"+
    "\1\351\1\352\1\353\1\351\1\354\5\351\1\366\4\351"+
    "\1\355\6\351\2\0\2\351\12\0\1\323\6\0\1\351"+
    "\5\0\12\351\1\0\1\351\1\352\1\353\1\351\1\367"+
    "\12\351\1\355\6\351\2\0\2\351\12\0\1\323\6\0"+
    "\1\351\5\0\12\351\1\0\1\351\1\352\1\353\1\351"+
    "\1\370\12\351\1\355\6\351\2\0\2\351\12\0\1\323"+
    "\6\0\1\351\5\0\12\351\1\0\1\351\1\352\1\353"+
    "\1\351\1\354\5\351\1\371\4\351\1\355\6\351\2\0"+
    "\2\351\12\0\1\323\6\0\1\351\5\0\12\351\1\0"+
    "\1\351\1\352\1\353\1\351\1\372\12\351\1\355\6\351"+
    "\2\0\2\351\12\0\1\323\6\0\1\351\5\0\12\351"+
    "\1\0\1\351\1\352\1\353\1\351\1\354\7\351\1\373"+
    "\2\351\1\355\6\351\2\0\2\351\12\0\1\323\6\0"+
    "\1\351\5\0\12\351\1\0\1\351\1\352\1\353\1\351"+
    "\1\354\7\351\1\360\2\351\1\374\6\351\2\0\2\351"+
    "\4\0\1\347\5\0\1\323\6\0\1\351\5\0\12\351"+
    "\1\0\1\351\1\352\1\353\1\351\1\354\12\351\1\355"+
    "\6\351\2\0\2\351\12\0\1\323\6\0\1\351\5\0"+
    "\12\351\1\0\1\375\1\352\1\353\1\351\1\354\7\351"+
    "\1\360\2\351\1\355\6\351\2\0\2\351\12\0\1\323"+
    "\6\0\1\351\5\0\12\351\1\0\1\371\1\352\1\353"+
    "\1\351\1\354\12\351\1\355\1\351\1\364\4\351\2\0"+
    "\2\351\12\0\1\323\6\0\1\351\5\0\12\351\1\0"+
    "\1\351\1\352\1\353\1\351\1\361\10\351\1\371\1\351"+
    "\1\355\6\351\2\0\2\351\12\0\1\323\6\0\1\351"+
    "\5\0\12\351\1\0\1\351\1\352\1\353\1\351\1\354"+
    "\7\351\1\371\2\351\1\355\6\351\2\0\2\351";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14160];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\23\1\3\0\1\1\2\0\6\1\1\0"+
    "\34\1\1\0\4\1\1\0\107\1\1\0\17\1\1\0"+
    "\12\1\1\0\13\1\1\0\4\1\2\11\1\0\3\1"+
    "\1\0\2\1\6\0\1\11\52\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 26: break;
          case 2:
            { lexeme=yytext(); System.out.println("Error verificar "+yytext());
            }
            // fall through
          case 27: break;
          case 3:
            { lexeme=yytext();
            }
            // fall through
          case 28: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 29: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 30: break;
          case 6:
            { lexeme=yytext();
                        linea = yyline;
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 31: break;
          case 7:
            { lexeme=yytext();  return entero;
            }
            // fall through
          case 32: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 33: break;
          case 9:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 34: break;
          case 10:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 35: break;
          case 11:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 36: break;
          case 12:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 37: break;
          case 13:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return opcional2;
            }
            // fall through
          case 38: break;
          case 14:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 39: break;
          case 15:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 40: break;
          case 16:
            { lexeme=yytext(); 
                        return palabras_reservadas;
            }
            // fall through
          case 41: break;
          case 17:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 42: break;
          case 18:
            { lexeme=yytext(); 
                        linea = yyline; 
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 43: break;
          case 19:
            { lexeme=yytext();  return funcionespecial;
            }
            // fall through
          case 44: break;
          case 20:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 45: break;
          case 21:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 46: break;
          case 22:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 47: break;
          case 23:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 48: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 49: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return principal;
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
