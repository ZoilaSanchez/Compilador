// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/loop/interprete/loop/interprete/Lexico.flex


package gt.edu.url.compiladores.loop.interprete.loop.interprete;
import static gt.edu.url.compiladores.loop.interprete.loop.interprete.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\35\u0300\1\u0400\267\u0300\10\u0500\u1020\u0300";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\33\1\34"+
    "\11\33\1\35\1\36\2\33\1\37\10\33\1\7\1\11"+
    "\1\7\1\25\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\50\1\51\2\50\1\52\1\53\1\54"+
    "\1\55\1\56\1\50\1\57\1\60\1\61\1\62\1\63"+
    "\4\50\1\7\1\64\2\7\6\0\1\3\33\0\1\7"+
    "\22\0\1\65\12\0\1\65\1\0\1\66\1\30\6\0"+
    "\1\66\3\0\1\66\3\0\1\66\1\0\1\66\6\0"+
    "\1\66\1\0\1\66\4\0\1\67\7\0\1\67\3\0"+
    "\1\67\3\0\1\67\1\0\1\67\6\0\1\67\1\0"+
    "\1\67\303\0\1\41\2\0\1\41\365\0\1\70\12\0"+
    "\1\41\u0163\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\1\2\3\3\4\1\5\1\4\1\6"+
    "\1\4\1\7\1\10\1\4\4\6\13\11\1\1\3\3"+
    "\1\4\1\3\1\7\5\6\1\12\1\13\4\6\1\14"+
    "\1\6\20\11\2\3\1\6\3\0\1\15\1\6\20\11"+
    "\1\15\1\0\1\16\1\6\7\11\1\17\2\11\1\20"+
    "\1\11\1\21\4\0\6\11\1\22\2\11\1\6\1\11"+
    "\4\0\1\11\1\20\1\6\5\11\1\0\1\11\4\0"+
    "\1\6\1\23\1\3\4\11\1\0\1\11\4\0\1\6"+
    "\1\23\1\24\1\11\1\25\1\6\1\11\1\26\11\0"+
    "\1\27\1\6\1\30\1\0\1\11\5\0\2\21\1\27"+
    "\1\30\2\0\1\11\7\0\1\11\7\0\1\6\50\0"+
    "\1\31\3\0\1\21\5\0\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\344\0\71"+
    "\0\u011d\0\71\0\u0156\0\u018f\0\u01c8\0\u0201\0\71\0\253"+
    "\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9"+
    "\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\344"+
    "\0\u0591\0\u05ca\0\u0603\0\u05ca\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u02e5\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u0d23\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u031e\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u06ae\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u031e\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u031e\0\u2049"+
    "\0\u2082\0\71\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u06ae\0\u22bc\0\u095a\0\u22f5\0\u232e"+
    "\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\71"+
    "\0\71\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\71\0\u3219\0\u3252\0\u328b"+
    "\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\2\6\1\7"+
    "\1\6\2\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\6\1\17\1\7\1\20\1\7\2\2\1\21"+
    "\3\22\1\23\1\22\1\24\1\6\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\25\1\33\1\34\2\25\1\35"+
    "\1\36\3\25\1\37\1\40\1\6\1\41\1\6\1\2"+
    "\72\0\1\3\74\0\5\42\3\0\1\42\1\0\2\42"+
    "\1\43\2\42\1\0\1\42\1\44\1\42\2\0\7\41"+
    "\1\42\22\45\2\42\1\41\1\42\6\0\5\42\3\0"+
    "\1\42\1\0\2\42\1\43\2\42\1\0\3\42\2\0"+
    "\7\41\1\42\22\45\2\42\1\41\1\42\6\0\5\42"+
    "\3\0\1\44\1\0\2\42\1\43\2\42\1\0\3\42"+
    "\2\0\7\41\1\42\22\45\2\42\1\41\1\42\6\0"+
    "\5\42\3\0\1\42\1\0\1\44\1\42\1\43\1\46"+
    "\1\42\1\0\3\42\2\0\7\41\1\42\22\45\2\42"+
    "\1\41\1\42\5\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\51\1\52\1\51\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\24\1\42\22\53\1\50\1\42\1\41"+
    "\1\42\1\47\14\0\1\54\4\0\1\55\53\0\1\47"+
    "\5\56\3\47\1\56\1\47\1\56\1\57\1\50\1\16"+
    "\1\56\1\47\1\56\2\6\1\0\1\47\6\22\1\24"+
    "\1\6\22\53\1\56\1\6\1\41\1\6\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\51\1\52"+
    "\1\51\1\50\1\47\1\50\2\42\1\0\1\47\3\24"+
    "\1\60\3\24\1\42\22\61\1\50\1\42\1\41\1\42"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\51\1\52\1\51\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\24\1\42\22\61\1\50\1\42\1\41\1\42"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\51\1\52\1\51\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\5\24\1\62\1\24\1\42\22\61\1\50\1\42"+
    "\1\41\1\42\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\51\1\47\1\51\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\24\1\42\22\61\1\50\1\42"+
    "\1\41\1\42\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\22\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\13\25\1\70\6\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\1\71"+
    "\7\25\1\72\11\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\4\25\1\73\15\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\12\25\1\74\3\25\1\75"+
    "\3\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\1\76\21\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\4\25\1\77\15\25\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\4\25\1\100\15\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\15\25\1\101\4\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\4\25"+
    "\1\102\15\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\4\25\1\103\15\25\1\50\1\42\1\66\1\67"+
    "\1\47\5\0\5\42\3\0\1\42\1\0\2\42\1\104"+
    "\2\42\1\0\3\42\2\0\7\41\1\42\22\0\2\42"+
    "\1\41\1\42\6\0\5\42\3\0\1\42\1\0\5\42"+
    "\1\0\3\42\2\0\7\41\1\42\22\45\2\42\1\41"+
    "\1\42\6\0\5\43\3\0\1\43\1\0\5\43\1\0"+
    "\3\43\2\0\36\43\6\0\5\42\3\0\1\42\1\0"+
    "\2\42\1\104\2\42\1\0\3\42\2\0\7\41\1\42"+
    "\22\45\2\42\1\41\1\42\6\0\5\42\3\0\1\42"+
    "\1\0\1\42\1\105\1\42\1\46\1\42\1\0\3\42"+
    "\2\0\7\41\1\42\22\45\2\42\1\41\1\42\5\0"+
    "\16\47\1\0\3\47\3\0\1\47\6\0\1\47\23\0"+
    "\1\47\3\0\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\3\50\1\42\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\6\41\1\106\1\42\22\45\1\50\1\42\1\41"+
    "\1\42\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\51\1\50\1\51\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\24\1\42\22\53\1\50\1\42\1\41"+
    "\1\42\1\47\4\0\1\47\5\52\3\47\1\52\1\47"+
    "\3\52\1\43\1\52\1\47\1\52\2\43\1\0\1\47"+
    "\6\43\1\52\23\43\1\52\3\43\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\51\1\47\1\51"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\24\1\42"+
    "\22\53\1\50\1\42\1\41\1\42\1\47\4\0\1\107"+
    "\5\54\2\0\1\110\1\54\1\0\2\54\1\111\2\54"+
    "\1\0\3\54\2\0\36\54\5\0\24\55\1\0\40\55"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\2\50\1\52"+
    "\1\42\1\50\1\47\1\50\2\42\1\0\1\47\6\41"+
    "\1\106\1\42\22\45\1\50\1\42\1\41\1\42\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\51"+
    "\1\52\1\112\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\24\1\42\22\53\1\50\1\42\1\41\1\42\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\51"+
    "\1\47\1\51\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\2\24\1\62\4\24\1\42\22\61\1\50\1\42\1\41"+
    "\1\42\1\47\4\0\14\47\1\61\1\47\1\61\3\47"+
    "\3\0\1\47\7\61\1\0\22\61\1\47\3\0\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\51"+
    "\1\50\1\51\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\24\1\42\22\113\1\50\1\42\1\41\1\42\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\51"+
    "\1\50\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\22\114\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\51"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\22\115\1\50\1\42\1\66\1\67\1\47"+
    "\5\0\5\42\3\0\1\42\1\0\2\42\1\104\1\67"+
    "\1\42\1\0\3\42\2\0\7\66\1\42\22\116\2\42"+
    "\1\66\1\67\6\0\5\42\3\0\1\42\1\0\3\42"+
    "\1\67\1\42\1\0\3\42\2\0\7\66\1\42\22\117"+
    "\2\42\1\66\1\67\5\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\13\25\1\120\6\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\3\25"+
    "\1\121\16\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\1\122\21\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\21\25\1\123\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\17\25\1\124\2\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\2\25\1\125\17\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\10\25"+
    "\1\126\11\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\4\25\1\127\15\25\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\17\25\1\130\2\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\13\25\1\131\6\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\1\132"+
    "\21\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\15\25\1\133\4\25\1\50\1\42\1\66\1\67\1\47"+
    "\21\0\1\104\54\0\5\42\3\0\1\42\1\0\3\42"+
    "\1\134\1\42\1\0\3\42\2\0\7\41\1\42\22\45"+
    "\2\42\1\41\1\42\5\0\1\47\5\50\3\47\1\50"+
    "\1\47\2\50\1\47\1\42\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\6\41\1\106\1\42\22\0\1\50\1\42"+
    "\1\41\1\42\1\47\4\0\6\107\2\0\1\110\1\107"+
    "\1\0\2\107\1\135\2\107\1\0\3\107\2\0\36\107"+
    "\22\0\1\136\53\0\16\54\1\0\3\54\3\0\1\54"+
    "\6\0\1\54\23\0\1\54\3\0\1\54\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\51\1\50\1\112"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\24\1\42"+
    "\22\53\1\50\1\42\1\41\1\42\1\47\4\0\1\47"+
    "\5\50\1\137\2\47\1\50\1\47\1\50\1\51\1\47"+
    "\1\51\1\50\1\47\1\50\2\42\1\0\1\47\7\24"+
    "\1\42\22\113\1\50\1\42\1\41\1\42\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\51\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\22\114\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\14\47\1\61\1\47\1\115\3\47\3\0\1\47\7\115"+
    "\1\0\22\115\1\47\1\0\2\116\1\47\22\0\1\116"+
    "\7\0\7\116\1\0\22\116\2\0\2\116\6\0\5\42"+
    "\3\0\1\42\1\0\2\42\1\104\1\67\1\42\1\0"+
    "\3\42\2\0\7\66\1\42\22\117\2\42\1\66\1\67"+
    "\5\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\10\25\1\140\11\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\4\25\1\141\15\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\47\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\16\25\1\142"+
    "\3\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\13\25\1\143\6\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\4\25\1\144\15\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\15\25\1\145\4\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\47\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\16\25\1\146"+
    "\3\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\15\25\1\147\4\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\13\25\1\150\6\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\14\25\1\151\5\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\47\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\10\25\1\152"+
    "\11\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\3\25\1\153\16\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\16\107\1\0\3\107\3\0\1\107\6\0\1\107"+
    "\23\0\1\107\3\0\1\107\14\0\1\110\60\0\7\47"+
    "\1\154\6\47\1\0\3\47\3\0\1\47\6\0\1\47"+
    "\2\0\1\155\1\156\1\0\1\157\10\0\1\160\4\0"+
    "\1\47\3\0\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\4\25\1\161\15\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\12\25"+
    "\1\162\7\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\4\25\1\163\15\25\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\10\25\1\164\11\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\15\25\1\165\4\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\7\25"+
    "\1\166\12\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\13\25\1\167\6\25\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\3\25\1\170\16\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\7\25\1\171\12\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\172\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\22\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\1\173"+
    "\21\25\1\50\1\42\1\66\1\67\1\47\55\0\1\174"+
    "\55\0\1\175\102\0\1\176\62\0\1\177\26\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\1\200\21\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\1\201\21\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\202\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\16\25\1\203\3\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\21\25\1\204\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\13\25\1\152\6\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\47\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\1\25"+
    "\1\205\20\25\1\50\1\42\1\66\1\67\1\47\4\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\13\25\1\206\6\25\1\50\1\42\1\66\1\67"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\4\25\1\207\15\25\1\50\1\42"+
    "\1\66\1\67\1\47\4\0\1\172\15\47\1\0\3\47"+
    "\3\0\1\47\6\0\1\47\1\0\22\210\1\47\3\0"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\2\42\1\0"+
    "\1\47\7\65\1\42\3\25\1\211\16\25\1\50\1\42"+
    "\1\66\1\67\1\47\55\0\1\212\60\0\1\213\104\0"+
    "\1\214\51\0\1\215\32\0\1\47\5\50\3\47\1\50"+
    "\1\47\1\50\1\63\1\47\1\64\1\50\1\47\1\50"+
    "\2\42\1\0\1\47\7\65\1\42\12\25\1\152\7\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\1\216\5\50"+
    "\3\47\1\50\1\47\1\50\1\63\1\47\1\64\1\50"+
    "\1\47\1\50\2\42\1\0\1\47\7\65\1\42\22\25"+
    "\1\50\1\42\1\66\1\67\1\47\4\0\16\47\1\0"+
    "\3\47\3\0\1\47\6\217\1\47\23\0\1\47\3\0"+
    "\1\47\4\0\1\47\5\50\3\47\1\50\1\47\1\50"+
    "\1\63\1\47\1\64\1\50\1\47\1\50\1\220\1\42"+
    "\1\0\1\47\7\65\1\42\22\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\4\25\1\221\15\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\47\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\7\25\1\222"+
    "\12\25\1\50\1\42\1\66\1\67\1\47\4\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\16\25\1\223\3\25\1\50\1\42\1\66\1\67\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\3\25\1\224\16\25\1\50\1\42\1\66"+
    "\1\67\1\47\12\0\1\225\17\0\6\210\2\0\22\210"+
    "\11\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\4\25\1\226\15\25\1\50\1\42\1\66"+
    "\1\67\1\47\52\0\1\227\64\0\1\230\70\0\1\231"+
    "\74\0\1\232\22\0\1\172\1\47\1\233\13\47\1\0"+
    "\3\47\3\0\1\47\6\0\1\47\1\0\22\210\1\47"+
    "\3\0\1\47\32\0\6\217\2\0\22\234\12\0\5\42"+
    "\3\0\1\42\1\0\3\42\1\220\1\42\1\0\3\42"+
    "\2\0\6\235\1\41\1\42\22\45\2\42\1\41\1\42"+
    "\5\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\15\25\1\236\4\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\1\47\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\64\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\15\25\1\237\4\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\240\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\22\25\1\50"+
    "\1\42\1\66\1\67\1\47\4\0\1\47\5\50\3\47"+
    "\1\50\1\47\1\50\1\63\1\47\1\64\1\50\1\47"+
    "\1\50\2\42\1\0\1\47\7\65\1\42\1\241\21\25"+
    "\1\50\1\42\1\66\1\67\1\47\13\0\1\242\27\0"+
    "\1\243\1\244\1\0\1\245\10\0\1\246\15\0\1\47"+
    "\5\50\3\47\1\50\1\47\1\50\1\63\1\47\1\64"+
    "\1\50\1\47\1\50\2\42\1\0\1\47\7\65\1\42"+
    "\15\25\1\146\4\25\1\50\1\42\1\66\1\67\1\47"+
    "\46\0\1\247\76\0\1\250\73\0\1\251\15\0\1\252"+
    "\65\0\1\253\2\0\2\233\1\254\1\233\2\47\10\233"+
    "\1\253\3\233\3\253\1\233\6\253\1\233\1\0\22\253"+
    "\1\233\1\253\2\0\1\47\42\0\22\234\11\0\24\235"+
    "\1\0\40\235\4\0\1\255\5\50\3\47\1\50\1\47"+
    "\1\50\1\63\1\47\1\256\1\50\1\47\1\50\2\42"+
    "\1\0\1\47\7\65\1\42\22\25\1\50\1\42\1\66"+
    "\1\67\1\47\4\0\16\47\1\0\3\47\3\0\1\47"+
    "\6\0\1\47\15\0\1\257\5\0\1\47\3\0\1\47"+
    "\4\0\1\47\5\50\3\47\1\50\1\47\1\50\1\63"+
    "\1\47\1\64\1\50\1\47\1\50\2\42\1\0\1\47"+
    "\7\65\1\42\3\25\1\260\16\25\1\50\1\42\1\66"+
    "\1\67\1\47\55\0\1\261\55\0\1\262\102\0\1\263"+
    "\62\0\1\264\64\0\1\265\70\0\1\232\103\0\1\232"+
    "\35\0\1\266\17\0\22\267\6\0\1\253\2\0\2\253"+
    "\1\270\1\253\2\0\27\253\1\0\24\253\7\0\1\255"+
    "\15\47\1\271\3\47\3\0\1\47\6\0\1\47\23\0"+
    "\1\47\3\0\1\47\57\0\1\272\2\0\1\273\12\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\4\25\1\274\15\25\1\50\1\42\1\66\1\67"+
    "\1\47\55\0\1\275\60\0\1\276\104\0\1\277\51\0"+
    "\1\300\102\0\1\232\32\0\1\301\3\0\1\266\17\0"+
    "\22\267\23\0\1\301\3\0\1\267\7\0\7\267\1\0"+
    "\22\267\2\0\2\267\52\0\1\302\62\0\1\303\31\0"+
    "\1\47\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\16\25\1\304\3\25\1\50\1\42\1\66\1\67"+
    "\1\47\52\0\1\305\64\0\1\306\70\0\1\307\74\0"+
    "\1\310\22\0\1\311\147\0\1\312\57\0\1\313\22\0"+
    "\1\314\5\50\3\47\1\50\1\47\1\50\1\63\1\47"+
    "\1\64\1\50\1\47\1\50\2\42\1\0\1\47\7\65"+
    "\1\42\22\25\1\50\1\42\1\66\1\67\1\47\46\0"+
    "\1\315\76\0\1\316\73\0\1\317\15\0\1\320\70\0"+
    "\1\311\36\0\1\321\1\322\1\0\1\323\10\0\1\324"+
    "\53\0\1\325\77\0\1\326\23\0\16\47\1\0\3\47"+
    "\3\0\1\47\6\0\1\47\15\0\1\327\5\0\1\47"+
    "\3\0\1\47\42\0\1\330\70\0\1\310\103\0\1\310"+
    "\17\0\1\320\35\0\22\331\62\0\1\332\55\0\1\333"+
    "\102\0\1\334\62\0\1\335\67\0\1\336\67\0\1\336"+
    "\103\0\1\337\2\0\1\340\62\0\1\310\27\0\1\242"+
    "\2\0\1\341\3\0\1\331\7\0\7\331\1\0\22\331"+
    "\2\0\2\331\56\0\1\342\60\0\1\343\104\0\1\344"+
    "\51\0\1\345\103\0\1\346\64\0\1\347\62\0\1\350"+
    "\31\0\1\351\136\0\1\352\64\0\1\353\70\0\1\354"+
    "\74\0\1\355\76\0\1\356\73\0\1\357\57\0\1\360"+
    "\22\0\1\351\36\0\1\243\1\244\1\0\1\245\10\0"+
    "\1\246\57\0\1\361\76\0\1\362\73\0\1\363\15\0"+
    "\1\364\107\0\1\365\107\0\1\366\77\0\1\367\61\0"+
    "\1\370\70\0\1\355\103\0\1\355\17\0\1\364\6\0"+
    "\1\371\6\0\1\372\17\0\22\373\52\0\1\374\67\0"+
    "\1\374\100\0\1\355\32\0\1\301\65\0\1\371\6\0"+
    "\1\372\17\0\22\373\20\0\1\371\6\0\1\373\7\0"+
    "\7\373\1\0\22\373\2\0\2\373\43\0\1\375\106\0"+
    "\1\376\33\0\1\377\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13338];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\4\1\1\11\67\1\3\0\23\1\1\0\17\1\4\0"+
    "\13\1\4\0\10\1\1\0\1\1\4\0\7\1\1\0"+
    "\1\1\4\0\7\1\1\11\11\0\3\1\1\0\1\1"+
    "\5\0\2\1\2\11\2\0\1\1\7\0\1\1\7\0"+
    "\1\1\50\0\1\11\3\0\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 27: break;
          case 2:
            { System.out.println("Error verificar "+yytext());
                        return error;
            }
            // fall through
          case 28: break;
          case 3:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return No;
            }
            // fall through
          case 29: break;
          case 4:
            { lexeme=yytext(); 
                         return operadores;
            }
            // fall through
          case 30: break;
          case 5:
            { lexeme=yytext(); 
                        return opcional;
            }
            // fall through
          case 31: break;
          case 6:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return nonu;
            }
            // fall through
          case 32: break;
          case 7:
            { lexeme=yytext();  return inte;
            }
            // fall through
          case 33: break;
          case 8:
            { lexeme=yytext(); 
                        return fin_de_linea;
            }
            // fall through
          case 34: break;
          case 9:
            { lexeme=yytext(); 
                        return identificador;
            }
            // fall through
          case 35: break;
          case 10:
            { lexeme=yytext();
                        System.out.println("Error verificar "+yytext());
                        return nocom;
            }
            // fall through
          case 36: break;
          case 11:
            { lexeme=yytext();  return comentario;
            }
            // fall through
          case 37: break;
          case 12:
            { lexeme=yytext(); 
                         return operador_Logico;
            }
            // fall through
          case 38: break;
          case 13:
            { lexeme=yytext();  return real;
            }
            // fall through
          case 39: break;
          case 14:
            { lexeme=yytext();  return comentarios;
            }
            // fall through
          case 40: break;
          case 15:
            { lexeme=yytext(); 
                        return salida;
            }
            // fall through
          case 41: break;
          case 16:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return tipo;
            }
            // fall through
          case 42: break;
          case 17:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return instancias;
            }
            // fall through
          case 43: break;
          case 18:
            { lexeme=yytext();  
                       return boleano;
            }
            // fall through
          case 44: break;
          case 19:
            { lexeme=yytext(); 
                         return clases;
            }
            // fall through
          case 45: break;
          case 20:
            { lexeme=yytext();  
                        System.out.println("Error verificar "+yytext());
                        return noclas;
            }
            // fall through
          case 46: break;
          case 21:
            { lexeme=yytext(); 
                        return entrada;
            }
            // fall through
          case 47: break;
          case 22:
            { lexeme=yytext(); 
                         return funcion;
            }
            // fall through
          case 48: break;
          case 23:
            { lexeme=yytext();  return cadena;
            }
            // fall through
          case 49: break;
          case 24:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return retornar;
            }
            // fall through
          case 50: break;
          case 25:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return metodos;
            }
            // fall through
          case 51: break;
          case 26:
            { lexeme=yytext(); 
                        linea= yyline; 
                        return propiedades;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
