
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\006\011\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\007\005\000\002\007\011\000\002\010\005\000\002\010" +
    "\011\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\011\005\000\002\011\011\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\017\006\000\002" +
    "\071\004\000\002\022\011\000\002\022\010\000\002\022" +
    "\011\000\002\022\011\000\002\024\006\000\002\024\004" +
    "\000\002\025\007\000\002\025\005\000\002\026\007\000" +
    "\002\026\005\000\002\027\006\000\002\027\004\000\002" +
    "\023\013\000\002\023\006\000\002\031\015\000\002\031" +
    "\016\000\002\031\013\000\002\031\005\000\002\037\006" +
    "\000\002\032\011\000\002\032\010\000\002\034\011\000" +
    "\002\034\010\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\035\011\000\002\035" +
    "\011\000\002\035\011\000\002\035\011\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\042\017\000\002\042\007\000\002" +
    "\041\011\000\002\041\012\000\002\045\006\000\002\046" +
    "\016\000\002\046\016\000\002\046\016\000\002\046\016" +
    "\000\002\047\004\000\002\047\006\000\002\050\004\000" +
    "\002\050\006\000\002\051\004\000\002\051\006\000\002" +
    "\052\004\000\002\052\006\000\002\053\007\000\002\053" +
    "\007\000\002\053\007\000\002\053\007\000\002\053\013" +
    "\000\002\053\014\000\002\056\004\000\002\057\004\000" +
    "\002\061\004\000\002\060\004\000\002\012\005\000\002" +
    "\012\003\000\002\013\004\000\002\013\003\000\002\030" +
    "\004\000\002\030\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\034\006\013\007\017\011\016\017\046\020" +
    "\004\021\024\022\005\031\043\041\021\044\040\051\023" +
    "\052\045\055\042\001\002\000\004\016\u016f\001\002\000" +
    "\004\016\u016e\001\002\000\036\002\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\041" +
    "\ufff1\044\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002\000\004" +
    "\002\u016d\001\002\000\036\002\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031\ufffa\041\ufffa" +
    "\044\ufffa\051\ufffa\052\ufffa\055\ufffa\001\002\000\036\002" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\031\ufff0\041\ufff0\044\ufff0\051\ufff0\052\ufff0\055" +
    "\ufff0\001\002\000\036\002\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\041\ufff5\044" +
    "\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002\000\004\016\u0158" +
    "\001\002\000\036\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\031\ufff4\041\ufff4\044\ufff4" +
    "\051\ufff4\052\ufff4\055\ufff4\001\002\000\036\002\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\031\uffdb\041\uffdb\044\uffdb\051\uffdb\052\uffdb\055\uffdb\001" +
    "\002\000\006\016\u0144\077\u0143\001\002\000\004\016\u0140" +
    "\001\002\000\016\011\u0113\070\u0116\071\u0114\072\u0112\073" +
    "\u0111\074\u010f\001\002\000\006\004\366\011\367\001\002" +
    "\000\036\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\031\ufff8\041\ufff8\044\ufff8\051\ufff8" +
    "\052\ufff8\055\ufff8\001\002\000\004\024\356\001\002\000" +
    "\004\016\355\001\002\000\036\002\uffda\006\uffda\007\uffda" +
    "\011\uffda\017\uffda\020\uffda\021\uffda\022\uffda\031\uffda\041" +
    "\uffda\044\uffda\051\uffda\052\uffda\055\uffda\001\002\000\036" +
    "\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\031\ufff3\041\ufff3\044\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\001\002\000\036\002\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\041\ufff7" +
    "\044\ufff7\051\ufff7\052\ufff7\055\ufff7\001\002\000\036\002" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\031\ufff6\041\ufff6\044\ufff6\051\ufff6\052\ufff6\055" +
    "\ufff6\001\002\000\036\002\uffff\006\013\007\017\011\016" +
    "\017\046\020\004\021\024\022\005\031\043\041\021\044" +
    "\040\051\023\052\045\055\042\001\002\000\036\002\uffef" +
    "\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\031\uffef\041\uffef\044\uffef\051\uffef\052\uffef\055\uffef" +
    "\001\002\000\036\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\041\ufffc\044\ufffc" +
    "\051\ufffc\052\ufffc\055\ufffc\001\002\000\036\002\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\031\ufffb\041\ufffb\044\ufffb\051\ufffb\052\ufffb\055\ufffb\001" +
    "\002\000\036\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\031\ufff2\041\ufff2\044\ufff2\051" +
    "\ufff2\052\ufff2\055\ufff2\001\002\000\036\002\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031" +
    "\ufff9\041\ufff9\044\ufff9\051\ufff9\052\ufff9\055\ufff9\001\002" +
    "\000\004\011\312\001\002\000\004\024\262\001\002\000" +
    "\012\011\172\066\175\067\174\076\176\001\002\000\006" +
    "\013\053\023\054\001\002\000\004\016\144\001\002\000" +
    "\004\011\057\001\002\000\004\011\052\001\002\000\004" +
    "\016\051\001\002\000\036\002\001\006\013\007\017\011" +
    "\016\017\046\020\004\021\024\022\005\031\043\041\021" +
    "\044\040\051\023\052\045\055\042\001\002\000\004\002" +
    "\ufffd\001\002\000\012\011\uff92\066\uff92\067\uff92\076\uff92" +
    "\001\002\000\006\013\053\023\054\001\002\000\004\023" +
    "\056\001\002\000\042\002\uff8b\006\uff8b\007\uff8b\011\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\022\uff8b\026\uff8b\031\uff8b\041" +
    "\uff8b\043\uff8b\044\uff8b\051\uff8b\052\uff8b\055\uff8b\001\002" +
    "\000\036\002\uffbc\006\uffbc\007\uffbc\011\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\031\uffbc\041\uffbc\044\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\001\002\000\042\002\uff8c\006\uff8c\007" +
    "\uff8c\011\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\026\uff8c" +
    "\031\uff8c\041\uff8c\043\uff8c\044\uff8c\051\uff8c\052\uff8c\055" +
    "\uff8c\001\002\000\016\012\074\013\uff8d\016\uff8d\023\uff8d" +
    "\024\073\077\072\001\002\000\010\013\053\016\061\023" +
    "\054\001\002\000\004\015\063\001\002\000\036\002\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\031\uffe6\041\uffe6\044\uffe6\051\uffe6\052\uffe6\055\uffe6" +
    "\001\002\000\004\016\064\001\002\000\010\004\065\005" +
    "\070\010\066\001\002\000\006\013\uffe4\023\uffe4\001\002" +
    "\000\006\013\uffe2\023\uffe2\001\002\000\006\013\053\023" +
    "\054\001\002\000\006\013\uffe3\023\uffe3\001\002\000\036" +
    "\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\031\uffe5\041\uffe5\044\uffe5\051\uffe5\052\uffe5" +
    "\055\uffe5\001\002\000\006\004\124\100\125\001\002\000" +
    "\004\020\100\001\002\000\004\011\075\001\002\000\012" +
    "\012\074\013\uff8d\016\uff8d\023\uff8d\001\002\000\010\013" +
    "\uff8e\016\uff8e\023\uff8e\001\002\000\004\025\105\001\002" +
    "\000\004\016\101\001\002\000\004\011\102\001\002\000" +
    "\006\012\103\025\uffc4\001\002\000\004\020\100\001\002" +
    "\000\004\025\uffc5\001\002\000\004\023\106\001\002\000" +
    "\004\026\111\001\002\000\006\013\053\023\054\001\002" +
    "\000\036\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\031\uffcb\041\uffcb\044\uffcb\051\uffcb" +
    "\052\uffcb\055\uffcb\001\002\000\012\011\uff89\026\111\035" +
    "\uff89\052\uff89\001\002\000\004\035\113\001\002\000\006" +
    "\004\115\016\114\001\002\000\004\011\116\001\002\000" +
    "\006\013\uffc0\023\uffc0\001\002\000\004\016\117\001\002" +
    "\000\004\064\120\001\002\000\004\016\121\001\002\000" +
    "\004\011\122\001\002\000\006\013\uffc1\023\uffc1\001\002" +
    "\000\010\011\uff8a\035\uff8a\052\uff8a\001\002\000\004\100" +
    "\127\001\002\000\006\013\053\023\054\001\002\000\036" +
    "\002\uff96\006\uff96\007\uff96\011\uff96\017\uff96\020\uff96\021" +
    "\uff96\022\uff96\031\uff96\041\uff96\044\uff96\051\uff96\052\uff96" +
    "\055\uff96\001\002\000\004\016\130\001\002\000\004\015" +
    "\131\001\002\000\004\101\132\001\002\000\004\016\133" +
    "\001\002\000\004\010\135\001\002\000\004\102\142\001" +
    "\002\000\006\012\137\016\136\001\002\000\004\102\uff9a" +
    "\001\002\000\004\016\140\001\002\000\004\010\135\001" +
    "\002\000\004\102\uff99\001\002\000\006\013\053\023\054" +
    "\001\002\000\036\002\uffa1\006\uffa1\007\uffa1\011\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\041\uffa1\044\uffa1" +
    "\051\uffa1\052\uffa1\055\uffa1\001\002\000\004\011\145\001" +
    "\002\000\004\016\146\001\002\000\004\015\147\001\002" +
    "\000\004\016\150\001\002\000\004\057\151\001\002\000" +
    "\004\031\152\001\002\000\004\024\153\001\002\000\014" +
    "\004\154\005\161\010\157\014\155\025\162\001\002\000" +
    "\012\012\uff88\013\uff88\023\uff88\025\uff88\001\002\000\012" +
    "\012\uff87\013\uff87\023\uff87\025\uff87\001\002\000\004\012" +
    "\166\001\002\000\012\012\uff86\013\uff86\023\uff86\025\uff86" +
    "\001\002\000\004\025\164\001\002\000\012\012\uff85\013" +
    "\uff85\023\uff85\025\uff85\001\002\000\006\013\053\023\054" +
    "\001\002\000\036\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\031\uffbf\041\uffbf\044\uffbf" +
    "\051\uffbf\052\uffbf\055\uffbf\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uffbe\006\uffbe\007\uffbe\011\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\031\uffbe\041\uffbe\044" +
    "\uffbe\051\uffbe\052\uffbe\055\uffbe\001\002\000\004\016\167" +
    "\001\002\000\012\004\154\005\161\010\157\014\155\001" +
    "\002\000\004\025\uffbb\001\002\000\036\002\uffce\006\uffce" +
    "\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce\031" +
    "\uffce\041\uffce\044\uffce\051\uffce\052\uffce\055\uffce\001\002" +
    "\000\016\012\074\013\uff8d\016\uff8d\023\uff8d\024\230\077" +
    "\231\001\002\000\010\013\053\016\216\023\054\001\002" +
    "\000\004\024\211\001\002\000\004\024\204\001\002\000" +
    "\004\024\177\001\002\000\004\022\005\001\002\000\004" +
    "\011\201\001\002\000\004\025\202\001\002\000\006\013" +
    "\053\023\054\001\002\000\036\002\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\031\uffb2\041" +
    "\uffb2\044\uffb2\051\uffb2\052\uffb2\055\uffb2\001\002\000\004" +
    "\022\005\001\002\000\004\011\206\001\002\000\004\025" +
    "\207\001\002\000\006\013\053\023\054\001\002\000\036" +
    "\002\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\031\uffb1\041\uffb1\044\uffb1\051\uffb1\052\uffb1" +
    "\055\uffb1\001\002\000\004\022\005\001\002\000\004\011" +
    "\213\001\002\000\004\025\214\001\002\000\006\013\053" +
    "\023\054\001\002\000\036\002\uffb0\006\uffb0\007\uffb0\011" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\031\uffb0\041\uffb0" +
    "\044\uffb0\051\uffb0\052\uffb0\055\uffb0\001\002\000\004\015" +
    "\220\001\002\000\036\002\uffee\006\uffee\007\uffee\011\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\031\uffee\041\uffee\044" +
    "\uffee\051\uffee\052\uffee\055\uffee\001\002\000\004\016\221" +
    "\001\002\000\012\004\224\005\226\010\225\014\223\001" +
    "\002\000\006\013\053\023\054\001\002\000\006\013\uffea" +
    "\023\uffea\001\002\000\006\013\uffec\023\uffec\001\002\000" +
    "\006\013\uffe9\023\uffe9\001\002\000\006\013\uffeb\023\uffeb" +
    "\001\002\000\036\002\uffed\006\uffed\007\uffed\011\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\031\uffed\041\uffed\044\uffed" +
    "\051\uffed\052\uffed\055\uffed\001\002\000\004\017\046\001" +
    "\002\000\006\004\232\100\233\001\002\000\004\100\235" +
    "\001\002\000\006\013\053\023\054\001\002\000\036\002" +
    "\uff98\006\uff98\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\031\uff98\041\uff98\044\uff98\051\uff98\052\uff98\055" +
    "\uff98\001\002\000\004\016\236\001\002\000\004\015\237" +
    "\001\002\000\004\101\240\001\002\000\004\016\241\001" +
    "\002\000\004\004\242\001\002\000\006\012\247\016\246" +
    "\001\002\000\004\102\244\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uffa4\006\uffa4\007\uffa4\011\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\031\uffa4\041\uffa4\044" +
    "\uffa4\051\uffa4\052\uffa4\055\uffa4\001\002\000\004\102\uffa0" +
    "\001\002\000\004\016\250\001\002\000\004\004\242\001" +
    "\002\000\004\102\uff9f\001\002\000\004\025\257\001\002" +
    "\000\004\011\254\001\002\000\006\012\255\025\uffc8\001" +
    "\002\000\004\017\046\001\002\000\004\025\uffc9\001\002" +
    "\000\004\023\106\001\002\000\006\013\053\023\054\001" +
    "\002\000\036\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\031\uffcd\041\uffcd\044\uffcd\051" +
    "\uffcd\052\uffcd\055\uffcd\001\002\000\012\017\264\020\263" +
    "\021\267\022\266\001\002\000\006\016\uff82\077\uff82\001" +
    "\002\000\006\016\uff84\077\uff84\001\002\000\004\016\270" +
    "\001\002\000\006\016\uff83\077\uff83\001\002\000\006\016" +
    "\uff81\077\uff81\001\002\000\004\011\271\001\002\000\004" +
    "\012\272\001\002\000\004\016\273\001\002\000\012\017" +
    "\264\020\263\021\267\022\266\001\002\000\004\016\275" +
    "\001\002\000\004\011\276\001\002\000\004\025\277\001" +
    "\002\000\004\023\300\001\002\000\004\026\111\001\002" +
    "\000\036\002\uffa9\006\uffa9\007\uffa9\011\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\031\uffa9\041\uffa9\044\uffa9\051\uffa9" +
    "\052\uffa9\055\uffa9\001\002\000\004\011\303\001\002\000" +
    "\004\016\304\001\002\000\004\015\305\001\002\000\004" +
    "\016\306\001\002\000\004\011\307\001\002\000\006\013" +
    "\053\023\054\001\002\000\040\002\uffa7\006\uffa7\007\uffa7" +
    "\011\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\026\111\031" +
    "\uffa7\041\uffa7\044\uffa7\051\uffa7\052\uffa7\055\uffa7\001\002" +
    "\000\036\002\uffa6\006\uffa6\007\uffa6\011\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\031\uffa6\041\uffa6\044\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\001\002\000\016\012\074\013\uff8d\016" +
    "\uff8d\023\uff8d\024\322\077\323\001\002\000\010\013\053" +
    "\016\314\023\054\001\002\000\004\015\316\001\002\000" +
    "\036\002\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\031\uffe8\041\uffe8\044\uffe8\051\uffe8\052" +
    "\uffe8\055\uffe8\001\002\000\004\016\317\001\002\000\004" +
    "\014\320\001\002\000\006\013\053\023\054\001\002\000" +
    "\036\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\031\uffe7\041\uffe7\044\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\001\002\000\004\022\344\001\002\000\006" +
    "\004\324\100\325\001\002\000\004\100\327\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uff95\006\uff95" +
    "\007\uff95\011\uff95\017\uff95\020\uff95\021\uff95\022\uff95\031" +
    "\uff95\041\uff95\044\uff95\051\uff95\052\uff95\055\uff95\001\002" +
    "\000\004\016\330\001\002\000\004\015\331\001\002\000" +
    "\004\101\332\001\002\000\004\016\333\001\002\000\004" +
    "\014\334\001\002\000\006\012\341\016\340\001\002\000" +
    "\004\102\336\001\002\000\006\013\053\023\054\001\002" +
    "\000\036\002\uffa2\006\uffa2\007\uffa2\011\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\031\uffa2\041\uffa2\044\uffa2\051\uffa2" +
    "\052\uffa2\055\uffa2\001\002\000\004\102\uff9c\001\002\000" +
    "\004\016\342\001\002\000\004\014\334\001\002\000\004" +
    "\102\uff9b\001\002\000\004\016\350\001\002\000\004\023" +
    "\106\001\002\000\006\013\053\023\054\001\002\000\036" +
    "\002\uffcc\006\uffcc\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\031\uffcc\041\uffcc\044\uffcc\051\uffcc\052\uffcc" +
    "\055\uffcc\001\002\000\004\011\351\001\002\000\006\012" +
    "\352\023\uffc6\001\002\000\004\022\344\001\002\000\004" +
    "\023\uffc7\001\002\000\004\002\ufffe\001\002\000\016\011" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\001\002" +
    "\000\004\025\357\001\002\000\004\023\360\001\002\000" +
    "\004\026\111\001\002\000\036\002\uffa8\006\uffa8\007\uffa8" +
    "\011\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\031\uffa8\041" +
    "\uffa8\044\uffa8\051\uffa8\052\uffa8\055\uffa8\001\002\000\004" +
    "\052\363\001\002\000\004\011\364\001\002\000\006\013" +
    "\053\023\054\001\002\000\036\002\uffa5\006\uffa5\007\uffa5" +
    "\011\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\031\uffa5\041" +
    "\uffa5\044\uffa5\051\uffa5\052\uffa5\055\uffa5\001\002\000\004" +
    "\016\u010a\001\002\000\004\016\u0105\001\002\000\004\016" +
    "\371\001\002\000\004\042\372\001\002\000\004\023\106" +
    "\001\002\000\006\013\053\023\054\001\002\000\040\002" +
    "\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\031\uffb9\041\uffb9\043\375\044\uffb9\051\uffb9\052" +
    "\uffb9\055\uffb9\001\002\000\006\004\366\011\367\001\002" +
    "\000\036\002\uffba\006\uffba\007\uffba\011\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\031\uffba\041\uffba\044\uffba\051\uffba" +
    "\052\uffba\055\uffba\001\002\000\004\016\u0100\001\002\000" +
    "\004\042\u0101\001\002\000\004\023\106\001\002\000\006" +
    "\013\053\023\054\001\002\000\040\002\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\031\uffb7" +
    "\041\uffb7\043\375\044\uffb7\051\uffb7\052\uffb7\055\uffb7\001" +
    "\002\000\036\002\uffb8\006\uffb8\007\uffb8\011\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\031\uffb8\041\uffb8\044\uffb8\051" +
    "\uffb8\052\uffb8\055\uffb8\001\002\000\004\064\u0106\001\002" +
    "\000\004\016\u0107\001\002\000\006\004\u0108\011\u0109\001" +
    "\002\000\004\016\uffb5\001\002\000\004\016\uffb3\001\002" +
    "\000\004\064\u010b\001\002\000\004\016\u010c\001\002\000" +
    "\006\004\u010d\011\u010e\001\002\000\004\016\uffb6\001\002" +
    "\000\004\016\uffb4\001\002\000\004\024\uffaa\001\002\000" +
    "\004\024\u013b\001\002\000\004\024\uffab\001\002\000\004" +
    "\024\uffac\001\002\000\016\012\074\013\uff8d\016\uff8d\023" +
    "\uff8d\024\u0121\077\u0122\001\002\000\004\024\uffad\001\002" +
    "\000\010\013\053\016\u0117\023\054\001\002\000\004\024" +
    "\uffae\001\002\000\004\015\u0119\001\002\000\036\002\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\031\uffe1\041\uffe1\044\uffe1\051\uffe1\052\uffe1\055\uffe1" +
    "\001\002\000\004\016\u011a\001\002\000\012\004\u011c\005" +
    "\u011f\010\u011d\014\u011b\001\002\000\006\013\uffdd\023\uffdd" +
    "\001\002\000\006\013\uffdf\023\uffdf\001\002\000\006\013" +
    "\uffdc\023\uffdc\001\002\000\006\013\053\023\054\001\002" +
    "\000\006\013\uffde\023\uffde\001\002\000\036\002\uffe0\006" +
    "\uffe0\007\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\031\uffe0\041\uffe0\044\uffe0\051\uffe0\052\uffe0\055\uffe0\001" +
    "\002\000\004\021\024\001\002\000\006\004\u0123\100\u0124" +
    "\001\002\000\004\100\u0126\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uff97\006\uff97\007\uff97\011\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\031\uff97\041\uff97\044" +
    "\uff97\051\uff97\052\uff97\055\uff97\001\002\000\004\016\u0127" +
    "\001\002\000\004\015\u0128\001\002\000\004\101\u0129\001" +
    "\002\000\004\016\u012a\001\002\000\004\005\u012c\001\002" +
    "\000\004\102\u0131\001\002\000\006\012\u012e\016\u012d\001" +
    "\002\000\004\102\uff9e\001\002\000\004\016\u012f\001\002" +
    "\000\004\005\u012c\001\002\000\004\102\uff9d\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uffa3\006\uffa3" +
    "\007\uffa3\011\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\031" +
    "\uffa3\041\uffa3\044\uffa3\051\uffa3\052\uffa3\055\uffa3\001\002" +
    "\000\004\025\u0138\001\002\000\004\011\u0135\001\002\000" +
    "\006\012\u0136\025\uffc2\001\002\000\004\021\024\001\002" +
    "\000\004\025\uffc3\001\002\000\004\023\106\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uffca\006\uffca" +
    "\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\031" +
    "\uffca\041\uffca\044\uffca\051\uffca\052\uffca\055\uffca\001\002" +
    "\000\004\021\024\001\002\000\004\011\u013d\001\002\000" +
    "\004\025\u013e\001\002\000\006\013\053\023\054\001\002" +
    "\000\036\002\uffaf\006\uffaf\007\uffaf\011\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\022\uffaf\031\uffaf\041\uffaf\044\uffaf\051\uffaf" +
    "\052\uffaf\055\uffaf\001\002\000\004\011\u0141\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\031" +
    "\uffcf\041\uffcf\044\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002" +
    "\000\004\004\u0151\001\002\000\004\015\u0145\001\002\000" +
    "\004\016\u0146\001\002\000\004\057\u0147\001\002\000\014" +
    "\017\264\020\263\021\267\022\266\031\u0149\001\002\000" +
    "\004\077\u014d\001\002\000\004\024\u014a\001\002\000\004" +
    "\025\u014b\001\002\000\006\013\053\023\054\001\002\000" +
    "\036\002\uffbd\006\uffbd\007\uffbd\011\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\031\uffbd\041\uffbd\044\uffbd\051\uffbd\052" +
    "\uffbd\055\uffbd\001\002\000\004\004\u014e\001\002\000\004" +
    "\100\u014f\001\002\000\006\013\053\023\054\001\002\000" +
    "\036\002\uff93\006\uff93\007\uff93\011\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\uff93\031\uff93\041\uff93\044\uff93\051\uff93\052" +
    "\uff93\055\uff93\001\002\000\004\100\u0152\001\002\000\004" +
    "\016\u0153\001\002\000\004\015\u0154\001\002\000\004\016" +
    "\u0155\001\002\000\012\004\154\005\161\010\157\014\155" +
    "\001\002\000\006\013\053\023\054\001\002\000\036\002" +
    "\uff94\006\uff94\007\uff94\011\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\031\uff94\041\uff94\044\uff94\051\uff94\052\uff94\055" +
    "\uff94\001\002\000\012\004\u0159\005\u015d\011\u015c\014\u015a" +
    "\001\002\000\010\012\u016a\013\uffd3\023\uffd3\001\002\000" +
    "\010\012\u0167\013\uffd4\023\uffd4\001\002\000\006\013\053" +
    "\023\054\001\002\000\012\012\u0162\013\uffd1\023\uffd1\060" +
    "\u0161\001\002\000\010\012\u015e\013\uffd2\023\uffd2\001\002" +
    "\000\004\016\u015f\001\002\000\012\004\u0159\005\u015d\011" +
    "\u015c\014\u015a\001\002\000\006\013\uffd6\023\uffd6\001\002" +
    "\000\004\011\u0165\001\002\000\004\016\u0163\001\002\000" +
    "\012\004\u0159\005\u015d\011\u015c\014\u015a\001\002\000\006" +
    "\013\uffd5\023\uffd5\001\002\000\006\013\uffd0\023\uffd0\001" +
    "\002\000\036\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\031\uffd9\041\uffd9\044\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\001\002\000\004\016\u0168\001\002" +
    "\000\012\004\u0159\005\u015d\011\u015c\014\u015a\001\002\000" +
    "\006\013\uffd8\023\uffd8\001\002\000\004\016\u016b\001\002" +
    "\000\012\004\u0159\005\u015d\011\u015c\014\u015a\001\002\000" +
    "\006\013\uffd7\023\uffd7\001\002\000\004\002\000\001\002" +
    "\000\004\011\uff8f\001\002\000\004\011\uff90\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\060\002\006\004\046\005\032\006\034\007" +
    "\005\010\010\011\031\015\033\016\014\017\024\022\007" +
    "\031\035\032\026\035\027\042\011\046\013\053\025\055" +
    "\030\056\040\057\017\060\036\061\043\071\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0114" +
    "\036\u010f\001\001\000\004\033\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\353\004\046\005\032\006\034\007\005\010\010" +
    "\011\031\015\033\016\014\017\024\022\007\031\035\032" +
    "\026\035\027\042\011\046\013\053\025\055\030\056\040" +
    "\057\017\060\036\061\043\071\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\312\001\001\000\002\001" +
    "\001\000\004\012\172\001\001\000\004\013\170\001\001" +
    "\000\002\001\001\000\004\012\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\047\004\046\005\032" +
    "\006\034\007\005\010\010\011\031\015\033\016\014\017" +
    "\024\022\007\031\035\032\026\035\027\042\011\046\013" +
    "\053\025\055\030\056\040\057\017\060\036\061\043\071" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\076" +
    "\001\001\000\004\012\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\103\001\001\000" +
    "\002\001\001\000\004\023\106\001\001\000\004\030\111" +
    "\001\001\000\004\013\107\001\001\000\002\001\001\000" +
    "\004\030\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\140\001\001\000" +
    "\002\001\001\000\004\013\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\157\040\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\162\001" +
    "\001\000\002\001\001\000\004\013\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\202\001\001\000\002\001" +
    "\001\000\004\060\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\207\001\001\000\002\001\001\000" +
    "\004\060\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\221" +
    "\001\001\000\004\013\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\251\056\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\255\056\252" +
    "\001\001\000\002\001\001\000\004\023\257\001\001\000" +
    "\004\013\260\001\001\000\002\001\001\000\004\043\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\301\041\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\307\001\001\000\006\030\301\041\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\320\001\001\000\002\001\001\000" +
    "\004\025\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\345\001\001" +
    "\000\004\013\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\352\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\361\045\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\372\001\001\000\004\013\373\001\001\000\004" +
    "\034\375\001\001\000\004\033\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0101" +
    "\001\001\000\004\013\u0102\001\001\000\004\034\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u0132\057\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u012f\001\001\000\002" +
    "\001\001\000\004\013\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u0136\057\u0133\001\001\000\002\001\001\000\004\023" +
    "\u0138\001\001\000\004\013\u0139\001\001\000\002\001\001" +
    "\000\004\057\u013b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u0147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0155\001\001\000\004\013\u0156\001\001\000\002" +
    "\001\001\000\004\020\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u016b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
