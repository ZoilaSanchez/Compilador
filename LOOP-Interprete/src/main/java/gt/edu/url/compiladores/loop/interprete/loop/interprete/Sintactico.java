
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\006\011\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\007\005\000\002\007\011\000\002\010\005\000\002\010" +
    "\011\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\011\005\000\002\011\011\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\017\006\000\002" +
    "\071\004\000\002\071\007\000\002\072\004\000\002\072" +
    "\005\000\002\022\011\000\002\022\010\000\002\022\011" +
    "\000\002\022\011\000\002\024\006\000\002\024\004\000" +
    "\002\025\007\000\002\025\005\000\002\026\007\000\002" +
    "\026\005\000\002\027\006\000\002\027\004\000\002\023" +
    "\013\000\002\023\006\000\002\031\015\000\002\031\016" +
    "\000\002\031\013\000\002\031\005\000\002\037\006\000" +
    "\002\032\011\000\002\032\010\000\002\034\011\000\002" +
    "\034\010\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\035\011\000\002\035\011" +
    "\000\002\035\011\000\002\035\011\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\042\017\000\002\042\007\000\002\041" +
    "\011\000\002\041\012\000\002\045\006\000\002\046\016" +
    "\000\002\046\016\000\002\046\016\000\002\046\016\000" +
    "\002\047\004\000\002\047\006\000\002\050\004\000\002" +
    "\050\006\000\002\051\004\000\002\051\006\000\002\052" +
    "\004\000\002\052\006\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\013\000" +
    "\002\053\014\000\002\056\004\000\002\057\004\000\002" +
    "\061\004\000\002\060\004\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\030\004" +
    "\000\002\030\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\036\006\013\007\017\011\016\017\047\020" +
    "\004\021\025\022\005\031\044\041\021\044\041\051\024" +
    "\052\046\055\043\056\023\001\002\000\004\016\u0178\001" +
    "\002\000\004\016\u0177\001\002\000\040\002\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031" +
    "\ufff1\041\ufff1\044\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1" +
    "\001\002\000\004\002\u0176\001\002\000\040\002\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\031\ufffa\041\ufffa\044\ufffa\051\ufffa\052\ufffa\055\ufffa\056" +
    "\ufffa\001\002\000\040\002\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0\041\ufff0\044" +
    "\ufff0\051\ufff0\052\ufff0\055\ufff0\056\ufff0\001\002\000\040" +
    "\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\031\ufff5\041\ufff5\044\ufff5\051\ufff5\052\ufff5" +
    "\055\ufff5\056\ufff5\001\002\000\004\016\u0161\001\002\000" +
    "\040\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\031\ufff4\041\ufff4\044\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\001\002\000\040\002\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\031" +
    "\uffdb\041\uffdb\044\uffdb\051\uffdb\052\uffdb\055\uffdb\056\uffdb" +
    "\001\002\000\006\016\u014d\077\u014c\001\002\000\004\016" +
    "\u0149\001\002\000\016\011\u011c\070\u011f\071\u011d\072\u011b" +
    "\073\u011a\074\u0118\001\002\000\006\004\377\011\u0100\001" +
    "\002\000\040\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\031\ufff8\041\ufff8\044\ufff8\051" +
    "\ufff8\052\ufff8\055\ufff8\056\ufff8\001\002\000\004\023\367" +
    "\001\002\000\004\024\357\001\002\000\004\016\356\001" +
    "\002\000\040\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\031\uffda\041\uffda\044\uffda\051" +
    "\uffda\052\uffda\055\uffda\056\uffda\001\002\000\040\002\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\031\ufff3\041\ufff3\044\ufff3\051\ufff3\052\ufff3\055\ufff3" +
    "\056\ufff3\001\002\000\040\002\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\041\ufff7" +
    "\044\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\001\002\000" +
    "\040\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\031\ufff6\041\ufff6\044\ufff6\051\ufff6\052" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\040\002\uffff\006\013" +
    "\007\017\011\016\017\047\020\004\021\025\022\005\031" +
    "\044\041\021\044\041\051\024\052\046\055\043\056\023" +
    "\001\002\000\040\002\uffef\006\uffef\007\uffef\011\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\031\uffef\041\uffef\044\uffef" +
    "\051\uffef\052\uffef\055\uffef\056\uffef\001\002\000\040\002" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\031\ufffc\041\ufffc\044\ufffc\051\ufffc\052\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\040\002\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\031\ufffb\041" +
    "\ufffb\044\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\001\002" +
    "\000\040\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\031\ufff2\041\ufff2\044\ufff2\051\ufff2" +
    "\052\ufff2\055\ufff2\056\ufff2\001\002\000\040\002\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\031\ufff9\041\ufff9\044\ufff9\051\ufff9\052\ufff9\055\ufff9\056" +
    "\ufff9\001\002\000\004\011\313\001\002\000\004\024\263" +
    "\001\002\000\012\011\173\066\176\067\175\076\177\001" +
    "\002\000\006\013\054\023\055\001\002\000\004\016\145" +
    "\001\002\000\004\011\060\001\002\000\004\011\053\001" +
    "\002\000\004\016\052\001\002\000\040\002\001\006\013" +
    "\007\017\011\016\017\047\020\004\021\025\022\005\031" +
    "\044\041\021\044\041\051\024\052\046\055\043\056\023" +
    "\001\002\000\004\002\ufffd\001\002\000\012\011\uff8f\066" +
    "\uff8f\067\uff8f\076\uff8f\001\002\000\006\013\054\023\055" +
    "\001\002\000\004\023\057\001\002\000\044\002\uff88\006" +
    "\uff88\007\uff88\011\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\026\uff88\031\uff88\041\uff88\043\uff88\044\uff88\051\uff88\052" +
    "\uff88\055\uff88\056\uff88\001\002\000\040\002\uffb9\006\uffb9" +
    "\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\031" +
    "\uffb9\041\uffb9\044\uffb9\051\uffb9\052\uffb9\055\uffb9\056\uffb9" +
    "\001\002\000\046\002\uff89\006\uff89\007\uff89\011\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\026\uff89\031\uff89\041\uff89" +
    "\043\uff89\044\uff89\051\uff89\052\uff89\055\uff89\056\uff89\105" +
    "\uff89\001\002\000\016\012\075\013\uff8a\016\uff8a\023\uff8a" +
    "\024\074\077\073\001\002\000\010\013\054\016\062\023" +
    "\055\001\002\000\004\015\064\001\002\000\040\002\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\031\uffe6\041\uffe6\044\uffe6\051\uffe6\052\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\004\016\065\001\002\000\010\004" +
    "\066\005\071\010\067\001\002\000\006\013\uffe4\023\uffe4" +
    "\001\002\000\006\013\uffe2\023\uffe2\001\002\000\006\013" +
    "\054\023\055\001\002\000\006\013\uffe3\023\uffe3\001\002" +
    "\000\040\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\031\uffe5\041\uffe5\044\uffe5\051\uffe5" +
    "\052\uffe5\055\uffe5\056\uffe5\001\002\000\006\004\125\100" +
    "\126\001\002\000\004\020\101\001\002\000\004\011\076" +
    "\001\002\000\012\012\075\013\uff8a\016\uff8a\023\uff8a\001" +
    "\002\000\010\013\uff8b\016\uff8b\023\uff8b\001\002\000\004" +
    "\025\106\001\002\000\004\016\102\001\002\000\004\011" +
    "\103\001\002\000\006\012\104\025\uffc1\001\002\000\004" +
    "\020\101\001\002\000\004\025\uffc2\001\002\000\004\023" +
    "\107\001\002\000\004\026\112\001\002\000\006\013\054" +
    "\023\055\001\002\000\040\002\uffc8\006\uffc8\007\uffc8\011" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\031\uffc8\041\uffc8" +
    "\044\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\001\002\000" +
    "\012\011\uff86\026\112\035\uff86\052\uff86\001\002\000\004" +
    "\035\114\001\002\000\006\004\116\016\115\001\002\000" +
    "\004\011\117\001\002\000\006\013\uffbd\023\uffbd\001\002" +
    "\000\004\016\120\001\002\000\004\064\121\001\002\000" +
    "\004\016\122\001\002\000\004\011\123\001\002\000\006" +
    "\013\uffbe\023\uffbe\001\002\000\010\011\uff87\035\uff87\052" +
    "\uff87\001\002\000\004\100\130\001\002\000\006\013\054" +
    "\023\055\001\002\000\040\002\uff93\006\uff93\007\uff93\011" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\031\uff93\041\uff93" +
    "\044\uff93\051\uff93\052\uff93\055\uff93\056\uff93\001\002\000" +
    "\004\016\131\001\002\000\004\015\132\001\002\000\004" +
    "\101\133\001\002\000\004\016\134\001\002\000\004\010" +
    "\136\001\002\000\004\102\143\001\002\000\006\012\140" +
    "\016\137\001\002\000\004\102\uff97\001\002\000\004\016" +
    "\141\001\002\000\004\010\136\001\002\000\004\102\uff96" +
    "\001\002\000\006\013\054\023\055\001\002\000\040\002" +
    "\uff9e\006\uff9e\007\uff9e\011\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\031\uff9e\041\uff9e\044\uff9e\051\uff9e\052\uff9e\055" +
    "\uff9e\056\uff9e\001\002\000\004\011\146\001\002\000\004" +
    "\016\147\001\002\000\004\015\150\001\002\000\004\016" +
    "\151\001\002\000\004\057\152\001\002\000\004\031\153" +
    "\001\002\000\004\024\154\001\002\000\014\004\155\005" +
    "\162\010\160\014\156\025\163\001\002\000\012\012\uff85" +
    "\013\uff85\023\uff85\025\uff85\001\002\000\012\012\uff84\013" +
    "\uff84\023\uff84\025\uff84\001\002\000\004\012\167\001\002" +
    "\000\012\012\uff83\013\uff83\023\uff83\025\uff83\001\002\000" +
    "\004\025\165\001\002\000\012\012\uff82\013\uff82\023\uff82" +
    "\025\uff82\001\002\000\006\013\054\023\055\001\002\000" +
    "\040\002\uffbc\006\uffbc\007\uffbc\011\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\031\uffbc\041\uffbc\044\uffbc\051\uffbc\052" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\006\013\054\023\055" +
    "\001\002\000\040\002\uffbb\006\uffbb\007\uffbb\011\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\031\uffbb\041\uffbb\044\uffbb" +
    "\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002\000\004\016" +
    "\170\001\002\000\012\004\155\005\162\010\160\014\156" +
    "\001\002\000\004\025\uffb8\001\002\000\040\002\uffce\006" +
    "\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\031\uffce\041\uffce\044\uffce\051\uffce\052\uffce\055\uffce\056" +
    "\uffce\001\002\000\016\012\075\013\uff8a\016\uff8a\023\uff8a" +
    "\024\231\077\232\001\002\000\010\013\054\016\217\023" +
    "\055\001\002\000\004\024\212\001\002\000\004\024\205" +
    "\001\002\000\004\024\200\001\002\000\004\022\005\001" +
    "\002\000\004\011\202\001\002\000\004\025\203\001\002" +
    "\000\006\013\054\023\055\001\002\000\040\002\uffaf\006" +
    "\uffaf\007\uffaf\011\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\031\uffaf\041\uffaf\044\uffaf\051\uffaf\052\uffaf\055\uffaf\056" +
    "\uffaf\001\002\000\004\022\005\001\002\000\004\011\207" +
    "\001\002\000\004\025\210\001\002\000\006\013\054\023" +
    "\055\001\002\000\040\002\uffae\006\uffae\007\uffae\011\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\031\uffae\041\uffae\044" +
    "\uffae\051\uffae\052\uffae\055\uffae\056\uffae\001\002\000\004" +
    "\022\005\001\002\000\004\011\214\001\002\000\004\025" +
    "\215\001\002\000\006\013\054\023\055\001\002\000\040" +
    "\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\031\uffad\041\uffad\044\uffad\051\uffad\052\uffad" +
    "\055\uffad\056\uffad\001\002\000\004\015\221\001\002\000" +
    "\040\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\031\uffee\041\uffee\044\uffee\051\uffee\052" +
    "\uffee\055\uffee\056\uffee\001\002\000\004\016\222\001\002" +
    "\000\012\004\225\005\227\010\226\014\224\001\002\000" +
    "\006\013\054\023\055\001\002\000\006\013\uffea\023\uffea" +
    "\001\002\000\006\013\uffec\023\uffec\001\002\000\006\013" +
    "\uffe9\023\uffe9\001\002\000\006\013\uffeb\023\uffeb\001\002" +
    "\000\040\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\031\uffed\041\uffed\044\uffed\051\uffed" +
    "\052\uffed\055\uffed\056\uffed\001\002\000\004\017\047\001" +
    "\002\000\006\004\233\100\234\001\002\000\004\100\236" +
    "\001\002\000\006\013\054\023\055\001\002\000\040\002" +
    "\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\031\uff95\041\uff95\044\uff95\051\uff95\052\uff95\055" +
    "\uff95\056\uff95\001\002\000\004\016\237\001\002\000\004" +
    "\015\240\001\002\000\004\101\241\001\002\000\004\016" +
    "\242\001\002\000\004\004\243\001\002\000\006\012\250" +
    "\016\247\001\002\000\004\102\245\001\002\000\006\013" +
    "\054\023\055\001\002\000\040\002\uffa1\006\uffa1\007\uffa1" +
    "\011\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\041" +
    "\uffa1\044\uffa1\051\uffa1\052\uffa1\055\uffa1\056\uffa1\001\002" +
    "\000\004\102\uff9d\001\002\000\004\016\251\001\002\000" +
    "\004\004\243\001\002\000\004\102\uff9c\001\002\000\004" +
    "\025\260\001\002\000\004\011\255\001\002\000\006\012" +
    "\256\025\uffc5\001\002\000\004\017\047\001\002\000\004" +
    "\025\uffc6\001\002\000\004\023\107\001\002\000\006\013" +
    "\054\023\055\001\002\000\040\002\uffca\006\uffca\007\uffca" +
    "\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\031\uffca\041" +
    "\uffca\044\uffca\051\uffca\052\uffca\055\uffca\056\uffca\001\002" +
    "\000\012\017\265\020\264\021\270\022\267\001\002\000" +
    "\006\016\uff7f\077\uff7f\001\002\000\006\016\uff81\077\uff81" +
    "\001\002\000\004\016\271\001\002\000\006\016\uff80\077" +
    "\uff80\001\002\000\006\016\uff7e\077\uff7e\001\002\000\004" +
    "\011\272\001\002\000\004\012\273\001\002\000\004\016" +
    "\274\001\002\000\012\017\265\020\264\021\270\022\267" +
    "\001\002\000\004\016\276\001\002\000\004\011\277\001" +
    "\002\000\004\025\300\001\002\000\004\023\301\001\002" +
    "\000\004\026\112\001\002\000\040\002\uffa6\006\uffa6\007" +
    "\uffa6\011\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\031\uffa6" +
    "\041\uffa6\044\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\004\011\304\001\002\000\004\016\305\001\002" +
    "\000\004\015\306\001\002\000\004\016\307\001\002\000" +
    "\004\011\310\001\002\000\006\013\054\023\055\001\002" +
    "\000\042\002\uffa4\006\uffa4\007\uffa4\011\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\026\112\031\uffa4\041\uffa4\044\uffa4" +
    "\051\uffa4\052\uffa4\055\uffa4\056\uffa4\001\002\000\040\002" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\031\uffa3\041\uffa3\044\uffa3\051\uffa3\052\uffa3\055" +
    "\uffa3\056\uffa3\001\002\000\016\012\075\013\uff8a\016\uff8a" +
    "\023\uff8a\024\323\077\324\001\002\000\010\013\054\016" +
    "\315\023\055\001\002\000\004\015\317\001\002\000\040" +
    "\002\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\031\uffe8\041\uffe8\044\uffe8\051\uffe8\052\uffe8" +
    "\055\uffe8\056\uffe8\001\002\000\004\016\320\001\002\000" +
    "\004\014\321\001\002\000\006\013\054\023\055\001\002" +
    "\000\040\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\031\uffe7\041\uffe7\044\uffe7\051\uffe7" +
    "\052\uffe7\055\uffe7\056\uffe7\001\002\000\004\022\345\001" +
    "\002\000\006\004\325\100\326\001\002\000\004\100\330" +
    "\001\002\000\006\013\054\023\055\001\002\000\040\002" +
    "\uff92\006\uff92\007\uff92\011\uff92\017\uff92\020\uff92\021\uff92" +
    "\022\uff92\031\uff92\041\uff92\044\uff92\051\uff92\052\uff92\055" +
    "\uff92\056\uff92\001\002\000\004\016\331\001\002\000\004" +
    "\015\332\001\002\000\004\101\333\001\002\000\004\016" +
    "\334\001\002\000\004\014\335\001\002\000\006\012\342" +
    "\016\341\001\002\000\004\102\337\001\002\000\006\013" +
    "\054\023\055\001\002\000\040\002\uff9f\006\uff9f\007\uff9f" +
    "\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\031\uff9f\041" +
    "\uff9f\044\uff9f\051\uff9f\052\uff9f\055\uff9f\056\uff9f\001\002" +
    "\000\004\102\uff99\001\002\000\004\016\343\001\002\000" +
    "\004\014\335\001\002\000\004\102\uff98\001\002\000\004" +
    "\016\351\001\002\000\004\023\107\001\002\000\006\013" +
    "\054\023\055\001\002\000\040\002\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\031\uffc9\041" +
    "\uffc9\044\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\001\002" +
    "\000\004\011\352\001\002\000\006\012\353\023\uffc3\001" +
    "\002\000\004\022\345\001\002\000\004\023\uffc4\001\002" +
    "\000\004\002\ufffe\001\002\000\016\011\uff8e\070\uff8e\071" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\001\002\000\004\025\360" +
    "\001\002\000\004\023\361\001\002\000\004\026\112\001" +
    "\002\000\040\002\uffa5\006\uffa5\007\uffa5\011\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\031\uffa5\041\uffa5\044\uffa5\051" +
    "\uffa5\052\uffa5\055\uffa5\056\uffa5\001\002\000\004\052\364" +
    "\001\002\000\004\011\365\001\002\000\006\013\054\023" +
    "\055\001\002\000\040\002\uffa2\006\uffa2\007\uffa2\011\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\031\uffa2\041\uffa2\044" +
    "\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\001\002\000\004" +
    "\106\371\001\002\000\004\105\375\001\002\000\006\013" +
    "\054\023\372\001\002\000\006\105\uff88\106\371\001\002" +
    "\000\004\105\uffcc\001\002\000\004\105\uffcb\001\002\000" +
    "\006\013\054\023\055\001\002\000\040\002\uffcd\006\uffcd" +
    "\007\uffcd\011\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\031" +
    "\uffcd\041\uffcd\044\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd" +
    "\001\002\000\004\016\u0113\001\002\000\004\016\u010e\001" +
    "\002\000\004\016\u0102\001\002\000\004\042\u0103\001\002" +
    "\000\004\023\107\001\002\000\006\013\054\023\055\001" +
    "\002\000\042\002\uffb6\006\uffb6\007\uffb6\011\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\031\uffb6\041\uffb6\043\u0106\044" +
    "\uffb6\051\uffb6\052\uffb6\055\uffb6\056\uffb6\001\002\000\006" +
    "\004\377\011\u0100\001\002\000\040\002\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\031\uffb7" +
    "\041\uffb7\044\uffb7\051\uffb7\052\uffb7\055\uffb7\056\uffb7\001" +
    "\002\000\004\016\u0109\001\002\000\004\042\u010a\001\002" +
    "\000\004\023\107\001\002\000\006\013\054\023\055\001" +
    "\002\000\042\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\031\uffb4\041\uffb4\043\u0106\044" +
    "\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4\001\002\000\040" +
    "\002\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\031\uffb5\041\uffb5\044\uffb5\051\uffb5\052\uffb5" +
    "\055\uffb5\056\uffb5\001\002\000\004\064\u010f\001\002\000" +
    "\004\016\u0110\001\002\000\006\004\u0111\011\u0112\001\002" +
    "\000\004\016\uffb2\001\002\000\004\016\uffb0\001\002\000" +
    "\004\064\u0114\001\002\000\004\016\u0115\001\002\000\006" +
    "\004\u0116\011\u0117\001\002\000\004\016\uffb3\001\002\000" +
    "\004\016\uffb1\001\002\000\004\024\uffa7\001\002\000\004" +
    "\024\u0144\001\002\000\004\024\uffa8\001\002\000\004\024" +
    "\uffa9\001\002\000\016\012\075\013\uff8a\016\uff8a\023\uff8a" +
    "\024\u012a\077\u012b\001\002\000\004\024\uffaa\001\002\000" +
    "\010\013\054\016\u0120\023\055\001\002\000\004\024\uffab" +
    "\001\002\000\004\015\u0122\001\002\000\040\002\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\031\uffe1\041\uffe1\044\uffe1\051\uffe1\052\uffe1\055\uffe1\056" +
    "\uffe1\001\002\000\004\016\u0123\001\002\000\012\004\u0125" +
    "\005\u0128\010\u0126\014\u0124\001\002\000\006\013\uffdd\023" +
    "\uffdd\001\002\000\006\013\uffdf\023\uffdf\001\002\000\006" +
    "\013\uffdc\023\uffdc\001\002\000\006\013\054\023\055\001" +
    "\002\000\006\013\uffde\023\uffde\001\002\000\040\002\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\031\uffe0\041\uffe0\044\uffe0\051\uffe0\052\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\004\021\025\001\002\000\006\004" +
    "\u012c\100\u012d\001\002\000\004\100\u012f\001\002\000\006" +
    "\013\054\023\055\001\002\000\040\002\uff94\006\uff94\007" +
    "\uff94\011\uff94\017\uff94\020\uff94\021\uff94\022\uff94\031\uff94" +
    "\041\uff94\044\uff94\051\uff94\052\uff94\055\uff94\056\uff94\001" +
    "\002\000\004\016\u0130\001\002\000\004\015\u0131\001\002" +
    "\000\004\101\u0132\001\002\000\004\016\u0133\001\002\000" +
    "\004\005\u0135\001\002\000\004\102\u013a\001\002\000\006" +
    "\012\u0137\016\u0136\001\002\000\004\102\uff9b\001\002\000" +
    "\004\016\u0138\001\002\000\004\005\u0135\001\002\000\004" +
    "\102\uff9a\001\002\000\006\013\054\023\055\001\002\000" +
    "\040\002\uffa0\006\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\031\uffa0\041\uffa0\044\uffa0\051\uffa0\052" +
    "\uffa0\055\uffa0\056\uffa0\001\002\000\004\025\u0141\001\002" +
    "\000\004\011\u013e\001\002\000\006\012\u013f\025\uffbf\001" +
    "\002\000\004\021\025\001\002\000\004\025\uffc0\001\002" +
    "\000\004\023\107\001\002\000\006\013\054\023\055\001" +
    "\002\000\040\002\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\031\uffc7\041\uffc7\044\uffc7\051" +
    "\uffc7\052\uffc7\055\uffc7\056\uffc7\001\002\000\004\021\025" +
    "\001\002\000\004\011\u0146\001\002\000\004\025\u0147\001" +
    "\002\000\006\013\054\023\055\001\002\000\040\002\uffac" +
    "\006\uffac\007\uffac\011\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\031\uffac\041\uffac\044\uffac\051\uffac\052\uffac\055\uffac" +
    "\056\uffac\001\002\000\004\011\u014a\001\002\000\006\013" +
    "\054\023\055\001\002\000\040\002\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\031\uffcf\041" +
    "\uffcf\044\uffcf\051\uffcf\052\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\004\004\u015a\001\002\000\004\015\u014e\001\002\000" +
    "\004\016\u014f\001\002\000\004\057\u0150\001\002\000\014" +
    "\017\265\020\264\021\270\022\267\031\u0152\001\002\000" +
    "\004\077\u0156\001\002\000\004\024\u0153\001\002\000\004" +
    "\025\u0154\001\002\000\006\013\054\023\055\001\002\000" +
    "\040\002\uffba\006\uffba\007\uffba\011\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\031\uffba\041\uffba\044\uffba\051\uffba\052" +
    "\uffba\055\uffba\056\uffba\001\002\000\004\004\u0157\001\002" +
    "\000\004\100\u0158\001\002\000\006\013\054\023\055\001" +
    "\002\000\040\002\uff90\006\uff90\007\uff90\011\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\031\uff90\041\uff90\044\uff90\051" +
    "\uff90\052\uff90\055\uff90\056\uff90\001\002\000\004\100\u015b" +
    "\001\002\000\004\016\u015c\001\002\000\004\015\u015d\001" +
    "\002\000\004\016\u015e\001\002\000\012\004\155\005\162" +
    "\010\160\014\156\001\002\000\006\013\054\023\055\001" +
    "\002\000\040\002\uff91\006\uff91\007\uff91\011\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\031\uff91\041\uff91\044\uff91\051" +
    "\uff91\052\uff91\055\uff91\056\uff91\001\002\000\012\004\u0162" +
    "\005\u0166\011\u0165\014\u0163\001\002\000\010\012\u0173\013" +
    "\uffd3\023\uffd3\001\002\000\010\012\u0170\013\uffd4\023\uffd4" +
    "\001\002\000\006\013\054\023\055\001\002\000\012\012" +
    "\u016b\013\uffd1\023\uffd1\060\u016a\001\002\000\010\012\u0167" +
    "\013\uffd2\023\uffd2\001\002\000\004\016\u0168\001\002\000" +
    "\012\004\u0162\005\u0166\011\u0165\014\u0163\001\002\000\006" +
    "\013\uffd6\023\uffd6\001\002\000\004\011\u016e\001\002\000" +
    "\004\016\u016c\001\002\000\012\004\u0162\005\u0166\011\u0165" +
    "\014\u0163\001\002\000\006\013\uffd5\023\uffd5\001\002\000" +
    "\006\013\uffd0\023\uffd0\001\002\000\040\002\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031" +
    "\uffd9\041\uffd9\044\uffd9\051\uffd9\052\uffd9\055\uffd9\056\uffd9" +
    "\001\002\000\004\016\u0171\001\002\000\012\004\u0162\005" +
    "\u0166\011\u0165\014\u0163\001\002\000\006\013\uffd8\023\uffd8" +
    "\001\002\000\004\016\u0174\001\002\000\012\004\u0162\005" +
    "\u0166\011\u0165\014\u0163\001\002\000\006\013\uffd7\023\uffd7" +
    "\001\002\000\004\002\000\001\002\000\004\011\uff8c\001" +
    "\002\000\004\011\uff8d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0176\000\060\002\006\004\047\005\033\006\035\007" +
    "\005\010\010\011\032\015\034\016\014\017\025\022\007" +
    "\031\036\032\027\035\030\042\011\046\013\053\026\055" +
    "\031\056\041\057\017\060\037\061\044\071\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u011d" +
    "\036\u0118\001\001\000\004\033\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\354\004\047\005\033\006\035" +
    "\007\005\010\010\011\032\015\034\016\014\017\025\022" +
    "\007\031\036\032\027\035\030\042\011\046\013\053\026" +
    "\055\031\056\041\057\017\060\037\061\044\071\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\313\001" +
    "\001\000\002\001\001\000\004\012\173\001\001\000\004" +
    "\013\171\001\001\000\002\001\001\000\004\012\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\050" +
    "\004\047\005\033\006\035\007\005\010\010\011\032\015" +
    "\034\016\014\017\025\022\007\031\036\032\027\035\030" +
    "\042\011\046\013\053\026\055\031\056\041\057\017\060" +
    "\037\061\044\071\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\077\001\001\000\004\012\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\104\001\001\000\002\001\001\000\004\023\107\001\001" +
    "\000\004\030\112\001\001\000\004\013\110\001\001\000" +
    "\002\001\001\000\004\030\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\141\001\001\000\002\001\001\000\004\013\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\160\040\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\163\001\001\000\002\001\001\000\004\013\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\203\001" +
    "\001\000\002\001\001\000\004\060\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\210\001\001\000" +
    "\002\001\001\000\004\060\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\222\001\001\000\004\013\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\252\056\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\256\056\253\001\001\000\002\001\001\000\004\023" +
    "\260\001\001\000\004\013\261\001\001\000\002\001\001" +
    "\000\004\043\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\302\041" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\310\001\001\000\006\030\302\041\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\321\001\001\000" +
    "\002\001\001\000\004\025\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\346\001\001\000\004\013\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\362" +
    "\045\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\365\001\001\000\002\001\001" +
    "\000\004\072\367\001\001\000\002\001\001\000\004\013" +
    "\372\001\001\000\004\072\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0103\001\001\000\004\013" +
    "\u0104\001\001\000\004\034\u0106\001\001\000\004\033\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u010a\001\001\000\004\013\u010b\001\001" +
    "\000\004\034\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u013b\057\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u012d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0138\001\001\000\002\001\001\000\004\013\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\u013f\057\u013c\001\001\000\002" +
    "\001\001\000\004\023\u0141\001\001\000\004\013\u0142\001" +
    "\001\000\002\001\001\000\004\057\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0158\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u015e\001\001\000\004\013" +
    "\u015f\001\001\000\002\001\001\000\004\020\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u016c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0171\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
