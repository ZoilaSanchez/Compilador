
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\011\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\007\005\000\002\007" +
    "\011\000\002\010\005\000\002\010\011\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\011\005\000" +
    "\002\011\011\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\017\006\000\002\071\004\000\002\071" +
    "\007\000\002\072\004\000\002\072\005\000\002\022\011" +
    "\000\002\022\010\000\002\022\011\000\002\022\011\000" +
    "\002\024\006\000\002\024\004\000\002\025\007\000\002" +
    "\025\005\000\002\026\007\000\002\026\005\000\002\027" +
    "\006\000\002\027\004\000\002\023\013\000\002\023\006" +
    "\000\002\031\015\000\002\031\016\000\002\031\013\000" +
    "\002\031\005\000\002\037\006\000\002\032\011\000\002" +
    "\032\010\000\002\034\011\000\002\034\010\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\076\024\000\002\076\020\000\002\103\004\000" +
    "\002\100\003\000\002\100\003\000\002\101\003\000\002" +
    "\101\003\000\002\077\004\000\002\077\012\000\002\077" +
    "\007\000\002\104\004\000\002\102\003\000\002\102\003" +
    "\000\002\105\017\000\002\106\006\000\002\107\005\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\107\004\000\002\107\004\000\002\107\003\000\002\107" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\035\011\000" +
    "\002\035\011\000\002\035\011\000\002\035\011\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\042\017\000\002\042\007" +
    "\000\002\041\011\000\002\041\012\000\002\045\006\000" +
    "\002\046\016\000\002\046\016\000\002\046\016\000\002" +
    "\046\016\000\002\047\004\000\002\047\006\000\002\050" +
    "\004\000\002\050\006\000\002\051\004\000\002\051\006" +
    "\000\002\052\004\000\002\052\006\000\002\053\007\000" +
    "\002\053\007\000\002\053\007\000\002\053\007\000\002" +
    "\053\013\000\002\053\014\000\002\056\004\000\002\057" +
    "\004\000\002\061\004\000\002\060\004\000\002\012\005" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\030\004\000\002\030\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\040\006\013\007\017\011\016\017\052\020" +
    "\004\021\030\022\005\031\047\041\021\044\044\045\025" +
    "\051\027\052\051\055\046\056\026\001\002\000\004\016" +
    "\u01b9\001\002\000\004\016\u01b8\001\002\000\042\002\uffef" +
    "\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\031\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052\uffef" +
    "\055\uffef\056\uffef\001\002\000\004\002\u01b7\001\002\000" +
    "\042\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\031\uffee\041\uffee\044\uffee\045\uffee\051" +
    "\uffee\052\uffee\055\uffee\056\uffee\001\002\000\042\002\ufffa" +
    "\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\031\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\042\002\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3" +
    "\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3\055\ufff3\056" +
    "\ufff3\001\002\000\004\016\u01a2\001\002\000\042\002\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\031\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2" +
    "\055\ufff2\056\ufff2\001\002\000\042\002\uffd9\006\uffd9\007" +
    "\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\055\uffd9\056" +
    "\uffd9\001\002\000\010\015\u017c\016\u017b\077\u017a\001\002" +
    "\000\004\016\u0177\001\002\000\016\011\u014a\070\u014c\071" +
    "\u014b\072\u0149\073\u0148\074\u0147\001\002\000\006\004\u012d" +
    "\011\u012e\001\002\000\042\002\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\041\ufff7" +
    "\044\ufff7\045\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\001" +
    "\002\000\042\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\031\ufff8\041\ufff8\044\ufff8\045" +
    "\ufff8\051\ufff8\052\ufff8\055\ufff8\056\ufff8\001\002\000\042" +
    "\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\031\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6" +
    "\052\ufff6\055\ufff6\056\ufff6\001\002\000\004\016\u0102\001" +
    "\002\000\004\023\372\001\002\000\004\024\362\001\002" +
    "\000\004\016\361\001\002\000\042\002\uffd8\006\uffd8\007" +
    "\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\031\uffd8" +
    "\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8\055\uffd8\056" +
    "\uffd8\001\002\000\042\002\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\042\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\031\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\051\ufff5\052\ufff5\055\ufff5\056\ufff5\001\002\000\042\002" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\031\ufff4\041\ufff4\044\ufff4\045\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\001\002\000\042\002\uffff\006\013" +
    "\007\017\011\016\017\052\020\004\021\030\022\005\031" +
    "\047\041\021\044\044\045\025\051\027\052\051\055\046" +
    "\056\026\001\002\000\042\002\uffed\006\uffed\007\uffed\011" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\031\uffed\041\uffed" +
    "\044\uffed\045\uffed\051\uffed\052\uffed\055\uffed\056\uffed\001" +
    "\002\000\042\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\031\ufffc\041\ufffc\044\ufffc\045" +
    "\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\001\002\000\042" +
    "\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\031\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb" +
    "\052\ufffb\055\ufffb\056\ufffb\001\002\000\042\002\ufff0\006" +
    "\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\031\ufff0\041\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0\055" +
    "\ufff0\056\ufff0\001\002\000\042\002\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031\ufff9\041" +
    "\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9" +
    "\001\002\000\004\011\316\001\002\000\004\024\266\001" +
    "\002\000\012\011\176\066\201\067\200\076\202\001\002" +
    "\000\006\013\057\023\060\001\002\000\004\016\150\001" +
    "\002\000\004\011\063\001\002\000\004\011\056\001\002" +
    "\000\004\016\055\001\002\000\042\002\001\006\013\007" +
    "\017\011\016\017\052\020\004\021\030\022\005\031\047" +
    "\041\021\044\044\045\025\051\027\052\051\055\046\056" +
    "\026\001\002\000\004\002\ufffd\001\002\000\012\011\uff71" +
    "\066\uff71\067\uff71\076\uff71\001\002\000\006\013\057\023" +
    "\060\001\002\000\004\023\062\001\002\000\046\002\uff6a" +
    "\006\uff6a\007\uff6a\011\uff6a\017\uff6a\020\uff6a\021\uff6a\022" +
    "\uff6a\026\uff6a\031\uff6a\041\uff6a\043\uff6a\044\uff6a\045\uff6a" +
    "\051\uff6a\052\uff6a\055\uff6a\056\uff6a\001\002\000\042\002" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\031\uffb7\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\050\002\uff6b\006\uff6b" +
    "\007\uff6b\011\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\026" +
    "\uff6b\031\uff6b\041\uff6b\043\uff6b\044\uff6b\045\uff6b\051\uff6b" +
    "\052\uff6b\055\uff6b\056\uff6b\105\uff6b\001\002\000\016\012" +
    "\100\013\uff6c\016\uff6c\023\uff6c\024\077\077\076\001\002" +
    "\000\010\013\057\016\065\023\060\001\002\000\004\015" +
    "\067\001\002\000\042\002\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\031\uffe4\041\uffe4\044" +
    "\uffe4\045\uffe4\051\uffe4\052\uffe4\055\uffe4\056\uffe4\001\002" +
    "\000\004\016\070\001\002\000\010\004\071\005\074\010" +
    "\072\001\002\000\006\013\uffe2\023\uffe2\001\002\000\006" +
    "\013\uffe0\023\uffe0\001\002\000\006\013\057\023\060\001" +
    "\002\000\006\013\uffe1\023\uffe1\001\002\000\042\002\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\031\uffe3\041\uffe3\044\uffe3\045\uffe3\051\uffe3\052\uffe3" +
    "\055\uffe3\056\uffe3\001\002\000\006\004\130\100\131\001" +
    "\002\000\004\020\104\001\002\000\004\011\101\001\002" +
    "\000\012\012\100\013\uff6c\016\uff6c\023\uff6c\001\002\000" +
    "\010\013\uff6d\016\uff6d\023\uff6d\001\002\000\004\025\111" +
    "\001\002\000\004\016\105\001\002\000\004\011\106\001" +
    "\002\000\006\012\107\025\uffbf\001\002\000\004\020\104" +
    "\001\002\000\004\025\uffc0\001\002\000\004\023\112\001" +
    "\002\000\004\026\116\001\002\000\006\013\057\023\060" +
    "\001\002\000\042\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\031\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\004\035\120\001\002\000\014\006\uff68\011\uff68\026\116" +
    "\035\uff68\052\uff68\001\002\000\012\006\uff69\011\uff69\035" +
    "\uff69\052\uff69\001\002\000\006\004\122\016\121\001\002" +
    "\000\004\011\123\001\002\000\006\013\uffbb\023\uffbb\001" +
    "\002\000\004\016\124\001\002\000\004\064\125\001\002" +
    "\000\004\016\126\001\002\000\004\011\127\001\002\000" +
    "\006\013\uffbc\023\uffbc\001\002\000\004\100\133\001\002" +
    "\000\006\013\057\023\060\001\002\000\042\002\uff75\006" +
    "\uff75\007\uff75\011\uff75\017\uff75\020\uff75\021\uff75\022\uff75" +
    "\031\uff75\041\uff75\044\uff75\045\uff75\051\uff75\052\uff75\055" +
    "\uff75\056\uff75\001\002\000\004\016\134\001\002\000\004" +
    "\015\135\001\002\000\004\101\136\001\002\000\004\016" +
    "\137\001\002\000\004\010\141\001\002\000\004\102\146" +
    "\001\002\000\006\012\143\016\142\001\002\000\004\102" +
    "\uff79\001\002\000\004\016\144\001\002\000\004\010\141" +
    "\001\002\000\004\102\uff78\001\002\000\006\013\057\023" +
    "\060\001\002\000\042\002\uff80\006\uff80\007\uff80\011\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\031\uff80\041\uff80\044" +
    "\uff80\045\uff80\051\uff80\052\uff80\055\uff80\056\uff80\001\002" +
    "\000\004\011\151\001\002\000\004\016\152\001\002\000" +
    "\004\015\153\001\002\000\004\016\154\001\002\000\004" +
    "\057\155\001\002\000\004\031\156\001\002\000\004\024" +
    "\157\001\002\000\014\004\160\005\165\010\163\014\162" +
    "\025\166\001\002\000\012\012\uff67\013\uff67\023\uff67\025" +
    "\uff67\001\002\000\004\012\172\001\002\000\012\012\uff66" +
    "\013\uff66\023\uff66\025\uff66\001\002\000\012\012\uff65\013" +
    "\uff65\023\uff65\025\uff65\001\002\000\004\025\170\001\002" +
    "\000\012\012\uff64\013\uff64\023\uff64\025\uff64\001\002\000" +
    "\006\013\057\023\060\001\002\000\042\002\uffba\006\uffba" +
    "\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba\031" +
    "\uffba\041\uffba\044\uffba\045\uffba\051\uffba\052\uffba\055\uffba" +
    "\056\uffba\001\002\000\006\013\057\023\060\001\002\000" +
    "\042\002\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\031\uffb9\041\uffb9\044\uffb9\045\uffb9\051" +
    "\uffb9\052\uffb9\055\uffb9\056\uffb9\001\002\000\004\016\173" +
    "\001\002\000\012\004\160\005\165\010\163\014\162\001" +
    "\002\000\004\025\uffb6\001\002\000\042\002\uffcc\006\uffcc" +
    "\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\031" +
    "\uffcc\041\uffcc\044\uffcc\045\uffcc\051\uffcc\052\uffcc\055\uffcc" +
    "\056\uffcc\001\002\000\016\012\100\013\uff6c\016\uff6c\023" +
    "\uff6c\024\235\077\234\001\002\000\010\013\057\016\222" +
    "\023\060\001\002\000\004\024\215\001\002\000\004\024" +
    "\210\001\002\000\004\024\203\001\002\000\004\022\005" +
    "\001\002\000\004\011\205\001\002\000\004\025\206\001" +
    "\002\000\006\013\057\023\060\001\002\000\042\002\uff91" +
    "\006\uff91\007\uff91\011\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\031\uff91\041\uff91\044\uff91\045\uff91\051\uff91\052\uff91" +
    "\055\uff91\056\uff91\001\002\000\004\022\005\001\002\000" +
    "\004\011\212\001\002\000\004\025\213\001\002\000\006" +
    "\013\057\023\060\001\002\000\042\002\uff90\006\uff90\007" +
    "\uff90\011\uff90\017\uff90\020\uff90\021\uff90\022\uff90\031\uff90" +
    "\041\uff90\044\uff90\045\uff90\051\uff90\052\uff90\055\uff90\056" +
    "\uff90\001\002\000\004\022\005\001\002\000\004\011\217" +
    "\001\002\000\004\025\220\001\002\000\006\013\057\023" +
    "\060\001\002\000\042\002\uff8f\006\uff8f\007\uff8f\011\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\031\uff8f\041\uff8f\044" +
    "\uff8f\045\uff8f\051\uff8f\052\uff8f\055\uff8f\056\uff8f\001\002" +
    "\000\004\015\224\001\002\000\042\002\uffec\006\uffec\007" +
    "\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\031\uffec" +
    "\041\uffec\044\uffec\045\uffec\051\uffec\052\uffec\055\uffec\056" +
    "\uffec\001\002\000\004\016\225\001\002\000\012\004\230" +
    "\005\232\010\231\014\227\001\002\000\006\013\057\023" +
    "\060\001\002\000\006\013\uffe8\023\uffe8\001\002\000\006" +
    "\013\uffea\023\uffea\001\002\000\006\013\uffe7\023\uffe7\001" +
    "\002\000\006\013\uffe9\023\uffe9\001\002\000\042\002\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\031\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052\uffeb" +
    "\055\uffeb\056\uffeb\001\002\000\006\004\246\100\247\001" +
    "\002\000\004\017\052\001\002\000\004\025\243\001\002" +
    "\000\004\011\240\001\002\000\006\012\241\025\uffc3\001" +
    "\002\000\004\017\052\001\002\000\004\025\uffc4\001\002" +
    "\000\004\023\112\001\002\000\006\013\057\023\060\001" +
    "\002\000\042\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\031\uffc8\041\uffc8\044\uffc8\045" +
    "\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\001\002\000\004" +
    "\100\251\001\002\000\006\013\057\023\060\001\002\000" +
    "\042\002\uff77\006\uff77\007\uff77\011\uff77\017\uff77\020\uff77" +
    "\021\uff77\022\uff77\031\uff77\041\uff77\044\uff77\045\uff77\051" +
    "\uff77\052\uff77\055\uff77\056\uff77\001\002\000\004\016\252" +
    "\001\002\000\004\015\253\001\002\000\004\101\254\001" +
    "\002\000\004\016\255\001\002\000\004\004\256\001\002" +
    "\000\006\012\263\016\262\001\002\000\004\102\260\001" +
    "\002\000\006\013\057\023\060\001\002\000\042\002\uff83" +
    "\006\uff83\007\uff83\011\uff83\017\uff83\020\uff83\021\uff83\022" +
    "\uff83\031\uff83\041\uff83\044\uff83\045\uff83\051\uff83\052\uff83" +
    "\055\uff83\056\uff83\001\002\000\004\102\uff7f\001\002\000" +
    "\004\016\264\001\002\000\004\004\256\001\002\000\004" +
    "\102\uff7e\001\002\000\012\017\270\020\267\021\273\022" +
    "\272\001\002\000\006\016\uff61\077\uff61\001\002\000\006" +
    "\016\uff63\077\uff63\001\002\000\004\016\274\001\002\000" +
    "\006\016\uff62\077\uff62\001\002\000\006\016\uff60\077\uff60" +
    "\001\002\000\004\011\275\001\002\000\004\012\276\001" +
    "\002\000\004\016\277\001\002\000\012\017\270\020\267" +
    "\021\273\022\272\001\002\000\004\016\301\001\002\000" +
    "\004\011\302\001\002\000\004\025\303\001\002\000\004" +
    "\023\304\001\002\000\004\026\116\001\002\000\042\002" +
    "\uff88\006\uff88\007\uff88\011\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\031\uff88\041\uff88\044\uff88\045\uff88\051\uff88\052" +
    "\uff88\055\uff88\056\uff88\001\002\000\004\011\307\001\002" +
    "\000\004\016\310\001\002\000\004\015\311\001\002\000" +
    "\004\016\312\001\002\000\004\011\313\001\002\000\006" +
    "\013\057\023\060\001\002\000\044\002\uff86\006\uff86\007" +
    "\uff86\011\uff86\017\uff86\020\uff86\021\uff86\022\uff86\026\116" +
    "\031\uff86\041\uff86\044\uff86\045\uff86\051\uff86\052\uff86\055" +
    "\uff86\056\uff86\001\002\000\042\002\uff85\006\uff85\007\uff85" +
    "\011\uff85\017\uff85\020\uff85\021\uff85\022\uff85\031\uff85\041" +
    "\uff85\044\uff85\045\uff85\051\uff85\052\uff85\055\uff85\056\uff85" +
    "\001\002\000\016\012\100\013\uff6c\016\uff6c\023\uff6c\024" +
    "\326\077\327\001\002\000\010\013\057\016\320\023\060" +
    "\001\002\000\004\015\322\001\002\000\042\002\uffe6\006" +
    "\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\031\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\052\uffe6\055" +
    "\uffe6\056\uffe6\001\002\000\004\016\323\001\002\000\004" +
    "\014\324\001\002\000\006\013\057\023\060\001\002\000" +
    "\042\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\031\uffe5\041\uffe5\044\uffe5\045\uffe5\051" +
    "\uffe5\052\uffe5\055\uffe5\056\uffe5\001\002\000\004\022\350" +
    "\001\002\000\006\004\330\100\331\001\002\000\004\100" +
    "\333\001\002\000\006\013\057\023\060\001\002\000\042" +
    "\002\uff74\006\uff74\007\uff74\011\uff74\017\uff74\020\uff74\021" +
    "\uff74\022\uff74\031\uff74\041\uff74\044\uff74\045\uff74\051\uff74" +
    "\052\uff74\055\uff74\056\uff74\001\002\000\004\016\334\001" +
    "\002\000\004\015\335\001\002\000\004\101\336\001\002" +
    "\000\004\016\337\001\002\000\004\014\340\001\002\000" +
    "\006\012\345\016\344\001\002\000\004\102\342\001\002" +
    "\000\006\013\057\023\060\001\002\000\042\002\uff81\006" +
    "\uff81\007\uff81\011\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\031\uff81\041\uff81\044\uff81\045\uff81\051\uff81\052\uff81\055" +
    "\uff81\056\uff81\001\002\000\004\102\uff7b\001\002\000\004" +
    "\016\346\001\002\000\004\014\340\001\002\000\004\102" +
    "\uff7a\001\002\000\004\016\354\001\002\000\004\023\112" +
    "\001\002\000\006\013\057\023\060\001\002\000\042\002" +
    "\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\031\uffc7\041\uffc7\044\uffc7\045\uffc7\051\uffc7\052" +
    "\uffc7\055\uffc7\056\uffc7\001\002\000\004\011\355\001\002" +
    "\000\006\012\356\023\uffc1\001\002\000\004\022\350\001" +
    "\002\000\004\023\uffc2\001\002\000\004\002\ufffe\001\002" +
    "\000\016\011\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\001\002\000\004\025\363\001\002\000\004\023\364" +
    "\001\002\000\004\026\116\001\002\000\042\002\uff87\006" +
    "\uff87\007\uff87\011\uff87\017\uff87\020\uff87\021\uff87\022\uff87" +
    "\031\uff87\041\uff87\044\uff87\045\uff87\051\uff87\052\uff87\055" +
    "\uff87\056\uff87\001\002\000\004\052\367\001\002\000\004" +
    "\011\370\001\002\000\006\013\057\023\060\001\002\000" +
    "\042\002\uff84\006\uff84\007\uff84\011\uff84\017\uff84\020\uff84" +
    "\021\uff84\022\uff84\031\uff84\041\uff84\044\uff84\045\uff84\051" +
    "\uff84\052\uff84\055\uff84\056\uff84\001\002\000\004\106\374" +
    "\001\002\000\004\105\u0100\001\002\000\006\013\057\023" +
    "\375\001\002\000\006\105\uff6a\106\374\001\002\000\004" +
    "\105\uffca\001\002\000\004\105\uffc9\001\002\000\006\013" +
    "\057\023\060\001\002\000\042\002\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\031\uffcb\041" +
    "\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb\055\uffcb\056\uffcb" +
    "\001\002\000\006\011\u0104\017\u0105\001\002\000\004\015" +
    "\u0129\001\002\000\004\016\u0128\001\002\000\004\016\u0121" +
    "\001\002\000\004\046\u0107\001\002\000\004\016\u0108\001" +
    "\002\000\006\004\u0109\011\u010a\001\002\000\004\016\uffa1" +
    "\001\002\000\004\016\uffa2\001\002\000\004\016\u010c\001" +
    "\002\000\006\030\u010d\065\u010e\001\002\000\004\016\uffa9" +
    "\001\002\000\004\016\uffaa\001\002\000\004\016\u0110\001" +
    "\002\000\006\004\u0109\011\u010a\001\002\000\004\016\u0112" +
    "\001\002\000\010\047\u0116\050\u0114\111\u0115\001\002\000" +
    "\004\016\u011b\001\002\000\004\016\uffa7\001\002\000\006" +
    "\013\057\023\060\001\002\000\004\016\uffa8\001\002\000" +
    "\004\026\116\001\002\000\042\002\uffac\006\uffac\007\uffac" +
    "\011\uffac\017\uffac\020\uffac\021\uffac\022\uffac\031\uffac\041" +
    "\uffac\044\uffac\045\uffac\051\uffac\052\uffac\055\uffac\056\uffac" +
    "\001\002\000\004\006\013\001\002\000\042\002\uffab\006" +
    "\uffab\007\uffab\011\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\031\uffab\041\uffab\044\uffab\045\uffab\051\uffab\052\uffab\055" +
    "\uffab\056\uffab\001\002\000\004\004\u011c\001\002\000\004" +
    "\016\u011d\001\002\000\004\111\u011e\001\002\000\006\013" +
    "\057\023\060\001\002\000\004\026\116\001\002\000\042" +
    "\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\031\uffad\041\uffad\044\uffad\045\uffad\051\uffad" +
    "\052\uffad\055\uffad\056\uffad\001\002\000\004\011\u0122\001" +
    "\002\000\004\016\u0123\001\002\000\004\015\u0124\001\002" +
    "\000\004\016\u0125\001\002\000\004\004\u0126\001\002\000" +
    "\004\016\u0127\001\002\000\004\046\uffa5\001\002\000\006" +
    "\015\uffa3\046\uffa6\001\002\000\004\016\u012a\001\002\000" +
    "\004\004\u012b\001\002\000\004\016\u012c\001\002\000\004" +
    "\046\uffa4\001\002\000\004\016\u0141\001\002\000\004\016" +
    "\u013c\001\002\000\004\016\u0130\001\002\000\004\042\u0131" +
    "\001\002\000\004\023\112\001\002\000\006\013\057\023" +
    "\060\001\002\000\044\002\uffb4\006\uffb4\007\uffb4\011\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\031\uffb4\041\uffb4\043" +
    "\u0134\044\uffb4\045\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4" +
    "\001\002\000\006\004\u012d\011\u012e\001\002\000\042\002" +
    "\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\031\uffb5\041\uffb5\044\uffb5\045\uffb5\051\uffb5\052" +
    "\uffb5\055\uffb5\056\uffb5\001\002\000\004\016\u0137\001\002" +
    "\000\004\042\u0138\001\002\000\004\023\112\001\002\000" +
    "\006\013\057\023\060\001\002\000\044\002\uffb2\006\uffb2" +
    "\007\uffb2\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\031" +
    "\uffb2\041\uffb2\043\u0134\044\uffb2\045\uffb2\051\uffb2\052\uffb2" +
    "\055\uffb2\056\uffb2\001\002\000\042\002\uffb3\006\uffb3\007" +
    "\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\031\uffb3" +
    "\041\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3\055\uffb3\056" +
    "\uffb3\001\002\000\004\064\u013d\001\002\000\004\016\u013e" +
    "\001\002\000\006\004\u013f\011\u0140\001\002\000\004\016" +
    "\uffb0\001\002\000\004\016\uffae\001\002\000\004\064\u0142" +
    "\001\002\000\004\016\u0143\001\002\000\006\004\u0144\011" +
    "\u0145\001\002\000\004\016\uffb1\001\002\000\004\016\uffaf" +
    "\001\002\000\004\024\u0172\001\002\000\004\024\uff89\001" +
    "\002\000\004\024\uff8a\001\002\000\004\024\uff8b\001\002" +
    "\000\016\012\100\013\uff6c\016\uff6c\023\uff6c\024\u0158\077" +
    "\u0159\001\002\000\004\024\uff8c\001\002\000\004\024\uff8d" +
    "\001\002\000\010\013\057\016\u014e\023\060\001\002\000" +
    "\004\015\u0150\001\002\000\042\002\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\031\uffdf\041" +
    "\uffdf\044\uffdf\045\uffdf\051\uffdf\052\uffdf\055\uffdf\056\uffdf" +
    "\001\002\000\004\016\u0151\001\002\000\012\004\u0152\005" +
    "\u0156\010\u0154\014\u0153\001\002\000\006\013\uffdd\023\uffdd" +
    "\001\002\000\006\013\uffdb\023\uffdb\001\002\000\006\013" +
    "\uffda\023\uffda\001\002\000\006\013\057\023\060\001\002" +
    "\000\006\013\uffdc\023\uffdc\001\002\000\042\002\uffde\006" +
    "\uffde\007\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\031\uffde\041\uffde\044\uffde\045\uffde\051\uffde\052\uffde\055" +
    "\uffde\056\uffde\001\002\000\004\021\030\001\002\000\006" +
    "\004\u015a\100\u015b\001\002\000\004\100\u015d\001\002\000" +
    "\006\013\057\023\060\001\002\000\042\002\uff76\006\uff76" +
    "\007\uff76\011\uff76\017\uff76\020\uff76\021\uff76\022\uff76\031" +
    "\uff76\041\uff76\044\uff76\045\uff76\051\uff76\052\uff76\055\uff76" +
    "\056\uff76\001\002\000\004\016\u015e\001\002\000\004\015" +
    "\u015f\001\002\000\004\101\u0160\001\002\000\004\016\u0161" +
    "\001\002\000\004\005\u0163\001\002\000\004\102\u0168\001" +
    "\002\000\006\012\u0165\016\u0164\001\002\000\004\102\uff7d" +
    "\001\002\000\004\016\u0166\001\002\000\004\005\u0163\001" +
    "\002\000\004\102\uff7c\001\002\000\006\013\057\023\060" +
    "\001\002\000\042\002\uff82\006\uff82\007\uff82\011\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\031\uff82\041\uff82\044\uff82" +
    "\045\uff82\051\uff82\052\uff82\055\uff82\056\uff82\001\002\000" +
    "\004\025\u016f\001\002\000\004\011\u016c\001\002\000\006" +
    "\012\u016d\025\uffbd\001\002\000\004\021\030\001\002\000" +
    "\004\025\uffbe\001\002\000\004\023\112\001\002\000\006" +
    "\013\057\023\060\001\002\000\042\002\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\031\uffc5" +
    "\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\004\021\030\001\002\000\004\011\u0174" +
    "\001\002\000\004\025\u0175\001\002\000\006\013\057\023" +
    "\060\001\002\000\042\002\uff8e\006\uff8e\007\uff8e\011\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\031\uff8e\041\uff8e\044" +
    "\uff8e\045\uff8e\051\uff8e\052\uff8e\055\uff8e\056\uff8e\001\002" +
    "\000\004\011\u0178\001\002\000\006\013\057\023\060\001" +
    "\002\000\042\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\031\uffcd\041\uffcd\044\uffcd\045" +
    "\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\001\002\000\004" +
    "\004\u019b\001\002\000\004\015\u018f\001\002\000\010\004" +
    "\u017e\011\u017f\110\u017d\001\002\000\006\004\u018d\011\u018e" +
    "\001\002\000\020\013\uff97\023\uff97\107\u0185\110\u0184\112" +
    "\u0182\113\u0183\114\u0187\001\002\000\020\013\uff98\023\uff98" +
    "\107\u0185\110\u0184\112\u0182\113\u0183\114\u0187\001\002\000" +
    "\006\013\057\023\060\001\002\000\042\002\uff9f\006\uff9f" +
    "\007\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\031" +
    "\uff9f\041\uff9f\044\uff9f\045\uff9f\051\uff9f\052\uff9f\055\uff9f" +
    "\056\uff9f\001\002\000\006\004\uff94\011\uff94\001\002\000" +
    "\006\004\uff93\011\uff93\001\002\000\006\004\uff95\011\uff95" +
    "\001\002\000\006\004\uff96\011\uff96\001\002\000\006\004" +
    "\u0188\011\u0189\001\002\000\006\004\uff92\011\uff92\001\002" +
    "\000\006\013\uff9b\023\uff9b\001\002\000\006\013\uff9d\023" +
    "\uff9d\001\002\000\006\004\u018b\011\u018c\001\002\000\006" +
    "\013\uff9e\023\uff9e\001\002\000\006\013\uff9c\023\uff9c\001" +
    "\002\000\006\013\uff99\023\uff99\001\002\000\006\013\uff9a" +
    "\023\uff9a\001\002\000\004\016\u0190\001\002\000\004\057" +
    "\u0191\001\002\000\014\017\270\020\267\021\273\022\272" +
    "\031\u0193\001\002\000\004\077\u0197\001\002\000\004\024" +
    "\u0194\001\002\000\004\025\u0195\001\002\000\006\013\057" +
    "\023\060\001\002\000\042\002\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\031\uffb8\041\uffb8" +
    "\044\uffb8\045\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8\001" +
    "\002\000\004\004\u0198\001\002\000\004\100\u0199\001\002" +
    "\000\006\013\057\023\060\001\002\000\042\002\uff72\006" +
    "\uff72\007\uff72\011\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\031\uff72\041\uff72\044\uff72\045\uff72\051\uff72\052\uff72\055" +
    "\uff72\056\uff72\001\002\000\004\100\u019c\001\002\000\004" +
    "\016\u019d\001\002\000\004\015\u019e\001\002\000\004\016" +
    "\u019f\001\002\000\012\004\160\005\165\010\163\014\162" +
    "\001\002\000\006\013\057\023\060\001\002\000\042\002" +
    "\uff73\006\uff73\007\uff73\011\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\031\uff73\041\uff73\044\uff73\045\uff73\051\uff73\052" +
    "\uff73\055\uff73\056\uff73\001\002\000\012\004\u01a3\005\u01a7" +
    "\011\u01a6\014\u01a4\001\002\000\010\012\u01b4\013\uffd1\023" +
    "\uffd1\001\002\000\010\012\u01b1\013\uffd2\023\uffd2\001\002" +
    "\000\006\013\057\023\060\001\002\000\012\012\u01ac\013" +
    "\uffcf\023\uffcf\060\u01ab\001\002\000\010\012\u01a8\013\uffd0" +
    "\023\uffd0\001\002\000\004\016\u01a9\001\002\000\012\004" +
    "\u01a3\005\u01a7\011\u01a6\014\u01a4\001\002\000\006\013\uffd4" +
    "\023\uffd4\001\002\000\004\011\u01af\001\002\000\004\016" +
    "\u01ad\001\002\000\012\004\u01a3\005\u01a7\011\u01a6\014\u01a4" +
    "\001\002\000\006\013\uffd3\023\uffd3\001\002\000\006\013" +
    "\uffce\023\uffce\001\002\000\042\002\uffd7\006\uffd7\007\uffd7" +
    "\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\031\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7" +
    "\001\002\000\004\016\u01b2\001\002\000\012\004\u01a3\005" +
    "\u01a7\011\u01a6\014\u01a4\001\002\000\006\013\uffd6\023\uffd6" +
    "\001\002\000\004\016\u01b5\001\002\000\012\004\u01a3\005" +
    "\u01a7\011\u01a6\014\u01a4\001\002\000\006\013\uffd5\023\uffd5" +
    "\001\002\000\004\002\000\001\002\000\004\011\uff6e\001" +
    "\002\000\004\011\uff6f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b7\000\064\002\006\004\052\005\036\006\040\007" +
    "\005\010\007\011\035\015\037\016\014\017\030\022\010" +
    "\031\041\032\032\035\033\042\011\046\013\053\031\055" +
    "\034\056\044\057\017\060\042\061\047\071\022\076\021" +
    "\106\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u014c\036\u0145\001\001\000\004\033\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\002\357\004\052\005" +
    "\036\006\040\007\005\010\007\011\035\015\037\016\014" +
    "\017\030\022\010\031\041\032\032\035\033\042\011\046" +
    "\013\053\031\055\034\056\044\057\017\060\042\061\047" +
    "\071\022\076\021\106\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\316\001\001\000\002\001\001\000" +
    "\004\012\176\001\001\000\004\013\174\001\001\000\002" +
    "\001\001\000\004\012\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\002\053\004\052\005\036\006\040" +
    "\007\005\010\007\011\035\015\037\016\014\017\030\022" +
    "\010\031\041\032\032\035\033\042\011\046\013\053\031" +
    "\055\034\056\044\057\017\060\042\061\047\071\022\076" +
    "\021\106\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\102\001\001\000\004\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\107\001" +
    "\001\000\002\001\001\000\004\023\112\001\001\000\004" +
    "\030\114\001\001\000\004\013\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\144\001" +
    "\001\000\002\001\001\000\004\013\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\163\040\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\166\001\001\000\002\001\001\000\004\013\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\206\001\001\000" +
    "\002\001\001\000\004\060\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\213\001\001\000\002\001" +
    "\001\000\004\060\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\225\001\001\000\004\013\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\235\056" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\241\056\236\001\001\000\002\001" +
    "\001\000\004\023\243\001\001\000\004\013\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\264\001\001\000\002\001\001\000\004" +
    "\043\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\305\041\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\313\001\001\000\006\030\305\041\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\324\001\001\000\002\001" +
    "\001\000\004\025\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\351" +
    "\001\001\000\004\013\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\365\045\364" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\370\001\001\000\002\001\001\000\004" +
    "\072\372\001\001\000\002\001\001\000\004\013\375\001" +
    "\001\000\004\072\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0100\001\001\000\002\001\001\000" +
    "\006\077\u0105\104\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0110\001\001\000\002\001\001\000\004\101\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0116" +
    "\001\001\000\002\001\001\000\006\030\u0118\103\u0117\001" +
    "\001\000\002\001\001\000\004\016\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u011e\001\001\000\006\030\u0118\103\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0131\001\001\000\004" +
    "\013\u0132\001\001\000\004\034\u0134\001\001\000\004\033" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0138\001\001\000\004\013\u0139\001" +
    "\001\000\004\034\u013a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u0154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0169\057\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u015b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0166\001\001\000\002\001\001\000\004\013\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\u016d\057\u016a\001\001\000" +
    "\002\001\001\000\004\023\u016f\001\001\000\004\013\u0170" +
    "\001\001\000\002\001\001\000\004\057\u0172\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u017f\001\001\000\002\001\001\000\004\110" +
    "\u0189\001\001\000\004\110\u0185\001\001\000\004\013\u0180" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0195\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u019f\001\001\000\004\013\u01a0\001\001\000\002\001" +
    "\001\000\004\020\u01a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01af\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u01ad\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u01b2\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u01b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Whiles ::= haccer newline TABULA ASIGNA newline whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
