
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\272\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\112\007\000\002\116\005\000\002\116\011\000" +
    "\002\115\027\000\002\115\020\000\002\115\020\000\002" +
    "\115\020\000\002\115\011\000\002\115\011\000\002\115" +
    "\011\000\002\113\027\000\002\113\020\000\002\113\020" +
    "\000\002\113\020\000\002\113\011\000\002\113\011\000" +
    "\002\113\011\000\002\114\003\000\002\114\004\000\002" +
    "\114\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\005\000\002\006\011" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\007\005\000\002\007\011\000\002" +
    "\010\005\000\002\010\011\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\011\005\000\002\011\011" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\005\000" +
    "\002\017\006\000\002\071\004\000\002\071\007\000\002" +
    "\072\004\000\002\072\005\000\002\022\011\000\002\022" +
    "\010\000\002\022\011\000\002\022\011\000\002\024\006" +
    "\000\002\024\004\000\002\025\007\000\002\025\005\000" +
    "\002\026\007\000\002\026\005\000\002\027\006\000\002" +
    "\027\004\000\002\023\013\000\002\023\006\000\002\031" +
    "\015\000\002\031\016\000\002\031\013\000\002\031\005" +
    "\000\002\037\006\000\002\032\011\000\002\032\010\000" +
    "\002\034\011\000\002\034\010\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\076" +
    "\024\000\002\076\020\000\002\103\004\000\002\100\003" +
    "\000\002\100\003\000\002\101\003\000\002\101\003\000" +
    "\002\077\004\000\002\077\012\000\002\077\007\000\002" +
    "\104\004\000\002\102\003\000\002\102\003\000\002\105" +
    "\016\000\002\106\006\000\002\106\010\000\002\106\012" +
    "\000\002\106\010\000\002\107\005\000\002\107\005\000" +
    "\002\107\005\000\002\107\005\000\002\107\004\000\002" +
    "\107\004\000\002\107\003\000\002\107\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\035\011\000\002\035\011\000" +
    "\002\035\011\000\002\035\011\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\042\017\000\002\042\007\000\002\041\003" +
    "\000\002\045\006\000\002\046\016\000\002\046\016\000" +
    "\002\046\016\000\002\046\016\000\002\047\004\000\002" +
    "\047\006\000\002\050\004\000\002\050\006\000\002\051" +
    "\004\000\002\051\006\000\002\052\004\000\002\052\006" +
    "\000\002\053\007\000\002\053\007\000\002\053\007\000" +
    "\002\053\007\000\002\053\013\000\002\053\014\000\002" +
    "\056\004\000\002\057\004\000\002\061\004\000\002\060" +
    "\004\000\002\012\005\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\030\004\000\002\030\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\044\006\015\007\020\011\017\017\057\020" +
    "\004\021\032\022\005\031\052\037\024\041\022\044\047" +
    "\045\027\051\031\052\056\055\051\056\030\111\010\001" +
    "\002\000\004\016\u0234\001\002\000\004\016\u0233\001\002" +
    "\000\054\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\026\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\037\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\055" +
    "\uffd9\056\uffd9\111\uffd9\001\002\000\004\002\u0232\001\002" +
    "\000\004\023\u0227\001\002\000\046\002\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1" +
    "\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\055" +
    "\ufff1\056\ufff1\111\ufff1\001\002\000\046\002\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031" +
    "\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa" +
    "\055\ufffa\056\ufffa\111\ufffa\001\002\000\054\002\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\026\uffd8\031\uffd8\033\uffd8\034\uffd8\037\uffd8\041\uffd8\044" +
    "\uffd8\045\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8\111\uffd8" +
    "\001\002\000\046\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0\037\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\051\ufff0\052\ufff0\055\ufff0\056\ufff0\111" +
    "\ufff0\001\002\000\004\016\u0212\001\002\000\046\002\uffc3" +
    "\006\uffc3\007\uffc3\011\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\031\uffc3\037\uffc3\041\uffc3\044\uffc3\045\uffc3\051\uffc3" +
    "\052\uffc3\055\uffc3\056\uffc3\111\uffc3\001\002\000\010\015" +
    "\316\016\u01fe\077\u01fd\001\002\000\004\016\u01fa\001\002" +
    "\000\016\011\u01d8\070\u01da\071\u01d9\072\u01d7\073\u01d6\074" +
    "\u01d4\001\002\000\006\004\u01bb\011\u01bc\001\002\000\046" +
    "\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7" +
    "\051\ufff7\052\ufff7\055\ufff7\056\ufff7\111\ufff7\001\002\000" +
    "\004\016\u01b5\001\002\000\046\002\ufff6\006\ufff6\007\ufff6" +
    "\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\031\ufff6\037" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6\052\ufff6\055\ufff6" +
    "\056\ufff6\111\ufff6\001\002\000\046\002\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\031\ufff8" +
    "\037\ufff8\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\055" +
    "\ufff8\056\ufff8\111\ufff8\001\002\000\004\016\u018a\001\002" +
    "\000\004\023\u0182\001\002\000\004\024\u017a\001\002\000" +
    "\004\016\u0179\001\002\000\046\002\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\031\uffc2\037" +
    "\uffc2\041\uffc2\044\uffc2\045\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\111\uffc2\001\002\000\046\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\031\uffef" +
    "\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052\uffef\055" +
    "\uffef\056\uffef\111\uffef\001\002\000\046\002\ufff3\006\ufff3" +
    "\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031" +
    "\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\056\ufff3\111\ufff3\001\002\000\046\002\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\031\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052" +
    "\ufff2\055\ufff2\056\ufff2\111\ufff2\001\002\000\046\002\uffff" +
    "\006\015\007\020\011\017\017\057\020\004\021\032\022" +
    "\005\031\052\037\024\041\022\044\047\045\027\051\031" +
    "\052\056\055\051\056\030\111\010\001\002\000\054\002" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7\037\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7" +
    "\111\uffd7\001\002\000\004\023\u010b\001\002\000\046\002" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045\ufffc\051" +
    "\ufffc\052\ufffc\055\ufffc\056\ufffc\111\ufffc\001\002\000\046" +
    "\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\031\ufffb\037\ufffb\041\ufffb\044\ufffb\045\ufffb" +
    "\051\ufffb\052\ufffb\055\ufffb\056\ufffb\111\ufffb\001\002\000" +
    "\054\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\026\uffda\031\uffda\033\uffda\034\uffda\037" +
    "\uffda\041\uffda\044\uffda\045\uffda\051\uffda\052\uffda\055\uffda" +
    "\056\uffda\111\uffda\001\002\000\046\002\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031\ufff9" +
    "\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\055" +
    "\ufff9\056\ufff9\111\ufff9\001\002\000\004\011\351\001\002" +
    "\000\004\024\273\001\002\000\012\011\203\066\206\067" +
    "\205\076\207\001\002\000\006\013\064\023\065\001\002" +
    "\000\004\016\155\001\002\000\046\002\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5" +
    "\037\ufff5\041\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\055" +
    "\ufff5\056\ufff5\111\ufff5\001\002\000\004\011\070\001\002" +
    "\000\046\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4" +
    "\045\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4\111\ufff4\001" +
    "\002\000\004\011\063\001\002\000\004\016\062\001\002" +
    "\000\046\002\001\006\015\007\020\011\017\017\057\020" +
    "\004\021\032\022\005\031\052\037\024\041\022\044\047" +
    "\045\027\051\031\052\056\055\051\056\030\111\010\001" +
    "\002\000\004\002\ufffd\001\002\000\012\011\uff59\066\uff59" +
    "\067\uff59\076\uff59\001\002\000\006\013\064\023\065\001" +
    "\002\000\004\023\067\001\002\000\060\002\uff52\006\uff52" +
    "\007\uff52\011\uff52\017\uff52\020\uff52\021\uff52\022\uff52\026" +
    "\uff52\031\uff52\033\uff52\034\uff52\037\uff52\041\uff52\043\uff52" +
    "\044\uff52\045\uff52\046\uff52\051\uff52\052\uff52\055\uff52\056" +
    "\uff52\111\uff52\001\002\000\046\002\uffa1\006\uffa1\007\uffa1" +
    "\011\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\037" +
    "\uffa1\041\uffa1\044\uffa1\045\uffa1\051\uffa1\052\uffa1\055\uffa1" +
    "\056\uffa1\111\uffa1\001\002\000\062\002\uff53\006\uff53\007" +
    "\uff53\011\uff53\017\uff53\020\uff53\021\uff53\022\uff53\026\uff53" +
    "\031\uff53\033\uff53\034\uff53\037\uff53\041\uff53\043\uff53\044" +
    "\uff53\045\uff53\046\uff53\051\uff53\052\uff53\055\uff53\056\uff53" +
    "\105\uff53\111\uff53\001\002\000\016\012\105\013\uff54\016" +
    "\uff54\023\uff54\024\103\077\104\001\002\000\010\013\064" +
    "\016\072\023\065\001\002\000\004\015\074\001\002\000" +
    "\054\002\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\026\uffce\031\uffce\033\uffce\034\uffce\037" +
    "\uffce\041\uffce\044\uffce\045\uffce\051\uffce\052\uffce\055\uffce" +
    "\056\uffce\111\uffce\001\002\000\004\016\075\001\002\000" +
    "\010\004\076\005\101\010\077\001\002\000\006\013\uffcc" +
    "\023\uffcc\001\002\000\006\013\uffca\023\uffca\001\002\000" +
    "\006\013\064\023\065\001\002\000\006\013\uffcb\023\uffcb" +
    "\001\002\000\054\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\031\uffcd\033\uffcd" +
    "\034\uffcd\037\uffcd\041\uffcd\044\uffcd\045\uffcd\051\uffcd\052" +
    "\uffcd\055\uffcd\056\uffcd\111\uffcd\001\002\000\004\020\131" +
    "\001\002\000\006\004\110\100\111\001\002\000\004\011" +
    "\106\001\002\000\012\012\105\013\uff54\016\uff54\023\uff54" +
    "\001\002\000\010\013\uff55\016\uff55\023\uff55\001\002\000" +
    "\004\100\113\001\002\000\006\013\064\023\065\001\002" +
    "\000\046\002\uff5d\006\uff5d\007\uff5d\011\uff5d\017\uff5d\020" +
    "\uff5d\021\uff5d\022\uff5d\031\uff5d\037\uff5d\041\uff5d\044\uff5d" +
    "\045\uff5d\051\uff5d\052\uff5d\055\uff5d\056\uff5d\111\uff5d\001" +
    "\002\000\004\016\114\001\002\000\004\015\115\001\002" +
    "\000\004\101\116\001\002\000\004\016\117\001\002\000" +
    "\004\010\121\001\002\000\004\102\126\001\002\000\006" +
    "\012\123\016\122\001\002\000\004\102\uff61\001\002\000" +
    "\004\016\124\001\002\000\004\010\121\001\002\000\004" +
    "\102\uff60\001\002\000\006\013\064\023\065\001\002\000" +
    "\046\002\uff68\006\uff68\007\uff68\011\uff68\017\uff68\020\uff68" +
    "\021\uff68\022\uff68\031\uff68\037\uff68\041\uff68\044\uff68\045" +
    "\uff68\051\uff68\052\uff68\055\uff68\056\uff68\111\uff68\001\002" +
    "\000\004\025\136\001\002\000\004\016\132\001\002\000" +
    "\004\011\133\001\002\000\006\012\134\025\uffa9\001\002" +
    "\000\004\020\131\001\002\000\004\025\uffaa\001\002\000" +
    "\004\023\137\001\002\000\004\026\142\001\002\000\006" +
    "\013\064\023\065\001\002\000\046\002\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\031\uffb0" +
    "\037\uffb0\041\uffb0\044\uffb0\045\uffb0\051\uffb0\052\uffb0\055" +
    "\uffb0\056\uffb0\111\uffb0\001\002\000\014\006\uff50\011\uff50" +
    "\026\142\035\uff50\052\uff50\001\002\000\004\035\144\001" +
    "\002\000\006\004\146\016\145\001\002\000\004\011\147" +
    "\001\002\000\006\013\uffa5\023\uffa5\001\002\000\004\016" +
    "\150\001\002\000\004\064\151\001\002\000\004\016\152" +
    "\001\002\000\004\011\153\001\002\000\006\013\uffa6\023" +
    "\uffa6\001\002\000\012\006\uff51\011\uff51\035\uff51\052\uff51" +
    "\001\002\000\004\011\156\001\002\000\004\016\157\001" +
    "\002\000\004\015\160\001\002\000\004\016\161\001\002" +
    "\000\004\057\162\001\002\000\004\031\163\001\002\000" +
    "\004\024\164\001\002\000\014\004\167\005\173\010\170" +
    "\014\165\025\172\001\002\000\012\012\uff4e\013\uff4e\023" +
    "\uff4e\025\uff4e\001\002\000\004\012\177\001\002\000\012" +
    "\012\uff4f\013\uff4f\023\uff4f\025\uff4f\001\002\000\012\012" +
    "\uff4d\013\uff4d\023\uff4d\025\uff4d\001\002\000\004\025\175" +
    "\001\002\000\006\013\064\023\065\001\002\000\012\012" +
    "\uff4c\013\uff4c\023\uff4c\025\uff4c\001\002\000\046\002\uffa4" +
    "\006\uffa4\007\uffa4\011\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\031\uffa4\037\uffa4\041\uffa4\044\uffa4\045\uffa4\051\uffa4" +
    "\052\uffa4\055\uffa4\056\uffa4\111\uffa4\001\002\000\006\013" +
    "\064\023\065\001\002\000\046\002\uffa3\006\uffa3\007\uffa3" +
    "\011\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\031\uffa3\037" +
    "\uffa3\041\uffa3\044\uffa3\045\uffa3\051\uffa3\052\uffa3\055\uffa3" +
    "\056\uffa3\111\uffa3\001\002\000\004\016\200\001\002\000" +
    "\012\004\167\005\173\010\170\014\165\001\002\000\004" +
    "\025\uffa0\001\002\000\046\002\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\031\uffb6\037\uffb6" +
    "\041\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6\055\uffb6\056" +
    "\uffb6\111\uffb6\001\002\000\016\012\105\013\uff54\016\uff54" +
    "\023\uff54\024\242\077\241\001\002\000\010\013\064\016" +
    "\227\023\065\001\002\000\004\024\222\001\002\000\004" +
    "\024\215\001\002\000\004\024\210\001\002\000\004\022" +
    "\005\001\002\000\004\011\212\001\002\000\004\025\213" +
    "\001\002\000\006\013\064\023\065\001\002\000\046\002" +
    "\uff78\006\uff78\007\uff78\011\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\031\uff78\037\uff78\041\uff78\044\uff78\045\uff78\051" +
    "\uff78\052\uff78\055\uff78\056\uff78\111\uff78\001\002\000\004" +
    "\022\005\001\002\000\004\011\217\001\002\000\004\025" +
    "\220\001\002\000\006\013\064\023\065\001\002\000\046" +
    "\002\uff77\006\uff77\007\uff77\011\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\031\uff77\037\uff77\041\uff77\044\uff77\045\uff77" +
    "\051\uff77\052\uff77\055\uff77\056\uff77\111\uff77\001\002\000" +
    "\004\022\005\001\002\000\004\011\224\001\002\000\004" +
    "\025\225\001\002\000\006\013\064\023\065\001\002\000" +
    "\046\002\uff76\006\uff76\007\uff76\011\uff76\017\uff76\020\uff76" +
    "\021\uff76\022\uff76\031\uff76\037\uff76\041\uff76\044\uff76\045" +
    "\uff76\051\uff76\052\uff76\055\uff76\056\uff76\111\uff76\001\002" +
    "\000\004\015\231\001\002\000\054\002\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6" +
    "\031\uffd6\033\uffd6\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045" +
    "\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\111\uffd6\001\002" +
    "\000\004\016\232\001\002\000\012\004\235\005\237\010" +
    "\236\014\234\001\002\000\006\013\064\023\065\001\002" +
    "\000\006\013\uffd2\023\uffd2\001\002\000\006\013\uffd4\023" +
    "\uffd4\001\002\000\006\013\uffd1\023\uffd1\001\002\000\006" +
    "\013\uffd3\023\uffd3\001\002\000\054\002\uffd5\006\uffd5\007" +
    "\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\026\uffd5" +
    "\031\uffd5\033\uffd5\034\uffd5\037\uffd5\041\uffd5\044\uffd5\045" +
    "\uffd5\051\uffd5\052\uffd5\055\uffd5\056\uffd5\111\uffd5\001\002" +
    "\000\006\004\253\100\254\001\002\000\004\017\057\001" +
    "\002\000\004\025\250\001\002\000\004\011\245\001\002" +
    "\000\006\012\246\025\uffad\001\002\000\004\017\057\001" +
    "\002\000\004\025\uffae\001\002\000\004\023\137\001\002" +
    "\000\006\013\064\023\065\001\002\000\046\002\uffb2\006" +
    "\uffb2\007\uffb2\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\031\uffb2\037\uffb2\041\uffb2\044\uffb2\045\uffb2\051\uffb2\052" +
    "\uffb2\055\uffb2\056\uffb2\111\uffb2\001\002\000\004\100\256" +
    "\001\002\000\006\013\064\023\065\001\002\000\046\002" +
    "\uff5f\006\uff5f\007\uff5f\011\uff5f\017\uff5f\020\uff5f\021\uff5f" +
    "\022\uff5f\031\uff5f\037\uff5f\041\uff5f\044\uff5f\045\uff5f\051" +
    "\uff5f\052\uff5f\055\uff5f\056\uff5f\111\uff5f\001\002\000\004" +
    "\016\257\001\002\000\004\015\260\001\002\000\004\101" +
    "\261\001\002\000\004\016\262\001\002\000\004\004\263" +
    "\001\002\000\006\012\270\016\267\001\002\000\004\102" +
    "\265\001\002\000\006\013\064\023\065\001\002\000\046" +
    "\002\uff6b\006\uff6b\007\uff6b\011\uff6b\017\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b\045\uff6b" +
    "\051\uff6b\052\uff6b\055\uff6b\056\uff6b\111\uff6b\001\002\000" +
    "\004\102\uff67\001\002\000\004\016\271\001\002\000\004" +
    "\004\263\001\002\000\004\102\uff66\001\002\000\012\017" +
    "\274\020\275\021\300\022\277\001\002\000\006\016\uff4b" +
    "\077\uff4b\001\002\000\006\016\uff49\077\uff49\001\002\000" +
    "\004\016\301\001\002\000\006\016\uff4a\077\uff4a\001\002" +
    "\000\006\016\uff48\077\uff48\001\002\000\004\011\302\001" +
    "\002\000\004\012\303\001\002\000\004\016\304\001\002" +
    "\000\012\017\274\020\275\021\300\022\277\001\002\000" +
    "\004\016\306\001\002\000\004\011\307\001\002\000\004" +
    "\025\310\001\002\000\004\023\311\001\002\000\004\011" +
    "\312\001\002\000\006\015\316\016\315\001\002\000\046" +
    "\002\uff6f\006\uff6f\007\uff6f\011\uff6f\017\uff6f\020\uff6f\021" +
    "\uff6f\022\uff6f\031\uff6f\037\uff6f\041\uff6f\044\uff6f\045\uff6f" +
    "\051\uff6f\052\uff6f\055\uff6f\056\uff6f\111\uff6f\001\002\000" +
    "\046\002\uff6d\006\uff6d\007\uff6d\011\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\031\uff6d\037\uff6d\041\uff6d\044\uff6d\045" +
    "\uff6d\051\uff6d\052\uff6d\055\uff6d\056\uff6d\111\uff6d\001\002" +
    "\000\004\015\343\001\002\000\010\004\320\011\321\110" +
    "\317\001\002\000\006\004\341\011\342\001\002\000\020" +
    "\013\uff7e\023\uff7e\107\331\110\330\112\326\113\327\114" +
    "\333\001\002\000\020\013\uff7f\023\uff7f\107\331\110\330" +
    "\112\326\113\327\114\333\001\002\000\006\013\064\023" +
    "\065\001\002\000\052\002\uff89\006\uff89\007\uff89\011\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\026\142\031\uff89\037" +
    "\uff89\041\uff89\044\uff89\045\uff89\046\uff89\051\uff89\052\uff89" +
    "\055\uff89\056\uff89\111\uff89\001\002\000\004\011\312\001" +
    "\002\000\050\002\uff86\006\uff86\007\uff86\011\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\031\uff86\037\uff86\041\uff86\044" +
    "\uff86\045\uff86\046\uff86\051\uff86\052\uff86\055\uff86\056\uff86" +
    "\111\uff86\001\002\000\006\004\uff7b\011\uff7b\001\002\000" +
    "\006\004\uff7a\011\uff7a\001\002\000\006\004\uff7c\011\uff7c" +
    "\001\002\000\006\004\uff7d\011\uff7d\001\002\000\006\004" +
    "\334\011\335\001\002\000\006\004\uff79\011\uff79\001\002" +
    "\000\006\013\uff82\023\uff82\001\002\000\006\013\uff84\023" +
    "\uff84\001\002\000\006\004\337\011\340\001\002\000\006" +
    "\013\uff85\023\uff85\001\002\000\006\013\uff83\023\uff83\001" +
    "\002\000\006\013\uff80\023\uff80\001\002\000\006\013\uff81" +
    "\023\uff81\001\002\000\004\016\344\001\002\000\010\004" +
    "\320\011\321\110\317\001\002\000\006\013\064\023\065" +
    "\001\002\000\052\002\uff88\006\uff88\007\uff88\011\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\026\142\031\uff88\037\uff88" +
    "\041\uff88\044\uff88\045\uff88\046\uff88\051\uff88\052\uff88\055" +
    "\uff88\056\uff88\111\uff88\001\002\000\004\011\312\001\002" +
    "\000\050\002\uff87\006\uff87\007\uff87\011\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\031\uff87\037\uff87\041\uff87\044\uff87" +
    "\045\uff87\046\uff87\051\uff87\052\uff87\055\uff87\056\uff87\111" +
    "\uff87\001\002\000\016\012\105\013\uff54\016\uff54\023\uff54" +
    "\024\361\077\362\001\002\000\010\013\064\016\353\023" +
    "\065\001\002\000\004\015\355\001\002\000\054\002\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\026\uffd0\031\uffd0\033\uffd0\034\uffd0\037\uffd0\041\uffd0" +
    "\044\uffd0\045\uffd0\051\uffd0\052\uffd0\055\uffd0\056\uffd0\111" +
    "\uffd0\001\002\000\004\016\356\001\002\000\004\014\357" +
    "\001\002\000\006\013\064\023\065\001\002\000\054\002" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\026\uffcf\031\uffcf\033\uffcf\034\uffcf\037\uffcf\041" +
    "\uffcf\044\uffcf\045\uffcf\051\uffcf\052\uffcf\055\uffcf\056\uffcf" +
    "\111\uffcf\001\002\000\004\022\u0103\001\002\000\006\004" +
    "\363\100\364\001\002\000\004\100\366\001\002\000\006" +
    "\013\064\023\065\001\002\000\046\002\uff5c\006\uff5c\007" +
    "\uff5c\011\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\031\uff5c" +
    "\037\uff5c\041\uff5c\044\uff5c\045\uff5c\051\uff5c\052\uff5c\055" +
    "\uff5c\056\uff5c\111\uff5c\001\002\000\004\016\367\001\002" +
    "\000\004\015\370\001\002\000\004\101\371\001\002\000" +
    "\004\016\372\001\002\000\004\014\373\001\002\000\006" +
    "\012\u0100\016\377\001\002\000\004\102\375\001\002\000" +
    "\006\013\064\023\065\001\002\000\046\002\uff69\006\uff69" +
    "\007\uff69\011\uff69\017\uff69\020\uff69\021\uff69\022\uff69\031" +
    "\uff69\037\uff69\041\uff69\044\uff69\045\uff69\051\uff69\052\uff69" +
    "\055\uff69\056\uff69\111\uff69\001\002\000\004\102\uff63\001" +
    "\002\000\004\016\u0101\001\002\000\004\014\373\001\002" +
    "\000\004\102\uff62\001\002\000\004\016\u0107\001\002\000" +
    "\004\023\137\001\002\000\006\013\064\023\065\001\002" +
    "\000\046\002\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\031\uffb1\037\uffb1\041\uffb1\044\uffb1" +
    "\045\uffb1\051\uffb1\052\uffb1\055\uffb1\056\uffb1\111\uffb1\001" +
    "\002\000\004\011\u0108\001\002\000\006\012\u0109\023\uffab" +
    "\001\002\000\004\022\u0103\001\002\000\004\023\uffac\001" +
    "\002\000\004\026\u010c\001\002\000\004\033\u010d\001\002" +
    "\000\004\016\u014e\001\002\000\004\034\u0110\001\002\000" +
    "\046\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\031\uffee\037\uffee\041\uffee\044\uffee\045" +
    "\uffee\051\uffee\052\uffee\055\uffee\056\uffee\111\uffee\001\002" +
    "\000\004\016\u0111\001\002\000\010\120\u0114\121\u0112\122" +
    "\u0113\001\002\000\004\023\u0143\001\002\000\004\023\u013f" +
    "\001\002\000\004\023\u0115\001\002\000\004\026\u0116\001" +
    "\002\000\004\026\u0117\001\002\000\012\017\057\020\004" +
    "\021\032\022\005\001\002\000\004\011\106\001\002\000" +
    "\054\002\uffdd\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\026\u013c\031\uffdd\033\uffdd\034\uffdd\037" +
    "\uffdd\041\uffdd\044\uffdd\045\uffdd\051\uffdd\052\uffdd\055\uffdd" +
    "\056\uffdd\111\uffdd\001\002\000\004\011\106\001\002\000" +
    "\004\011\106\001\002\000\050\002\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\031\uffe7\034" +
    "\u011e\037\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7" +
    "\055\uffe7\056\uffe7\111\uffe7\001\002\000\004\011\106\001" +
    "\002\000\004\016\u011f\001\002\000\006\121\u0120\122\u0121" +
    "\001\002\000\004\023\u0126\001\002\000\004\023\u0122\001" +
    "\002\000\004\026\u0123\001\002\000\004\026\u0124\001\002" +
    "\000\012\017\057\020\004\021\032\022\005\001\002\000" +
    "\046\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\031\uffe9\037\uffe9\041\uffe9\044\uffe9\045" +
    "\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9\111\uffe9\001\002" +
    "\000\004\026\u0127\001\002\000\004\026\u0128\001\002\000" +
    "\012\017\057\020\004\021\032\022\005\001\002\000\050" +
    "\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\031\uffea\034\u012a\037\uffea\041\uffea\044\uffea" +
    "\045\uffea\051\uffea\052\uffea\055\uffea\056\uffea\111\uffea\001" +
    "\002\000\004\016\u012b\001\002\000\004\122\u012c\001\002" +
    "\000\004\023\u012d\001\002\000\004\026\u012e\001\002\000" +
    "\004\026\u012f\001\002\000\012\017\057\020\004\021\032" +
    "\022\005\001\002\000\046\002\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\031\uffeb\037\uffeb" +
    "\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052\uffeb\055\uffeb\056" +
    "\uffeb\111\uffeb\001\002\000\010\013\064\016\u0132\023\065" +
    "\001\002\000\004\015\u0134\001\002\000\054\002\uffc9\006" +
    "\uffc9\007\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\026\uffc9\031\uffc9\033\uffc9\034\uffc9\037\uffc9\041\uffc9\044" +
    "\uffc9\045\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\111\uffc9" +
    "\001\002\000\004\016\u0135\001\002\000\012\004\u0136\005" +
    "\u013a\010\u0138\014\u0137\001\002\000\006\013\uffc7\023\uffc7" +
    "\001\002\000\006\013\uffc5\023\uffc5\001\002\000\006\013" +
    "\uffc4\023\uffc4\001\002\000\006\013\064\023\065\001\002" +
    "\000\006\013\uffc6\023\uffc6\001\002\000\054\002\uffc8\006" +
    "\uffc8\007\uffc8\011\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\026\uffc8\031\uffc8\033\uffc8\034\uffc8\037\uffc8\041\uffc8\044" +
    "\uffc8\045\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\111\uffc8" +
    "\001\002\000\054\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\026\u013d\031\uffdc\033\uffdc" +
    "\034\uffdc\037\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052" +
    "\uffdc\055\uffdc\056\uffdc\111\uffdc\001\002\000\012\017\057" +
    "\020\004\021\032\022\005\001\002\000\052\002\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\031\uffdb\033\uffdb\034\uffdb\037\uffdb\041\uffdb\044\uffdb\045" +
    "\uffdb\051\uffdb\052\uffdb\055\uffdb\056\uffdb\111\uffdb\001\002" +
    "\000\004\026\u0140\001\002\000\004\026\u0141\001\002\000" +
    "\012\017\057\020\004\021\032\022\005\001\002\000\046" +
    "\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\031\uffe5\037\uffe5\041\uffe5\044\uffe5\045\uffe5" +
    "\051\uffe5\052\uffe5\055\uffe5\056\uffe5\111\uffe5\001\002\000" +
    "\004\026\u0144\001\002\000\004\026\u0145\001\002\000\012" +
    "\017\057\020\004\021\032\022\005\001\002\000\050\002" +
    "\uffe6\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\031\uffe6\034\u0147\037\uffe6\041\uffe6\044\uffe6\045" +
    "\uffe6\051\uffe6\052\uffe6\055\uffe6\056\uffe6\111\uffe6\001\002" +
    "\000\004\016\u0148\001\002\000\004\122\u0149\001\002\000" +
    "\004\023\u014a\001\002\000\004\026\u014b\001\002\000\004" +
    "\026\u014c\001\002\000\012\017\057\020\004\021\032\022" +
    "\005\001\002\000\046\002\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\031\uffe8\037\uffe8\041" +
    "\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8\055\uffe8\056\uffe8" +
    "\111\uffe8\001\002\000\010\115\u014f\116\u0150\117\u0151\001" +
    "\002\000\004\023\u0161\001\002\000\004\023\u0156\001\002" +
    "\000\004\023\u0152\001\002\000\004\026\u0153\001\002\000" +
    "\004\026\u0154\001\002\000\012\017\057\020\004\021\032" +
    "\022\005\001\002\000\004\034\uffde\001\002\000\004\026" +
    "\u0157\001\002\000\004\026\u0158\001\002\000\012\017\057" +
    "\020\004\021\032\022\005\001\002\000\006\033\u015a\034" +
    "\uffdf\001\002\000\004\016\u015b\001\002\000\004\117\u015c" +
    "\001\002\000\004\023\u015d\001\002\000\004\026\u015e\001" +
    "\002\000\004\026\u015f\001\002\000\012\017\057\020\004" +
    "\021\032\022\005\001\002\000\004\034\uffe1\001\002\000" +
    "\004\026\u0162\001\002\000\004\026\u0163\001\002\000\012" +
    "\017\057\020\004\021\032\022\005\001\002\000\006\033" +
    "\u0165\034\uffe0\001\002\000\004\016\u0166\001\002\000\006" +
    "\116\u0167\117\u0168\001\002\000\004\023\u016d\001\002\000" +
    "\004\023\u0169\001\002\000\004\026\u016a\001\002\000\004" +
    "\026\u016b\001\002\000\012\017\057\020\004\021\032\022" +
    "\005\001\002\000\004\034\uffe2\001\002\000\004\026\u016e" +
    "\001\002\000\004\026\u016f\001\002\000\012\017\057\020" +
    "\004\021\032\022\005\001\002\000\006\033\u0171\034\uffe3" +
    "\001\002\000\004\016\u0172\001\002\000\004\117\u0173\001" +
    "\002\000\004\023\u0174\001\002\000\004\026\u0175\001\002" +
    "\000\004\026\u0176\001\002\000\012\017\057\020\004\021" +
    "\032\022\005\001\002\000\004\034\uffe4\001\002\000\004" +
    "\002\ufffe\001\002\000\016\011\uff58\070\uff58\071\uff58\072" +
    "\uff58\073\uff58\074\uff58\001\002\000\004\025\u017b\001\002" +
    "\000\004\023\u017c\001\002\000\004\026\142\001\002\000" +
    "\046\002\uff6e\006\uff6e\007\uff6e\011\uff6e\017\uff6e\020\uff6e" +
    "\021\uff6e\022\uff6e\031\uff6e\037\uff6e\041\uff6e\044\uff6e\045" +
    "\uff6e\051\uff6e\052\uff6e\055\uff6e\056\uff6e\111\uff6e\001\002" +
    "\000\004\052\u017f\001\002\000\004\011\u0180\001\002\000" +
    "\006\013\064\023\065\001\002\000\046\002\uff6c\006\uff6c" +
    "\007\uff6c\011\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\031" +
    "\uff6c\037\uff6c\041\uff6c\044\uff6c\045\uff6c\051\uff6c\052\uff6c" +
    "\055\uff6c\056\uff6c\111\uff6c\001\002\000\004\106\u0184\001" +
    "\002\000\004\105\u0188\001\002\000\006\013\064\023\u0185" +
    "\001\002\000\006\105\uff52\106\u0184\001\002\000\004\105" +
    "\uffb4\001\002\000\004\105\uffb3\001\002\000\006\013\064" +
    "\023\065\001\002\000\046\002\uffb5\006\uffb5\007\uffb5\011" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\031\uffb5\037\uffb5" +
    "\041\uffb5\044\uffb5\045\uffb5\051\uffb5\052\uffb5\055\uffb5\056" +
    "\uffb5\111\uffb5\001\002\000\006\011\u018c\017\u018d\001\002" +
    "\000\004\015\u01b1\001\002\000\004\016\u01b0\001\002\000" +
    "\004\016\u01a9\001\002\000\004\046\u018f\001\002\000\004" +
    "\016\u0190\001\002\000\006\004\u0191\011\u0192\001\002\000" +
    "\010\013\uff8b\016\uff8b\023\uff8b\001\002\000\010\013\uff8c" +
    "\016\uff8c\023\uff8c\001\002\000\004\016\u0194\001\002\000" +
    "\006\030\u0195\065\u0196\001\002\000\004\016\uff93\001\002" +
    "\000\004\016\uff94\001\002\000\004\016\u0198\001\002\000" +
    "\006\004\u0191\011\u0192\001\002\000\004\016\u019a\001\002" +
    "\000\010\047\u019e\050\u019c\111\u019d\001\002\000\004\016" +
    "\u01a3\001\002\000\004\016\uff91\001\002\000\006\013\064" +
    "\023\065\001\002\000\004\016\uff92\001\002\000\004\026" +
    "\142\001\002\000\046\002\uff96\006\uff96\007\uff96\011\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\031\uff96\037\uff96\041" +
    "\uff96\044\uff96\045\uff96\051\uff96\052\uff96\055\uff96\056\uff96" +
    "\111\uff96\001\002\000\004\006\015\001\002\000\046\002" +
    "\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95\021\uff95" +
    "\022\uff95\031\uff95\037\uff95\041\uff95\044\uff95\045\uff95\051" +
    "\uff95\052\uff95\055\uff95\056\uff95\111\uff95\001\002\000\004" +
    "\004\u01a4\001\002\000\004\016\u01a5\001\002\000\004\111" +
    "\u01a6\001\002\000\006\013\064\023\065\001\002\000\004" +
    "\026\142\001\002\000\046\002\uff97\006\uff97\007\uff97\011" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\031\uff97\037\uff97" +
    "\041\uff97\044\uff97\045\uff97\051\uff97\052\uff97\055\uff97\056" +
    "\uff97\111\uff97\001\002\000\004\011\u01aa\001\002\000\004" +
    "\016\u01ab\001\002\000\004\015\u01ac\001\002\000\004\016" +
    "\u01ad\001\002\000\004\004\u01ae\001\002\000\004\016\u01af" +
    "\001\002\000\004\046\uff8f\001\002\000\006\015\uff8d\046" +
    "\uff90\001\002\000\004\016\u01b2\001\002\000\004\004\u01b3" +
    "\001\002\000\004\016\u01b4\001\002\000\004\046\uff8e\001" +
    "\002\000\004\031\u01b6\001\002\000\006\016\u01b7\023\uffed" +
    "\001\002\000\004\103\u01b8\001\002\000\004\016\u01b9\001" +
    "\002\000\004\031\u01ba\001\002\000\004\023\uffec\001\002" +
    "\000\004\016\u01cf\001\002\000\004\016\u01ca\001\002\000" +
    "\004\016\u01be\001\002\000\004\042\u01bf\001\002\000\004" +
    "\023\137\001\002\000\006\013\064\023\065\001\002\000" +
    "\050\002\uff9e\006\uff9e\007\uff9e\011\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\031\uff9e\037\uff9e\041\uff9e\043\u01c2\044" +
    "\uff9e\045\uff9e\051\uff9e\052\uff9e\055\uff9e\056\uff9e\111\uff9e" +
    "\001\002\000\006\004\u01bb\011\u01bc\001\002\000\046\002" +
    "\uff9f\006\uff9f\007\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\031\uff9f\037\uff9f\041\uff9f\044\uff9f\045\uff9f\051" +
    "\uff9f\052\uff9f\055\uff9f\056\uff9f\111\uff9f\001\002\000\004" +
    "\016\u01c5\001\002\000\004\042\u01c6\001\002\000\004\023" +
    "\137\001\002\000\006\013\064\023\065\001\002\000\050" +
    "\002\uff9c\006\uff9c\007\uff9c\011\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\031\uff9c\037\uff9c\041\uff9c\043\u01c2\044\uff9c" +
    "\045\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c\111\uff9c\001" +
    "\002\000\046\002\uff9d\006\uff9d\007\uff9d\011\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\031\uff9d\037\uff9d\041\uff9d\044" +
    "\uff9d\045\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\111\uff9d" +
    "\001\002\000\004\064\u01cb\001\002\000\004\016\u01cc\001" +
    "\002\000\006\004\u01cd\011\u01ce\001\002\000\004\016\uff9a" +
    "\001\002\000\004\016\uff98\001\002\000\004\064\u01d0\001" +
    "\002\000\004\016\u01d1\001\002\000\006\004\u01d2\011\u01d3" +
    "\001\002\000\004\016\uff9b\001\002\000\004\016\uff99\001" +
    "\002\000\004\024\uff70\001\002\000\004\024\u01f5\001\002" +
    "\000\004\024\uff71\001\002\000\004\024\uff72\001\002\000" +
    "\016\012\105\013\uff54\016\uff54\023\uff54\024\u01db\077\u01dc" +
    "\001\002\000\004\024\uff73\001\002\000\004\024\uff74\001" +
    "\002\000\004\021\032\001\002\000\006\004\u01dd\100\u01de" +
    "\001\002\000\004\100\u01e0\001\002\000\006\013\064\023" +
    "\065\001\002\000\046\002\uff5e\006\uff5e\007\uff5e\011\uff5e" +
    "\017\uff5e\020\uff5e\021\uff5e\022\uff5e\031\uff5e\037\uff5e\041" +
    "\uff5e\044\uff5e\045\uff5e\051\uff5e\052\uff5e\055\uff5e\056\uff5e" +
    "\111\uff5e\001\002\000\004\016\u01e1\001\002\000\004\015" +
    "\u01e2\001\002\000\004\101\u01e3\001\002\000\004\016\u01e4" +
    "\001\002\000\004\005\u01e6\001\002\000\004\102\u01eb\001" +
    "\002\000\006\012\u01e8\016\u01e7\001\002\000\004\102\uff65" +
    "\001\002\000\004\016\u01e9\001\002\000\004\005\u01e6\001" +
    "\002\000\004\102\uff64\001\002\000\006\013\064\023\065" +
    "\001\002\000\046\002\uff6a\006\uff6a\007\uff6a\011\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\022\uff6a\031\uff6a\037\uff6a\041\uff6a" +
    "\044\uff6a\045\uff6a\051\uff6a\052\uff6a\055\uff6a\056\uff6a\111" +
    "\uff6a\001\002\000\004\025\u01f2\001\002\000\004\011\u01ef" +
    "\001\002\000\006\012\u01f0\025\uffa7\001\002\000\004\021" +
    "\032\001\002\000\004\025\uffa8\001\002\000\004\023\137" +
    "\001\002\000\006\013\064\023\065\001\002\000\046\002" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\031\uffaf\037\uffaf\041\uffaf\044\uffaf\045\uffaf\051" +
    "\uffaf\052\uffaf\055\uffaf\056\uffaf\111\uffaf\001\002\000\004" +
    "\021\032\001\002\000\004\011\u01f7\001\002\000\004\025" +
    "\u01f8\001\002\000\006\013\064\023\065\001\002\000\046" +
    "\002\uff75\006\uff75\007\uff75\011\uff75\017\uff75\020\uff75\021" +
    "\uff75\022\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045\uff75" +
    "\051\uff75\052\uff75\055\uff75\056\uff75\111\uff75\001\002\000" +
    "\004\011\u01fb\001\002\000\006\013\064\023\065\001\002" +
    "\000\046\002\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\031\uffb7\037\uffb7\041\uffb7\044\uffb7" +
    "\045\uffb7\051\uffb7\052\uffb7\055\uffb7\056\uffb7\111\uffb7\001" +
    "\002\000\004\004\u020b\001\002\000\004\015\u01ff\001\002" +
    "\000\004\016\u0200\001\002\000\012\004\320\011\321\057" +
    "\u0201\110\317\001\002\000\014\017\274\020\275\021\300" +
    "\022\277\031\u0203\001\002\000\004\077\u0207\001\002\000" +
    "\004\024\u0204\001\002\000\004\025\u0205\001\002\000\006" +
    "\013\064\023\065\001\002\000\046\002\uffa2\006\uffa2\007" +
    "\uffa2\011\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\031\uffa2" +
    "\037\uffa2\041\uffa2\044\uffa2\045\uffa2\051\uffa2\052\uffa2\055" +
    "\uffa2\056\uffa2\111\uffa2\001\002\000\004\004\u0208\001\002" +
    "\000\004\100\u0209\001\002\000\006\013\064\023\065\001" +
    "\002\000\046\002\uff5a\006\uff5a\007\uff5a\011\uff5a\017\uff5a" +
    "\020\uff5a\021\uff5a\022\uff5a\031\uff5a\037\uff5a\041\uff5a\044" +
    "\uff5a\045\uff5a\051\uff5a\052\uff5a\055\uff5a\056\uff5a\111\uff5a" +
    "\001\002\000\004\100\u020c\001\002\000\004\016\u020d\001" +
    "\002\000\004\015\u020e\001\002\000\004\016\u020f\001\002" +
    "\000\012\004\167\005\173\010\170\014\165\001\002\000" +
    "\006\013\064\023\065\001\002\000\046\002\uff5b\006\uff5b" +
    "\007\uff5b\011\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\031" +
    "\uff5b\037\uff5b\041\uff5b\044\uff5b\045\uff5b\051\uff5b\052\uff5b" +
    "\055\uff5b\056\uff5b\111\uff5b\001\002\000\012\004\u0214\005" +
    "\u0217\011\u0216\014\u0213\001\002\000\010\012\u0224\013\uffbc" +
    "\023\uffbc\001\002\000\010\012\u0221\013\uffbb\023\uffbb\001" +
    "\002\000\006\013\064\023\065\001\002\000\012\012\u021c" +
    "\013\uffb9\023\uffb9\060\u021b\001\002\000\010\012\u0218\013" +
    "\uffba\023\uffba\001\002\000\004\016\u0219\001\002\000\012" +
    "\004\u0214\005\u0217\011\u0216\014\u0213\001\002\000\006\013" +
    "\uffbe\023\uffbe\001\002\000\004\011\u021f\001\002\000\004" +
    "\016\u021d\001\002\000\012\004\u0214\005\u0217\011\u0216\014" +
    "\u0213\001\002\000\006\013\uffbd\023\uffbd\001\002\000\006" +
    "\013\uffb8\023\uffb8\001\002\000\046\002\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\031\uffc1" +
    "\037\uffc1\041\uffc1\044\uffc1\045\uffc1\051\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\111\uffc1\001\002\000\004\016\u0222\001\002" +
    "\000\012\004\u0214\005\u0217\011\u0216\014\u0213\001\002\000" +
    "\006\013\uffbf\023\uffbf\001\002\000\004\016\u0225\001\002" +
    "\000\012\004\u0214\005\u0217\011\u0216\014\u0213\001\002\000" +
    "\006\013\uffc0\023\uffc0\001\002\000\004\026\142\001\002" +
    "\000\004\011\312\001\002\000\004\046\u022a\001\002\000" +
    "\004\016\u022b\001\002\000\006\004\u0191\011\u0192\001\002" +
    "\000\004\016\u022d\001\002\000\006\030\u0195\065\u0196\001" +
    "\002\000\004\016\u022f\001\002\000\006\004\u0191\011\u0192" +
    "\001\002\000\006\013\064\023\065\001\002\000\046\002" +
    "\uff8a\006\uff8a\007\uff8a\011\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\031\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a\051" +
    "\uff8a\052\uff8a\055\uff8a\056\uff8a\111\uff8a\001\002\000\004" +
    "\002\000\001\002\000\004\011\uff56\001\002\000\004\011" +
    "\uff57\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0232\000\072\002\006\004\057\005\041\006\043\007" +
    "\005\010\012\011\037\015\042\016\015\017\032\022\011" +
    "\031\044\032\034\035\035\042\010\046\013\053\033\055" +
    "\036\056\047\057\020\060\045\061\053\071\025\076\022" +
    "\105\052\106\024\112\054\116\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0130\036\u01d4\001\001\000\004\033\u01bc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\002\u0177\004\057" +
    "\005\041\006\043\007\005\010\012\011\037\015\042\016" +
    "\015\017\032\022\011\031\044\032\034\035\035\042\010" +
    "\046\013\053\033\055\036\056\047\057\020\060\045\061" +
    "\053\071\025\076\022\105\052\106\024\112\054\116\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\351\001\001\000\002\001\001\000\004\012" +
    "\203\001\001\000\004\013\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\002\060" +
    "\004\057\005\041\006\043\007\005\010\012\011\037\015" +
    "\042\016\015\017\032\022\011\031\044\032\034\035\035" +
    "\042\010\046\013\053\033\055\036\056\047\057\020\060" +
    "\045\061\053\071\025\076\022\105\052\106\024\112\054" +
    "\116\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\127\001\001\000" +
    "\002\001\001\000\004\012\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\124\001\001\000\002\001" +
    "\001\000\004\013\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\134\001\001\000\002\001\001\000\004" +
    "\023\137\001\001\000\004\030\142\001\001\000\004\013" +
    "\140\001\001\000\002\001\001\000\004\030\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\170\040\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\213\001\001\000\002" +
    "\001\001\000\004\060\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\220\001\001\000\002\001\001" +
    "\000\004\060\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\232\001\001\000\004\013\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\242\056\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\246\056\243\001\001\000\002\001\001" +
    "\000\004\023\250\001\001\000\004\013\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\271\001\001\000\002\001\001\000\004\043" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\312\106\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\321\001\001\000\002\001\001" +
    "\000\004\110\335\001\001\000\004\110\331\001\001\000" +
    "\004\013\322\001\001\000\004\030\323\001\001\000\004" +
    "\106\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\344\001\001\000\004\013\345\001\001\000\004" +
    "\030\346\001\001\000\004\106\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\357\001\001\000\002\001\001\000\004" +
    "\025\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0104\001\001\000" +
    "\004\013\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\u010d\001\001\000\002" +
    "\001\001\000\004\115\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u0118\006\043\007\005\010\012\011\037" +
    "\056\u011a\057\u0119\060\u0117\061\u011c\114\u011b\001\001\000" +
    "\004\012\351\001\001\000\002\001\001\000\004\012\u0130" +
    "\001\001\000\004\012\203\001\001\000\002\001\001\000" +
    "\004\012\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0118\006\043\007\005\010\012" +
    "\011\037\056\u011a\057\u0119\060\u0117\061\u011c\114\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0118\006\043\007\005\010\012\011\037\056" +
    "\u011a\057\u0119\060\u0117\061\u011c\114\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0118" +
    "\006\043\007\005\010\012\011\037\056\u011a\057\u0119\060" +
    "\u0117\061\u011c\114\u012f\001\001\000\002\001\001\000\004" +
    "\013\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0118\006\043\007\005\010\012\011\037\056" +
    "\u011a\057\u0119\060\u0117\061\u011c\114\u013d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0118\006\043\007\005\010\012\011\037\056\u011a\057\u0119" +
    "\060\u0117\061\u011c\114\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0118\006\043" +
    "\007\005\010\012\011\037\056\u011a\057\u0119\060\u0117\061" +
    "\u011c\114\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0118\006\043\007\005\010\012" +
    "\011\037\056\u011a\057\u0119\060\u0117\061\u011c\114\u014c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0118\006\043\007\005\010\012" +
    "\011\037\056\u011a\057\u0119\060\u0117\061\u011c\114\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0118\006\043\007\005\010\012\011\037\056" +
    "\u011a\057\u0119\060\u0117\061\u011c\114\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0118" +
    "\006\043\007\005\010\012\011\037\056\u011a\057\u0119\060" +
    "\u0117\061\u011c\114\u015f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0118\006\043\007" +
    "\005\010\012\011\037\056\u011a\057\u0119\060\u0117\061\u011c" +
    "\114\u0163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0118\006\043\007" +
    "\005\010\012\011\037\056\u011a\057\u0119\060\u0117\061\u011c" +
    "\114\u016b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0118\006\043\007\005\010\012" +
    "\011\037\056\u011a\057\u0119\060\u0117\061\u011c\114\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0118\006\043\007\005\010\012\011\037\056\u011a" +
    "\057\u0119\060\u0117\061\u011c\114\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u017d\045\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0180\001\001\000\002\001\001\000\004\072\u0182\001" +
    "\001\000\002\001\001\000\004\013\u0185\001\001\000\004" +
    "\072\u0186\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0188\001\001\000\002\001\001\000\006\077\u018d" +
    "\104\u018a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0192\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\u0196\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0198\001" +
    "\001\000\002\001\001\000\004\101\u019a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u019e\001\001\000" +
    "\002\001\001\000\006\030\u01a0\103\u019f\001\001\000\002" +
    "\001\001\000\004\016\u01a1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01a6\001\001\000\006\030\u01a0\103\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01bf\001\001\000\004\013\u01c0\001\001\000" +
    "\004\034\u01c2\001\001\000\004\033\u01c3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01c6\001\001\000\004\013\u01c7\001\001\000\004\034\u01c8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u01ec" +
    "\057\u01ed\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u01e4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u01e9\001" +
    "\001\000\002\001\001\000\004\013\u01eb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u01f0\057\u01ed\001\001\000\002\001\001" +
    "\000\004\023\u01f2\001\001\000\004\013\u01f3\001\001\000" +
    "\002\001\001\000\004\057\u01f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01f8\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u01fb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\344\001\001\000\004\043\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0209\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u020f\001\001\000\004\013" +
    "\u0210\001\001\000\002\001\001\000\004\020\u0214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u021f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0219\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u021d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0222\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0225\001\001\000\002\001\001\000" +
    "\004\030\u0227\001\001\000\004\106\u0228\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u022b\001\001\000" +
    "\002\001\001\000\004\100\u022d\001\001\000\002\001\001" +
    "\000\004\102\u022f\001\001\000\004\013\u0230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
