
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\006\011\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\007" +
    "\005\000\002\007\011\000\002\010\005\000\002\010\011" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\011\005\000\002\011\011\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\017\006\000\002\071" +
    "\004\000\002\071\007\000\002\072\004\000\002\072\005" +
    "\000\002\022\011\000\002\022\010\000\002\022\011\000" +
    "\002\022\011\000\002\024\006\000\002\024\004\000\002" +
    "\025\007\000\002\025\005\000\002\026\007\000\002\026" +
    "\005\000\002\027\006\000\002\027\004\000\002\023\013" +
    "\000\002\023\006\000\002\031\015\000\002\031\016\000" +
    "\002\031\013\000\002\031\005\000\002\037\006\000\002" +
    "\032\011\000\002\032\010\000\002\034\011\000\002\034" +
    "\010\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\076\024\000\002\076\020\000" +
    "\002\103\004\000\002\100\003\000\002\100\003\000\002" +
    "\101\003\000\002\101\003\000\002\077\004\000\002\077" +
    "\012\000\002\077\007\000\002\104\004\000\002\102\003" +
    "\000\002\102\003\000\002\105\016\000\002\106\006\000" +
    "\002\106\010\000\002\106\012\000\002\106\010\000\002" +
    "\107\005\000\002\107\005\000\002\107\005\000\002\107" +
    "\005\000\002\107\004\000\002\107\004\000\002\107\003" +
    "\000\002\107\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\035" +
    "\011\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\042\017\000" +
    "\002\042\007\000\002\041\003\000\002\045\006\000\002" +
    "\046\016\000\002\046\016\000\002\046\016\000\002\046" +
    "\016\000\002\047\004\000\002\047\006\000\002\050\004" +
    "\000\002\050\006\000\002\051\004\000\002\051\006\000" +
    "\002\052\004\000\002\052\006\000\002\053\007\000\002" +
    "\053\007\000\002\053\007\000\002\053\007\000\002\053" +
    "\013\000\002\053\014\000\002\056\004\000\002\057\004" +
    "\000\002\061\004\000\002\060\004\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\030\004\000\002\030\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c7\000\042\006\014\007\020\011\017\017\054\020" +
    "\004\021\032\022\005\031\050\041\021\044\045\045\026" +
    "\051\030\052\053\055\047\056\027\111\010\001\002\000" +
    "\004\016\u01c9\001\002\000\004\016\u01c8\001\002\000\044" +
    "\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\031\uffee\041\uffee\044\uffee\045\uffee\051\uffee" +
    "\052\uffee\055\uffee\056\uffee\111\uffee\001\002\000\004\002" +
    "\u01c7\001\002\000\004\023\u01bc\001\002\000\044\002\uffed" +
    "\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\031\uffed\041\uffed\044\uffed\045\uffed\051\uffed\052\uffed" +
    "\055\uffed\056\uffed\111\uffed\001\002\000\044\002\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\031\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\111\ufffa\001\002\000\044\002\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031" +
    "\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\055\ufff2" +
    "\056\ufff2\111\ufff2\001\002\000\004\016\u01a7\001\002\000" +
    "\044\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\031\ufff1\041\ufff1\044\ufff1\045\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\056\ufff1\111\ufff1\001\002\000\044" +
    "\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\031\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8" +
    "\052\uffd8\055\uffd8\056\uffd8\111\uffd8\001\002\000\010\015" +
    "\313\016\u0193\077\u0192\001\002\000\004\016\u018f\001\002" +
    "\000\006\004\u0176\011\u0177\001\002\000\016\011\u0149\070" +
    "\u014c\071\u014a\072\u0148\073\u0147\074\u0145\001\002\000\044" +
    "\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\031\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7" +
    "\052\ufff7\055\ufff7\056\ufff7\111\ufff7\001\002\000\044\002" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\031\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6\052" +
    "\ufff6\055\ufff6\056\ufff6\111\ufff6\001\002\000\044\002\ufff8" +
    "\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\031\ufff8\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8" +
    "\055\ufff8\056\ufff8\111\ufff8\001\002\000\004\016\u011a\001" +
    "\002\000\004\023\u0112\001\002\000\004\024\u010a\001\002" +
    "\000\044\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\031\uffd7\041\uffd7\044\uffd7\045\uffd7" +
    "\051\uffd7\052\uffd7\055\uffd7\056\uffd7\111\uffd7\001\002\000" +
    "\004\016\u0109\001\002\000\044\002\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0\041" +
    "\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0\055\ufff0\056\ufff0" +
    "\111\ufff0\001\002\000\044\002\ufff4\006\ufff4\007\ufff4\011" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\031\ufff4\041\ufff4" +
    "\044\ufff4\045\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4\111" +
    "\ufff4\001\002\000\044\002\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3\041\ufff3\044" +
    "\ufff3\045\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3\111\ufff3" +
    "\001\002\000\044\002\uffff\006\014\007\020\011\017\017" +
    "\054\020\004\021\032\022\005\031\050\041\021\044\045" +
    "\045\026\051\030\052\053\055\047\056\027\111\010\001" +
    "\002\000\044\002\uffec\006\uffec\007\uffec\011\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\031\uffec\041\uffec\044\uffec\045" +
    "\uffec\051\uffec\052\uffec\055\uffec\056\uffec\111\uffec\001\002" +
    "\000\044\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\031\ufffc\041\ufffc\044\ufffc\045\ufffc" +
    "\051\ufffc\052\ufffc\055\ufffc\056\ufffc\111\ufffc\001\002\000" +
    "\044\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\031\ufffb\041\ufffb\044\ufffb\045\ufffb\051" +
    "\ufffb\052\ufffb\055\ufffb\056\ufffb\111\ufffb\001\002\000\044" +
    "\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\031\uffef\041\uffef\044\uffef\045\uffef\051\uffef" +
    "\052\uffef\055\uffef\056\uffef\111\uffef\001\002\000\044\002" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\031\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9\052" +
    "\ufff9\055\ufff9\056\ufff9\111\ufff9\001\002\000\004\011\346" +
    "\001\002\000\004\024\270\001\002\000\012\011\200\066" +
    "\203\067\202\076\204\001\002\000\006\013\061\023\062" +
    "\001\002\000\004\016\152\001\002\000\044\002\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\031\ufff5\041\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\055" +
    "\ufff5\056\ufff5\111\ufff5\001\002\000\004\011\065\001\002" +
    "\000\004\011\060\001\002\000\004\016\057\001\002\000" +
    "\044\002\001\006\014\007\020\011\017\017\054\020\004" +
    "\021\032\022\005\031\050\041\021\044\045\045\026\051" +
    "\030\052\053\055\047\056\027\111\010\001\002\000\004" +
    "\002\ufffd\001\002\000\012\011\uff6e\066\uff6e\067\uff6e\076" +
    "\uff6e\001\002\000\006\013\061\023\062\001\002\000\004" +
    "\023\064\001\002\000\052\002\uff67\006\uff67\007\uff67\011" +
    "\uff67\017\uff67\020\uff67\021\uff67\022\uff67\026\uff67\031\uff67" +
    "\041\uff67\043\uff67\044\uff67\045\uff67\046\uff67\051\uff67\052" +
    "\uff67\055\uff67\056\uff67\111\uff67\001\002\000\044\002\uffb6" +
    "\006\uffb6\007\uffb6\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\031\uffb6\041\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6" +
    "\055\uffb6\056\uffb6\111\uffb6\001\002\000\054\002\uff68\006" +
    "\uff68\007\uff68\011\uff68\017\uff68\020\uff68\021\uff68\022\uff68" +
    "\026\uff68\031\uff68\041\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\051\uff68\052\uff68\055\uff68\056\uff68\105\uff68\111\uff68" +
    "\001\002\000\016\012\102\013\uff69\016\uff69\023\uff69\024" +
    "\100\077\101\001\002\000\010\013\061\016\067\023\062" +
    "\001\002\000\004\015\071\001\002\000\044\002\uffe3\006" +
    "\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\031\uffe3\041\uffe3\044\uffe3\045\uffe3\051\uffe3\052\uffe3\055" +
    "\uffe3\056\uffe3\111\uffe3\001\002\000\004\016\072\001\002" +
    "\000\010\004\073\005\076\010\074\001\002\000\006\013" +
    "\uffe1\023\uffe1\001\002\000\006\013\uffdf\023\uffdf\001\002" +
    "\000\006\013\061\023\062\001\002\000\006\013\uffe0\023" +
    "\uffe0\001\002\000\044\002\uffe2\006\uffe2\007\uffe2\011\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\031\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\052\uffe2\055\uffe2\056\uffe2\111\uffe2" +
    "\001\002\000\004\020\126\001\002\000\006\004\105\100" +
    "\106\001\002\000\004\011\103\001\002\000\012\012\102" +
    "\013\uff69\016\uff69\023\uff69\001\002\000\010\013\uff6a\016" +
    "\uff6a\023\uff6a\001\002\000\004\100\110\001\002\000\006" +
    "\013\061\023\062\001\002\000\044\002\uff72\006\uff72\007" +
    "\uff72\011\uff72\017\uff72\020\uff72\021\uff72\022\uff72\031\uff72" +
    "\041\uff72\044\uff72\045\uff72\051\uff72\052\uff72\055\uff72\056" +
    "\uff72\111\uff72\001\002\000\004\016\111\001\002\000\004" +
    "\015\112\001\002\000\004\101\113\001\002\000\004\016" +
    "\114\001\002\000\004\010\116\001\002\000\004\102\123" +
    "\001\002\000\006\012\120\016\117\001\002\000\004\102" +
    "\uff76\001\002\000\004\016\121\001\002\000\004\010\116" +
    "\001\002\000\004\102\uff75\001\002\000\006\013\061\023" +
    "\062\001\002\000\044\002\uff7d\006\uff7d\007\uff7d\011\uff7d" +
    "\017\uff7d\020\uff7d\021\uff7d\022\uff7d\031\uff7d\041\uff7d\044" +
    "\uff7d\045\uff7d\051\uff7d\052\uff7d\055\uff7d\056\uff7d\111\uff7d" +
    "\001\002\000\004\025\133\001\002\000\004\016\127\001" +
    "\002\000\004\011\130\001\002\000\006\012\131\025\uffbe" +
    "\001\002\000\004\020\126\001\002\000\004\025\uffbf\001" +
    "\002\000\004\023\134\001\002\000\004\026\137\001\002" +
    "\000\006\013\061\023\062\001\002\000\044\002\uffc5\006" +
    "\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\031\uffc5\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\055" +
    "\uffc5\056\uffc5\111\uffc5\001\002\000\014\006\uff65\011\uff65" +
    "\026\137\035\uff65\052\uff65\001\002\000\004\035\141\001" +
    "\002\000\006\004\143\016\142\001\002\000\004\011\144" +
    "\001\002\000\006\013\uffba\023\uffba\001\002\000\004\016" +
    "\145\001\002\000\004\064\146\001\002\000\004\016\147" +
    "\001\002\000\004\011\150\001\002\000\006\013\uffbb\023" +
    "\uffbb\001\002\000\012\006\uff66\011\uff66\035\uff66\052\uff66" +
    "\001\002\000\004\011\153\001\002\000\004\016\154\001" +
    "\002\000\004\015\155\001\002\000\004\016\156\001\002" +
    "\000\004\057\157\001\002\000\004\031\160\001\002\000" +
    "\004\024\161\001\002\000\014\004\162\005\170\010\165" +
    "\014\163\025\167\001\002\000\012\012\uff64\013\uff64\023" +
    "\uff64\025\uff64\001\002\000\012\012\uff63\013\uff63\023\uff63" +
    "\025\uff63\001\002\000\004\012\174\001\002\000\012\012" +
    "\uff62\013\uff62\023\uff62\025\uff62\001\002\000\004\025\172" +
    "\001\002\000\006\013\061\023\062\001\002\000\012\012" +
    "\uff61\013\uff61\023\uff61\025\uff61\001\002\000\044\002\uffb9" +
    "\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\031\uffb9\041\uffb9\044\uffb9\045\uffb9\051\uffb9\052\uffb9" +
    "\055\uffb9\056\uffb9\111\uffb9\001\002\000\006\013\061\023" +
    "\062\001\002\000\044\002\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\031\uffb8\041\uffb8\044" +
    "\uffb8\045\uffb8\051\uffb8\052\uffb8\055\uffb8\056\uffb8\111\uffb8" +
    "\001\002\000\004\016\175\001\002\000\012\004\162\005" +
    "\170\010\165\014\163\001\002\000\004\025\uffb5\001\002" +
    "\000\044\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\031\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\051\uffcb\052\uffcb\055\uffcb\056\uffcb\111\uffcb\001\002\000" +
    "\016\012\102\013\uff69\016\uff69\023\uff69\024\236\077\237" +
    "\001\002\000\010\013\061\016\224\023\062\001\002\000" +
    "\004\024\217\001\002\000\004\024\212\001\002\000\004" +
    "\024\205\001\002\000\004\022\005\001\002\000\004\011" +
    "\207\001\002\000\004\025\210\001\002\000\006\013\061" +
    "\023\062\001\002\000\044\002\uff8d\006\uff8d\007\uff8d\011" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\031\uff8d\041\uff8d" +
    "\044\uff8d\045\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\111" +
    "\uff8d\001\002\000\004\022\005\001\002\000\004\011\214" +
    "\001\002\000\004\025\215\001\002\000\006\013\061\023" +
    "\062\001\002\000\044\002\uff8c\006\uff8c\007\uff8c\011\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\022\uff8c\031\uff8c\041\uff8c\044" +
    "\uff8c\045\uff8c\051\uff8c\052\uff8c\055\uff8c\056\uff8c\111\uff8c" +
    "\001\002\000\004\022\005\001\002\000\004\011\221\001" +
    "\002\000\004\025\222\001\002\000\006\013\061\023\062" +
    "\001\002\000\044\002\uff8b\006\uff8b\007\uff8b\011\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\031\uff8b\041\uff8b\044\uff8b" +
    "\045\uff8b\051\uff8b\052\uff8b\055\uff8b\056\uff8b\111\uff8b\001" +
    "\002\000\004\015\226\001\002\000\044\002\uffeb\006\uffeb" +
    "\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\031" +
    "\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052\uffeb\055\uffeb" +
    "\056\uffeb\111\uffeb\001\002\000\004\016\227\001\002\000" +
    "\012\004\232\005\234\010\233\014\231\001\002\000\006" +
    "\013\061\023\062\001\002\000\006\013\uffe7\023\uffe7\001" +
    "\002\000\006\013\uffe9\023\uffe9\001\002\000\006\013\uffe6" +
    "\023\uffe6\001\002\000\006\013\uffe8\023\uffe8\001\002\000" +
    "\044\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\031\uffea\041\uffea\044\uffea\045\uffea\051" +
    "\uffea\052\uffea\055\uffea\056\uffea\111\uffea\001\002\000\004" +
    "\017\054\001\002\000\006\004\240\100\241\001\002\000" +
    "\004\100\243\001\002\000\006\013\061\023\062\001\002" +
    "\000\044\002\uff74\006\uff74\007\uff74\011\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\031\uff74\041\uff74\044\uff74\045\uff74" +
    "\051\uff74\052\uff74\055\uff74\056\uff74\111\uff74\001\002\000" +
    "\004\016\244\001\002\000\004\015\245\001\002\000\004" +
    "\101\246\001\002\000\004\016\247\001\002\000\004\004" +
    "\250\001\002\000\006\012\255\016\254\001\002\000\004" +
    "\102\252\001\002\000\006\013\061\023\062\001\002\000" +
    "\044\002\uff80\006\uff80\007\uff80\011\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\031\uff80\041\uff80\044\uff80\045\uff80\051" +
    "\uff80\052\uff80\055\uff80\056\uff80\111\uff80\001\002\000\004" +
    "\102\uff7c\001\002\000\004\016\256\001\002\000\004\004" +
    "\250\001\002\000\004\102\uff7b\001\002\000\004\025\265" +
    "\001\002\000\004\011\262\001\002\000\006\012\263\025" +
    "\uffc2\001\002\000\004\017\054\001\002\000\004\025\uffc3" +
    "\001\002\000\004\023\134\001\002\000\006\013\061\023" +
    "\062\001\002\000\044\002\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\031\uffc7\041\uffc7\044" +
    "\uffc7\045\uffc7\051\uffc7\052\uffc7\055\uffc7\056\uffc7\111\uffc7" +
    "\001\002\000\012\017\272\020\271\021\275\022\274\001" +
    "\002\000\006\016\uff5e\077\uff5e\001\002\000\006\016\uff60" +
    "\077\uff60\001\002\000\004\016\276\001\002\000\006\016" +
    "\uff5f\077\uff5f\001\002\000\006\016\uff5d\077\uff5d\001\002" +
    "\000\004\011\277\001\002\000\004\012\300\001\002\000" +
    "\004\016\301\001\002\000\012\017\272\020\271\021\275" +
    "\022\274\001\002\000\004\016\303\001\002\000\004\011" +
    "\304\001\002\000\004\025\305\001\002\000\004\023\306" +
    "\001\002\000\004\011\307\001\002\000\006\015\313\016" +
    "\312\001\002\000\044\002\uff82\006\uff82\007\uff82\011\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\031\uff82\041\uff82\044" +
    "\uff82\045\uff82\051\uff82\052\uff82\055\uff82\056\uff82\111\uff82" +
    "\001\002\000\044\002\uff84\006\uff84\007\uff84\011\uff84\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\031\uff84\041\uff84\044\uff84" +
    "\045\uff84\051\uff84\052\uff84\055\uff84\056\uff84\111\uff84\001" +
    "\002\000\004\015\340\001\002\000\010\004\315\011\316" +
    "\110\314\001\002\000\006\004\336\011\337\001\002\000" +
    "\020\013\uff93\023\uff93\107\326\110\325\112\323\113\324" +
    "\114\330\001\002\000\020\013\uff94\023\uff94\107\326\110" +
    "\325\112\323\113\324\114\330\001\002\000\006\013\061" +
    "\023\062\001\002\000\050\002\uff9e\006\uff9e\007\uff9e\011" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\026\137\031\uff9e" +
    "\041\uff9e\044\uff9e\045\uff9e\046\uff9e\051\uff9e\052\uff9e\055" +
    "\uff9e\056\uff9e\111\uff9e\001\002\000\004\011\307\001\002" +
    "\000\046\002\uff9b\006\uff9b\007\uff9b\011\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\031\uff9b\041\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b\111\uff9b\001" +
    "\002\000\006\004\uff90\011\uff90\001\002\000\006\004\uff8f" +
    "\011\uff8f\001\002\000\006\004\uff91\011\uff91\001\002\000" +
    "\006\004\uff92\011\uff92\001\002\000\006\004\331\011\332" +
    "\001\002\000\006\004\uff8e\011\uff8e\001\002\000\006\013" +
    "\uff97\023\uff97\001\002\000\006\013\uff99\023\uff99\001\002" +
    "\000\006\004\334\011\335\001\002\000\006\013\uff9a\023" +
    "\uff9a\001\002\000\006\013\uff98\023\uff98\001\002\000\006" +
    "\013\uff95\023\uff95\001\002\000\006\013\uff96\023\uff96\001" +
    "\002\000\004\016\341\001\002\000\010\004\315\011\316" +
    "\110\314\001\002\000\006\013\061\023\062\001\002\000" +
    "\050\002\uff9d\006\uff9d\007\uff9d\011\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\026\137\031\uff9d\041\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\111\uff9d" +
    "\001\002\000\004\011\307\001\002\000\046\002\uff9c\006" +
    "\uff9c\007\uff9c\011\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\031\uff9c\041\uff9c\044\uff9c\045\uff9c\046\uff9c\051\uff9c\052" +
    "\uff9c\055\uff9c\056\uff9c\111\uff9c\001\002\000\016\012\102" +
    "\013\uff69\016\uff69\023\uff69\024\356\077\357\001\002\000" +
    "\010\013\061\016\350\023\062\001\002\000\004\015\352" +
    "\001\002\000\044\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\031\uffe5\041\uffe5\044\uffe5" +
    "\045\uffe5\051\uffe5\052\uffe5\055\uffe5\056\uffe5\111\uffe5\001" +
    "\002\000\004\016\353\001\002\000\004\014\354\001\002" +
    "\000\006\013\061\023\062\001\002\000\044\002\uffe4\006" +
    "\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\031\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\055" +
    "\uffe4\056\uffe4\111\uffe4\001\002\000\004\022\u0100\001\002" +
    "\000\006\004\360\100\361\001\002\000\004\100\363\001" +
    "\002\000\006\013\061\023\062\001\002\000\044\002\uff71" +
    "\006\uff71\007\uff71\011\uff71\017\uff71\020\uff71\021\uff71\022" +
    "\uff71\031\uff71\041\uff71\044\uff71\045\uff71\051\uff71\052\uff71" +
    "\055\uff71\056\uff71\111\uff71\001\002\000\004\016\364\001" +
    "\002\000\004\015\365\001\002\000\004\101\366\001\002" +
    "\000\004\016\367\001\002\000\004\014\370\001\002\000" +
    "\006\012\375\016\374\001\002\000\004\102\372\001\002" +
    "\000\006\013\061\023\062\001\002\000\044\002\uff7e\006" +
    "\uff7e\007\uff7e\011\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e" +
    "\031\uff7e\041\uff7e\044\uff7e\045\uff7e\051\uff7e\052\uff7e\055" +
    "\uff7e\056\uff7e\111\uff7e\001\002\000\004\102\uff78\001\002" +
    "\000\004\016\376\001\002\000\004\014\370\001\002\000" +
    "\004\102\uff77\001\002\000\004\016\u0104\001\002\000\004" +
    "\023\134\001\002\000\006\013\061\023\062\001\002\000" +
    "\044\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\031\uffc6\041\uffc6\044\uffc6\045\uffc6\051" +
    "\uffc6\052\uffc6\055\uffc6\056\uffc6\111\uffc6\001\002\000\004" +
    "\011\u0105\001\002\000\006\012\u0106\023\uffc0\001\002\000" +
    "\004\022\u0100\001\002\000\004\023\uffc1\001\002\000\004" +
    "\002\ufffe\001\002\000\016\011\uff6d\070\uff6d\071\uff6d\072" +
    "\uff6d\073\uff6d\074\uff6d\001\002\000\004\025\u010b\001\002" +
    "\000\004\023\u010c\001\002\000\004\026\137\001\002\000" +
    "\044\002\uff83\006\uff83\007\uff83\011\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\031\uff83\041\uff83\044\uff83\045\uff83\051" +
    "\uff83\052\uff83\055\uff83\056\uff83\111\uff83\001\002\000\004" +
    "\052\u010f\001\002\000\004\011\u0110\001\002\000\006\013" +
    "\061\023\062\001\002\000\044\002\uff81\006\uff81\007\uff81" +
    "\011\uff81\017\uff81\020\uff81\021\uff81\022\uff81\031\uff81\041" +
    "\uff81\044\uff81\045\uff81\051\uff81\052\uff81\055\uff81\056\uff81" +
    "\111\uff81\001\002\000\004\106\u0114\001\002\000\004\105" +
    "\u0118\001\002\000\006\013\061\023\u0115\001\002\000\006" +
    "\105\uff67\106\u0114\001\002\000\004\105\uffc9\001\002\000" +
    "\004\105\uffc8\001\002\000\006\013\061\023\062\001\002" +
    "\000\044\002\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\031\uffca\041\uffca\044\uffca\045\uffca" +
    "\051\uffca\052\uffca\055\uffca\056\uffca\111\uffca\001\002\000" +
    "\006\011\u011c\017\u011d\001\002\000\004\015\u0141\001\002" +
    "\000\004\016\u0140\001\002\000\004\016\u0139\001\002\000" +
    "\004\046\u011f\001\002\000\004\016\u0120\001\002\000\006" +
    "\004\u0121\011\u0122\001\002\000\010\013\uffa0\016\uffa0\023" +
    "\uffa0\001\002\000\010\013\uffa1\016\uffa1\023\uffa1\001\002" +
    "\000\004\016\u0124\001\002\000\006\030\u0126\065\u0125\001" +
    "\002\000\004\016\uffa9\001\002\000\004\016\uffa8\001\002" +
    "\000\004\016\u0128\001\002\000\006\004\u0121\011\u0122\001" +
    "\002\000\004\016\u012a\001\002\000\010\047\u012e\050\u012c" +
    "\111\u012d\001\002\000\004\016\u0133\001\002\000\004\016" +
    "\uffa6\001\002\000\006\013\061\023\062\001\002\000\004" +
    "\016\uffa7\001\002\000\004\026\137\001\002\000\044\002" +
    "\uffab\006\uffab\007\uffab\011\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\031\uffab\041\uffab\044\uffab\045\uffab\051\uffab\052" +
    "\uffab\055\uffab\056\uffab\111\uffab\001\002\000\004\006\014" +
    "\001\002\000\044\002\uffaa\006\uffaa\007\uffaa\011\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\031\uffaa\041\uffaa\044\uffaa" +
    "\045\uffaa\051\uffaa\052\uffaa\055\uffaa\056\uffaa\111\uffaa\001" +
    "\002\000\004\004\u0134\001\002\000\004\016\u0135\001\002" +
    "\000\004\111\u0136\001\002\000\006\013\061\023\062\001" +
    "\002\000\004\026\137\001\002\000\044\002\uffac\006\uffac" +
    "\007\uffac\011\uffac\017\uffac\020\uffac\021\uffac\022\uffac\031" +
    "\uffac\041\uffac\044\uffac\045\uffac\051\uffac\052\uffac\055\uffac" +
    "\056\uffac\111\uffac\001\002\000\004\011\u013a\001\002\000" +
    "\004\016\u013b\001\002\000\004\015\u013c\001\002\000\004" +
    "\016\u013d\001\002\000\004\004\u013e\001\002\000\004\016" +
    "\u013f\001\002\000\004\046\uffa4\001\002\000\006\015\uffa2" +
    "\046\uffa5\001\002\000\004\016\u0142\001\002\000\004\004" +
    "\u0143\001\002\000\004\016\u0144\001\002\000\004\046\uffa3" +
    "\001\002\000\004\024\uff85\001\002\000\004\024\u0171\001" +
    "\002\000\004\024\uff86\001\002\000\004\024\uff87\001\002" +
    "\000\016\012\102\013\uff69\016\uff69\023\uff69\024\u0157\077" +
    "\u0158\001\002\000\004\024\uff88\001\002\000\010\013\061" +
    "\016\u014d\023\062\001\002\000\004\024\uff89\001\002\000" +
    "\004\015\u014f\001\002\000\044\002\uffde\006\uffde\007\uffde" +
    "\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde\031\uffde\041" +
    "\uffde\044\uffde\045\uffde\051\uffde\052\uffde\055\uffde\056\uffde" +
    "\111\uffde\001\002\000\004\016\u0150\001\002\000\012\004" +
    "\u0152\005\u0155\010\u0153\014\u0151\001\002\000\006\013\uffda" +
    "\023\uffda\001\002\000\006\013\uffdc\023\uffdc\001\002\000" +
    "\006\013\uffd9\023\uffd9\001\002\000\006\013\061\023\062" +
    "\001\002\000\006\013\uffdb\023\uffdb\001\002\000\044\002" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\031\uffdd\041\uffdd\044\uffdd\045\uffdd\051\uffdd\052" +
    "\uffdd\055\uffdd\056\uffdd\111\uffdd\001\002\000\004\021\032" +
    "\001\002\000\006\004\u0159\100\u015a\001\002\000\004\100" +
    "\u015c\001\002\000\006\013\061\023\062\001\002\000\044" +
    "\002\uff73\006\uff73\007\uff73\011\uff73\017\uff73\020\uff73\021" +
    "\uff73\022\uff73\031\uff73\041\uff73\044\uff73\045\uff73\051\uff73" +
    "\052\uff73\055\uff73\056\uff73\111\uff73\001\002\000\004\016" +
    "\u015d\001\002\000\004\015\u015e\001\002\000\004\101\u015f" +
    "\001\002\000\004\016\u0160\001\002\000\004\005\u0162\001" +
    "\002\000\004\102\u0167\001\002\000\006\012\u0164\016\u0163" +
    "\001\002\000\004\102\uff7a\001\002\000\004\016\u0165\001" +
    "\002\000\004\005\u0162\001\002\000\004\102\uff79\001\002" +
    "\000\006\013\061\023\062\001\002\000\044\002\uff7f\006" +
    "\uff7f\007\uff7f\011\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\031\uff7f\041\uff7f\044\uff7f\045\uff7f\051\uff7f\052\uff7f\055" +
    "\uff7f\056\uff7f\111\uff7f\001\002\000\004\025\u016e\001\002" +
    "\000\004\011\u016b\001\002\000\006\012\u016c\025\uffbc\001" +
    "\002\000\004\021\032\001\002\000\004\025\uffbd\001\002" +
    "\000\004\023\134\001\002\000\006\013\061\023\062\001" +
    "\002\000\044\002\uffc4\006\uffc4\007\uffc4\011\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\031\uffc4\041\uffc4\044\uffc4\045" +
    "\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4\111\uffc4\001\002" +
    "\000\004\021\032\001\002\000\004\011\u0173\001\002\000" +
    "\004\025\u0174\001\002\000\006\013\061\023\062\001\002" +
    "\000\044\002\uff8a\006\uff8a\007\uff8a\011\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\031\uff8a\041\uff8a\044\uff8a\045\uff8a" +
    "\051\uff8a\052\uff8a\055\uff8a\056\uff8a\111\uff8a\001\002\000" +
    "\004\016\u018a\001\002\000\004\016\u0185\001\002\000\004" +
    "\016\u0179\001\002\000\004\042\u017a\001\002\000\004\023" +
    "\134\001\002\000\006\013\061\023\062\001\002\000\046" +
    "\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\031\uffb3\041\uffb3\043\u017d\044\uffb3\045\uffb3" +
    "\051\uffb3\052\uffb3\055\uffb3\056\uffb3\111\uffb3\001\002\000" +
    "\006\004\u0176\011\u0177\001\002\000\044\002\uffb4\006\uffb4" +
    "\007\uffb4\011\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\031" +
    "\uffb4\041\uffb4\044\uffb4\045\uffb4\051\uffb4\052\uffb4\055\uffb4" +
    "\056\uffb4\111\uffb4\001\002\000\004\016\u0180\001\002\000" +
    "\004\042\u0181\001\002\000\004\023\134\001\002\000\006" +
    "\013\061\023\062\001\002\000\046\002\uffb1\006\uffb1\007" +
    "\uffb1\011\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\031\uffb1" +
    "\041\uffb1\043\u017d\044\uffb1\045\uffb1\051\uffb1\052\uffb1\055" +
    "\uffb1\056\uffb1\111\uffb1\001\002\000\044\002\uffb2\006\uffb2" +
    "\007\uffb2\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\031" +
    "\uffb2\041\uffb2\044\uffb2\045\uffb2\051\uffb2\052\uffb2\055\uffb2" +
    "\056\uffb2\111\uffb2\001\002\000\004\064\u0186\001\002\000" +
    "\004\016\u0187\001\002\000\006\004\u0188\011\u0189\001\002" +
    "\000\004\016\uffaf\001\002\000\004\016\uffad\001\002\000" +
    "\004\064\u018b\001\002\000\004\016\u018c\001\002\000\006" +
    "\004\u018d\011\u018e\001\002\000\004\016\uffb0\001\002\000" +
    "\004\016\uffae\001\002\000\004\011\u0190\001\002\000\006" +
    "\013\061\023\062\001\002\000\044\002\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\031\uffcc" +
    "\041\uffcc\044\uffcc\045\uffcc\051\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\111\uffcc\001\002\000\004\004\u01a0\001\002\000\004" +
    "\015\u0194\001\002\000\004\016\u0195\001\002\000\012\004" +
    "\315\011\316\057\u0196\110\314\001\002\000\014\017\272" +
    "\020\271\021\275\022\274\031\u0198\001\002\000\004\077" +
    "\u019c\001\002\000\004\024\u0199\001\002\000\004\025\u019a" +
    "\001\002\000\006\013\061\023\062\001\002\000\044\002" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\031\uffb7\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052" +
    "\uffb7\055\uffb7\056\uffb7\111\uffb7\001\002\000\004\004\u019d" +
    "\001\002\000\004\100\u019e\001\002\000\006\013\061\023" +
    "\062\001\002\000\044\002\uff6f\006\uff6f\007\uff6f\011\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\022\uff6f\031\uff6f\041\uff6f\044" +
    "\uff6f\045\uff6f\051\uff6f\052\uff6f\055\uff6f\056\uff6f\111\uff6f" +
    "\001\002\000\004\100\u01a1\001\002\000\004\016\u01a2\001" +
    "\002\000\004\015\u01a3\001\002\000\004\016\u01a4\001\002" +
    "\000\012\004\162\005\170\010\165\014\163\001\002\000" +
    "\006\013\061\023\062\001\002\000\044\002\uff70\006\uff70" +
    "\007\uff70\011\uff70\017\uff70\020\uff70\021\uff70\022\uff70\031" +
    "\uff70\041\uff70\044\uff70\045\uff70\051\uff70\052\uff70\055\uff70" +
    "\056\uff70\111\uff70\001\002\000\012\004\u01a8\005\u01ac\011" +
    "\u01ab\014\u01a9\001\002\000\010\012\u01b9\013\uffd0\023\uffd0" +
    "\001\002\000\010\012\u01b6\013\uffd1\023\uffd1\001\002\000" +
    "\006\013\061\023\062\001\002\000\012\012\u01b1\013\uffce" +
    "\023\uffce\060\u01b0\001\002\000\010\012\u01ad\013\uffcf\023" +
    "\uffcf\001\002\000\004\016\u01ae\001\002\000\012\004\u01a8" +
    "\005\u01ac\011\u01ab\014\u01a9\001\002\000\006\013\uffd3\023" +
    "\uffd3\001\002\000\004\011\u01b4\001\002\000\004\016\u01b2" +
    "\001\002\000\012\004\u01a8\005\u01ac\011\u01ab\014\u01a9\001" +
    "\002\000\006\013\uffd2\023\uffd2\001\002\000\006\013\uffcd" +
    "\023\uffcd\001\002\000\044\002\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\031\uffd6\041\uffd6" +
    "\044\uffd6\045\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\111" +
    "\uffd6\001\002\000\004\016\u01b7\001\002\000\012\004\u01a8" +
    "\005\u01ac\011\u01ab\014\u01a9\001\002\000\006\013\uffd5\023" +
    "\uffd5\001\002\000\004\016\u01ba\001\002\000\012\004\u01a8" +
    "\005\u01ac\011\u01ab\014\u01a9\001\002\000\006\013\uffd4\023" +
    "\uffd4\001\002\000\004\026\137\001\002\000\004\011\307" +
    "\001\002\000\004\046\u01bf\001\002\000\004\016\u01c0\001" +
    "\002\000\006\004\u0121\011\u0122\001\002\000\004\016\u01c2" +
    "\001\002\000\006\030\u0126\065\u0125\001\002\000\004\016" +
    "\u01c4\001\002\000\006\004\u0121\011\u0122\001\002\000\006" +
    "\013\061\023\062\001\002\000\044\002\uff9f\006\uff9f\007" +
    "\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\031\uff9f" +
    "\041\uff9f\044\uff9f\045\uff9f\051\uff9f\052\uff9f\055\uff9f\056" +
    "\uff9f\111\uff9f\001\002\000\004\002\000\001\002\000\004" +
    "\011\uff6b\001\002\000\004\011\uff6c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c7\000\066\002\006\004\054\005\037\006\041\007" +
    "\005\010\010\011\036\015\040\016\015\017\030\022\011" +
    "\031\042\032\033\035\034\042\012\046\014\053\032\055" +
    "\035\056\045\057\021\060\043\061\051\071\024\076\022" +
    "\105\050\106\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0177\001\001\000" +
    "\006\012\u014a\036\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\002\u0107\004\054\005\037\006\041\007\005\010\010" +
    "\011\036\015\040\016\015\017\030\022\011\031\042\032" +
    "\033\035\034\042\012\046\014\053\032\055\035\056\045" +
    "\057\021\060\043\061\051\071\024\076\022\105\050\106" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\346\001\001\000\002\001\001\000\004\012\200\001\001" +
    "\000\004\013\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\002\055\004\054\005\037\006\041\007" +
    "\005\010\010\011\036\015\040\016\015\017\030\022\011" +
    "\031\042\032\033\035\034\042\012\046\014\053\032\055" +
    "\035\056\045\057\021\060\043\061\051\071\024\076\022" +
    "\105\050\106\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\124\001" +
    "\001\000\002\001\001\000\004\012\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\121\001\001\000" +
    "\002\001\001\000\004\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\131\001\001\000\002\001\001" +
    "\000\004\023\134\001\001\000\004\030\137\001\001\000" +
    "\004\013\135\001\001\000\002\001\001\000\004\030\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\165\040\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\210\001\001" +
    "\000\002\001\001\000\004\060\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\215\001\001\000\002" +
    "\001\001\000\004\060\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\227\001\001\000\004\013\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\257\056\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\263\056\260\001\001\000\002\001\001\000\004\023\265" +
    "\001\001\000\004\013\266\001\001\000\002\001\001\000" +
    "\004\043\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\310\106\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\316\001\001\000\002" +
    "\001\001\000\004\110\332\001\001\000\004\110\326\001" +
    "\001\000\004\013\317\001\001\000\004\030\320\001\001" +
    "\000\004\106\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\341\001\001\000\004\013\342\001\001" +
    "\000\004\030\343\001\001\000\004\106\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\354\001\001\000\002\001\001" +
    "\000\004\025\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0101\001" +
    "\001\000\004\013\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\u010d\045\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0110\001\001\000\002\001\001\000\004\072" +
    "\u0112\001\001\000\002\001\001\000\004\013\u0115\001\001" +
    "\000\004\072\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0118\001\001\000\002\001\001\000\006" +
    "\077\u011d\104\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u0128\001\001\000\002\001\001\000\004\101\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u012e\001" +
    "\001\000\002\001\001\000\006\030\u0130\103\u012f\001\001" +
    "\000\002\001\001\000\004\016\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0136\001\001\000\006\030\u0130\103\u0137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0155\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0168\057\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u0160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u0165\001\001\000\002\001\001\000\004\013" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u016c\057\u0169\001" +
    "\001\000\002\001\001\000\004\023\u016e\001\001\000\004" +
    "\013\u016f\001\001\000\002\001\001\000\004\057\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u017a" +
    "\001\001\000\004\013\u017b\001\001\000\004\034\u017d\001" +
    "\001\000\004\033\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0181\001\001\000" +
    "\004\013\u0182\001\001\000\004\034\u0183\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\341\001\001\000\004\043\u0196" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u01a4\001\001\000" +
    "\004\013\u01a5\001\001\000\002\001\001\000\004\020\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u01b4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u01ae\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u01b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u01ba\001\001\000\002\001" +
    "\001\000\004\030\u01bc\001\001\000\004\106\u01bd\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u01c0\001" +
    "\001\000\002\001\001\000\004\100\u01c2\001\001\000\002" +
    "\001\001\000\004\102\u01c4\001\001\000\004\013\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
