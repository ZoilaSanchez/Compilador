
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\005\000\002\006\011\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\007\005\000\002\007\011\000\002\010" +
    "\005\000\002\010\011\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\011\005\000\002\011\011\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\005\000\002" +
    "\017\006\000\002\071\004\000\002\071\007\000\002\072" +
    "\004\000\002\072\005\000\002\022\011\000\002\022\010" +
    "\000\002\022\011\000\002\022\011\000\002\024\006\000" +
    "\002\024\004\000\002\025\007\000\002\025\005\000\002" +
    "\026\007\000\002\026\005\000\002\027\006\000\002\027" +
    "\004\000\002\023\013\000\002\023\006\000\002\031\015" +
    "\000\002\031\016\000\002\031\013\000\002\031\005\000" +
    "\002\037\006\000\002\032\011\000\002\032\010\000\002" +
    "\034\011\000\002\034\010\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\076\024" +
    "\000\002\100\003\000\002\100\003\000\002\101\003\000" +
    "\002\101\003\000\002\077\003\000\002\077\010\000\002" +
    "\102\003\000\002\102\003\000\002\035\011\000\002\035" +
    "\011\000\002\035\011\000\002\035\011\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\042\017\000\002\042\007\000\002" +
    "\041\011\000\002\041\012\000\002\045\006\000\002\046" +
    "\016\000\002\046\016\000\002\046\016\000\002\046\016" +
    "\000\002\047\004\000\002\047\006\000\002\050\004\000" +
    "\002\050\006\000\002\051\004\000\002\051\006\000\002" +
    "\052\004\000\002\052\006\000\002\053\007\000\002\053" +
    "\007\000\002\053\007\000\002\053\007\000\002\053\013" +
    "\000\002\053\014\000\002\056\004\000\002\057\004\000" +
    "\002\061\004\000\002\060\004\000\002\012\005\000\002" +
    "\012\003\000\002\013\004\000\002\013\003\000\002\030" +
    "\004\000\002\030\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\040\006\013\007\017\011\016\017\051\020" +
    "\004\021\027\022\005\031\046\041\021\044\043\045\024" +
    "\051\026\052\050\055\045\056\025\001\002\000\004\016" +
    "\u0198\001\002\000\004\016\u0197\001\002\000\042\002\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\031\ufff0\041\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\004\002\u0196\001\002\000" +
    "\042\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\031\uffef\041\uffef\044\uffef\045\uffef\051" +
    "\uffef\052\uffef\055\uffef\056\uffef\001\002\000\042\002\ufff4" +
    "\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\031\ufff4\041\ufff4\044\ufff4\045\ufff4\051\ufff4\052\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\042\002\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031\ufffa" +
    "\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\055\ufffa\056" +
    "\ufffa\001\002\000\004\016\u0181\001\002\000\042\002\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\031\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\056\ufff3\001\002\000\042\002\uffda\006\uffda\007" +
    "\uffda\011\uffda\017\uffda\020\uffda\021\uffda\022\uffda\031\uffda" +
    "\041\uffda\044\uffda\045\uffda\051\uffda\052\uffda\055\uffda\056" +
    "\uffda\001\002\000\006\016\u016d\077\u016c\001\002\000\004" +
    "\016\u0169\001\002\000\016\011\u013c\070\u013e\071\u013d\072" +
    "\u013b\073\u013a\074\u0139\001\002\000\006\004\u011f\011\u0120" +
    "\001\002\000\042\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\041\ufff7\044\ufff7" +
    "\045\ufff7\051\ufff7\052\ufff7\055\ufff7\056\ufff7\001\002\000" +
    "\042\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\031\ufff8\041\ufff8\044\ufff8\045\ufff8\051" +
    "\ufff8\052\ufff8\055\ufff8\056\ufff8\001\002\000\004\016\u0101" +
    "\001\002\000\004\023\371\001\002\000\004\024\361\001" +
    "\002\000\004\016\360\001\002\000\042\002\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031" +
    "\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\042\002\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031\ufff2\041\ufff2" +
    "\044\ufff2\045\ufff2\051\ufff2\052\ufff2\055\ufff2\056\ufff2\001" +
    "\002\000\042\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\031\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\051\ufff6\052\ufff6\055\ufff6\056\ufff6\001\002\000\042" +
    "\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\031\ufff5\041\ufff5\044\ufff5\045\ufff5\051\ufff5" +
    "\052\ufff5\055\ufff5\056\ufff5\001\002\000\042\002\uffff\006" +
    "\013\007\017\011\016\017\051\020\004\021\027\022\005" +
    "\031\046\041\021\044\043\045\024\051\026\052\050\055" +
    "\045\056\025\001\002\000\042\002\uffee\006\uffee\007\uffee" +
    "\011\uffee\017\uffee\020\uffee\021\uffee\022\uffee\031\uffee\041" +
    "\uffee\044\uffee\045\uffee\051\uffee\052\uffee\055\uffee\056\uffee" +
    "\001\002\000\042\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\041\ufffc\044\ufffc" +
    "\045\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\001\002\000" +
    "\042\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\031\ufffb\041\ufffb\044\ufffb\045\ufffb\051" +
    "\ufffb\052\ufffb\055\ufffb\056\ufffb\001\002\000\042\002\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\031\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1" +
    "\055\ufff1\056\ufff1\001\002\000\042\002\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031\ufff9" +
    "\041\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\055\ufff9\056" +
    "\ufff9\001\002\000\004\011\315\001\002\000\004\024\265" +
    "\001\002\000\012\011\175\066\200\067\177\076\201\001" +
    "\002\000\006\013\056\023\057\001\002\000\004\016\147" +
    "\001\002\000\004\011\062\001\002\000\004\011\055\001" +
    "\002\000\004\016\054\001\002\000\042\002\001\006\013" +
    "\007\017\011\016\017\051\020\004\021\027\022\005\031" +
    "\046\041\021\044\043\045\024\051\026\052\050\055\045" +
    "\056\025\001\002\000\004\002\ufffd\001\002\000\012\011" +
    "\uff85\066\uff85\067\uff85\076\uff85\001\002\000\006\013\056" +
    "\023\057\001\002\000\004\023\061\001\002\000\046\002" +
    "\uff7e\006\uff7e\007\uff7e\011\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\026\uff7e\031\uff7e\041\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\051\uff7e\052\uff7e\055\uff7e\056\uff7e\001\002\000\042" +
    "\002\uffb8\006\uffb8\007\uffb8\011\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\031\uffb8\041\uffb8\044\uffb8\045\uffb8\051\uffb8" +
    "\052\uffb8\055\uffb8\056\uffb8\001\002\000\050\002\uff7f\006" +
    "\uff7f\007\uff7f\011\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\026\uff7f\031\uff7f\041\uff7f\043\uff7f\044\uff7f\045\uff7f\051" +
    "\uff7f\052\uff7f\055\uff7f\056\uff7f\105\uff7f\001\002\000\016" +
    "\012\077\013\uff80\016\uff80\023\uff80\024\075\077\076\001" +
    "\002\000\010\013\056\016\064\023\057\001\002\000\004" +
    "\015\066\001\002\000\042\002\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\031\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\051\uffe5\052\uffe5\055\uffe5\056\uffe5\001" +
    "\002\000\004\016\067\001\002\000\010\004\070\005\073" +
    "\010\071\001\002\000\006\013\uffe3\023\uffe3\001\002\000" +
    "\006\013\uffe1\023\uffe1\001\002\000\006\013\056\023\057" +
    "\001\002\000\006\013\uffe2\023\uffe2\001\002\000\042\002" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\031\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4\052" +
    "\uffe4\055\uffe4\056\uffe4\001\002\000\004\020\123\001\002" +
    "\000\006\004\102\100\103\001\002\000\004\011\100\001" +
    "\002\000\012\012\077\013\uff80\016\uff80\023\uff80\001\002" +
    "\000\010\013\uff81\016\uff81\023\uff81\001\002\000\004\100" +
    "\105\001\002\000\006\013\056\023\057\001\002\000\042" +
    "\002\uff89\006\uff89\007\uff89\011\uff89\017\uff89\020\uff89\021" +
    "\uff89\022\uff89\031\uff89\041\uff89\044\uff89\045\uff89\051\uff89" +
    "\052\uff89\055\uff89\056\uff89\001\002\000\004\016\106\001" +
    "\002\000\004\015\107\001\002\000\004\101\110\001\002" +
    "\000\004\016\111\001\002\000\004\010\113\001\002\000" +
    "\004\102\120\001\002\000\006\012\115\016\114\001\002" +
    "\000\004\102\uff8d\001\002\000\004\016\116\001\002\000" +
    "\004\010\113\001\002\000\004\102\uff8c\001\002\000\006" +
    "\013\056\023\057\001\002\000\042\002\uff94\006\uff94\007" +
    "\uff94\011\uff94\017\uff94\020\uff94\021\uff94\022\uff94\031\uff94" +
    "\041\uff94\044\uff94\045\uff94\051\uff94\052\uff94\055\uff94\056" +
    "\uff94\001\002\000\004\025\130\001\002\000\004\016\124" +
    "\001\002\000\004\011\125\001\002\000\006\012\126\025" +
    "\uffc0\001\002\000\004\020\123\001\002\000\004\025\uffc1" +
    "\001\002\000\004\023\131\001\002\000\004\026\134\001" +
    "\002\000\006\013\056\023\057\001\002\000\042\002\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\031\uffc7\041\uffc7\044\uffc7\045\uffc7\051\uffc7\052\uffc7" +
    "\055\uffc7\056\uffc7\001\002\000\012\011\uff7c\026\134\035" +
    "\uff7c\052\uff7c\001\002\000\004\035\136\001\002\000\006" +
    "\004\140\016\137\001\002\000\004\011\141\001\002\000" +
    "\006\013\uffbc\023\uffbc\001\002\000\004\016\142\001\002" +
    "\000\004\064\143\001\002\000\004\016\144\001\002\000" +
    "\004\011\145\001\002\000\006\013\uffbd\023\uffbd\001\002" +
    "\000\010\011\uff7d\035\uff7d\052\uff7d\001\002\000\004\011" +
    "\150\001\002\000\004\016\151\001\002\000\004\015\152" +
    "\001\002\000\004\016\153\001\002\000\004\057\154\001" +
    "\002\000\004\031\155\001\002\000\004\024\156\001\002" +
    "\000\014\004\160\005\165\010\162\014\157\025\164\001" +
    "\002\000\012\012\uff7a\013\uff7a\023\uff7a\025\uff7a\001\002" +
    "\000\012\012\uff7b\013\uff7b\023\uff7b\025\uff7b\001\002\000" +
    "\004\012\171\001\002\000\012\012\uff79\013\uff79\023\uff79" +
    "\025\uff79\001\002\000\004\025\167\001\002\000\006\013" +
    "\056\023\057\001\002\000\012\012\uff78\013\uff78\023\uff78" +
    "\025\uff78\001\002\000\042\002\uffbb\006\uffbb\007\uffbb\011" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\031\uffbb\041\uffbb" +
    "\044\uffbb\045\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb\001" +
    "\002\000\006\013\056\023\057\001\002\000\042\002\uffba" +
    "\006\uffba\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\031\uffba\041\uffba\044\uffba\045\uffba\051\uffba\052\uffba" +
    "\055\uffba\056\uffba\001\002\000\004\016\172\001\002\000" +
    "\012\004\160\005\165\010\162\014\157\001\002\000\004" +
    "\025\uffb7\001\002\000\042\002\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\031\uffcd\041\uffcd" +
    "\044\uffcd\045\uffcd\051\uffcd\052\uffcd\055\uffcd\056\uffcd\001" +
    "\002\000\016\012\077\013\uff80\016\uff80\023\uff80\024\233" +
    "\077\234\001\002\000\010\013\056\016\221\023\057\001" +
    "\002\000\004\024\214\001\002\000\004\024\207\001\002" +
    "\000\004\024\202\001\002\000\004\022\005\001\002\000" +
    "\004\011\204\001\002\000\004\025\205\001\002\000\006" +
    "\013\056\023\057\001\002\000\042\002\uffa5\006\uffa5\007" +
    "\uffa5\011\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\031\uffa5" +
    "\041\uffa5\044\uffa5\045\uffa5\051\uffa5\052\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\004\022\005\001\002\000\004\011\211" +
    "\001\002\000\004\025\212\001\002\000\006\013\056\023" +
    "\057\001\002\000\042\002\uffa4\006\uffa4\007\uffa4\011\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\031\uffa4\041\uffa4\044" +
    "\uffa4\045\uffa4\051\uffa4\052\uffa4\055\uffa4\056\uffa4\001\002" +
    "\000\004\022\005\001\002\000\004\011\216\001\002\000" +
    "\004\025\217\001\002\000\006\013\056\023\057\001\002" +
    "\000\042\002\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\031\uffa3\041\uffa3\044\uffa3\045\uffa3" +
    "\051\uffa3\052\uffa3\055\uffa3\056\uffa3\001\002\000\004\015" +
    "\223\001\002\000\042\002\uffed\006\uffed\007\uffed\011\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\031\uffed\041\uffed\044" +
    "\uffed\045\uffed\051\uffed\052\uffed\055\uffed\056\uffed\001\002" +
    "\000\004\016\224\001\002\000\012\004\226\005\231\010" +
    "\230\014\227\001\002\000\006\013\056\023\057\001\002" +
    "\000\006\013\uffeb\023\uffeb\001\002\000\006\013\uffe9\023" +
    "\uffe9\001\002\000\006\013\uffe8\023\uffe8\001\002\000\006" +
    "\013\uffea\023\uffea\001\002\000\042\002\uffec\006\uffec\007" +
    "\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\031\uffec" +
    "\041\uffec\044\uffec\045\uffec\051\uffec\052\uffec\055\uffec\056" +
    "\uffec\001\002\000\004\017\051\001\002\000\006\004\235" +
    "\100\236\001\002\000\004\100\240\001\002\000\006\013" +
    "\056\023\057\001\002\000\042\002\uff8b\006\uff8b\007\uff8b" +
    "\011\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\031\uff8b\041" +
    "\uff8b\044\uff8b\045\uff8b\051\uff8b\052\uff8b\055\uff8b\056\uff8b" +
    "\001\002\000\004\016\241\001\002\000\004\015\242\001" +
    "\002\000\004\101\243\001\002\000\004\016\244\001\002" +
    "\000\004\004\245\001\002\000\006\012\252\016\251\001" +
    "\002\000\004\102\247\001\002\000\006\013\056\023\057" +
    "\001\002\000\042\002\uff97\006\uff97\007\uff97\011\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\031\uff97\041\uff97\044\uff97" +
    "\045\uff97\051\uff97\052\uff97\055\uff97\056\uff97\001\002\000" +
    "\004\102\uff93\001\002\000\004\016\253\001\002\000\004" +
    "\004\245\001\002\000\004\102\uff92\001\002\000\004\025" +
    "\262\001\002\000\004\011\257\001\002\000\006\012\260" +
    "\025\uffc4\001\002\000\004\017\051\001\002\000\004\025" +
    "\uffc5\001\002\000\004\023\131\001\002\000\006\013\056" +
    "\023\057\001\002\000\042\002\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\031\uffc9\041\uffc9" +
    "\044\uffc9\045\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\001" +
    "\002\000\012\017\266\020\267\021\272\022\271\001\002" +
    "\000\006\016\uff77\077\uff77\001\002\000\006\016\uff75\077" +
    "\uff75\001\002\000\004\016\273\001\002\000\006\016\uff76" +
    "\077\uff76\001\002\000\006\016\uff74\077\uff74\001\002\000" +
    "\004\011\274\001\002\000\004\012\275\001\002\000\004" +
    "\016\276\001\002\000\012\017\266\020\267\021\272\022" +
    "\271\001\002\000\004\016\300\001\002\000\004\011\301" +
    "\001\002\000\004\025\302\001\002\000\004\023\303\001" +
    "\002\000\004\026\134\001\002\000\042\002\uff9c\006\uff9c" +
    "\007\uff9c\011\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\031" +
    "\uff9c\041\uff9c\044\uff9c\045\uff9c\051\uff9c\052\uff9c\055\uff9c" +
    "\056\uff9c\001\002\000\004\011\306\001\002\000\004\016" +
    "\307\001\002\000\004\015\310\001\002\000\004\016\311" +
    "\001\002\000\004\011\312\001\002\000\006\013\056\023" +
    "\057\001\002\000\044\002\uff9a\006\uff9a\007\uff9a\011\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\026\134\031\uff9a\041" +
    "\uff9a\044\uff9a\045\uff9a\051\uff9a\052\uff9a\055\uff9a\056\uff9a" +
    "\001\002\000\042\002\uff99\006\uff99\007\uff99\011\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\031\uff99\041\uff99\044\uff99" +
    "\045\uff99\051\uff99\052\uff99\055\uff99\056\uff99\001\002\000" +
    "\016\012\077\013\uff80\016\uff80\023\uff80\024\326\077\325" +
    "\001\002\000\010\013\056\016\317\023\057\001\002\000" +
    "\004\015\321\001\002\000\042\002\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\031\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7\055\uffe7\056\uffe7" +
    "\001\002\000\004\016\322\001\002\000\004\014\323\001" +
    "\002\000\006\013\056\023\057\001\002\000\042\002\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\031\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\006\004\337\100\340\001" +
    "\002\000\004\022\327\001\002\000\004\016\333\001\002" +
    "\000\004\023\131\001\002\000\006\013\056\023\057\001" +
    "\002\000\042\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\031\uffc8\041\uffc8\044\uffc8\045" +
    "\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\001\002\000\004" +
    "\011\334\001\002\000\006\012\335\023\uffc2\001\002\000" +
    "\004\022\327\001\002\000\004\023\uffc3\001\002\000\004" +
    "\100\342\001\002\000\006\013\056\023\057\001\002\000" +
    "\042\002\uff88\006\uff88\007\uff88\011\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\031\uff88\041\uff88\044\uff88\045\uff88\051" +
    "\uff88\052\uff88\055\uff88\056\uff88\001\002\000\004\016\343" +
    "\001\002\000\004\015\344\001\002\000\004\101\345\001" +
    "\002\000\004\016\346\001\002\000\004\014\347\001\002" +
    "\000\006\012\354\016\353\001\002\000\004\102\351\001" +
    "\002\000\006\013\056\023\057\001\002\000\042\002\uff95" +
    "\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\031\uff95\041\uff95\044\uff95\045\uff95\051\uff95\052\uff95" +
    "\055\uff95\056\uff95\001\002\000\004\102\uff8f\001\002\000" +
    "\004\016\355\001\002\000\004\014\347\001\002\000\004" +
    "\102\uff8e\001\002\000\004\002\ufffe\001\002\000\016\011" +
    "\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\001\002" +
    "\000\004\025\362\001\002\000\004\023\363\001\002\000" +
    "\004\026\134\001\002\000\042\002\uff9b\006\uff9b\007\uff9b" +
    "\011\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\031\uff9b\041" +
    "\uff9b\044\uff9b\045\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b" +
    "\001\002\000\004\052\366\001\002\000\004\011\367\001" +
    "\002\000\006\013\056\023\057\001\002\000\042\002\uff98" +
    "\006\uff98\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\031\uff98\041\uff98\044\uff98\045\uff98\051\uff98\052\uff98" +
    "\055\uff98\056\uff98\001\002\000\004\106\373\001\002\000" +
    "\004\105\377\001\002\000\006\013\056\023\374\001\002" +
    "\000\006\105\uff7e\106\373\001\002\000\004\105\uffcb\001" +
    "\002\000\004\105\uffca\001\002\000\006\013\056\023\057" +
    "\001\002\000\042\002\uffcc\006\uffcc\007\uffcc\011\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\031\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\051\uffcc\052\uffcc\055\uffcc\056\uffcc\001\002\000" +
    "\006\011\u0102\017\u0103\001\002\000\004\016\uffa9\001\002" +
    "\000\004\016\u011a\001\002\000\004\016\u0105\001\002\000" +
    "\004\046\u0106\001\002\000\004\016\u0107\001\002\000\006" +
    "\004\u0108\011\u0109\001\002\000\004\016\uffa6\001\002\000" +
    "\004\016\uffa7\001\002\000\004\016\u010b\001\002\000\006" +
    "\030\u010d\065\u010c\001\002\000\004\016\uffad\001\002\000" +
    "\004\016\uffac\001\002\000\004\016\u010f\001\002\000\006" +
    "\004\u0108\011\u0109\001\002\000\004\016\u0111\001\002\000" +
    "\006\047\u0114\050\u0113\001\002\000\004\016\u0115\001\002" +
    "\000\004\016\uffaa\001\002\000\004\016\uffab\001\002\000" +
    "\004\004\u0116\001\002\000\004\016\u0117\001\002\000\004" +
    "\111\u0118\001\002\000\006\013\056\023\057\001\002\000" +
    "\042\002\uffae\006\uffae\007\uffae\011\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\031\uffae\041\uffae\044\uffae\045\uffae\051" +
    "\uffae\052\uffae\055\uffae\056\uffae\001\002\000\004\011\u011b" +
    "\001\002\000\004\016\u011c\001\002\000\004\015\u011d\001" +
    "\002\000\004\004\u011e\001\002\000\004\016\uffa8\001\002" +
    "\000\004\016\u0133\001\002\000\004\016\u012e\001\002\000" +
    "\004\016\u0122\001\002\000\004\042\u0123\001\002\000\004" +
    "\023\131\001\002\000\006\013\056\023\057\001\002\000" +
    "\044\002\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\031\uffb5\041\uffb5\043\u0126\044\uffb5\045" +
    "\uffb5\051\uffb5\052\uffb5\055\uffb5\056\uffb5\001\002\000\006" +
    "\004\u011f\011\u0120\001\002\000\042\002\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\031\uffb6" +
    "\041\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\004\016\u0129\001\002\000\004\042\u012a" +
    "\001\002\000\004\023\131\001\002\000\006\013\056\023" +
    "\057\001\002\000\044\002\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\031\uffb3\041\uffb3\043" +
    "\u0126\044\uffb3\045\uffb3\051\uffb3\052\uffb3\055\uffb3\056\uffb3" +
    "\001\002\000\042\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\031\uffb4\041\uffb4\044\uffb4" +
    "\045\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4\001\002\000" +
    "\004\064\u012f\001\002\000\004\016\u0130\001\002\000\006" +
    "\004\u0131\011\u0132\001\002\000\004\016\uffb1\001\002\000" +
    "\004\016\uffaf\001\002\000\004\064\u0134\001\002\000\004" +
    "\016\u0135\001\002\000\006\004\u0136\011\u0137\001\002\000" +
    "\004\016\uffb2\001\002\000\004\016\uffb0\001\002\000\004" +
    "\024\u0164\001\002\000\004\024\uff9d\001\002\000\004\024" +
    "\uff9e\001\002\000\004\024\uff9f\001\002\000\016\012\077" +
    "\013\uff80\016\uff80\023\uff80\024\u014b\077\u014a\001\002\000" +
    "\004\024\uffa0\001\002\000\004\024\uffa1\001\002\000\010" +
    "\013\056\016\u0140\023\057\001\002\000\004\015\u0142\001" +
    "\002\000\042\002\uffe0\006\uffe0\007\uffe0\011\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\031\uffe0\041\uffe0\044\uffe0\045" +
    "\uffe0\051\uffe0\052\uffe0\055\uffe0\056\uffe0\001\002\000\004" +
    "\016\u0143\001\002\000\012\004\u0145\005\u0148\010\u0146\014" +
    "\u0144\001\002\000\006\013\uffdc\023\uffdc\001\002\000\006" +
    "\013\uffde\023\uffde\001\002\000\006\013\uffdb\023\uffdb\001" +
    "\002\000\006\013\056\023\057\001\002\000\006\013\uffdd" +
    "\023\uffdd\001\002\000\042\002\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\031\uffdf\041\uffdf" +
    "\044\uffdf\045\uffdf\051\uffdf\052\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\006\004\u0154\100\u0155\001\002\000\004\021\027" +
    "\001\002\000\004\011\u0151\001\002\000\004\025\u014e\001" +
    "\002\000\004\023\131\001\002\000\006\013\056\023\057" +
    "\001\002\000\042\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\031\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\051\uffc6\052\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\006\012\u0152\025\uffbe\001\002\000\004\021\027\001\002" +
    "\000\004\025\uffbf\001\002\000\004\100\u0157\001\002\000" +
    "\006\013\056\023\057\001\002\000\042\002\uff8a\006\uff8a" +
    "\007\uff8a\011\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\031" +
    "\uff8a\041\uff8a\044\uff8a\045\uff8a\051\uff8a\052\uff8a\055\uff8a" +
    "\056\uff8a\001\002\000\004\016\u0158\001\002\000\004\015" +
    "\u0159\001\002\000\004\101\u015a\001\002\000\004\016\u015b" +
    "\001\002\000\004\005\u015d\001\002\000\004\102\u0162\001" +
    "\002\000\006\012\u015f\016\u015e\001\002\000\004\102\uff91" +
    "\001\002\000\004\016\u0160\001\002\000\004\005\u015d\001" +
    "\002\000\004\102\uff90\001\002\000\006\013\056\023\057" +
    "\001\002\000\042\002\uff96\006\uff96\007\uff96\011\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\031\uff96\041\uff96\044\uff96" +
    "\045\uff96\051\uff96\052\uff96\055\uff96\056\uff96\001\002\000" +
    "\004\021\027\001\002\000\004\011\u0166\001\002\000\004" +
    "\025\u0167\001\002\000\006\013\056\023\057\001\002\000" +
    "\042\002\uffa2\006\uffa2\007\uffa2\011\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\031\uffa2\041\uffa2\044\uffa2\045\uffa2\051" +
    "\uffa2\052\uffa2\055\uffa2\056\uffa2\001\002\000\004\011\u016a" +
    "\001\002\000\006\013\056\023\057\001\002\000\042\002" +
    "\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\031\uffce\041\uffce\044\uffce\045\uffce\051\uffce\052" +
    "\uffce\055\uffce\056\uffce\001\002\000\004\004\u017a\001\002" +
    "\000\004\015\u016e\001\002\000\004\016\u016f\001\002\000" +
    "\004\057\u0170\001\002\000\014\017\266\020\267\021\272" +
    "\022\271\031\u0172\001\002\000\004\077\u0176\001\002\000" +
    "\004\024\u0173\001\002\000\004\025\u0174\001\002\000\006" +
    "\013\056\023\057\001\002\000\042\002\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\031\uffb9" +
    "\041\uffb9\044\uffb9\045\uffb9\051\uffb9\052\uffb9\055\uffb9\056" +
    "\uffb9\001\002\000\004\004\u0177\001\002\000\004\100\u0178" +
    "\001\002\000\006\013\056\023\057\001\002\000\042\002" +
    "\uff86\006\uff86\007\uff86\011\uff86\017\uff86\020\uff86\021\uff86" +
    "\022\uff86\031\uff86\041\uff86\044\uff86\045\uff86\051\uff86\052" +
    "\uff86\055\uff86\056\uff86\001\002\000\004\100\u017b\001\002" +
    "\000\004\016\u017c\001\002\000\004\015\u017d\001\002\000" +
    "\004\016\u017e\001\002\000\012\004\160\005\165\010\162" +
    "\014\157\001\002\000\006\013\056\023\057\001\002\000" +
    "\042\002\uff87\006\uff87\007\uff87\011\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\031\uff87\041\uff87\044\uff87\045\uff87\051" +
    "\uff87\052\uff87\055\uff87\056\uff87\001\002\000\012\004\u0183" +
    "\005\u0186\011\u0185\014\u0182\001\002\000\010\012\u0193\013" +
    "\uffd3\023\uffd3\001\002\000\010\012\u0190\013\uffd2\023\uffd2" +
    "\001\002\000\006\013\056\023\057\001\002\000\012\012" +
    "\u018b\013\uffd0\023\uffd0\060\u018a\001\002\000\010\012\u0187" +
    "\013\uffd1\023\uffd1\001\002\000\004\016\u0188\001\002\000" +
    "\012\004\u0183\005\u0186\011\u0185\014\u0182\001\002\000\006" +
    "\013\uffd5\023\uffd5\001\002\000\004\011\u018e\001\002\000" +
    "\004\016\u018c\001\002\000\012\004\u0183\005\u0186\011\u0185" +
    "\014\u0182\001\002\000\006\013\uffd4\023\uffd4\001\002\000" +
    "\006\013\uffcf\023\uffcf\001\002\000\042\002\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\031" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8\055\uffd8" +
    "\056\uffd8\001\002\000\004\016\u0191\001\002\000\012\004" +
    "\u0183\005\u0186\011\u0185\014\u0182\001\002\000\006\013\uffd6" +
    "\023\uffd6\001\002\000\004\016\u0194\001\002\000\012\004" +
    "\u0183\005\u0186\011\u0185\014\u0182\001\002\000\006\013\uffd7" +
    "\023\uffd7\001\002\000\004\002\000\001\002\000\004\011" +
    "\uff82\001\002\000\004\011\uff83\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\062\002\006\004\051\005\035\006\037\007" +
    "\005\010\007\011\034\015\036\016\014\017\027\022\011" +
    "\031\040\032\031\035\032\042\010\046\013\053\030\055" +
    "\033\056\043\057\017\060\041\061\046\071\022\076\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u013e\036\u0137\001\001\000\004\033\u0120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\002\356\004\051\005\035\006\037\007\005\010" +
    "\007\011\034\015\036\016\014\017\027\022\011\031\040" +
    "\032\031\035\032\042\010\046\013\053\030\055\033\056" +
    "\043\057\017\060\041\061\046\071\022\076\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\315\001\001" +
    "\000\002\001\001\000\004\012\175\001\001\000\004\013" +
    "\173\001\001\000\002\001\001\000\004\012\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\002\052\004" +
    "\051\005\035\006\037\007\005\010\007\011\034\015\036" +
    "\016\014\017\027\022\011\031\040\032\031\035\032\042" +
    "\010\046\013\053\030\055\033\056\043\057\017\060\041" +
    "\061\046\071\022\076\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\121\001\001\000\002\001\001\000\004\012\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\116\001" +
    "\001\000\002\001\001\000\004\013\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\126\001\001\000\002" +
    "\001\001\000\004\023\131\001\001\000\004\030\134\001" +
    "\001\000\004\013\132\001\001\000\002\001\001\000\004" +
    "\030\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\162\040\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\205" +
    "\001\001\000\002\001\001\000\004\060\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\212\001\001" +
    "\000\002\001\001\000\004\060\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\224\001\001\000\004\013\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\254\056\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\260\056\255\001\001\000\002\001\001\000\004" +
    "\023\262\001\001\000\004\013\263\001\001\000\002\001" +
    "\001\000\004\043\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\304" +
    "\041\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\312\001\001\000\006\030\304\041" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\323\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\327\001" +
    "\001\000\002\001\001\000\004\023\330\001\001\000\004" +
    "\013\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\364\045\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\367\001\001\000\002\001" +
    "\001\000\004\072\371\001\001\000\002\001\001\000\004" +
    "\013\374\001\001\000\004\072\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\377\001\001\000\002" +
    "\001\001\000\004\077\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u010f\001\001\000\002\001\001\000\004\101\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0123\001\001" +
    "\000\004\013\u0124\001\001\000\004\034\u0126\001\001\000" +
    "\004\033\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u012a\001\001\000\004\013" +
    "\u012b\001\001\000\004\034\u012c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u014c\057\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u014e\001" +
    "\001\000\004\013\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u0152\057\u014b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0160\001\001\000\002\001\001\000\004" +
    "\013\u0162\001\001\000\002\001\001\000\004\057\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u016a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u017e\001\001" +
    "\000\004\013\u017f\001\001\000\002\001\001\000\004\020" +
    "\u0183\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0191\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0194\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CILCOS ::= desdes libre INICIALES libre whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INICIALES ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INICIALES ::= tipo_ent libre identificador libre asignacion entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
