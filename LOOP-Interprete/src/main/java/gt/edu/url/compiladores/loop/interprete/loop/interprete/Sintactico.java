
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\112\011\000\002\115\027\000\002\115\020\000" +
    "\002\115\020\000\002\115\020\000\002\115\011\000\002" +
    "\115\011\000\002\115\011\000\002\113\027\000\002\113" +
    "\020\000\002\113\020\000\002\113\020\000\002\113\011" +
    "\000\002\113\011\000\002\113\011\000\002\114\003\000" +
    "\002\114\004\000\002\114\006\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\011\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\007\005\000" +
    "\002\007\011\000\002\010\005\000\002\010\011\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\011" +
    "\005\000\002\011\011\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\017\006\000\002\071\004\000" +
    "\002\071\007\000\002\072\004\000\002\072\005\000\002" +
    "\022\011\000\002\022\010\000\002\022\011\000\002\022" +
    "\011\000\002\024\006\000\002\024\004\000\002\025\007" +
    "\000\002\025\005\000\002\026\007\000\002\026\005\000" +
    "\002\027\006\000\002\027\004\000\002\023\013\000\002" +
    "\023\006\000\002\031\015\000\002\031\016\000\002\031" +
    "\013\000\002\031\005\000\002\037\006\000\002\032\011" +
    "\000\002\032\010\000\002\034\011\000\002\034\010\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\076\024\000\002\076\020\000\002\103" +
    "\004\000\002\100\003\000\002\100\003\000\002\101\003" +
    "\000\002\101\003\000\002\077\004\000\002\077\012\000" +
    "\002\077\007\000\002\104\004\000\002\102\003\000\002" +
    "\102\003\000\002\105\016\000\002\106\006\000\002\106" +
    "\010\000\002\106\012\000\002\106\010\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\004\000\002\107\004\000\002\107\003\000\002" +
    "\107\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\035\011" +
    "\000\002\035\011\000\002\035\011\000\002\035\011\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\042\017\000\002\042" +
    "\007\000\002\041\003\000\002\045\006\000\002\046\016" +
    "\000\002\046\016\000\002\046\016\000\002\046\016\000" +
    "\002\047\004\000\002\047\006\000\002\050\004\000\002" +
    "\050\006\000\002\051\004\000\002\051\006\000\002\052" +
    "\004\000\002\052\006\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\013\000" +
    "\002\053\014\000\002\056\004\000\002\057\004\000\002" +
    "\061\004\000\002\060\004\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\030\004" +
    "\000\002\030\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u022d\000\044\006\015\007\020\011\017\017\056\020" +
    "\004\021\032\022\005\031\051\037\024\041\022\044\046" +
    "\045\027\051\031\052\055\055\050\056\030\111\010\001" +
    "\002\000\004\016\u022f\001\002\000\004\016\u022e\001\002" +
    "\000\054\002\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\026\uffdb\031\uffdb\033\uffdb\034\uffdb" +
    "\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb\052\uffdb\055" +
    "\uffdb\056\uffdb\111\uffdb\001\002\000\004\002\u022d\001\002" +
    "\000\004\023\u0222\001\002\000\046\002\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1" +
    "\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\055" +
    "\ufff1\056\ufff1\111\ufff1\001\002\000\046\002\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031" +
    "\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa" +
    "\055\ufffa\056\ufffa\111\ufffa\001\002\000\054\002\uffda\006" +
    "\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\026\uffda\031\uffda\033\uffda\034\uffda\037\uffda\041\uffda\044" +
    "\uffda\045\uffda\051\uffda\052\uffda\055\uffda\056\uffda\111\uffda" +
    "\001\002\000\046\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0\037\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\051\ufff0\052\ufff0\055\ufff0\056\ufff0\111" +
    "\ufff0\001\002\000\004\016\u020d\001\002\000\046\002\uffc5" +
    "\006\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\031\uffc5\037\uffc5\041\uffc5\044\uffc5\045\uffc5\051\uffc5" +
    "\052\uffc5\055\uffc5\056\uffc5\111\uffc5\001\002\000\010\015" +
    "\315\016\u01f9\077\u01f8\001\002\000\004\016\u01f5\001\002" +
    "\000\016\011\u01d3\070\u01d5\071\u01d4\072\u01d2\073\u01d1\074" +
    "\u01d0\001\002\000\006\004\u01b6\011\u01b7\001\002\000\046" +
    "\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7" +
    "\051\ufff7\052\ufff7\055\ufff7\056\ufff7\111\ufff7\001\002\000" +
    "\004\016\u0147\001\002\000\046\002\ufff6\006\ufff6\007\ufff6" +
    "\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\031\ufff6\037" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6\052\ufff6\055\ufff6" +
    "\056\ufff6\111\ufff6\001\002\000\046\002\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\031\ufff8" +
    "\037\ufff8\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\055" +
    "\ufff8\056\ufff8\111\ufff8\001\002\000\004\016\u011c\001\002" +
    "\000\004\023\u0114\001\002\000\004\024\u010c\001\002\000" +
    "\004\016\u010b\001\002\000\046\002\uffc4\006\uffc4\007\uffc4" +
    "\011\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\031\uffc4\037" +
    "\uffc4\041\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\056\uffc4\111\uffc4\001\002\000\046\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\031\uffef" +
    "\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052\uffef\055" +
    "\uffef\056\uffef\111\uffef\001\002\000\046\002\ufff3\006\ufff3" +
    "\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031" +
    "\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\056\ufff3\111\ufff3\001\002\000\046\002\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\031\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052" +
    "\ufff2\055\ufff2\056\ufff2\111\ufff2\001\002\000\046\002\uffff" +
    "\006\015\007\020\011\017\017\056\020\004\021\032\022" +
    "\005\031\051\037\024\041\022\044\046\045\027\051\031" +
    "\052\055\055\050\056\030\111\010\001\002\000\054\002" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\026\uffd9\031\uffd9\033\uffd9\034\uffd9\037\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\055\uffd9\056\uffd9" +
    "\111\uffd9\001\002\000\046\002\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\037\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc\055\ufffc\056" +
    "\ufffc\111\ufffc\001\002\000\046\002\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\031\ufffb\037" +
    "\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\056\ufffb\111\ufffb\001\002\000\054\002\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\026\uffdc" +
    "\031\uffdc\033\uffdc\034\uffdc\037\uffdc\041\uffdc\044\uffdc\045" +
    "\uffdc\051\uffdc\052\uffdc\055\uffdc\056\uffdc\111\uffdc\001\002" +
    "\000\046\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9" +
    "\045\ufff9\051\ufff9\052\ufff9\055\ufff9\056\ufff9\111\ufff9\001" +
    "\002\000\004\011\350\001\002\000\004\024\272\001\002" +
    "\000\012\011\202\066\205\067\204\076\206\001\002\000" +
    "\006\013\063\023\064\001\002\000\004\016\154\001\002" +
    "\000\046\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5" +
    "\045\ufff5\051\ufff5\052\ufff5\055\ufff5\056\ufff5\111\ufff5\001" +
    "\002\000\004\011\067\001\002\000\046\002\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\031" +
    "\ufff4\037\ufff4\041\ufff4\044\ufff4\045\ufff4\051\ufff4\052\ufff4" +
    "\055\ufff4\056\ufff4\111\ufff4\001\002\000\004\011\062\001" +
    "\002\000\004\016\061\001\002\000\046\002\001\006\015" +
    "\007\020\011\017\017\056\020\004\021\032\022\005\031" +
    "\051\037\024\041\022\044\046\045\027\051\031\052\055" +
    "\055\050\056\030\111\010\001\002\000\004\002\ufffd\001" +
    "\002\000\012\011\uff5b\066\uff5b\067\uff5b\076\uff5b\001\002" +
    "\000\006\013\063\023\064\001\002\000\004\023\066\001" +
    "\002\000\060\002\uff54\006\uff54\007\uff54\011\uff54\017\uff54" +
    "\020\uff54\021\uff54\022\uff54\026\uff54\031\uff54\033\uff54\034" +
    "\uff54\037\uff54\041\uff54\043\uff54\044\uff54\045\uff54\046\uff54" +
    "\051\uff54\052\uff54\055\uff54\056\uff54\111\uff54\001\002\000" +
    "\046\002\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\031\uffa3\037\uffa3\041\uffa3\044\uffa3\045" +
    "\uffa3\051\uffa3\052\uffa3\055\uffa3\056\uffa3\111\uffa3\001\002" +
    "\000\062\002\uff55\006\uff55\007\uff55\011\uff55\017\uff55\020" +
    "\uff55\021\uff55\022\uff55\026\uff55\031\uff55\033\uff55\034\uff55" +
    "\037\uff55\041\uff55\043\uff55\044\uff55\045\uff55\046\uff55\051" +
    "\uff55\052\uff55\055\uff55\056\uff55\105\uff55\111\uff55\001\002" +
    "\000\016\012\104\013\uff56\016\uff56\023\uff56\024\103\077" +
    "\102\001\002\000\010\013\063\016\071\023\064\001\002" +
    "\000\004\015\073\001\002\000\054\002\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\026\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\037\uffd0\041\uffd0\044\uffd0\045" +
    "\uffd0\051\uffd0\052\uffd0\055\uffd0\056\uffd0\111\uffd0\001\002" +
    "\000\004\016\074\001\002\000\010\004\075\005\100\010" +
    "\076\001\002\000\006\013\uffce\023\uffce\001\002\000\006" +
    "\013\uffcc\023\uffcc\001\002\000\006\013\063\023\064\001" +
    "\002\000\006\013\uffcd\023\uffcd\001\002\000\054\002\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\026\uffcf\031\uffcf\033\uffcf\034\uffcf\037\uffcf\041\uffcf" +
    "\044\uffcf\045\uffcf\051\uffcf\052\uffcf\055\uffcf\056\uffcf\111" +
    "\uffcf\001\002\000\006\004\134\100\135\001\002\000\004" +
    "\020\110\001\002\000\004\011\105\001\002\000\012\012" +
    "\104\013\uff56\016\uff56\023\uff56\001\002\000\010\013\uff57" +
    "\016\uff57\023\uff57\001\002\000\004\025\115\001\002\000" +
    "\004\016\111\001\002\000\004\011\112\001\002\000\006" +
    "\012\113\025\uffab\001\002\000\004\020\110\001\002\000" +
    "\004\025\uffac\001\002\000\004\023\116\001\002\000\004" +
    "\026\121\001\002\000\006\013\063\023\064\001\002\000" +
    "\046\002\uffb2\006\uffb2\007\uffb2\011\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\031\uffb2\037\uffb2\041\uffb2\044\uffb2\045" +
    "\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\111\uffb2\001\002" +
    "\000\014\006\uff52\011\uff52\026\121\035\uff52\052\uff52\001" +
    "\002\000\004\035\123\001\002\000\006\004\125\016\124" +
    "\001\002\000\004\011\126\001\002\000\006\013\uffa7\023" +
    "\uffa7\001\002\000\004\016\127\001\002\000\004\064\130" +
    "\001\002\000\004\016\131\001\002\000\004\011\132\001" +
    "\002\000\006\013\uffa8\023\uffa8\001\002\000\012\006\uff53" +
    "\011\uff53\035\uff53\052\uff53\001\002\000\004\100\137\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uff5f" +
    "\006\uff5f\007\uff5f\011\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\031\uff5f\037\uff5f\041\uff5f\044\uff5f\045\uff5f\051\uff5f" +
    "\052\uff5f\055\uff5f\056\uff5f\111\uff5f\001\002\000\004\016" +
    "\140\001\002\000\004\015\141\001\002\000\004\101\142" +
    "\001\002\000\004\016\143\001\002\000\004\010\145\001" +
    "\002\000\004\102\152\001\002\000\006\012\147\016\146" +
    "\001\002\000\004\102\uff63\001\002\000\004\016\150\001" +
    "\002\000\004\010\145\001\002\000\004\102\uff62\001\002" +
    "\000\006\013\063\023\064\001\002\000\046\002\uff6a\006" +
    "\uff6a\007\uff6a\011\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a" +
    "\031\uff6a\037\uff6a\041\uff6a\044\uff6a\045\uff6a\051\uff6a\052" +
    "\uff6a\055\uff6a\056\uff6a\111\uff6a\001\002\000\004\011\155" +
    "\001\002\000\004\016\156\001\002\000\004\015\157\001" +
    "\002\000\004\016\160\001\002\000\004\057\161\001\002" +
    "\000\004\031\162\001\002\000\004\024\163\001\002\000" +
    "\014\004\164\005\171\010\167\014\165\025\172\001\002" +
    "\000\012\012\uff51\013\uff51\023\uff51\025\uff51\001\002\000" +
    "\012\012\uff50\013\uff50\023\uff50\025\uff50\001\002\000\004" +
    "\012\176\001\002\000\012\012\uff4f\013\uff4f\023\uff4f\025" +
    "\uff4f\001\002\000\004\025\174\001\002\000\012\012\uff4e" +
    "\013\uff4e\023\uff4e\025\uff4e\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uffa6\006\uffa6\007\uffa6\011\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\031\uffa6\037\uffa6\041" +
    "\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6" +
    "\111\uffa6\001\002\000\006\013\063\023\064\001\002\000" +
    "\046\002\uffa5\006\uffa5\007\uffa5\011\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\031\uffa5\037\uffa5\041\uffa5\044\uffa5\045" +
    "\uffa5\051\uffa5\052\uffa5\055\uffa5\056\uffa5\111\uffa5\001\002" +
    "\000\004\016\177\001\002\000\012\004\164\005\171\010" +
    "\167\014\165\001\002\000\004\025\uffa2\001\002\000\046" +
    "\002\uffb8\006\uffb8\007\uffb8\011\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\031\uffb8\037\uffb8\041\uffb8\044\uffb8\045\uffb8" +
    "\051\uffb8\052\uffb8\055\uffb8\056\uffb8\111\uffb8\001\002\000" +
    "\016\012\104\013\uff56\016\uff56\023\uff56\024\240\077\241" +
    "\001\002\000\010\013\063\016\226\023\064\001\002\000" +
    "\004\024\221\001\002\000\004\024\214\001\002\000\004" +
    "\024\207\001\002\000\004\022\005\001\002\000\004\011" +
    "\211\001\002\000\004\025\212\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uff7a\006\uff7a\007\uff7a\011" +
    "\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\031\uff7a\037\uff7a" +
    "\041\uff7a\044\uff7a\045\uff7a\051\uff7a\052\uff7a\055\uff7a\056" +
    "\uff7a\111\uff7a\001\002\000\004\022\005\001\002\000\004" +
    "\011\216\001\002\000\004\025\217\001\002\000\006\013" +
    "\063\023\064\001\002\000\046\002\uff79\006\uff79\007\uff79" +
    "\011\uff79\017\uff79\020\uff79\021\uff79\022\uff79\031\uff79\037" +
    "\uff79\041\uff79\044\uff79\045\uff79\051\uff79\052\uff79\055\uff79" +
    "\056\uff79\111\uff79\001\002\000\004\022\005\001\002\000" +
    "\004\011\223\001\002\000\004\025\224\001\002\000\006" +
    "\013\063\023\064\001\002\000\046\002\uff78\006\uff78\007" +
    "\uff78\011\uff78\017\uff78\020\uff78\021\uff78\022\uff78\031\uff78" +
    "\037\uff78\041\uff78\044\uff78\045\uff78\051\uff78\052\uff78\055" +
    "\uff78\056\uff78\111\uff78\001\002\000\004\015\230\001\002" +
    "\000\054\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\026\uffd8\031\uffd8\033\uffd8\034\uffd8" +
    "\037\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8\055" +
    "\uffd8\056\uffd8\111\uffd8\001\002\000\004\016\231\001\002" +
    "\000\012\004\234\005\236\010\235\014\233\001\002\000" +
    "\006\013\063\023\064\001\002\000\006\013\uffd4\023\uffd4" +
    "\001\002\000\006\013\uffd6\023\uffd6\001\002\000\006\013" +
    "\uffd3\023\uffd3\001\002\000\006\013\uffd5\023\uffd5\001\002" +
    "\000\054\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\037\uffd7\041\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\055" +
    "\uffd7\056\uffd7\111\uffd7\001\002\000\004\017\056\001\002" +
    "\000\006\004\242\100\243\001\002\000\004\100\245\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uff61" +
    "\006\uff61\007\uff61\011\uff61\017\uff61\020\uff61\021\uff61\022" +
    "\uff61\031\uff61\037\uff61\041\uff61\044\uff61\045\uff61\051\uff61" +
    "\052\uff61\055\uff61\056\uff61\111\uff61\001\002\000\004\016" +
    "\246\001\002\000\004\015\247\001\002\000\004\101\250" +
    "\001\002\000\004\016\251\001\002\000\004\004\252\001" +
    "\002\000\006\012\257\016\256\001\002\000\004\102\254" +
    "\001\002\000\006\013\063\023\064\001\002\000\046\002" +
    "\uff6d\006\uff6d\007\uff6d\011\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\022\uff6d\031\uff6d\037\uff6d\041\uff6d\044\uff6d\045\uff6d\051" +
    "\uff6d\052\uff6d\055\uff6d\056\uff6d\111\uff6d\001\002\000\004" +
    "\102\uff69\001\002\000\004\016\260\001\002\000\004\004" +
    "\252\001\002\000\004\102\uff68\001\002\000\004\025\267" +
    "\001\002\000\004\011\264\001\002\000\006\012\265\025" +
    "\uffaf\001\002\000\004\017\056\001\002\000\004\025\uffb0" +
    "\001\002\000\004\023\116\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uffb4\006\uffb4\007\uffb4\011\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\031\uffb4\037\uffb4\041" +
    "\uffb4\044\uffb4\045\uffb4\051\uffb4\052\uffb4\055\uffb4\056\uffb4" +
    "\111\uffb4\001\002\000\012\017\274\020\273\021\277\022" +
    "\276\001\002\000\006\016\uff4b\077\uff4b\001\002\000\006" +
    "\016\uff4d\077\uff4d\001\002\000\004\016\300\001\002\000" +
    "\006\016\uff4c\077\uff4c\001\002\000\006\016\uff4a\077\uff4a" +
    "\001\002\000\004\011\301\001\002\000\004\012\302\001" +
    "\002\000\004\016\303\001\002\000\012\017\274\020\273" +
    "\021\277\022\276\001\002\000\004\016\305\001\002\000" +
    "\004\011\306\001\002\000\004\025\307\001\002\000\004" +
    "\023\310\001\002\000\004\011\311\001\002\000\006\015" +
    "\315\016\314\001\002\000\046\002\uff6f\006\uff6f\007\uff6f" +
    "\011\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\031\uff6f\037" +
    "\uff6f\041\uff6f\044\uff6f\045\uff6f\051\uff6f\052\uff6f\055\uff6f" +
    "\056\uff6f\111\uff6f\001\002\000\046\002\uff71\006\uff71\007" +
    "\uff71\011\uff71\017\uff71\020\uff71\021\uff71\022\uff71\031\uff71" +
    "\037\uff71\041\uff71\044\uff71\045\uff71\051\uff71\052\uff71\055" +
    "\uff71\056\uff71\111\uff71\001\002\000\004\015\342\001\002" +
    "\000\010\004\317\011\320\110\316\001\002\000\006\004" +
    "\340\011\341\001\002\000\020\013\uff80\023\uff80\107\330" +
    "\110\327\112\325\113\326\114\332\001\002\000\020\013" +
    "\uff81\023\uff81\107\330\110\327\112\325\113\326\114\332" +
    "\001\002\000\006\013\063\023\064\001\002\000\052\002" +
    "\uff8b\006\uff8b\007\uff8b\011\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\026\121\031\uff8b\037\uff8b\041\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\051\uff8b\052\uff8b\055\uff8b\056\uff8b\111\uff8b" +
    "\001\002\000\004\011\311\001\002\000\050\002\uff88\006" +
    "\uff88\007\uff88\011\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\031\uff88\037\uff88\041\uff88\044\uff88\045\uff88\046\uff88\051" +
    "\uff88\052\uff88\055\uff88\056\uff88\111\uff88\001\002\000\006" +
    "\004\uff7d\011\uff7d\001\002\000\006\004\uff7c\011\uff7c\001" +
    "\002\000\006\004\uff7e\011\uff7e\001\002\000\006\004\uff7f" +
    "\011\uff7f\001\002\000\006\004\333\011\334\001\002\000" +
    "\006\004\uff7b\011\uff7b\001\002\000\006\013\uff84\023\uff84" +
    "\001\002\000\006\013\uff86\023\uff86\001\002\000\006\004" +
    "\336\011\337\001\002\000\006\013\uff87\023\uff87\001\002" +
    "\000\006\013\uff85\023\uff85\001\002\000\006\013\uff82\023" +
    "\uff82\001\002\000\006\013\uff83\023\uff83\001\002\000\004" +
    "\016\343\001\002\000\010\004\317\011\320\110\316\001" +
    "\002\000\006\013\063\023\064\001\002\000\052\002\uff8a" +
    "\006\uff8a\007\uff8a\011\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\026\121\031\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\051\uff8a\052\uff8a\055\uff8a\056\uff8a\111\uff8a\001" +
    "\002\000\004\011\311\001\002\000\050\002\uff89\006\uff89" +
    "\007\uff89\011\uff89\017\uff89\020\uff89\021\uff89\022\uff89\031" +
    "\uff89\037\uff89\041\uff89\044\uff89\045\uff89\046\uff89\051\uff89" +
    "\052\uff89\055\uff89\056\uff89\111\uff89\001\002\000\016\012" +
    "\104\013\uff56\016\uff56\023\uff56\024\360\077\361\001\002" +
    "\000\010\013\063\016\352\023\064\001\002\000\004\015" +
    "\354\001\002\000\054\002\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\026\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\037\uffd2\041\uffd2\044\uffd2\045\uffd2\051\uffd2" +
    "\052\uffd2\055\uffd2\056\uffd2\111\uffd2\001\002\000\004\016" +
    "\355\001\002\000\004\014\356\001\002\000\006\013\063" +
    "\023\064\001\002\000\054\002\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\026\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\056\uffd1\111\uffd1\001\002\000\004" +
    "\022\u0102\001\002\000\006\004\362\100\363\001\002\000" +
    "\004\100\365\001\002\000\006\013\063\023\064\001\002" +
    "\000\046\002\uff5e\006\uff5e\007\uff5e\011\uff5e\017\uff5e\020" +
    "\uff5e\021\uff5e\022\uff5e\031\uff5e\037\uff5e\041\uff5e\044\uff5e" +
    "\045\uff5e\051\uff5e\052\uff5e\055\uff5e\056\uff5e\111\uff5e\001" +
    "\002\000\004\016\366\001\002\000\004\015\367\001\002" +
    "\000\004\101\370\001\002\000\004\016\371\001\002\000" +
    "\004\014\372\001\002\000\006\012\377\016\376\001\002" +
    "\000\004\102\374\001\002\000\006\013\063\023\064\001" +
    "\002\000\046\002\uff6b\006\uff6b\007\uff6b\011\uff6b\017\uff6b" +
    "\020\uff6b\021\uff6b\022\uff6b\031\uff6b\037\uff6b\041\uff6b\044" +
    "\uff6b\045\uff6b\051\uff6b\052\uff6b\055\uff6b\056\uff6b\111\uff6b" +
    "\001\002\000\004\102\uff65\001\002\000\004\016\u0100\001" +
    "\002\000\004\014\372\001\002\000\004\102\uff64\001\002" +
    "\000\004\016\u0106\001\002\000\004\023\116\001\002\000" +
    "\006\013\063\023\064\001\002\000\046\002\uffb3\006\uffb3" +
    "\007\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\031" +
    "\uffb3\037\uffb3\041\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3" +
    "\055\uffb3\056\uffb3\111\uffb3\001\002\000\004\011\u0107\001" +
    "\002\000\006\012\u0108\023\uffad\001\002\000\004\022\u0102" +
    "\001\002\000\004\023\uffae\001\002\000\004\002\ufffe\001" +
    "\002\000\016\011\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\001\002\000\004\025\u010d\001\002\000\004\023" +
    "\u010e\001\002\000\004\026\121\001\002\000\046\002\uff70" +
    "\006\uff70\007\uff70\011\uff70\017\uff70\020\uff70\021\uff70\022" +
    "\uff70\031\uff70\037\uff70\041\uff70\044\uff70\045\uff70\051\uff70" +
    "\052\uff70\055\uff70\056\uff70\111\uff70\001\002\000\004\052" +
    "\u0111\001\002\000\004\011\u0112\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uff6e\006\uff6e\007\uff6e\011" +
    "\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\031\uff6e\037\uff6e" +
    "\041\uff6e\044\uff6e\045\uff6e\051\uff6e\052\uff6e\055\uff6e\056" +
    "\uff6e\111\uff6e\001\002\000\004\106\u0116\001\002\000\004" +
    "\105\u011a\001\002\000\006\013\063\023\u0117\001\002\000" +
    "\006\105\uff54\106\u0116\001\002\000\004\105\uffb6\001\002" +
    "\000\004\105\uffb5\001\002\000\006\013\063\023\064\001" +
    "\002\000\046\002\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\022\uffb7\031\uffb7\037\uffb7\041\uffb7\044" +
    "\uffb7\045\uffb7\051\uffb7\052\uffb7\055\uffb7\056\uffb7\111\uffb7" +
    "\001\002\000\006\011\u011e\017\u011f\001\002\000\004\015" +
    "\u0143\001\002\000\004\016\u0142\001\002\000\004\016\u013b" +
    "\001\002\000\004\046\u0121\001\002\000\004\016\u0122\001" +
    "\002\000\006\004\u0123\011\u0124\001\002\000\010\013\uff8d" +
    "\016\uff8d\023\uff8d\001\002\000\010\013\uff8e\016\uff8e\023" +
    "\uff8e\001\002\000\004\016\u0126\001\002\000\006\030\u0127" +
    "\065\u0128\001\002\000\004\016\uff95\001\002\000\004\016" +
    "\uff96\001\002\000\004\016\u012a\001\002\000\006\004\u0123" +
    "\011\u0124\001\002\000\004\016\u012c\001\002\000\010\047" +
    "\u0130\050\u012e\111\u012f\001\002\000\004\016\u0135\001\002" +
    "\000\004\016\uff93\001\002\000\006\013\063\023\064\001" +
    "\002\000\004\016\uff94\001\002\000\004\026\121\001\002" +
    "\000\046\002\uff98\006\uff98\007\uff98\011\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\031\uff98\037\uff98\041\uff98\044\uff98" +
    "\045\uff98\051\uff98\052\uff98\055\uff98\056\uff98\111\uff98\001" +
    "\002\000\004\006\015\001\002\000\046\002\uff97\006\uff97" +
    "\007\uff97\011\uff97\017\uff97\020\uff97\021\uff97\022\uff97\031" +
    "\uff97\037\uff97\041\uff97\044\uff97\045\uff97\051\uff97\052\uff97" +
    "\055\uff97\056\uff97\111\uff97\001\002\000\004\004\u0136\001" +
    "\002\000\004\016\u0137\001\002\000\004\111\u0138\001\002" +
    "\000\006\013\063\023\064\001\002\000\004\026\121\001" +
    "\002\000\046\002\uff99\006\uff99\007\uff99\011\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\031\uff99\037\uff99\041\uff99\044" +
    "\uff99\045\uff99\051\uff99\052\uff99\055\uff99\056\uff99\111\uff99" +
    "\001\002\000\004\011\u013c\001\002\000\004\016\u013d\001" +
    "\002\000\004\015\u013e\001\002\000\004\016\u013f\001\002" +
    "\000\004\004\u0140\001\002\000\004\016\u0141\001\002\000" +
    "\004\046\uff91\001\002\000\006\015\uff8f\046\uff92\001\002" +
    "\000\004\016\u0144\001\002\000\004\004\u0145\001\002\000" +
    "\004\016\u0146\001\002\000\004\046\uff90\001\002\000\004" +
    "\031\u0148\001\002\000\004\023\u0149\001\002\000\004\026" +
    "\u014a\001\002\000\004\033\u014b\001\002\000\004\016\u018c" +
    "\001\002\000\004\034\u014e\001\002\000\046\002\uffee\006" +
    "\uffee\007\uffee\011\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\031\uffee\037\uffee\041\uffee\044\uffee\045\uffee\051\uffee\052" +
    "\uffee\055\uffee\056\uffee\111\uffee\001\002\000\004\016\u014f" +
    "\001\002\000\010\120\u0152\121\u0150\122\u0151\001\002\000" +
    "\004\023\u0181\001\002\000\004\023\u017d\001\002\000\004" +
    "\023\u0153\001\002\000\004\026\u0154\001\002\000\004\026" +
    "\u0155\001\002\000\012\017\056\020\004\021\032\022\005" +
    "\001\002\000\004\011\105\001\002\000\054\002\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\026\u017a\031\uffdf\033\uffdf\034\uffdf\037\uffdf\041\uffdf\044" +
    "\uffdf\045\uffdf\051\uffdf\052\uffdf\055\uffdf\056\uffdf\111\uffdf" +
    "\001\002\000\004\011\105\001\002\000\004\011\105\001" +
    "\002\000\050\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\031\uffe9\034\u015c\037\uffe9\041" +
    "\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9" +
    "\111\uffe9\001\002\000\004\011\105\001\002\000\004\016" +
    "\u015d\001\002\000\006\121\u015e\122\u015f\001\002\000\004" +
    "\023\u0164\001\002\000\004\023\u0160\001\002\000\004\026" +
    "\u0161\001\002\000\004\026\u0162\001\002\000\012\017\056" +
    "\020\004\021\032\022\005\001\002\000\046\002\uffeb\006" +
    "\uffeb\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\031\uffeb\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052" +
    "\uffeb\055\uffeb\056\uffeb\111\uffeb\001\002\000\004\026\u0165" +
    "\001\002\000\004\026\u0166\001\002\000\012\017\056\020" +
    "\004\021\032\022\005\001\002\000\050\002\uffec\006\uffec" +
    "\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\031" +
    "\uffec\034\u0168\037\uffec\041\uffec\044\uffec\045\uffec\051\uffec" +
    "\052\uffec\055\uffec\056\uffec\111\uffec\001\002\000\004\016" +
    "\u0169\001\002\000\004\122\u016a\001\002\000\004\023\u016b" +
    "\001\002\000\004\026\u016c\001\002\000\004\026\u016d\001" +
    "\002\000\012\017\056\020\004\021\032\022\005\001\002" +
    "\000\046\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\031\uffed\037\uffed\041\uffed\044\uffed" +
    "\045\uffed\051\uffed\052\uffed\055\uffed\056\uffed\111\uffed\001" +
    "\002\000\010\013\063\016\u0170\023\064\001\002\000\004" +
    "\015\u0172\001\002\000\054\002\uffcb\006\uffcb\007\uffcb\011" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb\031\uffcb" +
    "\033\uffcb\034\uffcb\037\uffcb\041\uffcb\044\uffcb\045\uffcb\051" +
    "\uffcb\052\uffcb\055\uffcb\056\uffcb\111\uffcb\001\002\000\004" +
    "\016\u0173\001\002\000\012\004\u0175\005\u0178\010\u0176\014" +
    "\u0174\001\002\000\006\013\uffc7\023\uffc7\001\002\000\006" +
    "\013\uffc9\023\uffc9\001\002\000\006\013\uffc6\023\uffc6\001" +
    "\002\000\006\013\063\023\064\001\002\000\006\013\uffc8" +
    "\023\uffc8\001\002\000\054\002\uffca\006\uffca\007\uffca\011" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\026\uffca\031\uffca" +
    "\033\uffca\034\uffca\037\uffca\041\uffca\044\uffca\045\uffca\051" +
    "\uffca\052\uffca\055\uffca\056\uffca\111\uffca\001\002\000\054" +
    "\002\uffde\006\uffde\007\uffde\011\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\026\u017b\031\uffde\033\uffde\034\uffde\037\uffde" +
    "\041\uffde\044\uffde\045\uffde\051\uffde\052\uffde\055\uffde\056" +
    "\uffde\111\uffde\001\002\000\012\017\056\020\004\021\032" +
    "\022\005\001\002\000\052\002\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\037\uffdd\041\uffdd\044\uffdd\045\uffdd\051\uffdd\052" +
    "\uffdd\055\uffdd\056\uffdd\111\uffdd\001\002\000\004\026\u017e" +
    "\001\002\000\004\026\u017f\001\002\000\012\017\056\020" +
    "\004\021\032\022\005\001\002\000\046\002\uffe7\006\uffe7" +
    "\007\uffe7\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\031" +
    "\uffe7\037\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7" +
    "\055\uffe7\056\uffe7\111\uffe7\001\002\000\004\026\u0182\001" +
    "\002\000\004\026\u0183\001\002\000\012\017\056\020\004" +
    "\021\032\022\005\001\002\000\050\002\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\031\uffe8" +
    "\034\u0185\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051\uffe8\052" +
    "\uffe8\055\uffe8\056\uffe8\111\uffe8\001\002\000\004\016\u0186" +
    "\001\002\000\004\122\u0187\001\002\000\004\023\u0188\001" +
    "\002\000\004\026\u0189\001\002\000\004\026\u018a\001\002" +
    "\000\012\017\056\020\004\021\032\022\005\001\002\000" +
    "\046\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\031\uffea\037\uffea\041\uffea\044\uffea\045" +
    "\uffea\051\uffea\052\uffea\055\uffea\056\uffea\111\uffea\001\002" +
    "\000\010\115\u018d\116\u018e\117\u018f\001\002\000\004\023" +
    "\u019f\001\002\000\004\023\u0194\001\002\000\004\023\u0190" +
    "\001\002\000\004\026\u0191\001\002\000\004\026\u0192\001" +
    "\002\000\012\017\056\020\004\021\032\022\005\001\002" +
    "\000\004\034\uffe0\001\002\000\004\026\u0195\001\002\000" +
    "\004\026\u0196\001\002\000\012\017\056\020\004\021\032" +
    "\022\005\001\002\000\006\033\u0198\034\uffe1\001\002\000" +
    "\004\016\u0199\001\002\000\004\117\u019a\001\002\000\004" +
    "\023\u019b\001\002\000\004\026\u019c\001\002\000\004\026" +
    "\u019d\001\002\000\012\017\056\020\004\021\032\022\005" +
    "\001\002\000\004\034\uffe3\001\002\000\004\026\u01a0\001" +
    "\002\000\004\026\u01a1\001\002\000\012\017\056\020\004" +
    "\021\032\022\005\001\002\000\006\033\u01a3\034\uffe2\001" +
    "\002\000\004\016\u01a4\001\002\000\006\116\u01a5\117\u01a6" +
    "\001\002\000\004\023\u01ab\001\002\000\004\023\u01a7\001" +
    "\002\000\004\026\u01a8\001\002\000\004\026\u01a9\001\002" +
    "\000\012\017\056\020\004\021\032\022\005\001\002\000" +
    "\004\034\uffe4\001\002\000\004\026\u01ac\001\002\000\004" +
    "\026\u01ad\001\002\000\012\017\056\020\004\021\032\022" +
    "\005\001\002\000\006\033\u01af\034\uffe5\001\002\000\004" +
    "\016\u01b0\001\002\000\004\117\u01b1\001\002\000\004\023" +
    "\u01b2\001\002\000\004\026\u01b3\001\002\000\004\026\u01b4" +
    "\001\002\000\012\017\056\020\004\021\032\022\005\001" +
    "\002\000\004\034\uffe6\001\002\000\004\016\u01ca\001\002" +
    "\000\004\016\u01c5\001\002\000\004\016\u01b9\001\002\000" +
    "\004\042\u01ba\001\002\000\004\023\116\001\002\000\006" +
    "\013\063\023\064\001\002\000\050\002\uffa0\006\uffa0\007" +
    "\uffa0\011\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\031\uffa0" +
    "\037\uffa0\041\uffa0\043\u01bd\044\uffa0\045\uffa0\051\uffa0\052" +
    "\uffa0\055\uffa0\056\uffa0\111\uffa0\001\002\000\006\004\u01b6" +
    "\011\u01b7\001\002\000\046\002\uffa1\006\uffa1\007\uffa1\011" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\037\uffa1" +
    "\041\uffa1\044\uffa1\045\uffa1\051\uffa1\052\uffa1\055\uffa1\056" +
    "\uffa1\111\uffa1\001\002\000\004\016\u01c0\001\002\000\004" +
    "\042\u01c1\001\002\000\004\023\116\001\002\000\006\013" +
    "\063\023\064\001\002\000\050\002\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\031\uff9e\037" +
    "\uff9e\041\uff9e\043\u01bd\044\uff9e\045\uff9e\051\uff9e\052\uff9e" +
    "\055\uff9e\056\uff9e\111\uff9e\001\002\000\046\002\uff9f\006" +
    "\uff9f\007\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\031\uff9f\037\uff9f\041\uff9f\044\uff9f\045\uff9f\051\uff9f\052" +
    "\uff9f\055\uff9f\056\uff9f\111\uff9f\001\002\000\004\064\u01c6" +
    "\001\002\000\004\016\u01c7\001\002\000\006\004\u01c8\011" +
    "\u01c9\001\002\000\004\016\uff9c\001\002\000\004\016\uff9a" +
    "\001\002\000\004\064\u01cb\001\002\000\004\016\u01cc\001" +
    "\002\000\006\004\u01cd\011\u01ce\001\002\000\004\016\uff9d" +
    "\001\002\000\004\016\uff9b\001\002\000\004\024\u01f0\001" +
    "\002\000\004\024\uff72\001\002\000\004\024\uff73\001\002" +
    "\000\004\024\uff74\001\002\000\016\012\104\013\uff56\016" +
    "\uff56\023\uff56\024\u01d6\077\u01d7\001\002\000\004\024\uff75" +
    "\001\002\000\004\024\uff76\001\002\000\004\021\032\001" +
    "\002\000\006\004\u01d8\100\u01d9\001\002\000\004\100\u01db" +
    "\001\002\000\006\013\063\023\064\001\002\000\046\002" +
    "\uff60\006\uff60\007\uff60\011\uff60\017\uff60\020\uff60\021\uff60" +
    "\022\uff60\031\uff60\037\uff60\041\uff60\044\uff60\045\uff60\051" +
    "\uff60\052\uff60\055\uff60\056\uff60\111\uff60\001\002\000\004" +
    "\016\u01dc\001\002\000\004\015\u01dd\001\002\000\004\101" +
    "\u01de\001\002\000\004\016\u01df\001\002\000\004\005\u01e1" +
    "\001\002\000\004\102\u01e6\001\002\000\006\012\u01e3\016" +
    "\u01e2\001\002\000\004\102\uff67\001\002\000\004\016\u01e4" +
    "\001\002\000\004\005\u01e1\001\002\000\004\102\uff66\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uff6c" +
    "\006\uff6c\007\uff6c\011\uff6c\017\uff6c\020\uff6c\021\uff6c\022" +
    "\uff6c\031\uff6c\037\uff6c\041\uff6c\044\uff6c\045\uff6c\051\uff6c" +
    "\052\uff6c\055\uff6c\056\uff6c\111\uff6c\001\002\000\004\025" +
    "\u01ed\001\002\000\004\011\u01ea\001\002\000\006\012\u01eb" +
    "\025\uffa9\001\002\000\004\021\032\001\002\000\004\025" +
    "\uffaa\001\002\000\004\023\116\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uffb1\006\uffb1\007\uffb1\011" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\031\uffb1\037\uffb1" +
    "\041\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\055\uffb1\056" +
    "\uffb1\111\uffb1\001\002\000\004\021\032\001\002\000\004" +
    "\011\u01f2\001\002\000\004\025\u01f3\001\002\000\006\013" +
    "\063\023\064\001\002\000\046\002\uff77\006\uff77\007\uff77" +
    "\011\uff77\017\uff77\020\uff77\021\uff77\022\uff77\031\uff77\037" +
    "\uff77\041\uff77\044\uff77\045\uff77\051\uff77\052\uff77\055\uff77" +
    "\056\uff77\111\uff77\001\002\000\004\011\u01f6\001\002\000" +
    "\006\013\063\023\064\001\002\000\046\002\uffb9\006\uffb9" +
    "\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\031" +
    "\uffb9\037\uffb9\041\uffb9\044\uffb9\045\uffb9\051\uffb9\052\uffb9" +
    "\055\uffb9\056\uffb9\111\uffb9\001\002\000\004\004\u0206\001" +
    "\002\000\004\015\u01fa\001\002\000\004\016\u01fb\001\002" +
    "\000\012\004\317\011\320\057\u01fc\110\316\001\002\000" +
    "\014\017\274\020\273\021\277\022\276\031\u01fe\001\002" +
    "\000\004\077\u0202\001\002\000\004\024\u01ff\001\002\000" +
    "\004\025\u0200\001\002\000\006\013\063\023\064\001\002" +
    "\000\046\002\uffa4\006\uffa4\007\uffa4\011\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\031\uffa4\037\uffa4\041\uffa4\044\uffa4" +
    "\045\uffa4\051\uffa4\052\uffa4\055\uffa4\056\uffa4\111\uffa4\001" +
    "\002\000\004\004\u0203\001\002\000\004\100\u0204\001\002" +
    "\000\006\013\063\023\064\001\002\000\046\002\uff5c\006" +
    "\uff5c\007\uff5c\011\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\031\uff5c\037\uff5c\041\uff5c\044\uff5c\045\uff5c\051\uff5c\052" +
    "\uff5c\055\uff5c\056\uff5c\111\uff5c\001\002\000\004\100\u0207" +
    "\001\002\000\004\016\u0208\001\002\000\004\015\u0209\001" +
    "\002\000\004\016\u020a\001\002\000\012\004\164\005\171" +
    "\010\167\014\165\001\002\000\006\013\063\023\064\001" +
    "\002\000\046\002\uff5d\006\uff5d\007\uff5d\011\uff5d\017\uff5d" +
    "\020\uff5d\021\uff5d\022\uff5d\031\uff5d\037\uff5d\041\uff5d\044" +
    "\uff5d\045\uff5d\051\uff5d\052\uff5d\055\uff5d\056\uff5d\111\uff5d" +
    "\001\002\000\012\004\u020e\005\u0212\011\u0211\014\u020f\001" +
    "\002\000\010\012\u021f\013\uffbd\023\uffbd\001\002\000\010" +
    "\012\u021c\013\uffbe\023\uffbe\001\002\000\006\013\063\023" +
    "\064\001\002\000\012\012\u0217\013\uffbb\023\uffbb\060\u0216" +
    "\001\002\000\010\012\u0213\013\uffbc\023\uffbc\001\002\000" +
    "\004\016\u0214\001\002\000\012\004\u020e\005\u0212\011\u0211" +
    "\014\u020f\001\002\000\006\013\uffc0\023\uffc0\001\002\000" +
    "\004\011\u021a\001\002\000\004\016\u0218\001\002\000\012" +
    "\004\u020e\005\u0212\011\u0211\014\u020f\001\002\000\006\013" +
    "\uffbf\023\uffbf\001\002\000\006\013\uffba\023\uffba\001\002" +
    "\000\046\002\uffc3\006\uffc3\007\uffc3\011\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\031\uffc3\037\uffc3\041\uffc3\044\uffc3" +
    "\045\uffc3\051\uffc3\052\uffc3\055\uffc3\056\uffc3\111\uffc3\001" +
    "\002\000\004\016\u021d\001\002\000\012\004\u020e\005\u0212" +
    "\011\u0211\014\u020f\001\002\000\006\013\uffc2\023\uffc2\001" +
    "\002\000\004\016\u0220\001\002\000\012\004\u020e\005\u0212" +
    "\011\u0211\014\u020f\001\002\000\006\013\uffc1\023\uffc1\001" +
    "\002\000\004\026\121\001\002\000\004\011\311\001\002" +
    "\000\004\046\u0225\001\002\000\004\016\u0226\001\002\000" +
    "\006\004\u0123\011\u0124\001\002\000\004\016\u0228\001\002" +
    "\000\006\030\u0127\065\u0128\001\002\000\004\016\u022a\001" +
    "\002\000\006\004\u0123\011\u0124\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uff8c\006\uff8c\007\uff8c\011" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\031\uff8c\037\uff8c" +
    "\041\uff8c\044\uff8c\045\uff8c\051\uff8c\052\uff8c\055\uff8c\056" +
    "\uff8c\111\uff8c\001\002\000\004\002\000\001\002\000\004" +
    "\011\uff58\001\002\000\004\011\uff59\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u022d\000\070\002\006\004\056\005\040\006\042\007" +
    "\005\010\012\011\037\015\041\016\015\017\032\022\011" +
    "\031\043\032\034\035\035\042\010\046\013\053\033\055" +
    "\036\056\046\057\020\060\044\061\052\071\025\076\022" +
    "\105\051\106\024\112\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u016e\036" +
    "\u01ce\001\001\000\004\033\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\u0109\004\056\005\040" +
    "\006\042\007\005\010\012\011\037\015\041\016\015\017" +
    "\032\022\011\031\043\032\034\035\035\042\010\046\013" +
    "\053\033\055\036\056\046\057\020\060\044\061\052\071" +
    "\025\076\022\105\051\106\024\112\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\350\001\001\000\002" +
    "\001\001\000\004\012\202\001\001\000\004\013\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\002\057\004\056\005\040\006\042\007\005" +
    "\010\012\011\037\015\041\016\015\017\032\022\011\031" +
    "\043\032\034\035\035\042\010\046\013\053\033\055\036" +
    "\056\046\057\020\060\044\061\052\071\025\076\022\105" +
    "\051\106\024\112\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\106\001\001\000\004\012\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\113\001\001\000\002\001\001\000\004\023\116\001\001" +
    "\000\004\030\121\001\001\000\004\013\117\001\001\000" +
    "\002\001\001\000\004\030\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\150\001\001\000\002\001\001\000\004\013\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\167\040\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\172\001\001\000\002\001\001\000\004\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\212\001" +
    "\001\000\002\001\001\000\004\060\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\217\001\001\000" +
    "\002\001\001\000\004\060\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\231\001\001\000\004\013\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\261\056\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\265\056\262\001\001\000\002\001\001\000\004\023" +
    "\267\001\001\000\004\013\270\001\001\000\002\001\001" +
    "\000\004\043\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\312\106" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\320\001\001\000" +
    "\002\001\001\000\004\110\334\001\001\000\004\110\330" +
    "\001\001\000\004\013\321\001\001\000\004\030\322\001" +
    "\001\000\004\106\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\343\001\001\000\004\013\344\001" +
    "\001\000\004\030\345\001\001\000\004\106\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\356\001\001\000\002\001" +
    "\001\000\004\025\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0103" +
    "\001\001\000\004\013\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\u010f\045\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0112\001\001\000\002\001\001\000\004" +
    "\072\u0114\001\001\000\002\001\001\000\004\013\u0117\001" +
    "\001\000\004\072\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u011a\001\001\000\002\001\001\000" +
    "\006\077\u011f\104\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u012a\001\001\000\002\001\001\000\004\101\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0130" +
    "\001\001\000\002\001\001\000\006\030\u0132\103\u0131\001" +
    "\001\000\002\001\001\000\004\016\u0133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0138\001\001\000\006\030\u0132\103\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\u014b\001\001\000\002\001\001\000\004" +
    "\115\u014c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0156\006\042\007\005\010\012\011\037\056\u0158\057\u0157" +
    "\060\u0155\061\u015a\114\u0159\001\001\000\004\012\350\001" +
    "\001\000\002\001\001\000\004\012\u016e\001\001\000\004" +
    "\012\202\001\001\000\002\001\001\000\004\012\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0156\006\042\007\005\010\012\011\037\056\u0158" +
    "\057\u0157\060\u0155\061\u015a\114\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0156" +
    "\006\042\007\005\010\012\011\037\056\u0158\057\u0157\060" +
    "\u0155\061\u015a\114\u0166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0156\006\042\007\005" +
    "\010\012\011\037\056\u0158\057\u0157\060\u0155\061\u015a\114" +
    "\u016d\001\001\000\002\001\001\000\004\013\u0170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0156" +
    "\006\042\007\005\010\012\011\037\056\u0158\057\u0157\060" +
    "\u0155\061\u015a\114\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0156\006\042\007" +
    "\005\010\012\011\037\056\u0158\057\u0157\060\u0155\061\u015a" +
    "\114\u017f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0156\006\042\007\005\010\012" +
    "\011\037\056\u0158\057\u0157\060\u0155\061\u015a\114\u0183\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0156\006\042\007\005\010\012\011\037\056\u0158" +
    "\057\u0157\060\u0155\061\u015a\114\u018a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0156\006\042\007\005\010\012\011\037\056\u0158" +
    "\057\u0157\060\u0155\061\u015a\114\u0192\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0156" +
    "\006\042\007\005\010\012\011\037\056\u0158\057\u0157\060" +
    "\u0155\061\u015a\114\u0196\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0156\006\042\007\005" +
    "\010\012\011\037\056\u0158\057\u0157\060\u0155\061\u015a\114" +
    "\u019d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0156\006\042\007\005\010\012\011" +
    "\037\056\u0158\057\u0157\060\u0155\061\u015a\114\u01a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0156\006\042\007\005\010\012\011" +
    "\037\056\u0158\057\u0157\060\u0155\061\u015a\114\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0156\006\042\007\005\010\012\011\037\056\u0158" +
    "\057\u0157\060\u0155\061\u015a\114\u01ad\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0156\006" +
    "\042\007\005\010\012\011\037\056\u0158\057\u0157\060\u0155" +
    "\061\u015a\114\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01ba\001\001\000\004\013\u01bb\001\001\000" +
    "\004\034\u01bd\001\001\000\004\033\u01be\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01c1\001\001\000\004\013\u01c2\001\001\000\004\034\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u01e7" +
    "\057\u01e8\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u01d9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u01df\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u01e4\001" +
    "\001\000\002\001\001\000\004\013\u01e6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u01eb\057\u01e8\001\001\000\002\001\001" +
    "\000\004\023\u01ed\001\001\000\004\013\u01ee\001\001\000" +
    "\002\001\001\000\004\057\u01f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01f3\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u01f6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\343\001\001\000\004\043\u01fc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u020a\001\001\000\004\013" +
    "\u020b\001\001\000\002\001\001\000\004\020\u020f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u021a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0218\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u021d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0220\001\001\000\002\001\001\000" +
    "\004\030\u0222\001\001\000\004\106\u0223\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u0226\001\001\000" +
    "\002\001\001\000\004\100\u0228\001\001\000\002\001\001" +
    "\000\004\102\u022a\001\001\000\004\013\u022b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLASESA ::= clase libre IDmayu newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
