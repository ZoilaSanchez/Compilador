
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\134\013\000\002\134\010\000\002\112\006\000\002" +
    "\112\006\000\002\112\007\000\002\112\007\000\002\112" +
    "\007\000\002\112\010\000\002\116\005\000\002\116\011" +
    "\000\002\116\003\000\002\116\007\000\002\115\006\000" +
    "\002\115\006\000\002\115\006\000\002\115\027\000\002" +
    "\115\020\000\002\115\020\000\002\115\020\000\002\115" +
    "\011\000\002\115\011\000\002\115\011\000\002\115\007" +
    "\000\002\115\021\000\002\115\014\000\002\115\014\000" +
    "\002\115\014\000\002\115\007\000\002\115\007\000\002" +
    "\115\007\000\002\113\006\000\002\113\006\000\002\113" +
    "\006\000\002\113\007\000\002\113\021\000\002\113\014" +
    "\000\002\113\014\000\002\113\014\000\002\113\007\000" +
    "\002\113\007\000\002\113\007\000\002\113\027\000\002" +
    "\113\020\000\002\113\020\000\002\113\020\000\002\113" +
    "\011\000\002\113\011\000\002\113\011\000\002\114\003" +
    "\000\002\114\004\000\002\114\006\000\002\117\006\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\005\000\002\006\007\000\002\006" +
    "\013\000\002\006\011\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\007\005\000" +
    "\002\007\007\000\002\007\013\000\002\007\011\000\002" +
    "\010\005\000\002\010\007\000\002\010\013\000\002\010" +
    "\011\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\011\005\000\002\011\007\000\002\011\013\000" +
    "\002\011\011\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\012\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\007\000\002\017" +
    "\006\000\002\071\004\000\002\071\007\000\002\071\004" +
    "\000\002\072\004\000\002\072\005\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\011\000\002" +
    "\022\010\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\024\007\000\002\024\005\000\002\025\007" +
    "\000\002\025\005\000\002\026\007\000\002\026\005\000" +
    "\002\027\007\000\002\027\005\000\002\127\004\000\002" +
    "\127\004\000\002\127\004\000\002\127\004\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\127\003" +
    "\000\002\023\013\000\002\023\007\000\002\023\013\000" +
    "\002\023\013\000\002\023\007\000\002\023\020\000\002" +
    "\023\014\000\002\023\010\000\002\023\014\000\002\023" +
    "\014\000\002\023\010\000\002\023\021\000\002\133\003" +
    "\000\002\133\003\000\002\133\003\000\002\133\004\000" +
    "\002\133\004\000\002\133\004\000\002\120\003\000\002" +
    "\120\003\000\002\031\015\000\002\031\016\000\002\031" +
    "\013\000\002\031\010\000\002\031\010\000\002\031\005" +
    "\000\002\037\006\000\002\032\012\000\002\032\011\000" +
    "\002\034\012\000\002\034\011\000\002\034\005\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\076\024\000\002\076\020\000\002\103\004" +
    "\000\002\100\003\000\002\100\003\000\002\101\003\000" +
    "\002\101\003\000\002\077\004\000\002\077\012\000\002" +
    "\077\007\000\002\104\004\000\002\102\003\000\002\102" +
    "\003\000\002\105\016\000\002\106\010\000\002\106\006" +
    "\000\002\106\010\000\002\106\010\000\002\106\012\000" +
    "\002\106\012\000\002\106\010\000\002\106\012\000\002" +
    "\106\003\000\002\107\005\000\002\107\005\000\002\107" +
    "\005\000\002\107\005\000\002\107\004\000\002\107\004" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\126\007\000\002\126\007\000\002\126\005\000\002" +
    "\126\005\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\035\011\000\002\035\011\000\002\035\011\000" +
    "\002\035\011\000\002\035\013\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\042\010\000\002\042\007\000\002\042\007" +
    "\000\002\045\006\000\002\041\011\000\002\041\012\000" +
    "\002\046\016\000\002\046\016\000\002\046\016\000\002" +
    "\046\016\000\002\047\004\000\002\047\006\000\002\050" +
    "\004\000\002\050\006\000\002\051\004\000\002\051\006" +
    "\000\002\052\004\000\002\052\006\000\002\053\007\000" +
    "\002\053\007\000\002\053\007\000\002\053\007\000\002" +
    "\053\013\000\002\053\014\000\002\053\014\000\002\053" +
    "\014\000\002\053\014\000\002\073\007\000\002\073\007" +
    "\000\002\073\007\000\002\073\007\000\002\056\004\000" +
    "\002\057\004\000\002\061\004\000\002\060\004\000\002" +
    "\012\005\000\002\012\003\000\002\013\004\000\002\013" +
    "\003\000\002\030\004\000\002\030\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0359\000\052\006\017\007\023\011\022\017\065\020" +
    "\006\021\037\022\007\023\004\031\060\037\030\041\025" +
    "\044\054\045\032\051\034\052\064\053\016\055\057\056" +
    "\033\111\012\124\036\001\002\000\054\002\uffec\006\uffec" +
    "\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\031\uffec\037\uffec\041\uffec\044\uffec\045\uffec\051\uffec" +
    "\052\uffec\053\uffec\055\uffec\056\uffec\111\uffec\124\uffec\001" +
    "\002\000\054\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\037\ufff2\041" +
    "\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2" +
    "\056\ufff2\111\ufff2\124\ufff2\001\002\000\004\016\u035b\001" +
    "\002\000\004\016\u035a\001\002\000\074\002\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\026\uffb6\031\uffb6\033\uffb6\034\uffb6\037\uffb6\041\uffb6" +
    "\044\uffb6\045\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056" +
    "\uffb6\111\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6" +
    "\124\uffb6\001\002\000\004\002\u0359\001\002\000\004\023" +
    "\u034e\001\002\000\054\002\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\031\ufffa\037" +
    "\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\056\ufffa\111\ufffa\124\ufffa\001\002\000\074\002" +
    "\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\026\uffb5\031\uffb5\033\uffb5\034\uffb5\037" +
    "\uffb5\041\uffb5\044\uffb5\045\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\055\uffb5\056\uffb5\111\uffb5\116\uffb5\117\uffb5\120\uffb5\121" +
    "\uffb5\122\uffb5\124\uffb5\001\002\000\054\002\uffef\006\uffef" +
    "\007\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef" +
    "\052\uffef\053\uffef\055\uffef\056\uffef\111\uffef\124\uffef\001" +
    "\002\000\004\016\u034b\001\002\000\004\016\u0331\001\002" +
    "\000\054\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\031\uffee\037\uffee\041\uffee" +
    "\044\uffee\045\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056" +
    "\uffee\111\uffee\124\uffee\001\002\000\056\002\uff98\006\uff98" +
    "\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\026\uff98\031\uff98\037\uff98\041\uff98\044\uff98\045\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98\111\uff98\124" +
    "\uff98\001\002\000\012\015\u02d2\016\u02d0\060\u02d1\077\u02cf" +
    "\001\002\000\004\016\u02cc\001\002\000\020\011\u02a8\066" +
    "\u02a6\070\u02a5\071\u02a4\072\u02a3\073\u02a2\074\u02a1\001\002" +
    "\000\004\016\u0284\001\002\000\054\002\ufff7\006\ufff7\007" +
    "\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\055\ufff7\056\ufff7\111\ufff7\124\ufff7\001\002" +
    "\000\054\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\031\ufff6\037\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056" +
    "\ufff6\111\ufff6\124\ufff6\001\002\000\004\016\u027e\001\002" +
    "\000\054\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\031\ufff8\037\ufff8\041\ufff8" +
    "\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056" +
    "\ufff8\111\ufff8\124\ufff8\001\002\000\004\016\u0253\001\002" +
    "\000\006\013\217\023\u024a\001\002\000\004\024\u0242\001" +
    "\002\000\054\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3\037\ufff3\041" +
    "\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3" +
    "\056\ufff3\111\ufff3\124\ufff3\001\002\000\004\016\u0221\001" +
    "\002\000\004\016\u0220\001\002\000\056\002\uff97\006\uff97" +
    "\007\uff97\011\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\026\uff97\031\uff97\037\uff97\041\uff97\044\uff97\045\uff97" +
    "\051\uff97\052\uff97\053\uff97\055\uff97\056\uff97\111\uff97\124" +
    "\uff97\001\002\000\054\002\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\031\ufff1\037" +
    "\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\055\ufff1\056\ufff1\111\ufff1\124\ufff1\001\002\000\054\002" +
    "\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045" +
    "\uffed\051\uffed\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed" +
    "\124\uffed\001\002\000\054\002\ufff0\006\ufff0\007\ufff0\011" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0" +
    "\037\ufff0\041\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\111\ufff0\124\ufff0\001\002\000\054" +
    "\002\uffff\006\017\007\023\011\022\017\065\020\006\021" +
    "\037\022\007\023\004\031\060\037\030\041\025\044\054" +
    "\045\032\051\034\052\064\053\016\055\057\056\033\111" +
    "\012\124\036\001\002\000\074\002\uffb4\006\uffb4\007\uffb4" +
    "\011\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\037\uffb4\041\uffb4\044\uffb4" +
    "\045\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\111" +
    "\uffb4\116\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4\124\uffb4" +
    "\001\002\000\004\023\u015c\001\002\000\054\002\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc\124\ufffc" +
    "\001\002\000\054\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb\037\ufffb" +
    "\041\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\056\ufffb\111\ufffb\124\ufffb\001\002\000\074\002\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\026\uffb7\031\uffb7\033\uffb7\034\uffb7\037\uffb7" +
    "\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053\uffb7\055" +
    "\uffb7\056\uffb7\111\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7" +
    "\122\uffb7\124\uffb7\001\002\000\054\002\ufff9\006\ufff9\007" +
    "\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9\124\ufff9\001\002" +
    "\000\004\011\u013b\001\002\000\004\024\u012b\001\002\000" +
    "\006\011\u0100\076\u0102\001\002\000\056\002\uff32\006\uff32" +
    "\007\uff32\011\uff32\017\uff32\020\uff32\021\uff32\022\uff32\023" +
    "\uff32\031\uff32\037\uff32\041\uff32\044\uff32\045\uff32\046\uff32" +
    "\051\uff32\052\uff32\053\uff32\055\uff32\056\uff32\111\uff32\124" +
    "\uff32\001\002\000\006\013\217\023\220\001\002\000\010" +
    "\016\342\023\uffe1\060\343\001\002\000\054\002\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\111\ufff5\124\ufff5" +
    "\001\002\000\006\011\231\067\233\001\002\000\054\002" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111\ufff4" +
    "\124\ufff4\001\002\000\004\011\227\001\002\000\006\011" +
    "\071\016\070\001\002\000\054\002\001\006\017\007\023" +
    "\011\022\017\065\020\006\021\037\022\007\023\004\031" +
    "\060\037\030\041\025\044\054\045\032\051\034\052\064" +
    "\053\016\055\057\056\033\111\012\124\036\001\002\000" +
    "\004\002\ufffd\001\002\000\010\011\ufef5\032\213\076\ufef5" +
    "\001\002\000\004\024\072\001\002\000\004\017\073\001" +
    "\002\000\004\016\074\001\002\000\004\011\075\001\002" +
    "\000\004\025\076\001\002\000\004\023\077\001\002\000" +
    "\004\023\100\001\002\000\016\006\017\007\023\026\107" +
    "\041\025\055\057\056\033\001\002\000\054\002\uff1a\006" +
    "\uff1a\007\uff1a\011\uff1a\017\uff1a\020\uff1a\021\uff1a\022\uff1a" +
    "\023\uff1a\031\uff1a\037\uff1a\041\uff1a\044\uff1a\045\uff1a\051" +
    "\uff1a\052\uff1a\053\uff1a\055\uff1a\056\uff1a\111\uff1a\124\uff1a" +
    "\001\002\000\016\006\017\007\023\026\uff5f\041\025\055" +
    "\057\056\033\001\002\000\004\035\157\001\002\000\004" +
    "\026\107\001\002\000\016\006\017\007\023\026\uff60\041" +
    "\025\055\057\056\033\001\002\000\016\006\017\007\023" +
    "\026\uff5e\041\025\055\057\056\033\001\002\000\014\006" +
    "\ufeec\011\ufeec\026\107\035\ufeec\052\ufeec\001\002\000\012" +
    "\006\ufeed\011\ufeed\035\ufeed\052\ufeed\001\002\000\004\026" +
    "\uff5c\001\002\000\004\026\uff5b\001\002\000\004\035\114" +
    "\001\002\000\004\016\115\001\002\000\012\004\116\005" +
    "\121\010\117\011\120\001\002\000\060\002\uff62\006\uff62" +
    "\007\uff62\011\uff62\013\uff62\016\153\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\023\uff62\031\uff62\037\uff62\041\uff62\044\uff62" +
    "\045\uff62\051\uff62\052\uff62\053\uff62\055\uff62\056\uff62\111" +
    "\uff62\124\uff62\001\002\000\056\002\uff65\006\uff65\007\uff65" +
    "\011\uff65\013\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023" +
    "\uff65\031\uff65\037\uff65\041\uff65\044\uff65\045\uff65\051\uff65" +
    "\052\uff65\053\uff65\055\uff65\056\uff65\111\uff65\124\uff65\001" +
    "\002\000\010\016\135\107\136\110\134\001\002\000\004" +
    "\016\122\001\002\000\016\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\001\002\000\012\004\uff22\005\uff22" +
    "\011\uff22\016\uff22\001\002\000\012\004\uff21\005\uff21\011" +
    "\uff21\016\uff21\001\002\000\012\004\uff23\005\uff23\011\uff23" +
    "\016\uff23\001\002\000\012\004\uff24\005\uff24\011\uff24\016" +
    "\uff24\001\002\000\004\005\132\001\002\000\012\004\uff1f" +
    "\005\uff1f\011\uff1f\016\uff1f\001\002\000\012\004\uff20\005" +
    "\uff20\011\uff20\016\uff20\001\002\000\004\011\133\001\002" +
    "\000\056\002\uff63\006\uff63\007\uff63\011\uff63\013\uff63\017" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\031\uff63\037\uff63" +
    "\041\uff63\044\uff63\045\uff63\051\uff63\052\uff63\053\uff63\055" +
    "\uff63\056\uff63\111\uff63\124\uff63\001\002\000\006\011\uff59" +
    "\016\uff59\001\002\000\016\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\001\002\000\006\011\uff5a\016\uff5a" +
    "\001\002\000\004\011\140\001\002\000\004\024\141\001" +
    "\002\000\004\011\142\001\002\000\004\016\143\001\002" +
    "\000\006\107\136\110\134\001\002\000\004\016\145\001" +
    "\002\000\004\004\146\001\002\000\004\025\147\001\002" +
    "\000\056\002\uff61\006\uff61\007\uff61\011\uff61\013\uff61\017" +
    "\uff61\020\uff61\021\uff61\022\uff61\023\uff61\031\uff61\037\uff61" +
    "\041\uff61\044\uff61\045\uff61\051\uff61\052\uff61\053\uff61\055" +
    "\uff61\056\uff61\111\uff61\124\uff61\001\002\000\004\016\151" +
    "\001\002\000\004\011\152\001\002\000\056\002\uff66\006" +
    "\uff66\007\uff66\011\uff66\013\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\023\uff66\031\uff66\037\uff66\041\uff66\044\uff66\045" +
    "\uff66\051\uff66\052\uff66\053\uff66\055\uff66\056\uff66\111\uff66" +
    "\124\uff66\001\002\000\016\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\001\002\000\004\016\155\001\002" +
    "\000\004\004\156\001\002\000\056\002\uff64\006\uff64\007" +
    "\uff64\011\uff64\013\uff64\017\uff64\020\uff64\021\uff64\022\uff64" +
    "\023\uff64\031\uff64\037\uff64\041\uff64\044\uff64\045\uff64\051" +
    "\uff64\052\uff64\053\uff64\055\uff64\056\uff64\111\uff64\124\uff64" +
    "\001\002\000\004\016\160\001\002\000\012\004\161\005" +
    "\164\010\162\011\163\001\002\000\060\002\uff68\006\uff68" +
    "\007\uff68\011\uff68\013\uff68\016\206\017\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\031\uff68\037\uff68\041\uff68\044\uff68" +
    "\045\uff68\051\uff68\052\uff68\053\uff68\055\uff68\056\uff68\111" +
    "\uff68\124\uff68\001\002\000\056\002\uff6b\006\uff6b\007\uff6b" +
    "\011\uff6b\013\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023" +
    "\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b\045\uff6b\051\uff6b" +
    "\052\uff6b\053\uff6b\055\uff6b\056\uff6b\111\uff6b\124\uff6b\001" +
    "\002\000\010\016\171\107\136\110\134\001\002\000\004" +
    "\016\165\001\002\000\016\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\001\002\000\004\005\167\001\002" +
    "\000\004\011\170\001\002\000\056\002\uff69\006\uff69\007" +
    "\uff69\011\uff69\013\uff69\017\uff69\020\uff69\021\uff69\022\uff69" +
    "\023\uff69\031\uff69\037\uff69\041\uff69\044\uff69\045\uff69\051" +
    "\uff69\052\uff69\053\uff69\055\uff69\056\uff69\111\uff69\124\uff69" +
    "\001\002\000\016\054\130\107\126\110\125\112\123\113" +
    "\124\114\131\001\002\000\004\011\173\001\002\000\004" +
    "\024\174\001\002\000\004\011\175\001\002\000\004\016" +
    "\176\001\002\000\006\107\136\110\134\001\002\000\004" +
    "\016\200\001\002\000\004\004\201\001\002\000\004\025" +
    "\202\001\002\000\056\002\uff67\006\uff67\007\uff67\011\uff67" +
    "\013\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\031" +
    "\uff67\037\uff67\041\uff67\044\uff67\045\uff67\051\uff67\052\uff67" +
    "\053\uff67\055\uff67\056\uff67\111\uff67\124\uff67\001\002\000" +
    "\004\016\204\001\002\000\004\011\205\001\002\000\056" +
    "\002\uff6c\006\uff6c\007\uff6c\011\uff6c\013\uff6c\017\uff6c\020" +
    "\uff6c\021\uff6c\022\uff6c\023\uff6c\031\uff6c\037\uff6c\041\uff6c" +
    "\044\uff6c\045\uff6c\051\uff6c\052\uff6c\053\uff6c\055\uff6c\056" +
    "\uff6c\111\uff6c\124\uff6c\001\002\000\016\054\130\107\126" +
    "\110\125\112\123\113\124\114\131\001\002\000\004\016" +
    "\210\001\002\000\004\004\211\001\002\000\056\002\uff6a" +
    "\006\uff6a\007\uff6a\011\uff6a\013\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\031\uff6a\037\uff6a\041\uff6a\044\uff6a" +
    "\045\uff6a\051\uff6a\052\uff6a\053\uff6a\055\uff6a\056\uff6a\111" +
    "\uff6a\124\uff6a\001\002\000\004\026\uff5d\001\002\000\004" +
    "\024\214\001\002\000\006\022\215\025\216\001\002\000" +
    "\004\016\223\001\002\000\006\013\217\023\220\001\002" +
    "\000\004\023\222\001\002\000\100\002\ufeee\006\ufeee\007" +
    "\ufeee\011\ufeee\017\ufeee\020\ufeee\021\ufeee\022\ufeee\023\ufeee" +
    "\026\ufeee\031\ufeee\033\ufeee\034\ufeee\037\ufeee\041\ufeee\043" +
    "\ufeee\044\ufeee\045\ufeee\046\ufeee\051\ufeee\052\ufeee\053\ufeee" +
    "\055\ufeee\056\ufeee\111\ufeee\116\ufeee\117\ufeee\120\ufeee\121" +
    "\ufeee\122\ufeee\124\ufeee\001\002\000\054\002\uffea\006\uffea" +
    "\007\uffea\011\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\031\uffea\037\uffea\041\uffea\044\uffea\045\uffea\051\uffea" +
    "\052\uffea\053\uffea\055\uffea\056\uffea\111\uffea\124\uffea\001" +
    "\002\000\102\002\ufeef\006\ufeef\007\ufeef\011\ufeef\017\ufeef" +
    "\020\ufeef\021\ufeef\022\ufeef\023\ufeef\026\ufeef\031\ufeef\033" +
    "\ufeef\034\ufeef\037\ufeef\041\ufeef\043\ufeef\044\ufeef\045\ufeef" +
    "\046\ufeef\051\ufeef\052\ufeef\053\ufeef\055\ufeef\056\ufeef\105" +
    "\ufeef\111\ufeef\116\ufeef\117\ufeef\120\ufeef\121\ufeef\122\ufeef" +
    "\124\ufeef\001\002\000\004\011\224\001\002\000\004\025" +
    "\225\001\002\000\006\013\217\023\220\001\002\000\054" +
    "\002\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\031\uffeb\037\uffeb\041\uffeb\044\uffeb" +
    "\045\uffeb\051\uffeb\052\uffeb\053\uffeb\055\uffeb\056\uffeb\111" +
    "\uffeb\124\uffeb\001\002\000\006\013\217\023\220\001\002" +
    "\000\054\002\uff53\006\uff53\007\uff53\011\uff53\017\uff53\020" +
    "\uff53\021\uff53\022\uff53\023\uff53\031\uff53\037\uff53\041\uff53" +
    "\044\uff53\045\uff53\051\uff53\052\uff53\053\uff53\055\uff53\056" +
    "\uff53\111\uff53\124\uff53\001\002\000\016\012\254\013\ufef0" +
    "\016\ufef0\023\ufef0\024\253\077\252\001\002\000\010\013" +
    "\217\016\241\023\220\001\002\000\004\024\234\001\002" +
    "\000\004\022\007\001\002\000\004\011\236\001\002\000" +
    "\004\025\237\001\002\000\006\013\217\023\220\001\002" +
    "\000\054\002\uff1c\006\uff1c\007\uff1c\011\uff1c\017\uff1c\020" +
    "\uff1c\021\uff1c\022\uff1c\023\uff1c\031\uff1c\037\uff1c\041\uff1c" +
    "\044\uff1c\045\uff1c\051\uff1c\052\uff1c\053\uff1c\055\uff1c\056" +
    "\uff1c\111\uff1c\124\uff1c\001\002\000\004\015\243\001\002" +
    "\000\074\002\uffa7\006\uffa7\007\uffa7\011\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\026\uffa7\031\uffa7\033\uffa7" +
    "\034\uffa7\037\uffa7\041\uffa7\044\uffa7\045\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\055\uffa7\056\uffa7\111\uffa7\116\uffa7\117\uffa7" +
    "\120\uffa7\121\uffa7\122\uffa7\124\uffa7\001\002\000\004\016" +
    "\244\001\002\000\010\004\245\005\250\010\246\001\002" +
    "\000\006\013\uffa3\023\uffa3\001\002\000\006\013\uffa1\023" +
    "\uffa1\001\002\000\006\013\217\023\220\001\002\000\006" +
    "\013\uffa2\023\uffa2\001\002\000\074\002\uffa4\006\uffa4\007" +
    "\uffa4\011\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\026\uffa4\031\uffa4\033\uffa4\034\uffa4\037\uffa4\041\uffa4\044" +
    "\uffa4\045\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4" +
    "\111\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\122\uffa4\124" +
    "\uffa4\001\002\000\006\004\322\100\323\001\002\000\014" +
    "\017\266\020\262\021\265\022\260\025\270\001\002\000" +
    "\004\011\255\001\002\000\012\012\254\013\ufef0\016\ufef0" +
    "\023\ufef0\001\002\000\010\013\ufef1\016\ufef1\023\ufef1\001" +
    "\002\000\014\017\266\020\262\021\265\022\260\025\uff70" +
    "\001\002\000\004\016\315\001\002\000\014\017\266\020" +
    "\262\021\265\022\260\025\uff6f\001\002\000\004\016\310" +
    "\001\002\000\014\017\266\020\262\021\265\022\260\025" +
    "\uff6e\001\002\000\014\017\266\020\262\021\265\022\260" +
    "\025\uff6d\001\002\000\004\016\302\001\002\000\004\016" +
    "\276\001\002\000\004\025\273\001\002\000\004\023\100" +
    "\001\002\000\004\023\272\001\002\000\054\002\uff7e\006" +
    "\uff7e\007\uff7e\011\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e" +
    "\023\uff7e\031\uff7e\037\uff7e\041\uff7e\044\uff7e\045\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\055\uff7e\056\uff7e\111\uff7e\124\uff7e" +
    "\001\002\000\004\023\100\001\002\000\006\013\217\023" +
    "\220\001\002\000\054\002\uff82\006\uff82\007\uff82\011\uff82" +
    "\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\031\uff82\037" +
    "\uff82\041\uff82\044\uff82\045\uff82\051\uff82\052\uff82\053\uff82" +
    "\055\uff82\056\uff82\111\uff82\124\uff82\001\002\000\004\011" +
    "\277\001\002\000\016\012\300\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\025\uff7b\001\002\000\004\017\266\001\002\000" +
    "\014\017\uff7c\020\uff7c\021\uff7c\022\uff7c\025\uff7c\001\002" +
    "\000\004\011\303\001\002\000\016\012\304\017\uff75\020" +
    "\uff75\021\uff75\022\uff75\025\uff75\001\002\000\004\021\265" +
    "\001\002\000\014\017\uff76\020\uff76\021\uff76\022\uff76\025" +
    "\uff76\001\002\000\004\025\uff71\001\002\000\004\025\uff72" +
    "\001\002\000\004\011\311\001\002\000\016\012\312\017" +
    "\uff77\020\uff77\021\uff77\022\uff77\025\uff77\001\002\000\004" +
    "\020\262\001\002\000\014\017\uff78\020\uff78\021\uff78\022" +
    "\uff78\025\uff78\001\002\000\004\025\uff73\001\002\000\004" +
    "\011\316\001\002\000\016\012\317\017\uff79\020\uff79\021" +
    "\uff79\022\uff79\025\uff79\001\002\000\004\022\260\001\002" +
    "\000\014\017\uff7a\020\uff7a\021\uff7a\022\uff7a\025\uff7a\001" +
    "\002\000\004\025\uff74\001\002\000\004\100\325\001\002" +
    "\000\006\013\217\023\220\001\002\000\054\002\uff00\006" +
    "\uff00\007\uff00\011\uff00\017\uff00\020\uff00\021\uff00\022\uff00" +
    "\023\uff00\031\uff00\037\uff00\041\uff00\044\uff00\045\uff00\051" +
    "\uff00\052\uff00\053\uff00\055\uff00\056\uff00\111\uff00\124\uff00" +
    "\001\002\000\004\016\326\001\002\000\004\015\327\001" +
    "\002\000\004\101\330\001\002\000\004\016\331\001\002" +
    "\000\004\010\333\001\002\000\004\102\340\001\002\000" +
    "\006\012\335\016\334\001\002\000\004\102\uff04\001\002" +
    "\000\004\016\336\001\002\000\004\010\333\001\002\000" +
    "\004\102\uff03\001\002\000\006\013\217\023\220\001\002" +
    "\000\054\002\uff0b\006\uff0b\007\uff0b\011\uff0b\017\uff0b\020" +
    "\uff0b\021\uff0b\022\uff0b\023\uff0b\031\uff0b\037\uff0b\041\uff0b" +
    "\044\uff0b\045\uff0b\051\uff0b\052\uff0b\053\uff0b\055\uff0b\056" +
    "\uff0b\111\uff0b\124\uff0b\001\002\000\006\011\350\103\351" +
    "\001\002\000\004\015\344\001\002\000\004\024\345\001" +
    "\002\000\004\025\346\001\002\000\006\013\217\023\220" +
    "\001\002\000\054\002\uff54\006\uff54\007\uff54\011\uff54\017" +
    "\uff54\020\uff54\021\uff54\022\uff54\023\uff54\031\uff54\037\uff54" +
    "\041\uff54\044\uff54\045\uff54\051\uff54\052\uff54\053\uff54\055" +
    "\uff54\056\uff54\111\uff54\124\uff54\001\002\000\004\016\354" +
    "\001\002\000\004\016\352\001\002\000\004\031\353\001" +
    "\002\000\004\023\uffe0\001\002\000\004\015\355\001\002" +
    "\000\004\016\356\001\002\000\004\057\357\001\002\000" +
    "\004\031\360\001\002\000\004\024\361\001\002\000\014" +
    "\004\362\005\367\010\365\014\363\025\370\001\002\000" +
    "\012\012\ufeeb\013\ufeeb\023\ufeeb\025\ufeeb\001\002\000\012" +
    "\012\ufeea\013\ufeea\023\ufeea\025\ufeea\001\002\000\004\012" +
    "\374\001\002\000\012\012\ufee9\013\ufee9\023\ufee9\025\ufee9" +
    "\001\002\000\004\025\372\001\002\000\012\012\ufee8\013" +
    "\ufee8\023\ufee8\025\ufee8\001\002\000\006\013\217\023\220" +
    "\001\002\000\054\002\uff58\006\uff58\007\uff58\011\uff58\017" +
    "\uff58\020\uff58\021\uff58\022\uff58\023\uff58\031\uff58\037\uff58" +
    "\041\uff58\044\uff58\045\uff58\051\uff58\052\uff58\053\uff58\055" +
    "\uff58\056\uff58\111\uff58\124\uff58\001\002\000\006\013\217" +
    "\023\220\001\002\000\054\002\uff57\006\uff57\007\uff57\011" +
    "\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57\031\uff57" +
    "\037\uff57\041\uff57\044\uff57\045\uff57\051\uff57\052\uff57\053" +
    "\uff57\055\uff57\056\uff57\111\uff57\124\uff57\001\002\000\004" +
    "\016\375\001\002\000\012\004\362\005\367\010\365\014" +
    "\363\001\002\000\004\025\uff52\001\002\000\056\002\uff89" +
    "\006\uff89\007\uff89\011\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\026\uff89\031\uff89\037\uff89\041\uff89\044\uff89" +
    "\045\uff89\051\uff89\052\uff89\053\uff89\055\uff89\056\uff89\111" +
    "\uff89\124\uff89\001\002\000\016\012\254\013\ufef0\016\ufef0" +
    "\023\ufef0\024\u0112\077\u0113\001\002\000\010\013\217\016" +
    "\u0108\023\220\001\002\000\004\024\u0103\001\002\000\004" +
    "\022\007\001\002\000\004\011\u0105\001\002\000\004\025" +
    "\u0106\001\002\000\006\013\217\023\220\001\002\000\054" +
    "\002\uff1e\006\uff1e\007\uff1e\011\uff1e\017\uff1e\020\uff1e\021" +
    "\uff1e\022\uff1e\023\uff1e\031\uff1e\037\uff1e\041\uff1e\044\uff1e" +
    "\045\uff1e\051\uff1e\052\uff1e\053\uff1e\055\uff1e\056\uff1e\111" +
    "\uff1e\124\uff1e\001\002\000\004\015\u010a\001\002\000\074" +
    "\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\026\uffb3\031\uffb3\033\uffb3\034\uffb3" +
    "\037\uffb3\041\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\055\uffb3\056\uffb3\111\uffb3\116\uffb3\117\uffb3\120\uffb3" +
    "\121\uffb3\122\uffb3\124\uffb3\001\002\000\004\016\u010b\001" +
    "\002\000\012\004\u010e\005\u0110\010\u010f\014\u010d\001\002" +
    "\000\006\013\217\023\220\001\002\000\006\013\uffad\023" +
    "\uffad\001\002\000\006\013\uffaf\023\uffaf\001\002\000\006" +
    "\013\uffac\023\uffac\001\002\000\006\013\uffae\023\uffae\001" +
    "\002\000\074\002\uffb0\006\uffb0\007\uffb0\011\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\031\uffb0\033" +
    "\uffb0\034\uffb0\037\uffb0\041\uffb0\044\uffb0\045\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\055\uffb0\056\uffb0\111\uffb0\116\uffb0\117" +
    "\uffb0\120\uffb0\121\uffb0\122\uffb0\124\uffb0\001\002\000\014" +
    "\017\266\020\262\021\265\022\260\025\u0125\001\002\000" +
    "\006\004\u0114\100\u0115\001\002\000\004\100\u0117\001\002" +
    "\000\006\013\217\023\220\001\002\000\054\002\uff02\006" +
    "\uff02\007\uff02\011\uff02\017\uff02\020\uff02\021\uff02\022\uff02" +
    "\023\uff02\031\uff02\037\uff02\041\uff02\044\uff02\045\uff02\051" +
    "\uff02\052\uff02\053\uff02\055\uff02\056\uff02\111\uff02\124\uff02" +
    "\001\002\000\004\016\u0118\001\002\000\004\015\u0119\001" +
    "\002\000\004\101\u011a\001\002\000\004\016\u011b\001\002" +
    "\000\004\004\u011c\001\002\000\006\012\u0121\016\u0120\001" +
    "\002\000\004\102\u011e\001\002\000\006\013\217\023\220" +
    "\001\002\000\054\002\uff0e\006\uff0e\007\uff0e\011\uff0e\017" +
    "\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\031\uff0e\037\uff0e" +
    "\041\uff0e\044\uff0e\045\uff0e\051\uff0e\052\uff0e\053\uff0e\055" +
    "\uff0e\056\uff0e\111\uff0e\124\uff0e\001\002\000\004\102\uff0a" +
    "\001\002\000\004\016\u0122\001\002\000\004\004\u011c\001" +
    "\002\000\004\102\uff09\001\002\000\004\025\u0128\001\002" +
    "\000\004\023\100\001\002\000\004\023\u0127\001\002\000" +
    "\054\002\uff80\006\uff80\007\uff80\011\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\023\uff80\031\uff80\037\uff80\041\uff80\044" +
    "\uff80\045\uff80\051\uff80\052\uff80\053\uff80\055\uff80\056\uff80" +
    "\111\uff80\124\uff80\001\002\000\004\023\100\001\002\000" +
    "\006\013\217\023\220\001\002\000\054\002\uff84\006\uff84" +
    "\007\uff84\011\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\031\uff84\037\uff84\041\uff84\044\uff84\045\uff84\051\uff84" +
    "\052\uff84\053\uff84\055\uff84\056\uff84\111\uff84\124\uff84\001" +
    "\002\000\014\017\266\020\262\021\265\022\260\025\u012d" +
    "\001\002\000\004\025\u0138\001\002\000\004\023\u012e\001" +
    "\002\000\004\026\107\001\002\000\054\002\uff13\006\uff13" +
    "\007\uff13\011\uff13\017\uff13\020\uff13\021\uff13\022\uff13\023" +
    "\uff13\031\uff13\037\uff13\041\uff13\044\uff13\045\uff13\051\uff13" +
    "\052\uff13\053\uff13\055\uff13\056\uff13\111\uff13\124\uff13\001" +
    "\002\000\004\011\u0131\001\002\000\004\016\u0132\001\002" +
    "\000\004\015\u0133\001\002\000\004\016\u0134\001\002\000" +
    "\004\011\u0135\001\002\000\006\013\217\023\220\001\002" +
    "\000\056\002\uff10\006\uff10\007\uff10\011\uff10\017\uff10\020" +
    "\uff10\021\uff10\022\uff10\023\uff10\026\107\031\uff10\037\uff10" +
    "\041\uff10\044\uff10\045\uff10\051\uff10\052\uff10\053\uff10\055" +
    "\uff10\056\uff10\111\uff10\124\uff10\001\002\000\054\002\uff0f" +
    "\006\uff0f\007\uff0f\011\uff0f\017\uff0f\020\uff0f\021\uff0f\022" +
    "\uff0f\023\uff0f\031\uff0f\037\uff0f\041\uff0f\044\uff0f\045\uff0f" +
    "\051\uff0f\052\uff0f\053\uff0f\055\uff0f\056\uff0f\111\uff0f\124" +
    "\uff0f\001\002\000\004\023\u0139\001\002\000\004\026\107" +
    "\001\002\000\054\002\uff14\006\uff14\007\uff14\011\uff14\017" +
    "\uff14\020\uff14\021\uff14\022\uff14\023\uff14\031\uff14\037\uff14" +
    "\041\uff14\044\uff14\045\uff14\051\uff14\052\uff14\053\uff14\055" +
    "\uff14\056\uff14\111\uff14\124\uff14\001\002\000\016\012\254" +
    "\013\ufef0\016\ufef0\023\ufef0\024\u0144\077\u0143\001\002\000" +
    "\010\013\217\016\u013d\023\220\001\002\000\004\015\u013f" +
    "\001\002\000\074\002\uffab\006\uffab\007\uffab\011\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab\031\uffab" +
    "\033\uffab\034\uffab\037\uffab\041\uffab\044\uffab\045\uffab\051" +
    "\uffab\052\uffab\053\uffab\055\uffab\056\uffab\111\uffab\116\uffab" +
    "\117\uffab\120\uffab\121\uffab\122\uffab\124\uffab\001\002\000" +
    "\004\016\u0140\001\002\000\004\014\u0141\001\002\000\006" +
    "\013\217\023\220\001\002\000\074\002\uffa8\006\uffa8\007" +
    "\uffa8\011\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\026\uffa8\031\uffa8\033\uffa8\034\uffa8\037\uffa8\041\uffa8\044" +
    "\uffa8\045\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\111\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\124" +
    "\uffa8\001\002\000\006\004\u014c\100\u014d\001\002\000\014" +
    "\017\266\020\262\021\265\022\260\025\u0146\001\002\000" +
    "\004\025\u0149\001\002\000\004\023\100\001\002\000\004" +
    "\023\u0148\001\002\000\054\002\uff7f\006\uff7f\007\uff7f\011" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\031\uff7f" +
    "\037\uff7f\041\uff7f\044\uff7f\045\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\055\uff7f\056\uff7f\111\uff7f\124\uff7f\001\002\000\004" +
    "\023\100\001\002\000\006\013\217\023\220\001\002\000" +
    "\054\002\uff83\006\uff83\007\uff83\011\uff83\017\uff83\020\uff83" +
    "\021\uff83\022\uff83\023\uff83\031\uff83\037\uff83\041\uff83\044" +
    "\uff83\045\uff83\051\uff83\052\uff83\053\uff83\055\uff83\056\uff83" +
    "\111\uff83\124\uff83\001\002\000\004\100\u014f\001\002\000" +
    "\006\013\217\023\220\001\002\000\054\002\ufeff\006\ufeff" +
    "\007\ufeff\011\ufeff\017\ufeff\020\ufeff\021\ufeff\022\ufeff\023" +
    "\ufeff\031\ufeff\037\ufeff\041\ufeff\044\ufeff\045\ufeff\051\ufeff" +
    "\052\ufeff\053\ufeff\055\ufeff\056\ufeff\111\ufeff\124\ufeff\001" +
    "\002\000\004\016\u0150\001\002\000\004\015\u0151\001\002" +
    "\000\004\101\u0152\001\002\000\004\016\u0153\001\002\000" +
    "\004\014\u0154\001\002\000\006\012\u0159\016\u0158\001\002" +
    "\000\004\102\u0156\001\002\000\006\013\217\023\220\001" +
    "\002\000\054\002\uff0c\006\uff0c\007\uff0c\011\uff0c\017\uff0c" +
    "\020\uff0c\021\uff0c\022\uff0c\023\uff0c\031\uff0c\037\uff0c\041" +
    "\uff0c\044\uff0c\045\uff0c\051\uff0c\052\uff0c\053\uff0c\055\uff0c" +
    "\056\uff0c\111\uff0c\124\uff0c\001\002\000\004\102\uff06\001" +
    "\002\000\004\016\u015a\001\002\000\004\014\u0154\001\002" +
    "\000\004\102\uff05\001\002\000\016\006\017\007\023\026" +
    "\u015e\041\025\055\057\056\033\001\002\000\004\026\u021b" +
    "\001\002\000\022\033\u015f\034\u0160\115\u0168\116\u0167\117" +
    "\u0163\120\u0165\121\u0162\122\u0161\001\002\000\006\016\u01ed" +
    "\023\u01ee\001\002\000\006\016\u01bf\023\u01c0\001\002\000" +
    "\004\023\u01bb\001\002\000\004\023\u01b2\001\002\000\004" +
    "\023\u01ae\001\002\000\054\002\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\031\uffe8" +
    "\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\055\uffe8\056\uffe8\111\uffe8\124\uffe8\001\002\000\004" +
    "\023\u019b\001\002\000\064\002\uffe9\006\uffe9\007\uffe9\011" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\031\uffe9" +
    "\034\u0160\037\uffe9\041\uffe9\044\uffe9\045\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\055\uffe9\056\uffe9\111\uffe9\120\u0165\121\u0162" +
    "\122\u0161\124\uffe9\001\002\000\004\023\u0191\001\002\000" +
    "\004\023\u0169\001\002\000\004\026\u016a\001\002\000\004" +
    "\026\u016b\001\002\000\014\017\u0170\020\006\021\037\022" +
    "\007\124\036\001\002\000\004\011\255\001\002\000\074" +
    "\002\uffbb\006\uffbb\007\uffbb\011\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\026\u018e\031\uffbb\033\uffbb\034\uffbb" +
    "\037\uffbb\041\uffbb\044\uffbb\045\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\055\uffbb\056\uffbb\111\uffbb\116\uffbb\117\uffbb\120\uffbb" +
    "\121\uffbb\122\uffbb\124\uffbb\001\002\000\004\011\255\001" +
    "\002\000\004\011\255\001\002\000\004\016\u0182\001\002" +
    "\000\070\002\uffc5\006\uffc5\007\uffc5\011\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\031\uffc5\034\uffc5\037\uffc5" +
    "\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\053\uffc5\055" +
    "\uffc5\056\uffc5\111\uffc5\116\u0173\117\u0174\120\uffc5\121\uffc5" +
    "\122\uffc5\124\uffc5\001\002\000\004\011\255\001\002\000" +
    "\004\023\u0179\001\002\000\004\023\u0175\001\002\000\004" +
    "\026\u0176\001\002\000\004\026\u0177\001\002\000\014\017" +
    "\u0170\020\006\021\037\022\007\124\036\001\002\000\064" +
    "\002\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\031\uffc7\034\uffc7\037\uffc7\041\uffc7" +
    "\044\uffc7\045\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056" +
    "\uffc7\111\uffc7\120\uffc7\121\uffc7\122\uffc7\124\uffc7\001\002" +
    "\000\004\026\u017a\001\002\000\004\026\u017b\001\002\000" +
    "\014\017\u0170\020\006\021\037\022\007\124\036\001\002" +
    "\000\066\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\031\uffc8\034\uffc8\037\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\051\uffc8\052\uffc8\053\uffc8\055" +
    "\uffc8\056\uffc8\111\uffc8\117\u017d\120\uffc8\121\uffc8\122\uffc8" +
    "\124\uffc8\001\002\000\004\023\u017e\001\002\000\004\026" +
    "\u017f\001\002\000\004\026\u0180\001\002\000\014\017\u0170" +
    "\020\006\021\037\022\007\124\036\001\002\000\064\002" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\031\uffc9\034\uffc9\037\uffc9\041\uffc9\044" +
    "\uffc9\045\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9" +
    "\111\uffc9\120\uffc9\121\uffc9\122\uffc9\124\uffc9\001\002\000" +
    "\004\011\ufef5\001\002\000\010\013\217\016\u0184\023\220" +
    "\001\002\000\004\015\u0186\001\002\000\074\002\uffa0\006" +
    "\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\026\uffa0\031\uffa0\033\uffa0\034\uffa0\037\uffa0\041" +
    "\uffa0\044\uffa0\045\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\111\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\122" +
    "\uffa0\124\uffa0\001\002\000\004\016\u0187\001\002\000\012" +
    "\004\u0189\005\u018c\010\u018a\014\u0188\001\002\000\006\013" +
    "\uff9a\023\uff9a\001\002\000\006\013\uff9c\023\uff9c\001\002" +
    "\000\006\013\uff99\023\uff99\001\002\000\006\013\217\023" +
    "\220\001\002\000\006\013\uff9b\023\uff9b\001\002\000\074" +
    "\002\uff9d\006\uff9d\007\uff9d\011\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\026\uff9d\031\uff9d\033\uff9d\034\uff9d" +
    "\037\uff9d\041\uff9d\044\uff9d\045\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\055\uff9d\056\uff9d\111\uff9d\116\uff9d\117\uff9d\120\uff9d" +
    "\121\uff9d\122\uff9d\124\uff9d\001\002\000\074\002\uffba\006" +
    "\uffba\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\026\u018f\031\uffba\033\uffba\034\uffba\037\uffba\041" +
    "\uffba\044\uffba\045\uffba\051\uffba\052\uffba\053\uffba\055\uffba" +
    "\056\uffba\111\uffba\116\uffba\117\uffba\120\uffba\121\uffba\122" +
    "\uffba\124\uffba\001\002\000\014\017\u0170\020\006\021\037" +
    "\022\007\124\036\001\002\000\072\002\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\037\uffb9\041\uffb9\044\uffb9\045" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\111\uffb9" +
    "\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\124\uffb9\001" +
    "\002\000\004\026\u0192\001\002\000\004\026\u0193\001\002" +
    "\000\014\017\u0170\020\006\021\037\022\007\124\036\001" +
    "\002\000\066\002\uffc4\006\uffc4\007\uffc4\011\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\031\uffc4\034\uffc4\037" +
    "\uffc4\041\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\055\uffc4\056\uffc4\111\uffc4\117\u0195\120\uffc4\121\uffc4\122" +
    "\uffc4\124\uffc4\001\002\000\004\023\u0196\001\002\000\004" +
    "\026\u0197\001\002\000\004\026\u0198\001\002\000\014\017" +
    "\u0170\020\006\021\037\022\007\124\036\001\002\000\064" +
    "\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\031\uffc6\034\uffc6\037\uffc6\041\uffc6" +
    "\044\uffc6\045\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\111\uffc6\120\uffc6\121\uffc6\122\uffc6\124\uffc6\001\002" +
    "\000\054\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\037\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\111\uffe7\124\uffe7\001\002\000\004\026\u019c\001\002" +
    "\000\004\026\u019d\001\002\000\014\017\u0170\020\006\021" +
    "\037\022\007\124\036\001\002\000\060\002\uffd0\006\uffd0" +
    "\007\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\031\uffd0\037\uffd0\041\uffd0\044\uffd0\045\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\055\uffd0\056\uffd0\111\uffd0\121\u019f\122" +
    "\u01a0\124\uffd0\001\002\000\004\023\u01a5\001\002\000\004" +
    "\023\u01a1\001\002\000\004\026\u01a2\001\002\000\004\026" +
    "\u01a3\001\002\000\014\017\u0170\020\006\021\037\022\007" +
    "\124\036\001\002\000\054\002\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\031\uffd2" +
    "\037\uffd2\041\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\056\uffd2\111\uffd2\124\uffd2\001\002\000\004" +
    "\026\u01a6\001\002\000\004\026\u01a7\001\002\000\014\017" +
    "\u0170\020\006\021\037\022\007\124\036\001\002\000\056" +
    "\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\031\uffd3\037\uffd3\041\uffd3\044\uffd3" +
    "\045\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3\056\uffd3\111" +
    "\uffd3\122\u01a9\124\uffd3\001\002\000\004\023\u01aa\001\002" +
    "\000\004\026\u01ab\001\002\000\004\026\u01ac\001\002\000" +
    "\014\017\u0170\020\006\021\037\022\007\124\036\001\002" +
    "\000\054\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\037\uffd4\041\uffd4" +
    "\044\uffd4\045\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4\056" +
    "\uffd4\111\uffd4\124\uffd4\001\002\000\004\026\u01af\001\002" +
    "\000\004\026\u01b0\001\002\000\014\017\u0170\020\006\021" +
    "\037\022\007\124\036\001\002\000\064\002\uffc3\006\uffc3" +
    "\007\uffc3\011\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\031\uffc3\034\uffc3\037\uffc3\041\uffc3\044\uffc3\045\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056\uffc3\111\uffc3\120" +
    "\uffc3\121\uffc3\122\uffc3\124\uffc3\001\002\000\004\026\u01b3" +
    "\001\002\000\004\026\u01b4\001\002\000\014\017\u0170\020" +
    "\006\021\037\022\007\124\036\001\002\000\056\002\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\031\uffcf\037\uffcf\041\uffcf\044\uffcf\045\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\111\uffcf\122" +
    "\u01b6\124\uffcf\001\002\000\004\023\u01b7\001\002\000\004" +
    "\026\u01b8\001\002\000\004\026\u01b9\001\002\000\014\017" +
    "\u0170\020\006\021\037\022\007\124\036\001\002\000\054" +
    "\002\uffd1\006\uffd1\007\uffd1\011\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\031\uffd1\037\uffd1\041\uffd1\044\uffd1" +
    "\045\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111" +
    "\uffd1\124\uffd1\001\002\000\004\026\u01bc\001\002\000\004" +
    "\026\u01bd\001\002\000\014\017\u0170\020\006\021\037\022" +
    "\007\124\036\001\002\000\054\002\uffce\006\uffce\007\uffce" +
    "\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\031" +
    "\uffce\037\uffce\041\uffce\044\uffce\045\uffce\051\uffce\052\uffce" +
    "\053\uffce\055\uffce\056\uffce\111\uffce\124\uffce\001\002\000" +
    "\010\120\u01c6\121\u01c4\122\u01c5\001\002\000\004\026\u01c1" +
    "\001\002\000\004\026\u01c2\001\002\000\014\017\u0170\020" +
    "\006\021\037\022\007\124\036\001\002\000\054\002\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\031\uffd5\037\uffd5\041\uffd5\044\uffd5\045\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\111\uffd5\124" +
    "\uffd5\001\002\000\004\023\u01e2\001\002\000\004\023\u01de" +
    "\001\002\000\004\023\u01c7\001\002\000\056\002\uffdf\006" +
    "\uffdf\007\uffdf\011\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\026\u01c8\031\uffdf\037\uffdf\041\uffdf\044\uffdf\045" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf\111\uffdf" +
    "\124\uffdf\001\002\000\004\026\u01c9\001\002\000\014\017" +
    "\u0170\020\006\021\037\022\007\124\036\001\002\000\056" +
    "\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\031\uffd8\034\u01cb\037\uffd8\041\uffd8" +
    "\044\uffd8\045\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056" +
    "\uffd8\111\uffd8\124\uffd8\001\002\000\004\016\u01cc\001\002" +
    "\000\006\121\u01cd\122\u01ce\001\002\000\004\023\u01d3\001" +
    "\002\000\004\023\u01cf\001\002\000\004\026\u01d0\001\002" +
    "\000\004\026\u01d1\001\002\000\014\017\u0170\020\006\021" +
    "\037\022\007\124\036\001\002\000\054\002\uffda\006\uffda" +
    "\007\uffda\011\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\031\uffda\037\uffda\041\uffda\044\uffda\045\uffda\051\uffda" +
    "\052\uffda\053\uffda\055\uffda\056\uffda\111\uffda\124\uffda\001" +
    "\002\000\004\026\u01d4\001\002\000\004\026\u01d5\001\002" +
    "\000\014\017\u0170\020\006\021\037\022\007\124\036\001" +
    "\002\000\056\002\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\031\uffdb\034\u01d7\037" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb\052\uffdb\053\uffdb" +
    "\055\uffdb\056\uffdb\111\uffdb\124\uffdb\001\002\000\004\016" +
    "\u01d8\001\002\000\004\122\u01d9\001\002\000\004\023\u01da" +
    "\001\002\000\004\026\u01db\001\002\000\004\026\u01dc\001" +
    "\002\000\014\017\u0170\020\006\021\037\022\007\124\036" +
    "\001\002\000\054\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\031\uffdc\037\uffdc" +
    "\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\111\uffdc\124\uffdc\001\002\000\056\002\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\026\u01df\031\uffdd\037\uffdd\041\uffdd\044\uffdd" +
    "\045\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\111" +
    "\uffdd\124\uffdd\001\002\000\004\026\u01e0\001\002\000\014" +
    "\017\u0170\020\006\021\037\022\007\124\036\001\002\000" +
    "\054\002\uffd6\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\031\uffd6\037\uffd6\041\uffd6\044" +
    "\uffd6\045\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\111\uffd6\124\uffd6\001\002\000\056\002\uffde\006\uffde\007" +
    "\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\u01e3\031\uffde\037\uffde\041\uffde\044\uffde\045\uffde\051" +
    "\uffde\052\uffde\053\uffde\055\uffde\056\uffde\111\uffde\124\uffde" +
    "\001\002\000\004\026\u01e4\001\002\000\014\017\u0170\020" +
    "\006\021\037\022\007\124\036\001\002\000\056\002\uffd7" +
    "\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\031\uffd7\034\u01e6\037\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\111" +
    "\uffd7\124\uffd7\001\002\000\004\016\u01e7\001\002\000\004" +
    "\122\u01e8\001\002\000\004\023\u01e9\001\002\000\004\026" +
    "\u01ea\001\002\000\004\026\u01eb\001\002\000\014\017\u0170" +
    "\020\006\021\037\022\007\124\036\001\002\000\054\002" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\031\uffd9\037\uffd9\041\uffd9\044\uffd9\045" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\111\uffd9" +
    "\124\uffd9\001\002\000\010\115\u01f2\116\u01f3\117\u01f4\001" +
    "\002\000\004\026\u01ef\001\002\000\004\026\u01f0\001\002" +
    "\000\014\017\u0170\020\006\021\037\022\007\124\036\001" +
    "\002\000\064\002\uffca\006\uffca\007\uffca\011\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\031\uffca\034\uffca\037" +
    "\uffca\041\uffca\044\uffca\045\uffca\051\uffca\052\uffca\053\uffca" +
    "\055\uffca\056\uffca\111\uffca\120\uffca\121\uffca\122\uffca\124" +
    "\uffca\001\002\000\004\023\u0204\001\002\000\004\023\u01f9" +
    "\001\002\000\004\023\u01f5\001\002\000\066\002\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\026\u01f6\031\uffcb\034\uffcb\037\uffcb\041\uffcb\044" +
    "\uffcb\045\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb" +
    "\111\uffcb\120\uffcb\121\uffcb\122\uffcb\124\uffcb\001\002\000" +
    "\004\026\u01f7\001\002\000\014\017\u0170\020\006\021\037" +
    "\022\007\124\036\001\002\000\064\002\uffbc\006\uffbc\007" +
    "\uffbc\011\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\031\uffbc\034\uffbc\037\uffbc\041\uffbc\044\uffbc\045\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\111\uffbc\120\uffbc" +
    "\121\uffbc\122\uffbc\124\uffbc\001\002\000\066\002\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\026\u01fa\031\uffcc\034\uffcc\037\uffcc\041\uffcc\044" +
    "\uffcc\045\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\111\uffcc\120\uffcc\121\uffcc\122\uffcc\124\uffcc\001\002\000" +
    "\004\026\u01fb\001\002\000\014\017\u0170\020\006\021\037" +
    "\022\007\124\036\001\002\000\066\002\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\031\uffbd\033\u01fd\034\uffbd\037\uffbd\041\uffbd\044\uffbd\045" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd\111\uffbd" +
    "\120\uffbd\121\uffbd\122\uffbd\124\uffbd\001\002\000\004\016" +
    "\u01fe\001\002\000\004\117\u01ff\001\002\000\004\023\u0200" +
    "\001\002\000\004\026\u0201\001\002\000\004\026\u0202\001" +
    "\002\000\014\017\u0170\020\006\021\037\022\007\124\036" +
    "\001\002\000\064\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\031\uffbf\034\uffbf" +
    "\037\uffbf\041\uffbf\044\uffbf\045\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\111\uffbf\120\uffbf\121\uffbf\122\uffbf" +
    "\124\uffbf\001\002\000\066\002\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\026\u0205" +
    "\031\uffcd\034\uffcd\037\uffcd\041\uffcd\044\uffcd\045\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\111\uffcd\120\uffcd" +
    "\121\uffcd\122\uffcd\124\uffcd\001\002\000\004\026\u0206\001" +
    "\002\000\014\017\u0170\020\006\021\037\022\007\124\036" +
    "\001\002\000\066\002\uffbe\006\uffbe\007\uffbe\011\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\031\uffbe\033\u0208" +
    "\034\uffbe\037\uffbe\041\uffbe\044\uffbe\045\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\055\uffbe\056\uffbe\111\uffbe\120\uffbe\121\uffbe" +
    "\122\uffbe\124\uffbe\001\002\000\004\016\u0209\001\002\000" +
    "\006\116\u020a\117\u020b\001\002\000\004\023\u0210\001\002" +
    "\000\004\023\u020c\001\002\000\004\026\u020d\001\002\000" +
    "\004\026\u020e\001\002\000\014\017\u0170\020\006\021\037" +
    "\022\007\124\036\001\002\000\064\002\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\031\uffc0\034\uffc0\037\uffc0\041\uffc0\044\uffc0\045\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\111\uffc0\120\uffc0" +
    "\121\uffc0\122\uffc0\124\uffc0\001\002\000\004\026\u0211\001" +
    "\002\000\004\026\u0212\001\002\000\014\017\u0170\020\006" +
    "\021\037\022\007\124\036\001\002\000\066\002\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\031\uffc1\033\u0214\034\uffc1\037\uffc1\041\uffc1\044" +
    "\uffc1\045\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\111\uffc1\120\uffc1\121\uffc1\122\uffc1\124\uffc1\001\002\000" +
    "\004\016\u0215\001\002\000\004\117\u0216\001\002\000\004" +
    "\023\u0217\001\002\000\004\026\u0218\001\002\000\004\026" +
    "\u0219\001\002\000\014\017\u0170\020\006\021\037\022\007" +
    "\124\036\001\002\000\064\002\uffc2\006\uffc2\007\uffc2\011" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\031\uffc2" +
    "\034\uffc2\037\uffc2\041\uffc2\044\uffc2\045\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\055\uffc2\056\uffc2\111\uffc2\120\uffc2\121\uffc2" +
    "\122\uffc2\124\uffc2\001\002\000\022\033\u015f\034\u0160\115" +
    "\u0168\116\u0167\117\u0163\120\u0165\121\u0162\122\u0161\001\002" +
    "\000\054\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\031\uffe5\037\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056" +
    "\uffe5\111\uffe5\124\uffe5\001\002\000\064\002\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\031\uffe6\034\u0160\037\uffe6\041\uffe6\044\uffe6\045\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\111\uffe6\120" +
    "\u0165\121\u0162\122\u0161\124\uffe6\001\002\000\054\002\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\031\uffe4\037\uffe4\041\uffe4\044\uffe4\045\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\111\uffe4\124" +
    "\uffe4\001\002\000\004\002\ufffe\001\002\000\020\011\ufef4" +
    "\066\ufef4\070\ufef4\071\ufef4\072\ufef4\073\ufef4\074\ufef4\001" +
    "\002\000\012\017\u0170\020\006\021\037\022\007\001\002" +
    "\000\004\011\255\001\002\000\004\011\255\001\002\000" +
    "\004\011\255\001\002\000\004\011\255\001\002\000\010" +
    "\013\217\016\u0227\023\220\001\002\000\004\015\u0229\001" +
    "\002\000\074\002\uffb2\006\uffb2\007\uffb2\011\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\037\uffb2\041\uffb2\044\uffb2\045\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\055\uffb2\056\uffb2\111\uffb2\116\uffb2\117" +
    "\uffb2\120\uffb2\121\uffb2\122\uffb2\124\uffb2\001\002\000\004" +
    "\016\u022a\001\002\000\012\004\u010e\005\u0110\010\u010f\014" +
    "\u010d\001\002\000\006\013\217\023\220\001\002\000\074" +
    "\002\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1" +
    "\037\uffb1\041\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\055\uffb1\056\uffb1\111\uffb1\116\uffb1\117\uffb1\120\uffb1" +
    "\121\uffb1\122\uffb1\124\uffb1\001\002\000\010\013\217\016" +
    "\u022e\023\220\001\002\000\004\015\u0230\001\002\000\074" +
    "\002\uffaa\006\uffaa\007\uffaa\011\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\026\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\037\uffaa\041\uffaa\044\uffaa\045\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\111\uffaa\116\uffaa\117\uffaa\120\uffaa" +
    "\121\uffaa\122\uffaa\124\uffaa\001\002\000\004\016\u0231\001" +
    "\002\000\004\014\u0232\001\002\000\006\013\217\023\220" +
    "\001\002\000\074\002\uffa9\006\uffa9\007\uffa9\011\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\031\uffa9" +
    "\033\uffa9\034\uffa9\037\uffa9\041\uffa9\044\uffa9\045\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\111\uffa9\116\uffa9" +
    "\117\uffa9\120\uffa9\121\uffa9\122\uffa9\124\uffa9\001\002\000" +
    "\010\013\217\016\u0235\023\220\001\002\000\004\015\u0237" +
    "\001\002\000\074\002\uff9f\006\uff9f\007\uff9f\011\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\037\uff9f\041\uff9f\044\uff9f\045\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\111\uff9f\116\uff9f" +
    "\117\uff9f\120\uff9f\121\uff9f\122\uff9f\124\uff9f\001\002\000" +
    "\004\016\u0238\001\002\000\012\004\u0189\005\u018c\010\u018a" +
    "\014\u0188\001\002\000\006\013\217\023\220\001\002\000" +
    "\074\002\uff9e\006\uff9e\007\uff9e\011\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\026\uff9e\031\uff9e\033\uff9e\034" +
    "\uff9e\037\uff9e\041\uff9e\044\uff9e\045\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\055\uff9e\056\uff9e\111\uff9e\116\uff9e\117\uff9e\120" +
    "\uff9e\121\uff9e\122\uff9e\124\uff9e\001\002\000\010\013\217" +
    "\016\u023c\023\220\001\002\000\004\015\u023e\001\002\000" +
    "\074\002\uffa6\006\uffa6\007\uffa6\011\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\026\uffa6\031\uffa6\033\uffa6\034" +
    "\uffa6\037\uffa6\041\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\055\uffa6\056\uffa6\111\uffa6\116\uffa6\117\uffa6\120" +
    "\uffa6\121\uffa6\122\uffa6\124\uffa6\001\002\000\004\016\u023f" +
    "\001\002\000\010\004\245\005\250\010\246\001\002\000" +
    "\006\013\217\023\220\001\002\000\074\002\uffa5\006\uffa5" +
    "\007\uffa5\011\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\026\uffa5\031\uffa5\033\uffa5\034\uffa5\037\uffa5\041\uffa5" +
    "\044\uffa5\045\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056" +
    "\uffa5\111\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5" +
    "\124\uffa5\001\002\000\004\025\u0243\001\002\000\004\023" +
    "\u0244\001\002\000\004\026\107\001\002\000\054\002\uff12" +
    "\006\uff12\007\uff12\011\uff12\017\uff12\020\uff12\021\uff12\022" +
    "\uff12\023\uff12\031\uff12\037\uff12\041\uff12\044\uff12\045\uff12" +
    "\051\uff12\052\uff12\053\uff12\055\uff12\056\uff12\111\uff12\124" +
    "\uff12\001\002\000\004\052\u0247\001\002\000\004\011\u0248" +
    "\001\002\000\006\013\217\023\220\001\002\000\054\002" +
    "\uff11\006\uff11\007\uff11\011\uff11\017\uff11\020\uff11\021\uff11" +
    "\022\uff11\023\uff11\031\uff11\037\uff11\041\uff11\044\uff11\045" +
    "\uff11\051\uff11\052\uff11\053\uff11\055\uff11\056\uff11\111\uff11" +
    "\124\uff11\001\002\000\060\002\ufeee\006\ufeee\007\ufeee\011" +
    "\ufeee\017\ufeee\020\ufeee\021\ufeee\022\ufeee\023\ufeee\026\ufeee" +
    "\031\ufeee\037\ufeee\041\ufeee\044\ufeee\045\ufeee\051\ufeee\052" +
    "\ufeee\053\ufeee\055\ufeee\056\ufeee\106\u024d\111\ufeee\124\ufeee" +
    "\001\002\000\056\002\uff87\006\uff87\007\uff87\011\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\026\uff87\031\uff87" +
    "\037\uff87\041\uff87\044\uff87\045\uff87\051\uff87\052\uff87\053" +
    "\uff87\055\uff87\056\uff87\111\uff87\124\uff87\001\002\000\004" +
    "\105\u0251\001\002\000\006\013\217\023\u024e\001\002\000" +
    "\006\105\ufeee\106\u024d\001\002\000\004\105\uff86\001\002" +
    "\000\004\105\uff85\001\002\000\006\013\217\023\220\001" +
    "\002\000\056\002\uff88\006\uff88\007\uff88\011\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\026\uff88\031\uff88\037" +
    "\uff88\041\uff88\044\uff88\045\uff88\051\uff88\052\uff88\053\uff88" +
    "\055\uff88\056\uff88\111\uff88\124\uff88\001\002\000\006\011" +
    "\u0256\017\u0255\001\002\000\004\015\u027a\001\002\000\004" +
    "\016\u0273\001\002\000\004\016\u0272\001\002\000\004\046" +
    "\u0258\001\002\000\004\016\u0259\001\002\000\006\004\u025a" +
    "\011\u025b\001\002\000\010\013\uff3c\016\uff3c\023\uff3c\001" +
    "\002\000\010\013\uff3d\016\uff3d\023\uff3d\001\002\000\004" +
    "\016\u025d\001\002\000\006\030\u025f\065\u025e\001\002\000" +
    "\004\016\uff45\001\002\000\004\016\uff44\001\002\000\004" +
    "\016\u0261\001\002\000\006\004\u025a\011\u025b\001\002\000" +
    "\004\016\u0263\001\002\000\010\047\u0267\050\u0265\111\u0266" +
    "\001\002\000\004\016\u026c\001\002\000\004\016\uff42\001" +
    "\002\000\006\013\217\023\220\001\002\000\004\016\uff43" +
    "\001\002\000\004\026\107\001\002\000\054\002\uff47\006" +
    "\uff47\007\uff47\011\uff47\017\uff47\020\uff47\021\uff47\022\uff47" +
    "\023\uff47\031\uff47\037\uff47\041\uff47\044\uff47\045\uff47\051" +
    "\uff47\052\uff47\053\uff47\055\uff47\056\uff47\111\uff47\124\uff47" +
    "\001\002\000\004\006\017\001\002\000\054\002\uff46\006" +
    "\uff46\007\uff46\011\uff46\017\uff46\020\uff46\021\uff46\022\uff46" +
    "\023\uff46\031\uff46\037\uff46\041\uff46\044\uff46\045\uff46\051" +
    "\uff46\052\uff46\053\uff46\055\uff46\056\uff46\111\uff46\124\uff46" +
    "\001\002\000\004\004\u026d\001\002\000\004\016\u026e\001" +
    "\002\000\004\111\u026f\001\002\000\006\013\217\023\220" +
    "\001\002\000\004\026\107\001\002\000\054\002\uff48\006" +
    "\uff48\007\uff48\011\uff48\017\uff48\020\uff48\021\uff48\022\uff48" +
    "\023\uff48\031\uff48\037\uff48\041\uff48\044\uff48\045\uff48\051" +
    "\uff48\052\uff48\053\uff48\055\uff48\056\uff48\111\uff48\124\uff48" +
    "\001\002\000\006\015\uff3e\046\uff41\001\002\000\004\011" +
    "\u0274\001\002\000\004\016\u0275\001\002\000\004\015\u0276" +
    "\001\002\000\004\016\u0277\001\002\000\004\004\u0278\001" +
    "\002\000\004\016\u0279\001\002\000\004\046\uff40\001\002" +
    "\000\004\016\u027b\001\002\000\004\004\u027c\001\002\000" +
    "\004\016\u027d\001\002\000\004\046\uff3f\001\002\000\004" +
    "\031\u027f\001\002\000\006\016\u0280\023\uffe3\001\002\000" +
    "\004\103\u0281\001\002\000\004\016\u0282\001\002\000\004" +
    "\031\u0283\001\002\000\004\023\uffe2\001\002\000\006\004" +
    "\u0285\011\u0286\001\002\000\004\016\u029c\001\002\000\004" +
    "\016\u0297\001\002\000\004\016\u0288\001\002\000\004\042" +
    "\u0289\001\002\000\004\023\100\001\002\000\006\013\217" +
    "\023\220\001\002\000\060\002\uff50\006\uff50\007\uff50\011" +
    "\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50\026\uff50" +
    "\031\uff50\037\uff50\041\uff50\043\u028c\044\uff50\045\uff50\051" +
    "\uff50\052\uff50\053\uff50\055\uff50\056\uff50\111\uff50\124\uff50" +
    "\001\002\000\006\016\u028e\023\100\001\002\000\056\002" +
    "\uff51\006\uff51\007\uff51\011\uff51\017\uff51\020\uff51\021\uff51" +
    "\022\uff51\023\uff51\026\uff51\031\uff51\037\uff51\041\uff51\044" +
    "\uff51\045\uff51\051\uff51\052\uff51\053\uff51\055\uff51\056\uff51" +
    "\111\uff51\124\uff51\001\002\000\006\004\u0285\011\u0286\001" +
    "\002\000\006\013\217\023\220\001\002\000\056\002\uff4d" +
    "\006\uff4d\007\uff4d\011\uff4d\017\uff4d\020\uff4d\021\uff4d\022" +
    "\uff4d\023\uff4d\026\uff4d\031\uff4d\037\uff4d\041\uff4d\044\uff4d" +
    "\045\uff4d\051\uff4d\052\uff4d\053\uff4d\055\uff4d\056\uff4d\111" +
    "\uff4d\124\uff4d\001\002\000\004\016\u0292\001\002\000\004" +
    "\042\u0293\001\002\000\004\023\100\001\002\000\006\013" +
    "\217\023\220\001\002\000\060\002\uff4e\006\uff4e\007\uff4e" +
    "\011\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\026" +
    "\uff4e\031\uff4e\037\uff4e\041\uff4e\043\u028c\044\uff4e\045\uff4e" +
    "\051\uff4e\052\uff4e\053\uff4e\055\uff4e\056\uff4e\111\uff4e\124" +
    "\uff4e\001\002\000\056\002\uff4f\006\uff4f\007\uff4f\011\uff4f" +
    "\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\026\uff4f\031" +
    "\uff4f\037\uff4f\041\uff4f\044\uff4f\045\uff4f\051\uff4f\052\uff4f" +
    "\053\uff4f\055\uff4f\056\uff4f\111\uff4f\124\uff4f\001\002\000" +
    "\016\054\130\107\126\110\125\112\123\113\124\114\131" +
    "\001\002\000\004\016\u0299\001\002\000\006\004\u029a\011" +
    "\u029b\001\002\000\004\016\uff4b\001\002\000\004\016\uff49" +
    "\001\002\000\016\054\130\107\126\110\125\112\123\113" +
    "\124\114\131\001\002\000\004\016\u029e\001\002\000\006" +
    "\004\u029f\011\u02a0\001\002\000\004\016\uff4c\001\002\000" +
    "\004\016\uff4a\001\002\000\004\024\uff15\001\002\000\004" +
    "\024\uff16\001\002\000\004\024\uff17\001\002\000\004\024" +
    "\uff18\001\002\000\004\024\uff19\001\002\000\004\024\u02c7" +
    "\001\002\000\004\024\u02c2\001\002\000\016\012\254\013" +
    "\ufef0\016\ufef0\023\ufef0\024\u02a9\077\u02aa\001\002\000\014" +
    "\017\266\020\262\021\265\022\260\025\u02bc\001\002\000" +
    "\006\004\u02ab\100\u02ac\001\002\000\004\100\u02ae\001\002" +
    "\000\006\013\217\023\220\001\002\000\054\002\uff01\006" +
    "\uff01\007\uff01\011\uff01\017\uff01\020\uff01\021\uff01\022\uff01" +
    "\023\uff01\031\uff01\037\uff01\041\uff01\044\uff01\045\uff01\051" +
    "\uff01\052\uff01\053\uff01\055\uff01\056\uff01\111\uff01\124\uff01" +
    "\001\002\000\004\016\u02af\001\002\000\004\015\u02b0\001" +
    "\002\000\004\101\u02b1\001\002\000\004\016\u02b2\001\002" +
    "\000\004\005\u02b4\001\002\000\004\102\u02b9\001\002\000" +
    "\006\012\u02b6\016\u02b5\001\002\000\004\102\uff08\001\002" +
    "\000\004\016\u02b7\001\002\000\004\005\u02b4\001\002\000" +
    "\004\102\uff07\001\002\000\006\013\217\023\220\001\002" +
    "\000\054\002\uff0d\006\uff0d\007\uff0d\011\uff0d\017\uff0d\020" +
    "\uff0d\021\uff0d\022\uff0d\023\uff0d\031\uff0d\037\uff0d\041\uff0d" +
    "\044\uff0d\045\uff0d\051\uff0d\052\uff0d\053\uff0d\055\uff0d\056" +
    "\uff0d\111\uff0d\124\uff0d\001\002\000\004\025\u02bf\001\002" +
    "\000\004\023\100\001\002\000\004\023\u02be\001\002\000" +
    "\054\002\uff7d\006\uff7d\007\uff7d\011\uff7d\017\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\031\uff7d\037\uff7d\041\uff7d\044" +
    "\uff7d\045\uff7d\051\uff7d\052\uff7d\053\uff7d\055\uff7d\056\uff7d" +
    "\111\uff7d\124\uff7d\001\002\000\004\023\100\001\002\000" +
    "\006\013\217\023\220\001\002\000\054\002\uff81\006\uff81" +
    "\007\uff81\011\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023" +
    "\uff81\031\uff81\037\uff81\041\uff81\044\uff81\045\uff81\051\uff81" +
    "\052\uff81\053\uff81\055\uff81\056\uff81\111\uff81\124\uff81\001" +
    "\002\000\004\021\037\001\002\000\004\011\u02c4\001\002" +
    "\000\004\025\u02c5\001\002\000\006\013\217\023\220\001" +
    "\002\000\054\002\uff1b\006\uff1b\007\uff1b\011\uff1b\017\uff1b" +
    "\020\uff1b\021\uff1b\022\uff1b\023\uff1b\031\uff1b\037\uff1b\041" +
    "\uff1b\044\uff1b\045\uff1b\051\uff1b\052\uff1b\053\uff1b\055\uff1b" +
    "\056\uff1b\111\uff1b\124\uff1b\001\002\000\004\022\007\001" +
    "\002\000\004\011\u02c9\001\002\000\004\025\u02ca\001\002" +
    "\000\006\013\217\023\220\001\002\000\054\002\uff1d\006" +
    "\uff1d\007\uff1d\011\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d" +
    "\023\uff1d\031\uff1d\037\uff1d\041\uff1d\044\uff1d\045\uff1d\051" +
    "\uff1d\052\uff1d\053\uff1d\055\uff1d\056\uff1d\111\uff1d\124\uff1d" +
    "\001\002\000\004\011\u02cd\001\002\000\006\013\217\023" +
    "\220\001\002\000\056\002\uff8a\006\uff8a\007\uff8a\011\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\026\uff8a\031" +
    "\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\111\uff8a\124\uff8a\001\002\000" +
    "\004\004\u032a\001\002\000\004\015\u030f\001\002\000\004" +
    "\011\u030b\001\002\000\014\004\u02d4\011\u02d5\031\u02d9\110" +
    "\u02d3\125\u02d6\001\002\000\006\004\u0309\011\u030a\001\002" +
    "\000\024\013\uff2a\023\uff2a\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\126\u0307\001\002\000\030\013\uff2b" +
    "\023\uff2b\054\130\107\126\110\125\112\123\113\124\114" +
    "\131\126\u0305\127\u02eb\130\u02ea\001\002\000\006\004\u0301" +
    "\011\u0302\001\002\000\006\013\uff29\023\uff29\001\002\000" +
    "\006\013\217\023\220\001\002\000\004\024\u02da\001\002" +
    "\000\004\025\u02db\001\002\000\006\013\217\023\220\001" +
    "\002\000\060\002\uff37\006\uff37\007\uff37\011\uff37\017\uff37" +
    "\020\uff37\021\uff37\022\uff37\023\uff37\026\107\031\uff37\037" +
    "\uff37\041\uff37\044\uff37\045\uff37\046\uff37\051\uff37\052\uff37" +
    "\053\uff37\055\uff37\056\uff37\111\uff37\124\uff37\001\002\000" +
    "\004\011\u02de\001\002\000\010\015\u02d2\016\u02e0\060\u02e1" +
    "\001\002\000\056\002\uff33\006\uff33\007\uff33\011\uff33\017" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\031\uff33\037\uff33" +
    "\041\uff33\044\uff33\045\uff33\046\uff33\051\uff33\052\uff33\053" +
    "\uff33\055\uff33\056\uff33\111\uff33\124\uff33\001\002\000\004" +
    "\015\u02f8\001\002\000\004\011\u02e2\001\002\000\004\015" +
    "\u02e3\001\002\000\010\004\u02e4\011\u02e5\110\u02d3\001\002" +
    "\000\022\013\uff2a\023\uff2a\054\130\107\126\110\125\112" +
    "\123\113\124\114\131\001\002\000\026\013\uff2b\023\uff2b" +
    "\054\130\107\126\110\125\112\123\113\124\114\131\127" +
    "\u02eb\130\u02ea\001\002\000\006\013\217\023\220\001\002" +
    "\000\060\002\uff3a\006\uff3a\007\uff3a\011\uff3a\017\uff3a\020" +
    "\uff3a\021\uff3a\022\uff3a\023\uff3a\026\107\031\uff3a\037\uff3a" +
    "\041\uff3a\044\uff3a\045\uff3a\046\uff3a\051\uff3a\052\uff3a\053" +
    "\uff3a\055\uff3a\056\uff3a\111\uff3a\124\uff3a\001\002\000\004" +
    "\011\u02de\001\002\000\056\002\uff35\006\uff35\007\uff35\011" +
    "\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\031\uff35" +
    "\037\uff35\041\uff35\044\uff35\045\uff35\046\uff35\051\uff35\052" +
    "\uff35\053\uff35\055\uff35\056\uff35\111\uff35\124\uff35\001\002" +
    "\000\004\011\u02f2\001\002\000\004\011\u02ef\001\002\000" +
    "\006\004\u02ed\011\u02ee\001\002\000\006\013\uff2e\023\uff2e" +
    "\001\002\000\006\013\uff30\023\uff30\001\002\000\010\013" +
    "\uff26\023\uff26\130\u02f0\001\002\000\004\011\u02f1\001\002" +
    "\000\006\013\uff28\023\uff28\001\002\000\010\013\uff25\023" +
    "\uff25\127\u02f3\001\002\000\004\011\u02f4\001\002\000\006" +
    "\013\uff27\023\uff27\001\002\000\006\004\u02f6\011\u02f7\001" +
    "\002\000\006\013\uff31\023\uff31\001\002\000\006\013\uff2f" +
    "\023\uff2f\001\002\000\004\016\u02f9\001\002\000\010\004" +
    "\u02e4\011\u02e5\110\u02d3\001\002\000\006\013\217\023\220" +
    "\001\002\000\060\002\uff38\006\uff38\007\uff38\011\uff38\017" +
    "\uff38\020\uff38\021\uff38\022\uff38\023\uff38\026\107\031\uff38" +
    "\037\uff38\041\uff38\044\uff38\045\uff38\046\uff38\051\uff38\052" +
    "\uff38\053\uff38\055\uff38\056\uff38\111\uff38\124\uff38\001\002" +
    "\000\004\011\u02de\001\002\000\056\002\uff36\006\uff36\007" +
    "\uff36\011\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36" +
    "\031\uff36\037\uff36\041\uff36\044\uff36\045\uff36\046\uff36\051" +
    "\uff36\052\uff36\053\uff36\055\uff36\056\uff36\111\uff36\124\uff36" +
    "\001\002\000\060\002\uff39\006\uff39\007\uff39\011\uff39\017" +
    "\uff39\020\uff39\021\uff39\022\uff39\023\uff39\026\107\031\uff39" +
    "\037\uff39\041\uff39\044\uff39\045\uff39\046\uff39\051\uff39\052" +
    "\uff39\053\uff39\055\uff39\056\uff39\111\uff39\124\uff39\001\002" +
    "\000\004\011\u02de\001\002\000\056\002\uff34\006\uff34\007" +
    "\uff34\011\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\031\uff34\037\uff34\041\uff34\044\uff34\045\uff34\046\uff34\051" +
    "\uff34\052\uff34\053\uff34\055\uff34\056\uff34\111\uff34\124\uff34" +
    "\001\002\000\006\013\217\023\220\001\002\000\006\013" +
    "\217\023\220\001\002\000\056\002\ufef9\006\ufef9\007\ufef9" +
    "\011\ufef9\017\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9\031" +
    "\ufef9\037\ufef9\041\ufef9\044\ufef9\045\ufef9\046\ufef9\051\ufef9" +
    "\052\ufef9\053\ufef9\055\ufef9\056\ufef9\111\ufef9\124\ufef9\001" +
    "\002\000\056\002\ufef8\006\ufef8\007\ufef8\011\ufef8\017\ufef8" +
    "\020\ufef8\021\ufef8\022\ufef8\023\ufef8\031\ufef8\037\ufef8\041" +
    "\ufef8\044\ufef8\045\ufef8\046\ufef8\051\ufef8\052\ufef8\053\ufef8" +
    "\055\ufef8\056\ufef8\111\ufef8\124\ufef8\001\002\000\006\013" +
    "\217\023\220\001\002\000\056\002\ufef7\006\ufef7\007\ufef7" +
    "\011\ufef7\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023\ufef7\031" +
    "\ufef7\037\ufef7\041\ufef7\044\ufef7\045\ufef7\046\ufef7\051\ufef7" +
    "\052\ufef7\053\ufef7\055\ufef7\056\ufef7\111\ufef7\124\ufef7\001" +
    "\002\000\006\013\217\023\220\001\002\000\056\002\ufef6" +
    "\006\ufef6\007\ufef6\011\ufef6\017\ufef6\020\ufef6\021\ufef6\022" +
    "\ufef6\023\ufef6\031\ufef6\037\ufef6\041\ufef6\044\ufef6\045\ufef6" +
    "\046\ufef6\051\ufef6\052\ufef6\053\ufef6\055\ufef6\056\ufef6\111" +
    "\ufef6\124\ufef6\001\002\000\006\013\uff2c\023\uff2c\001\002" +
    "\000\006\013\uff2d\023\uff2d\001\002\000\006\015\u02e3\024" +
    "\u030c\001\002\000\004\025\u030d\001\002\000\006\013\217" +
    "\023\220\001\002\000\054\002\uff55\006\uff55\007\uff55\011" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\031\uff55" +
    "\037\uff55\041\uff55\044\uff55\045\uff55\051\uff55\052\uff55\053" +
    "\uff55\055\uff55\056\uff55\111\uff55\124\uff55\001\002\000\004" +
    "\016\u0310\001\002\000\012\004\u02e4\011\u02e5\057\u0311\110" +
    "\u02d3\001\002\000\014\017\u0312\020\u0313\021\u0315\022\u0314" +
    "\031\u0316\001\002\000\004\077\u0326\001\002\000\004\077" +
    "\u0322\001\002\000\004\077\u031e\001\002\000\004\077\u031a" +
    "\001\002\000\004\024\u0317\001\002\000\004\025\u0318\001" +
    "\002\000\006\013\217\023\220\001\002\000\054\002\uff56" +
    "\006\uff56\007\uff56\011\uff56\017\uff56\020\uff56\021\uff56\022" +
    "\uff56\023\uff56\031\uff56\037\uff56\041\uff56\044\uff56\045\uff56" +
    "\051\uff56\052\uff56\053\uff56\055\uff56\056\uff56\111\uff56\124" +
    "\uff56\001\002\000\004\004\u031b\001\002\000\004\100\u031c" +
    "\001\002\000\006\013\217\023\220\001\002\000\054\002" +
    "\ufefb\006\ufefb\007\ufefb\011\ufefb\017\ufefb\020\ufefb\021\ufefb" +
    "\022\ufefb\023\ufefb\031\ufefb\037\ufefb\041\ufefb\044\ufefb\045" +
    "\ufefb\051\ufefb\052\ufefb\053\ufefb\055\ufefb\056\ufefb\111\ufefb" +
    "\124\ufefb\001\002\000\004\004\u031f\001\002\000\004\100" +
    "\u0320\001\002\000\006\013\217\023\220\001\002\000\054" +
    "\002\ufefc\006\ufefc\007\ufefc\011\ufefc\017\ufefc\020\ufefc\021" +
    "\ufefc\022\ufefc\023\ufefc\031\ufefc\037\ufefc\041\ufefc\044\ufefc" +
    "\045\ufefc\051\ufefc\052\ufefc\053\ufefc\055\ufefc\056\ufefc\111" +
    "\ufefc\124\ufefc\001\002\000\004\004\u0323\001\002\000\004" +
    "\100\u0324\001\002\000\006\013\217\023\220\001\002\000" +
    "\054\002\ufefa\006\ufefa\007\ufefa\011\ufefa\017\ufefa\020\ufefa" +
    "\021\ufefa\022\ufefa\023\ufefa\031\ufefa\037\ufefa\041\ufefa\044" +
    "\ufefa\045\ufefa\051\ufefa\052\ufefa\053\ufefa\055\ufefa\056\ufefa" +
    "\111\ufefa\124\ufefa\001\002\000\004\004\u0327\001\002\000" +
    "\004\100\u0328\001\002\000\006\013\217\023\220\001\002" +
    "\000\054\002\ufefd\006\ufefd\007\ufefd\011\ufefd\017\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\023\ufefd\031\ufefd\037\ufefd\041\ufefd" +
    "\044\ufefd\045\ufefd\051\ufefd\052\ufefd\053\ufefd\055\ufefd\056" +
    "\ufefd\111\ufefd\124\ufefd\001\002\000\004\100\u032b\001\002" +
    "\000\004\016\u032c\001\002\000\004\015\u032d\001\002\000" +
    "\004\016\u032e\001\002\000\012\004\362\005\367\010\365" +
    "\014\363\001\002\000\006\013\217\023\220\001\002\000" +
    "\054\002\ufefe\006\ufefe\007\ufefe\011\ufefe\017\ufefe\020\ufefe" +
    "\021\ufefe\022\ufefe\023\ufefe\031\ufefe\037\ufefe\041\ufefe\044" +
    "\ufefe\045\ufefe\051\ufefe\052\ufefe\053\ufefe\055\ufefe\056\ufefe" +
    "\111\ufefe\124\ufefe\001\002\000\012\004\u0333\005\u0336\011" +
    "\u0335\014\u0332\001\002\000\010\012\u0348\013\uff90\023\uff90" +
    "\001\002\000\010\012\u0345\013\uff8f\023\uff8f\001\002\000" +
    "\006\013\217\023\220\001\002\000\012\012\u033b\013\uff8d" +
    "\023\uff8d\060\u033a\001\002\000\010\012\u0337\013\uff8e\023" +
    "\uff8e\001\002\000\004\016\u0338\001\002\000\012\004\u0333" +
    "\005\u0336\011\u0335\014\u0332\001\002\000\006\013\uff93\023" +
    "\uff93\001\002\000\004\011\u033e\001\002\000\004\016\u033c" +
    "\001\002\000\012\004\u0333\005\u0336\011\u0335\014\u0332\001" +
    "\002\000\006\013\uff92\023\uff92\001\002\000\010\013\uff8c" +
    "\023\uff8c\024\u033f\001\002\000\004\025\u0340\001\002\000" +
    "\010\012\u0341\013\uff8b\023\uff8b\001\002\000\004\016\u0342" +
    "\001\002\000\012\004\u0333\005\u0336\011\u0335\014\u0332\001" +
    "\002\000\006\013\uff91\023\uff91\001\002\000\056\002\uff96" +
    "\006\uff96\007\uff96\011\uff96\017\uff96\020\uff96\021\uff96\022" +
    "\uff96\023\uff96\026\uff96\031\uff96\037\uff96\041\uff96\044\uff96" +
    "\045\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\111" +
    "\uff96\124\uff96\001\002\000\004\016\u0346\001\002\000\012" +
    "\004\u0333\005\u0336\011\u0335\014\u0332\001\002\000\006\013" +
    "\uff94\023\uff94\001\002\000\004\016\u0349\001\002\000\012" +
    "\004\u0333\005\u0336\011\u0335\014\u0332\001\002\000\006\013" +
    "\uff95\023\uff95\001\002\000\004\123\u034c\001\002\000\004" +
    "\023\u034d\001\002\000\054\002\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\031\uffb8" +
    "\037\uffb8\041\uffb8\044\uffb8\045\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\111\uffb8\124\uffb8\001\002\000\004" +
    "\026\107\001\002\000\004\011\u02de\001\002\000\004\046" +
    "\u0351\001\002\000\004\016\u0352\001\002\000\006\004\u025a" +
    "\011\u025b\001\002\000\004\016\u0354\001\002\000\006\030" +
    "\u025f\065\u025e\001\002\000\004\016\u0356\001\002\000\006" +
    "\004\u025a\011\u025b\001\002\000\006\013\217\023\220\001" +
    "\002\000\054\002\uff3b\006\uff3b\007\uff3b\011\uff3b\017\uff3b" +
    "\020\uff3b\021\uff3b\022\uff3b\023\uff3b\031\uff3b\037\uff3b\041" +
    "\uff3b\044\uff3b\045\uff3b\051\uff3b\052\uff3b\053\uff3b\055\uff3b" +
    "\056\uff3b\111\uff3b\124\uff3b\001\002\000\004\002\000\001" +
    "\002\000\004\011\ufef2\001\002\000\006\011\ufef3\067\ufef3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0359\000\100\002\010\004\065\005\046\006\050\007" +
    "\007\010\013\011\044\015\047\016\020\017\037\022\012" +
    "\031\051\032\040\035\042\042\014\046\017\053\041\055" +
    "\043\056\054\057\023\060\052\061\061\071\030\073\055" +
    "\076\025\105\060\106\026\112\062\116\045\117\034\134" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u0182\036\u02a6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u024a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\002\u021e\004\065" +
    "\005\046\006\050\007\007\010\013\011\044\015\047\016" +
    "\020\017\037\022\012\031\051\032\040\035\042\042\014" +
    "\046\017\053\041\055\043\056\054\057\023\060\052\061" +
    "\061\071\030\073\055\076\025\105\060\106\026\112\062" +
    "\116\045\117\034\134\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u013b\001\001\000" +
    "\002\001\001\000\004\012\u0100\001\001\000\002\001\001" +
    "\000\004\013\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\002\066\004\065\005" +
    "\046\006\050\007\007\010\013\011\044\015\047\016\020" +
    "\017\037\022\012\031\051\032\040\035\042\042\014\046" +
    "\017\053\041\055\043\056\054\057\023\060\052\061\061" +
    "\071\030\073\055\076\025\105\060\106\026\112\062\116" +
    "\045\117\034\134\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\100\001\001\000\020\015\101\016\020\017" +
    "\037\030\102\032\105\071\104\133\103\001\001\000\002" +
    "\001\001\000\016\015\101\016\020\017\037\032\105\071" +
    "\104\133\211\001\001\000\002\001\001\000\004\030\112" +
    "\001\001\000\016\015\101\016\020\017\037\032\105\071" +
    "\104\133\111\001\001\000\016\015\101\016\020\017\037" +
    "\032\105\071\104\133\110\001\001\000\004\030\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\136\001\001" +
    "\000\002\001\001\000\004\110\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\171\001\001\000\002\001\001\000\004" +
    "\110\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\225\001\001\000" +
    "\002\001\001\000\004\013\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\241\001\001\000\002\001" +
    "\001\000\004\060\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\256\025\260\026\262\027" +
    "\263\127\266\001\001\000\004\012\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\256\025\260\026" +
    "\262\027\263\127\320\001\001\000\002\001\001\000\014" +
    "\024\256\025\260\026\262\027\263\127\313\001\001\000" +
    "\002\001\001\000\014\024\256\025\260\026\262\027\263" +
    "\127\306\001\001\000\014\024\256\025\260\026\262\027" +
    "\263\127\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\273\001\001\000\004" +
    "\013\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\336\001\001\000\002" +
    "\001\001\000\004\013\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\365" +
    "\040\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\370\001\001\000\002\001\001\000" +
    "\004\013\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0108\001\001\000\002" +
    "\001\001\000\004\060\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u010b\001\001\000\004\013\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\256\025\260\026\262" +
    "\027\263\127\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u011e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0128" +
    "\001\001\000\004\013\u0129\001\001\000\002\001\001\000" +
    "\014\024\256\025\260\026\262\027\263\127\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\u012f\041" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0135\001\001\000\006\030\u012f\041\u0136" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u012f\041\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\256\025\260\026\262\027\263\127\u0144\001\001\000\002" +
    "\001\001\000\004\023\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0149\001\001\000\004\013\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0154\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u015a\001\001\000\002\001\001" +
    "\000\016\015\101\016\020\017\037\032\105\071\104\133" +
    "\u015c\001\001\000\002\001\001\000\006\113\u0165\115\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\u0199\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u016c\006\050\007\007\010\013\011\044\056" +
    "\u016e\057\u016d\060\u016b\061\u0171\114\u0170\001\001\000\004" +
    "\012\u013b\001\001\000\002\001\001\000\004\012\u0182\001" +
    "\001\000\004\012\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u016c\006\050\007\007\010\013\011\044\056\u016e\057" +
    "\u016d\060\u016b\061\u0171\114\u0177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u016c\006" +
    "\050\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b" +
    "\061\u0171\114\u017b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u016c" +
    "\006\050\007\007\010\013\011\044\056\u016e\057\u016d\060" +
    "\u016b\061\u0171\114\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0184\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u018c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u016c\006\050\007\007\010" +
    "\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u018f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u016c\006\050\007\007\010\013\011\044" +
    "\056\u016e\057\u016d\060\u016b\061\u0171\114\u0193\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u016c\006\050\007\007\010\013\011" +
    "\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u016c\006\050\007\007\010\013" +
    "\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u019d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u016c\006" +
    "\050\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b" +
    "\061\u0171\114\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u016c\006\050\007\007" +
    "\010\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u016c\006\050\007" +
    "\007\010\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171" +
    "\114\u01ac\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u016c\006\050\007\007\010\013" +
    "\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u01b0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u016c\006\050\007\007\010\013\011\044\056" +
    "\u016e\057\u016d\060\u016b\061\u0171\114\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u016c\006\050\007\007\010\013\011\044" +
    "\056\u016e\057\u016d\060\u016b\061\u0171\114\u01b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u016c\006\050\007\007\010\013\011\044\056\u016e\057" +
    "\u016d\060\u016b\061\u0171\114\u01bd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u016c\006\050\007\007\010\013\011\044\056\u016e" +
    "\057\u016d\060\u016b\061\u0171\114\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u016c\006" +
    "\050\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b" +
    "\061\u0171\114\u01c9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u016c\006" +
    "\050\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b" +
    "\061\u0171\114\u01d1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u016c\006\050\007\007" +
    "\010\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u016c\006\050\007\007\010\013\011\044" +
    "\056\u016e\057\u016d\060\u016b\061\u0171\114\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u016c\006\050\007\007\010\013\011\044\056\u016e\057" +
    "\u016d\060\u016b\061\u0171\114\u01e0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u016c\006" +
    "\050\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b" +
    "\061\u0171\114\u01e4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u016c\006\050\007\007\010" +
    "\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u01eb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u016c\006\050\007\007" +
    "\010\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114" +
    "\u01f0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u016c\006\050\007\007\010\013\011\044" +
    "\056\u016e\057\u016d\060\u016b\061\u0171\114\u01f7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u016c\006\050\007\007\010\013\011\044\056\u016e\057" +
    "\u016d\060\u016b\061\u0171\114\u01fb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u016c\006\050" +
    "\007\007\010\013\011\044\056\u016e\057\u016d\060\u016b\061" +
    "\u0171\114\u0202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u016c\006\050\007\007\010" +
    "\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u0206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u016c\006\050\007\007\010" +
    "\013\011\044\056\u016e\057\u016d\060\u016b\061\u0171\114\u020e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u016c\006\050\007\007\010\013\011\044" +
    "\056\u016e\057\u016d\060\u016b\061\u0171\114\u0212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u016c\006\050\007\007\010\013\011\044\056\u016e\057\u016d" +
    "\060\u016b\061\u0171\114\u0219\001\001\000\002\001\001\000" +
    "\006\113\u021c\115\u021b\001\001\000\002\001\001\000\004" +
    "\115\u021d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\056\u0224\057\u0222\060\u0223\061\u0221" +
    "\001\001\000\004\012\u023a\001\001\000\004\012\u0233\001" +
    "\001\000\004\012\u022c\001\001\000\004\012\u0225\001\001" +
    "\000\004\013\u0227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u022a\001\001\000\004" +
    "\013\u022b\001\001\000\002\001\001\000\004\013\u022e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0232\001\001\000\002\001" +
    "\001\000\004\013\u0235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u0238\001\001\000" +
    "\004\013\u0239\001\001\000\002\001\001\000\004\013\u023c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u023f\001\001\000\004\013\u0240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\u0245\045\u0244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0248\001\001\000" +
    "\002\001\001\000\004\072\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u024e\001\001\000\004\072" +
    "\u024f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0251\001\001\000\002\001\001\000\006\077\u0256\104" +
    "\u0253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u025b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\u025f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0261\001\001" +
    "\000\002\001\001\000\004\101\u0263\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0267\001\001\000\002" +
    "\001\001\000\006\030\u0269\103\u0268\001\001\000\002\001" +
    "\001\000\004\016\u026a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u026f\001\001\000\006\030\u0269\103\u0270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0286" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0289\001\001\000\004" +
    "\013\u028a\001\001\000\004\034\u028c\001\001\000\004\023" +
    "\u028e\001\001\000\002\001\001\000\004\033\u0290\001\001" +
    "\000\004\013\u028f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0293\001\001\000\004" +
    "\013\u0294\001\001\000\004\034\u0295\001\001\000\002\001" +
    "\001\000\004\110\u0297\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u029c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\256\025\260\026\262\027\263\127\u02ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u02ac\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u02b2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u02b7\001\001\000\002\001" +
    "\001\000\004\013\u02b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u02bc\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u02bf\001\001\000\004\013\u02c0" +
    "\001\001\000\002\001\001\000\004\057\u02c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u02c5\001\001" +
    "\000\002\001\001\000\004\060\u02c7\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u02ca\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u02cd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\u02d7\126\u02d6\001\001\000\002\001" +
    "\001\000\004\110\u02f4\001\001\000\004\110\u02eb\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u02fd\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u02db" +
    "\001\001\000\004\030\u02dc\001\001\000\006\073\055\106" +
    "\u02de\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u02e5\126\u02d6\001\001\000\004\110\u02f4\001\001\000\004" +
    "\110\u02eb\001\001\000\004\013\u02e6\001\001\000\004\030" +
    "\u02e7\001\001\000\006\073\055\106\u02e8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u02f9\126\u02d6\001\001\000\004\013\u02fa\001\001\000\004" +
    "\030\u02fb\001\001\000\006\073\055\106\u02fc\001\001\000" +
    "\002\001\001\000\004\030\u02fe\001\001\000\006\073\055" +
    "\106\u02ff\001\001\000\002\001\001\000\004\013\u0303\001" +
    "\001\000\004\013\u0302\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0305\001\001\000\002\001\001\000" +
    "\004\013\u0307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u030d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u02f9\126\u02d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0318\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u031c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0328\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u032e\001\001\000\004\013" +
    "\u032f\001\001\000\002\001\001\000\004\020\u0333\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0338\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u033c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0346\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0349\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u034e\001\001" +
    "\000\006\073\055\106\u034f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0352\001\001\000\002\001\001" +
    "\000\004\100\u0354\001\001\000\002\001\001\000\004\102" +
    "\u0356\001\001\000\004\013\u0357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigoli ::= primero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primero ::= tipo_ent libre principal para tipo_cadena libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primero",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primero ::= tipo_ent libre principal para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primero",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASESA ::= tipodeclase newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CLASESA ::= tipodeclase newline comentariooleer salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CLASESA ::= tipodeclase newline comentariooleer salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CLASESA ::= tipodeclase newline comentariooleer salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipodeclase ::= IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipodeclase ::= IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODOSCLASES ::= metodos libre propum newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODOSCLASES ::= metodos libre proprim newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOSCLASES ::= metodos libre proprom newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODOSCLASES ::= metodos newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de metodo: "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODOSCLASES ::= propum newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODOSCLASES ::= proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODOSCLASES ::= propum newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METODOSCLASES ::= proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METODOSCLASES ::= proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDOCLASES ::= propiedades libre propu newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOCLASES ::= propiedades libre propri newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDOCLASES ::= propiedades libre propro newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOCLASES ::= propiedades newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de propiedad "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTENIDOCLASES ::= propu newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTENIDOCLASES ::= propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTENIDOCLASES ::= propu newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTENIDOCLASES ::= propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTENIDOCLASES ::= propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIP ::= identificador pun identificador para parb coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIP ::= cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIP ::= entero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(c); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIP ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIP ::= identificador 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIP ::= identificador pun identificador para parb 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t+""+x+""+y); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNCIONESS ::= reducciondetipoente identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNCIONESS ::= reducciondetipocadena identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCIONESS ::= reducciondetipobol identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNCIONESS ::= reducciondetiporeal identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNCIONESS ::= reducciondetipoente identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNCIONESS ::= reducciondetipocadena identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCIONESS ::= reducciondetipobol identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCIONESS ::= reducciondetiporeal identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CANTIDADDEPARAMETROS ::= PARAMETROSE CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CANTIDADDEPARAMETROS ::= PARAMETROSC CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CANTIDADDEPARAMETROS ::= PARAMETROSB CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CANTIDADDEPARAMETROS ::= PARAMETROSR CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CANTIDADDEPARAMETROS ::= PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CANTIDADDEPARAMETROS ::= PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CANTIDADDEPARAMETROS ::= PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CANTIDADDEPARAMETROS ::= PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CUERPOF ::= newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CUERPOF ::= newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CUERPOF ::= newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CUERPOF ::= newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CUERPOF ::= newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CUERPOF ::= newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CUERPOF ::= newline comentariooleer TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CUERPOF ::= newline comentariooleer TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CUERPOF ::= newline comentariooleer TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CUERPOF ::= newline comentariooleer TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CUERPOF ::= newline comentariooleer TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CUERPOF ::= newline comentariooleer TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // comentariooleer ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // comentariooleer ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // comentariooleer ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // comentariooleer ::= MES comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // comentariooleer ::= est comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // comentariooleer ::= COMM comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Linstancias ::= identificador pun identificador para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Linstancias ::= IDmayu pun asignacion para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // est ::= ifs libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // est ::= ifs libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // seguimiento ::= els libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // seguimiento ::= els libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // seguimiento ::= els CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // cond ::= entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // cond ::= identificador libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // cond ::= entero libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // cond ::= identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ASIGNA ::= identificador asignacion IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ASIGNA ::= identificador asignacion IDmayu para parb finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // operacionesmatematicas ::= OPERADORESLOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // OPERADORESLOGICOS ::= identificador and identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // OPERADORESLOGICOS ::= identificador or identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OPERADORESLOGICOS ::= identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OPERADORESLOGICOS ::= identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // simbolosdeopera ::= porc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         int valor=0;
        try {
	valor= Integer.parseInt((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un entero"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FunE ::= reducciondetiporeal tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         Double valor=0.0;
        try {
	valor= Double.parseDouble((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un numero real"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // FunE ::= reducciondetipobol tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            String compara=(String)s;
          if(compara.compareTo("verdadero")==0||compara.compareTo("falso")==0){
          	 System.out.println("Cambio exitoso"); 
	}else{
             System.out.println("no se puede realizar el cambio"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		
            
          
          	 System.out.println("Operacion matematica"); 
	
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FunE ::= tipo_ent identificador para tipo_ent libre identificador parb newline CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // contructoDes ::= constru para CANTIDADDEPARAMETROS parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // contructoDes ::= constru para parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TiposArr ::= identificador libre asignacion libre insta tipo_ent corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TiposArr ::= identificador libre asignacion libre insta tipo_cadena corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TiposArr ::= identificador libre asignacion libre insta tipo_real corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TiposArr ::= identificador libre asignacion libre insta tipo_bol corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
