
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\112\010\000\002\113\027\000\002\114\003\000" +
    "\002\114\004\000\002\114\006\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\011\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\007\005\000" +
    "\002\007\011\000\002\010\005\000\002\010\011\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\011" +
    "\005\000\002\011\011\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\017\006\000\002\071\004\000" +
    "\002\071\007\000\002\072\004\000\002\072\005\000\002" +
    "\022\011\000\002\022\010\000\002\022\011\000\002\022" +
    "\011\000\002\024\006\000\002\024\004\000\002\025\007" +
    "\000\002\025\005\000\002\026\007\000\002\026\005\000" +
    "\002\027\006\000\002\027\004\000\002\023\013\000\002" +
    "\023\006\000\002\031\015\000\002\031\016\000\002\031" +
    "\013\000\002\031\005\000\002\037\006\000\002\032\011" +
    "\000\002\032\010\000\002\034\011\000\002\034\010\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\076\024\000\002\076\020\000\002\103" +
    "\004\000\002\100\003\000\002\100\003\000\002\101\003" +
    "\000\002\101\003\000\002\077\004\000\002\077\012\000" +
    "\002\077\007\000\002\104\004\000\002\102\003\000\002" +
    "\102\003\000\002\105\016\000\002\106\006\000\002\106" +
    "\010\000\002\106\012\000\002\106\010\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\004\000\002\107\004\000\002\107\003\000\002" +
    "\107\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\035\011" +
    "\000\002\035\011\000\002\035\011\000\002\035\011\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\042\017\000\002\042" +
    "\007\000\002\041\003\000\002\045\006\000\002\046\016" +
    "\000\002\046\016\000\002\046\016\000\002\046\016\000" +
    "\002\047\004\000\002\047\006\000\002\050\004\000\002" +
    "\050\006\000\002\051\004\000\002\051\006\000\002\052" +
    "\004\000\002\052\006\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\013\000" +
    "\002\053\014\000\002\056\004\000\002\057\004\000\002" +
    "\061\004\000\002\060\004\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\030\004" +
    "\000\002\030\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01eb\000\044\006\015\007\020\011\017\017\056\020" +
    "\004\021\032\022\005\031\051\037\024\041\022\044\046" +
    "\045\027\051\031\052\055\055\050\056\030\111\010\001" +
    "\002\000\004\016\u01ed\001\002\000\004\016\u01ec\001\002" +
    "\000\052\002\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\026\uffe8\031\uffe8\033\uffe8\037\uffe8" +
    "\041\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8\055\uffe8\056" +
    "\uffe8\111\uffe8\001\002\000\004\002\u01eb\001\002\000\004" +
    "\023\u01e0\001\002\000\052\002\uffe7\006\uffe7\007\uffe7\011" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\031\uffe7" +
    "\033\uffe7\037\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\056\uffe7\111\uffe7\001\002\000\046\002\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\031\ufff1\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1" +
    "\052\ufff1\055\ufff1\056\ufff1\111\ufff1\001\002\000\046\002" +
    "\ufffa\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\031\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051" +
    "\ufffa\052\ufffa\055\ufffa\056\ufffa\111\ufffa\001\002\000\046" +
    "\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0\045\ufff0" +
    "\051\ufff0\052\ufff0\055\ufff0\056\ufff0\111\ufff0\001\002\000" +
    "\004\016\u01cb\001\002\000\046\002\uffd2\006\uffd2\007\uffd2" +
    "\011\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\031\uffd2\037" +
    "\uffd2\041\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2\055\uffd2" +
    "\056\uffd2\111\uffd2\001\002\000\010\015\315\016\u01b7\077" +
    "\u01b6\001\002\000\004\016\u01b3\001\002\000\016\011\u0191" +
    "\070\u0193\071\u0192\072\u0190\073\u018f\074\u018d\001\002\000" +
    "\006\004\u0174\011\u0175\001\002\000\046\002\ufff7\006\ufff7" +
    "\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\031" +
    "\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7" +
    "\055\ufff7\056\ufff7\111\ufff7\001\002\000\004\016\u0147\001" +
    "\002\000\046\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\031\ufff6\037\ufff6\041\ufff6\044" +
    "\ufff6\045\ufff6\051\ufff6\052\ufff6\055\ufff6\056\ufff6\111\ufff6" +
    "\001\002\000\046\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\031\ufff8\037\ufff8\041\ufff8" +
    "\044\ufff8\045\ufff8\051\ufff8\052\ufff8\055\ufff8\056\ufff8\111" +
    "\ufff8\001\002\000\004\016\u011c\001\002\000\004\023\u0114" +
    "\001\002\000\004\024\u010c\001\002\000\004\016\u010b\001" +
    "\002\000\046\002\uffd1\006\uffd1\007\uffd1\011\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\031\uffd1\037\uffd1\041\uffd1\044" +
    "\uffd1\045\uffd1\051\uffd1\052\uffd1\055\uffd1\056\uffd1\111\uffd1" +
    "\001\002\000\046\002\uffef\006\uffef\007\uffef\011\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\031\uffef\037\uffef\041\uffef" +
    "\044\uffef\045\uffef\051\uffef\052\uffef\055\uffef\056\uffef\111" +
    "\uffef\001\002\000\046\002\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3\037\ufff3\041" +
    "\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3" +
    "\111\ufff3\001\002\000\046\002\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031\ufff2\037\ufff2" +
    "\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\055\ufff2\056" +
    "\ufff2\111\ufff2\001\002\000\046\002\uffff\006\015\007\020" +
    "\011\017\017\056\020\004\021\032\022\005\031\051\037" +
    "\024\041\022\044\046\045\027\051\031\052\055\055\050" +
    "\056\030\111\010\001\002\000\052\002\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6" +
    "\031\uffe6\033\uffe6\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051" +
    "\uffe6\052\uffe6\055\uffe6\056\uffe6\111\uffe6\001\002\000\046" +
    "\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045\ufffc" +
    "\051\ufffc\052\ufffc\055\ufffc\056\ufffc\111\ufffc\001\002\000" +
    "\046\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\031\ufffb\037\ufffb\041\ufffb\044\ufffb\045" +
    "\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\111\ufffb\001\002" +
    "\000\052\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\026\uffe9\031\uffe9\033\uffe9\037\uffe9" +
    "\041\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\055\uffe9\056" +
    "\uffe9\111\uffe9\001\002\000\046\002\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031\ufff9\037" +
    "\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\055\ufff9" +
    "\056\ufff9\111\ufff9\001\002\000\004\011\350\001\002\000" +
    "\004\024\272\001\002\000\012\011\202\066\205\067\204" +
    "\076\206\001\002\000\006\013\063\023\064\001\002\000" +
    "\004\016\154\001\002\000\046\002\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\037" +
    "\ufff5\041\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\055\ufff5" +
    "\056\ufff5\111\ufff5\001\002\000\004\011\067\001\002\000" +
    "\046\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045" +
    "\ufff4\051\ufff4\052\ufff4\055\ufff4\056\ufff4\111\ufff4\001\002" +
    "\000\004\011\062\001\002\000\004\016\061\001\002\000" +
    "\046\002\001\006\015\007\020\011\017\017\056\020\004" +
    "\021\032\022\005\031\051\037\024\041\022\044\046\045" +
    "\027\051\031\052\055\055\050\056\030\111\010\001\002" +
    "\000\004\002\ufffd\001\002\000\012\011\uff68\066\uff68\067" +
    "\uff68\076\uff68\001\002\000\006\013\063\023\064\001\002" +
    "\000\004\023\066\001\002\000\056\002\uff61\006\uff61\007" +
    "\uff61\011\uff61\017\uff61\020\uff61\021\uff61\022\uff61\026\uff61" +
    "\031\uff61\033\uff61\037\uff61\041\uff61\043\uff61\044\uff61\045" +
    "\uff61\046\uff61\051\uff61\052\uff61\055\uff61\056\uff61\111\uff61" +
    "\001\002\000\046\002\uffb0\006\uffb0\007\uffb0\011\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\031\uffb0\037\uffb0\041\uffb0" +
    "\044\uffb0\045\uffb0\051\uffb0\052\uffb0\055\uffb0\056\uffb0\111" +
    "\uffb0\001\002\000\060\002\uff62\006\uff62\007\uff62\011\uff62" +
    "\017\uff62\020\uff62\021\uff62\022\uff62\026\uff62\031\uff62\033" +
    "\uff62\037\uff62\041\uff62\043\uff62\044\uff62\045\uff62\046\uff62" +
    "\051\uff62\052\uff62\055\uff62\056\uff62\105\uff62\111\uff62\001" +
    "\002\000\016\012\104\013\uff63\016\uff63\023\uff63\024\102" +
    "\077\103\001\002\000\010\013\063\016\071\023\064\001" +
    "\002\000\004\015\073\001\002\000\052\002\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\026" +
    "\uffdd\031\uffdd\033\uffdd\037\uffdd\041\uffdd\044\uffdd\045\uffdd" +
    "\051\uffdd\052\uffdd\055\uffdd\056\uffdd\111\uffdd\001\002\000" +
    "\004\016\074\001\002\000\010\004\075\005\100\010\076" +
    "\001\002\000\006\013\uffdb\023\uffdb\001\002\000\006\013" +
    "\uffd9\023\uffd9\001\002\000\006\013\063\023\064\001\002" +
    "\000\006\013\uffda\023\uffda\001\002\000\052\002\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\026\uffdc\031\uffdc\033\uffdc\037\uffdc\041\uffdc\044\uffdc\045" +
    "\uffdc\051\uffdc\052\uffdc\055\uffdc\056\uffdc\111\uffdc\001\002" +
    "\000\004\020\130\001\002\000\006\004\107\100\110\001" +
    "\002\000\004\011\105\001\002\000\012\012\104\013\uff63" +
    "\016\uff63\023\uff63\001\002\000\010\013\uff64\016\uff64\023" +
    "\uff64\001\002\000\004\100\112\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uff6c\006\uff6c\007\uff6c\011" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\031\uff6c\037\uff6c" +
    "\041\uff6c\044\uff6c\045\uff6c\051\uff6c\052\uff6c\055\uff6c\056" +
    "\uff6c\111\uff6c\001\002\000\004\016\113\001\002\000\004" +
    "\015\114\001\002\000\004\101\115\001\002\000\004\016" +
    "\116\001\002\000\004\010\120\001\002\000\004\102\125" +
    "\001\002\000\006\012\122\016\121\001\002\000\004\102" +
    "\uff70\001\002\000\004\016\123\001\002\000\004\010\120" +
    "\001\002\000\004\102\uff6f\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uff77\006\uff77\007\uff77\011\uff77" +
    "\017\uff77\020\uff77\021\uff77\022\uff77\031\uff77\037\uff77\041" +
    "\uff77\044\uff77\045\uff77\051\uff77\052\uff77\055\uff77\056\uff77" +
    "\111\uff77\001\002\000\004\025\135\001\002\000\004\016" +
    "\131\001\002\000\004\011\132\001\002\000\006\012\133" +
    "\025\uffb8\001\002\000\004\020\130\001\002\000\004\025" +
    "\uffb9\001\002\000\004\023\136\001\002\000\004\026\142" +
    "\001\002\000\006\013\063\023\064\001\002\000\046\002" +
    "\uffbf\006\uffbf\007\uffbf\011\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\031\uffbf\037\uffbf\041\uffbf\044\uffbf\045\uffbf\051" +
    "\uffbf\052\uffbf\055\uffbf\056\uffbf\111\uffbf\001\002\000\004" +
    "\035\144\001\002\000\014\006\uff5f\011\uff5f\026\142\035" +
    "\uff5f\052\uff5f\001\002\000\012\006\uff60\011\uff60\035\uff60" +
    "\052\uff60\001\002\000\006\004\146\016\145\001\002\000" +
    "\004\011\147\001\002\000\006\013\uffb4\023\uffb4\001\002" +
    "\000\004\016\150\001\002\000\004\064\151\001\002\000" +
    "\004\016\152\001\002\000\004\011\153\001\002\000\006" +
    "\013\uffb5\023\uffb5\001\002\000\004\011\155\001\002\000" +
    "\004\016\156\001\002\000\004\015\157\001\002\000\004" +
    "\016\160\001\002\000\004\057\161\001\002\000\004\031" +
    "\162\001\002\000\004\024\163\001\002\000\014\004\164" +
    "\005\172\010\167\014\165\025\171\001\002\000\012\012" +
    "\uff5e\013\uff5e\023\uff5e\025\uff5e\001\002\000\012\012\uff5d" +
    "\013\uff5d\023\uff5d\025\uff5d\001\002\000\004\012\176\001" +
    "\002\000\012\012\uff5c\013\uff5c\023\uff5c\025\uff5c\001\002" +
    "\000\004\025\174\001\002\000\006\013\063\023\064\001" +
    "\002\000\012\012\uff5b\013\uff5b\023\uff5b\025\uff5b\001\002" +
    "\000\046\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\031\uffb3\037\uffb3\041\uffb3\044\uffb3" +
    "\045\uffb3\051\uffb3\052\uffb3\055\uffb3\056\uffb3\111\uffb3\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uffb2" +
    "\006\uffb2\007\uffb2\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\031\uffb2\037\uffb2\041\uffb2\044\uffb2\045\uffb2\051\uffb2" +
    "\052\uffb2\055\uffb2\056\uffb2\111\uffb2\001\002\000\004\016" +
    "\177\001\002\000\012\004\164\005\172\010\167\014\165" +
    "\001\002\000\004\025\uffaf\001\002\000\046\002\uffc5\006" +
    "\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\031\uffc5\037\uffc5\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052" +
    "\uffc5\055\uffc5\056\uffc5\111\uffc5\001\002\000\016\012\104" +
    "\013\uff63\016\uff63\023\uff63\024\240\077\241\001\002\000" +
    "\010\013\063\016\226\023\064\001\002\000\004\024\221" +
    "\001\002\000\004\024\214\001\002\000\004\024\207\001" +
    "\002\000\004\022\005\001\002\000\004\011\211\001\002" +
    "\000\004\025\212\001\002\000\006\013\063\023\064\001" +
    "\002\000\046\002\uff87\006\uff87\007\uff87\011\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\031\uff87\037\uff87\041\uff87\044" +
    "\uff87\045\uff87\051\uff87\052\uff87\055\uff87\056\uff87\111\uff87" +
    "\001\002\000\004\022\005\001\002\000\004\011\216\001" +
    "\002\000\004\025\217\001\002\000\006\013\063\023\064" +
    "\001\002\000\046\002\uff86\006\uff86\007\uff86\011\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\031\uff86\037\uff86\041\uff86" +
    "\044\uff86\045\uff86\051\uff86\052\uff86\055\uff86\056\uff86\111" +
    "\uff86\001\002\000\004\022\005\001\002\000\004\011\223" +
    "\001\002\000\004\025\224\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uff85\006\uff85\007\uff85\011\uff85" +
    "\017\uff85\020\uff85\021\uff85\022\uff85\031\uff85\037\uff85\041" +
    "\uff85\044\uff85\045\uff85\051\uff85\052\uff85\055\uff85\056\uff85" +
    "\111\uff85\001\002\000\004\015\230\001\002\000\052\002" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\026\uffe5\031\uffe5\033\uffe5\037\uffe5\041\uffe5\044" +
    "\uffe5\045\uffe5\051\uffe5\052\uffe5\055\uffe5\056\uffe5\111\uffe5" +
    "\001\002\000\004\016\231\001\002\000\012\004\234\005" +
    "\236\010\235\014\233\001\002\000\006\013\063\023\064" +
    "\001\002\000\006\013\uffe1\023\uffe1\001\002\000\006\013" +
    "\uffe3\023\uffe3\001\002\000\006\013\uffe0\023\uffe0\001\002" +
    "\000\006\013\uffe2\023\uffe2\001\002\000\052\002\uffe4\006" +
    "\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\026\uffe4\031\uffe4\033\uffe4\037\uffe4\041\uffe4\044\uffe4\045" +
    "\uffe4\051\uffe4\052\uffe4\055\uffe4\056\uffe4\111\uffe4\001\002" +
    "\000\004\017\056\001\002\000\006\004\242\100\243\001" +
    "\002\000\004\100\245\001\002\000\006\013\063\023\064" +
    "\001\002\000\046\002\uff6e\006\uff6e\007\uff6e\011\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\022\uff6e\031\uff6e\037\uff6e\041\uff6e" +
    "\044\uff6e\045\uff6e\051\uff6e\052\uff6e\055\uff6e\056\uff6e\111" +
    "\uff6e\001\002\000\004\016\246\001\002\000\004\015\247" +
    "\001\002\000\004\101\250\001\002\000\004\016\251\001" +
    "\002\000\004\004\252\001\002\000\006\012\257\016\256" +
    "\001\002\000\004\102\254\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uff7a\006\uff7a\007\uff7a\011\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\031\uff7a\037\uff7a\041" +
    "\uff7a\044\uff7a\045\uff7a\051\uff7a\052\uff7a\055\uff7a\056\uff7a" +
    "\111\uff7a\001\002\000\004\102\uff76\001\002\000\004\016" +
    "\260\001\002\000\004\004\252\001\002\000\004\102\uff75" +
    "\001\002\000\004\025\267\001\002\000\004\011\264\001" +
    "\002\000\006\012\265\025\uffbc\001\002\000\004\017\056" +
    "\001\002\000\004\025\uffbd\001\002\000\004\023\136\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uffc1" +
    "\006\uffc1\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\031\uffc1\037\uffc1\041\uffc1\044\uffc1\045\uffc1\051\uffc1" +
    "\052\uffc1\055\uffc1\056\uffc1\111\uffc1\001\002\000\012\017" +
    "\274\020\273\021\277\022\276\001\002\000\006\016\uff58" +
    "\077\uff58\001\002\000\006\016\uff5a\077\uff5a\001\002\000" +
    "\004\016\300\001\002\000\006\016\uff59\077\uff59\001\002" +
    "\000\006\016\uff57\077\uff57\001\002\000\004\011\301\001" +
    "\002\000\004\012\302\001\002\000\004\016\303\001\002" +
    "\000\012\017\274\020\273\021\277\022\276\001\002\000" +
    "\004\016\305\001\002\000\004\011\306\001\002\000\004" +
    "\025\307\001\002\000\004\023\310\001\002\000\004\011" +
    "\311\001\002\000\006\015\315\016\314\001\002\000\046" +
    "\002\uff7c\006\uff7c\007\uff7c\011\uff7c\017\uff7c\020\uff7c\021" +
    "\uff7c\022\uff7c\031\uff7c\037\uff7c\041\uff7c\044\uff7c\045\uff7c" +
    "\051\uff7c\052\uff7c\055\uff7c\056\uff7c\111\uff7c\001\002\000" +
    "\046\002\uff7e\006\uff7e\007\uff7e\011\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\022\uff7e\031\uff7e\037\uff7e\041\uff7e\044\uff7e\045" +
    "\uff7e\051\uff7e\052\uff7e\055\uff7e\056\uff7e\111\uff7e\001\002" +
    "\000\004\015\342\001\002\000\010\004\317\011\320\110" +
    "\316\001\002\000\006\004\340\011\341\001\002\000\020" +
    "\013\uff8d\023\uff8d\107\330\110\327\112\325\113\326\114" +
    "\332\001\002\000\020\013\uff8e\023\uff8e\107\330\110\327" +
    "\112\325\113\326\114\332\001\002\000\006\013\063\023" +
    "\064\001\002\000\052\002\uff98\006\uff98\007\uff98\011\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\026\142\031\uff98\037" +
    "\uff98\041\uff98\044\uff98\045\uff98\046\uff98\051\uff98\052\uff98" +
    "\055\uff98\056\uff98\111\uff98\001\002\000\004\011\311\001" +
    "\002\000\050\002\uff95\006\uff95\007\uff95\011\uff95\017\uff95" +
    "\020\uff95\021\uff95\022\uff95\031\uff95\037\uff95\041\uff95\044" +
    "\uff95\045\uff95\046\uff95\051\uff95\052\uff95\055\uff95\056\uff95" +
    "\111\uff95\001\002\000\006\004\uff8a\011\uff8a\001\002\000" +
    "\006\004\uff89\011\uff89\001\002\000\006\004\uff8b\011\uff8b" +
    "\001\002\000\006\004\uff8c\011\uff8c\001\002\000\006\004" +
    "\333\011\334\001\002\000\006\004\uff88\011\uff88\001\002" +
    "\000\006\013\uff91\023\uff91\001\002\000\006\013\uff93\023" +
    "\uff93\001\002\000\006\004\336\011\337\001\002\000\006" +
    "\013\uff94\023\uff94\001\002\000\006\013\uff92\023\uff92\001" +
    "\002\000\006\013\uff8f\023\uff8f\001\002\000\006\013\uff90" +
    "\023\uff90\001\002\000\004\016\343\001\002\000\010\004" +
    "\317\011\320\110\316\001\002\000\006\013\063\023\064" +
    "\001\002\000\052\002\uff97\006\uff97\007\uff97\011\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\026\142\031\uff97\037\uff97" +
    "\041\uff97\044\uff97\045\uff97\046\uff97\051\uff97\052\uff97\055" +
    "\uff97\056\uff97\111\uff97\001\002\000\004\011\311\001\002" +
    "\000\050\002\uff96\006\uff96\007\uff96\011\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\031\uff96\037\uff96\041\uff96\044\uff96" +
    "\045\uff96\046\uff96\051\uff96\052\uff96\055\uff96\056\uff96\111" +
    "\uff96\001\002\000\016\012\104\013\uff63\016\uff63\023\uff63" +
    "\024\361\077\360\001\002\000\010\013\063\016\352\023" +
    "\064\001\002\000\004\015\354\001\002\000\052\002\uffdf" +
    "\006\uffdf\007\uffdf\011\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\026\uffdf\031\uffdf\033\uffdf\037\uffdf\041\uffdf\044\uffdf" +
    "\045\uffdf\051\uffdf\052\uffdf\055\uffdf\056\uffdf\111\uffdf\001" +
    "\002\000\004\016\355\001\002\000\004\014\356\001\002" +
    "\000\006\013\063\023\064\001\002\000\052\002\uffde\006" +
    "\uffde\007\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\026\uffde\031\uffde\033\uffde\037\uffde\041\uffde\044\uffde\045" +
    "\uffde\051\uffde\052\uffde\055\uffde\056\uffde\111\uffde\001\002" +
    "\000\006\004\372\100\373\001\002\000\004\022\362\001" +
    "\002\000\004\016\366\001\002\000\004\023\136\001\002" +
    "\000\006\013\063\023\064\001\002\000\046\002\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\031\uffc0\037\uffc0\041\uffc0\044\uffc0\045\uffc0\051\uffc0\052" +
    "\uffc0\055\uffc0\056\uffc0\111\uffc0\001\002\000\004\011\367" +
    "\001\002\000\006\012\370\023\uffba\001\002\000\004\022" +
    "\362\001\002\000\004\023\uffbb\001\002\000\004\100\375" +
    "\001\002\000\006\013\063\023\064\001\002\000\046\002" +
    "\uff6b\006\uff6b\007\uff6b\011\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b\045\uff6b\051" +
    "\uff6b\052\uff6b\055\uff6b\056\uff6b\111\uff6b\001\002\000\004" +
    "\016\376\001\002\000\004\015\377\001\002\000\004\101" +
    "\u0100\001\002\000\004\016\u0101\001\002\000\004\014\u0102" +
    "\001\002\000\006\012\u0107\016\u0106\001\002\000\004\102" +
    "\u0104\001\002\000\006\013\063\023\064\001\002\000\046" +
    "\002\uff78\006\uff78\007\uff78\011\uff78\017\uff78\020\uff78\021" +
    "\uff78\022\uff78\031\uff78\037\uff78\041\uff78\044\uff78\045\uff78" +
    "\051\uff78\052\uff78\055\uff78\056\uff78\111\uff78\001\002\000" +
    "\004\102\uff72\001\002\000\004\016\u0108\001\002\000\004" +
    "\014\u0102\001\002\000\004\102\uff71\001\002\000\004\002" +
    "\ufffe\001\002\000\016\011\uff67\070\uff67\071\uff67\072\uff67" +
    "\073\uff67\074\uff67\001\002\000\004\025\u010d\001\002\000" +
    "\004\023\u010e\001\002\000\004\026\142\001\002\000\046" +
    "\002\uff7d\006\uff7d\007\uff7d\011\uff7d\017\uff7d\020\uff7d\021" +
    "\uff7d\022\uff7d\031\uff7d\037\uff7d\041\uff7d\044\uff7d\045\uff7d" +
    "\051\uff7d\052\uff7d\055\uff7d\056\uff7d\111\uff7d\001\002\000" +
    "\004\052\u0111\001\002\000\004\011\u0112\001\002\000\006" +
    "\013\063\023\064\001\002\000\046\002\uff7b\006\uff7b\007" +
    "\uff7b\011\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\031\uff7b" +
    "\037\uff7b\041\uff7b\044\uff7b\045\uff7b\051\uff7b\052\uff7b\055" +
    "\uff7b\056\uff7b\111\uff7b\001\002\000\004\106\u0116\001\002" +
    "\000\004\105\u011a\001\002\000\006\013\063\023\u0117\001" +
    "\002\000\006\105\uff61\106\u0116\001\002\000\004\105\uffc3" +
    "\001\002\000\004\105\uffc2\001\002\000\006\013\063\023" +
    "\064\001\002\000\046\002\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\031\uffc4\037\uffc4\041" +
    "\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4" +
    "\111\uffc4\001\002\000\006\011\u011f\017\u011e\001\002\000" +
    "\004\015\u0143\001\002\000\004\016\u013c\001\002\000\004" +
    "\016\u013b\001\002\000\004\046\u0121\001\002\000\004\016" +
    "\u0122\001\002\000\006\004\u0123\011\u0124\001\002\000\010" +
    "\013\uff9a\016\uff9a\023\uff9a\001\002\000\010\013\uff9b\016" +
    "\uff9b\023\uff9b\001\002\000\004\016\u0126\001\002\000\006" +
    "\030\u0128\065\u0127\001\002\000\004\016\uffa3\001\002\000" +
    "\004\016\uffa2\001\002\000\004\016\u012a\001\002\000\006" +
    "\004\u0123\011\u0124\001\002\000\004\016\u012c\001\002\000" +
    "\010\047\u0130\050\u012e\111\u012f\001\002\000\004\016\u0135" +
    "\001\002\000\004\016\uffa0\001\002\000\006\013\063\023" +
    "\064\001\002\000\004\016\uffa1\001\002\000\004\026\142" +
    "\001\002\000\046\002\uffa5\006\uffa5\007\uffa5\011\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\031\uffa5\037\uffa5\041\uffa5" +
    "\044\uffa5\045\uffa5\051\uffa5\052\uffa5\055\uffa5\056\uffa5\111" +
    "\uffa5\001\002\000\004\006\015\001\002\000\046\002\uffa4" +
    "\006\uffa4\007\uffa4\011\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\031\uffa4\037\uffa4\041\uffa4\044\uffa4\045\uffa4\051\uffa4" +
    "\052\uffa4\055\uffa4\056\uffa4\111\uffa4\001\002\000\004\004" +
    "\u0136\001\002\000\004\016\u0137\001\002\000\004\111\u0138" +
    "\001\002\000\006\013\063\023\064\001\002\000\004\026" +
    "\142\001\002\000\046\002\uffa6\006\uffa6\007\uffa6\011\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\031\uffa6\037\uffa6\041" +
    "\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\055\uffa6\056\uffa6" +
    "\111\uffa6\001\002\000\006\015\uff9c\046\uff9f\001\002\000" +
    "\004\011\u013d\001\002\000\004\016\u013e\001\002\000\004" +
    "\015\u013f\001\002\000\004\016\u0140\001\002\000\004\004" +
    "\u0141\001\002\000\004\016\u0142\001\002\000\004\046\uff9e" +
    "\001\002\000\004\016\u0144\001\002\000\004\004\u0145\001" +
    "\002\000\004\016\u0146\001\002\000\004\046\uff9d\001\002" +
    "\000\004\031\u0148\001\002\000\004\023\u0149\001\002\000" +
    "\004\026\u014a\001\002\000\004\033\u014b\001\002\000\004" +
    "\016\u014d\001\002\000\046\002\uffee\006\uffee\007\uffee\011" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\031\uffee\037\uffee" +
    "\041\uffee\044\uffee\045\uffee\051\uffee\052\uffee\055\uffee\056" +
    "\uffee\111\uffee\001\002\000\004\115\u014e\001\002\000\004" +
    "\023\u014f\001\002\000\004\026\u0150\001\002\000\004\026" +
    "\u0151\001\002\000\012\017\056\020\004\021\032\022\005" +
    "\001\002\000\004\011\105\001\002\000\052\002\uffec\006" +
    "\uffec\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\026\u0171\031\uffec\033\uffec\037\uffec\041\uffec\044\uffec\045" +
    "\uffec\051\uffec\052\uffec\055\uffec\056\uffec\111\uffec\001\002" +
    "\000\004\011\105\001\002\000\004\011\105\001\002\000" +
    "\004\033\u0158\001\002\000\004\011\105\001\002\000\004" +
    "\016\u0159\001\002\000\004\116\u015a\001\002\000\004\023" +
    "\u015b\001\002\000\004\026\u015c\001\002\000\004\026\u015d" +
    "\001\002\000\012\017\056\020\004\021\032\022\005\001" +
    "\002\000\004\033\u015f\001\002\000\004\016\u0160\001\002" +
    "\000\004\117\u0161\001\002\000\004\023\u0162\001\002\000" +
    "\004\026\u0163\001\002\000\004\026\u0164\001\002\000\012" +
    "\017\056\020\004\021\032\022\005\001\002\000\046\002" +
    "\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051" +
    "\uffed\052\uffed\055\uffed\056\uffed\111\uffed\001\002\000\010" +
    "\013\063\016\u0167\023\064\001\002\000\004\015\u0169\001" +
    "\002\000\052\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\026\uffd8\031\uffd8\033\uffd8\037" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8\055\uffd8" +
    "\056\uffd8\111\uffd8\001\002\000\004\016\u016a\001\002\000" +
    "\012\004\u016c\005\u016f\010\u016d\014\u016b\001\002\000\006" +
    "\013\uffd4\023\uffd4\001\002\000\006\013\uffd6\023\uffd6\001" +
    "\002\000\006\013\uffd3\023\uffd3\001\002\000\006\013\063" +
    "\023\064\001\002\000\006\013\uffd5\023\uffd5\001\002\000" +
    "\052\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\026\uffd7\031\uffd7\033\uffd7\037\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\055\uffd7\056\uffd7" +
    "\111\uffd7\001\002\000\052\002\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\026\u0172\031\uffeb" +
    "\033\uffeb\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052" +
    "\uffeb\055\uffeb\056\uffeb\111\uffeb\001\002\000\012\017\056" +
    "\020\004\021\032\022\005\001\002\000\050\002\uffea\006" +
    "\uffea\007\uffea\011\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\031\uffea\033\uffea\037\uffea\041\uffea\044\uffea\045\uffea\051" +
    "\uffea\052\uffea\055\uffea\056\uffea\111\uffea\001\002\000\004" +
    "\016\u0188\001\002\000\004\016\u0183\001\002\000\004\016" +
    "\u0177\001\002\000\004\042\u0178\001\002\000\004\023\136" +
    "\001\002\000\006\013\063\023\064\001\002\000\050\002" +
    "\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\031\uffad\037\uffad\041\uffad\043\u017b\044\uffad\045" +
    "\uffad\051\uffad\052\uffad\055\uffad\056\uffad\111\uffad\001\002" +
    "\000\006\004\u0174\011\u0175\001\002\000\046\002\uffae\006" +
    "\uffae\007\uffae\011\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\031\uffae\037\uffae\041\uffae\044\uffae\045\uffae\051\uffae\052" +
    "\uffae\055\uffae\056\uffae\111\uffae\001\002\000\004\016\u017e" +
    "\001\002\000\004\042\u017f\001\002\000\004\023\136\001" +
    "\002\000\006\013\063\023\064\001\002\000\050\002\uffab" +
    "\006\uffab\007\uffab\011\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\031\uffab\037\uffab\041\uffab\043\u017b\044\uffab\045\uffab" +
    "\051\uffab\052\uffab\055\uffab\056\uffab\111\uffab\001\002\000" +
    "\046\002\uffac\006\uffac\007\uffac\011\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\031\uffac\037\uffac\041\uffac\044\uffac\045" +
    "\uffac\051\uffac\052\uffac\055\uffac\056\uffac\111\uffac\001\002" +
    "\000\004\064\u0184\001\002\000\004\016\u0185\001\002\000" +
    "\006\004\u0186\011\u0187\001\002\000\004\016\uffa9\001\002" +
    "\000\004\016\uffa7\001\002\000\004\064\u0189\001\002\000" +
    "\004\016\u018a\001\002\000\006\004\u018b\011\u018c\001\002" +
    "\000\004\016\uffaa\001\002\000\004\016\uffa8\001\002\000" +
    "\004\024\uff7f\001\002\000\004\024\u01ae\001\002\000\004" +
    "\024\uff80\001\002\000\004\024\uff81\001\002\000\016\012" +
    "\104\013\uff63\016\uff63\023\uff63\024\u0194\077\u0195\001\002" +
    "\000\004\024\uff82\001\002\000\004\024\uff83\001\002\000" +
    "\004\021\032\001\002\000\006\004\u0196\100\u0197\001\002" +
    "\000\004\100\u0199\001\002\000\006\013\063\023\064\001" +
    "\002\000\046\002\uff6d\006\uff6d\007\uff6d\011\uff6d\017\uff6d" +
    "\020\uff6d\021\uff6d\022\uff6d\031\uff6d\037\uff6d\041\uff6d\044" +
    "\uff6d\045\uff6d\051\uff6d\052\uff6d\055\uff6d\056\uff6d\111\uff6d" +
    "\001\002\000\004\016\u019a\001\002\000\004\015\u019b\001" +
    "\002\000\004\101\u019c\001\002\000\004\016\u019d\001\002" +
    "\000\004\005\u019f\001\002\000\004\102\u01a4\001\002\000" +
    "\006\012\u01a1\016\u01a0\001\002\000\004\102\uff74\001\002" +
    "\000\004\016\u01a2\001\002\000\004\005\u019f\001\002\000" +
    "\004\102\uff73\001\002\000\006\013\063\023\064\001\002" +
    "\000\046\002\uff79\006\uff79\007\uff79\011\uff79\017\uff79\020" +
    "\uff79\021\uff79\022\uff79\031\uff79\037\uff79\041\uff79\044\uff79" +
    "\045\uff79\051\uff79\052\uff79\055\uff79\056\uff79\111\uff79\001" +
    "\002\000\004\025\u01ab\001\002\000\004\011\u01a8\001\002" +
    "\000\006\012\u01a9\025\uffb6\001\002\000\004\021\032\001" +
    "\002\000\004\025\uffb7\001\002\000\004\023\136\001\002" +
    "\000\006\013\063\023\064\001\002\000\046\002\uffbe\006" +
    "\uffbe\007\uffbe\011\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\031\uffbe\037\uffbe\041\uffbe\044\uffbe\045\uffbe\051\uffbe\052" +
    "\uffbe\055\uffbe\056\uffbe\111\uffbe\001\002\000\004\021\032" +
    "\001\002\000\004\011\u01b0\001\002\000\004\025\u01b1\001" +
    "\002\000\006\013\063\023\064\001\002\000\046\002\uff84" +
    "\006\uff84\007\uff84\011\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\031\uff84\037\uff84\041\uff84\044\uff84\045\uff84\051\uff84" +
    "\052\uff84\055\uff84\056\uff84\111\uff84\001\002\000\004\011" +
    "\u01b4\001\002\000\006\013\063\023\064\001\002\000\046" +
    "\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\031\uffc6\037\uffc6\041\uffc6\044\uffc6\045\uffc6" +
    "\051\uffc6\052\uffc6\055\uffc6\056\uffc6\111\uffc6\001\002\000" +
    "\004\004\u01c4\001\002\000\004\015\u01b8\001\002\000\004" +
    "\016\u01b9\001\002\000\012\004\317\011\320\057\u01ba\110" +
    "\316\001\002\000\014\017\274\020\273\021\277\022\276" +
    "\031\u01bc\001\002\000\004\077\u01c0\001\002\000\004\024" +
    "\u01bd\001\002\000\004\025\u01be\001\002\000\006\013\063" +
    "\023\064\001\002\000\046\002\uffb1\006\uffb1\007\uffb1\011" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\031\uffb1\037\uffb1" +
    "\041\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\055\uffb1\056" +
    "\uffb1\111\uffb1\001\002\000\004\004\u01c1\001\002\000\004" +
    "\100\u01c2\001\002\000\006\013\063\023\064\001\002\000" +
    "\046\002\uff69\006\uff69\007\uff69\011\uff69\017\uff69\020\uff69" +
    "\021\uff69\022\uff69\031\uff69\037\uff69\041\uff69\044\uff69\045" +
    "\uff69\051\uff69\052\uff69\055\uff69\056\uff69\111\uff69\001\002" +
    "\000\004\100\u01c5\001\002\000\004\016\u01c6\001\002\000" +
    "\004\015\u01c7\001\002\000\004\016\u01c8\001\002\000\012" +
    "\004\164\005\172\010\167\014\165\001\002\000\006\013" +
    "\063\023\064\001\002\000\046\002\uff6a\006\uff6a\007\uff6a" +
    "\011\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\031\uff6a\037" +
    "\uff6a\041\uff6a\044\uff6a\045\uff6a\051\uff6a\052\uff6a\055\uff6a" +
    "\056\uff6a\111\uff6a\001\002\000\012\004\u01cc\005\u01d0\011" +
    "\u01cf\014\u01cd\001\002\000\010\012\u01dd\013\uffca\023\uffca" +
    "\001\002\000\010\012\u01da\013\uffcb\023\uffcb\001\002\000" +
    "\006\013\063\023\064\001\002\000\012\012\u01d5\013\uffc8" +
    "\023\uffc8\060\u01d4\001\002\000\010\012\u01d1\013\uffc9\023" +
    "\uffc9\001\002\000\004\016\u01d2\001\002\000\012\004\u01cc" +
    "\005\u01d0\011\u01cf\014\u01cd\001\002\000\006\013\uffcd\023" +
    "\uffcd\001\002\000\004\011\u01d8\001\002\000\004\016\u01d6" +
    "\001\002\000\012\004\u01cc\005\u01d0\011\u01cf\014\u01cd\001" +
    "\002\000\006\013\uffcc\023\uffcc\001\002\000\006\013\uffc7" +
    "\023\uffc7\001\002\000\046\002\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\031\uffd0\037\uffd0" +
    "\041\uffd0\044\uffd0\045\uffd0\051\uffd0\052\uffd0\055\uffd0\056" +
    "\uffd0\111\uffd0\001\002\000\004\016\u01db\001\002\000\012" +
    "\004\u01cc\005\u01d0\011\u01cf\014\u01cd\001\002\000\006\013" +
    "\uffcf\023\uffcf\001\002\000\004\016\u01de\001\002\000\012" +
    "\004\u01cc\005\u01d0\011\u01cf\014\u01cd\001\002\000\006\013" +
    "\uffce\023\uffce\001\002\000\004\026\142\001\002\000\004" +
    "\011\311\001\002\000\004\046\u01e3\001\002\000\004\016" +
    "\u01e4\001\002\000\006\004\u0123\011\u0124\001\002\000\004" +
    "\016\u01e6\001\002\000\006\030\u0128\065\u0127\001\002\000" +
    "\004\016\u01e8\001\002\000\006\004\u0123\011\u0124\001\002" +
    "\000\006\013\063\023\064\001\002\000\046\002\uff99\006" +
    "\uff99\007\uff99\011\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\031\uff99\037\uff99\041\uff99\044\uff99\045\uff99\051\uff99\052" +
    "\uff99\055\uff99\056\uff99\111\uff99\001\002\000\004\002\000" +
    "\001\002\000\004\011\uff65\001\002\000\004\011\uff66\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01eb\000\070\002\006\004\056\005\040\006\042\007" +
    "\005\010\010\011\037\015\041\016\015\017\032\022\012" +
    "\031\043\032\034\035\035\042\011\046\013\053\033\055" +
    "\036\056\046\057\020\060\044\061\052\071\025\076\022" +
    "\105\051\106\024\112\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0165\036" +
    "\u018d\001\001\000\004\033\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\u0109\004\056\005\040" +
    "\006\042\007\005\010\010\011\037\015\041\016\015\017" +
    "\032\022\012\031\043\032\034\035\035\042\011\046\013" +
    "\053\033\055\036\056\046\057\020\060\044\061\052\071" +
    "\025\076\022\105\051\106\024\112\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\350\001\001\000\002" +
    "\001\001\000\004\012\202\001\001\000\004\013\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\002\057\004\056\005\040\006\042\007\005" +
    "\010\010\011\037\015\041\016\015\017\032\022\012\031" +
    "\043\032\034\035\035\042\011\046\013\053\033\055\036" +
    "\056\046\057\020\060\044\061\052\071\025\076\022\105" +
    "\051\106\024\112\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\126" +
    "\001\001\000\002\001\001\000\004\012\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\123\001\001" +
    "\000\002\001\001\000\004\013\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\133\001\001\000\002\001" +
    "\001\000\004\023\136\001\001\000\004\030\140\001\001" +
    "\000\004\013\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\167\040\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\212\001" +
    "\001\000\002\001\001\000\004\060\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\217\001\001\000" +
    "\002\001\001\000\004\060\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\231\001\001\000\004\013\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\261\056\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\265\056\262\001\001\000\002\001\001\000\004\023" +
    "\267\001\001\000\004\013\270\001\001\000\002\001\001" +
    "\000\004\043\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\312\106" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\320\001\001\000" +
    "\002\001\001\000\004\110\334\001\001\000\004\110\330" +
    "\001\001\000\004\013\321\001\001\000\004\030\322\001" +
    "\001\000\004\106\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\343\001\001\000\004\013\344\001" +
    "\001\000\004\030\345\001\001\000\004\106\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\362\001\001\000\002" +
    "\001\001\000\004\023\363\001\001\000\004\013\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\u010f\045\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0112\001\001\000\002\001\001\000\004" +
    "\072\u0114\001\001\000\002\001\001\000\004\013\u0117\001" +
    "\001\000\004\072\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u011a\001\001\000\002\001\001\000" +
    "\006\077\u011f\104\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u012a\001\001\000\002\001\001\000\004\101\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0130" +
    "\001\001\000\002\001\001\000\006\030\u0132\103\u0131\001" +
    "\001\000\002\001\001\000\004\016\u0133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0138\001\001\000\006\030\u0132\103\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0152\006\042\007\005" +
    "\010\010\011\037\056\u0154\057\u0153\060\u0151\061\u0156\114" +
    "\u0155\001\001\000\004\012\350\001\001\000\002\001\001" +
    "\000\004\012\u0165\001\001\000\004\012\202\001\001\000" +
    "\002\001\001\000\004\012\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0152\006\042\007\005\010\010" +
    "\011\037\056\u0154\057\u0153\060\u0151\061\u0156\114\u015d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0152\006\042\007\005\010\010\011\037\056\u0154" +
    "\057\u0153\060\u0151\061\u0156\114\u0164\001\001\000\002\001" +
    "\001\000\004\013\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u016f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0152\006\042\007\005\010\010" +
    "\011\037\056\u0154\057\u0153\060\u0151\061\u0156\114\u0172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0178\001" +
    "\001\000\004\013\u0179\001\001\000\004\034\u017b\001\001" +
    "\000\004\033\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u017f\001\001\000\004" +
    "\013\u0180\001\001\000\004\034\u0181\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\u01a5\057\u01a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0197\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u01a2\001\001\000\002\001\001" +
    "\000\004\013\u01a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u01a9" +
    "\057\u01a6\001\001\000\002\001\001\000\004\023\u01ab\001" +
    "\001\000\004\013\u01ac\001\001\000\002\001\001\000\004" +
    "\057\u01ae\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u01b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\343" +
    "\001\001\000\004\043\u01ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u01be\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u01c2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u01c8\001\001\000\004\013\u01c9\001\001\000\002" +
    "\001\001\000\004\020\u01cd\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01d8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u01d2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u01d6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u01db" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u01de\001\001\000\002\001\001\000\004\030\u01e0\001\001" +
    "\000\004\106\u01e1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u01e4\001\001\000\002\001\001\000\004" +
    "\100\u01e6\001\001\000\002\001\001\000\004\102\u01e8\001" +
    "\001\000\004\013\u01e9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CLASESA ::= clase libre IDmayu newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
