
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\112\006\000" +
    "\002\112\006\000\002\112\007\000\002\116\005\000\002" +
    "\116\011\000\002\116\003\000\002\116\007\000\002\115" +
    "\027\000\002\115\020\000\002\115\020\000\002\115\020" +
    "\000\002\115\011\000\002\115\011\000\002\115\011\000" +
    "\002\115\007\000\002\115\021\000\002\115\014\000\002" +
    "\115\014\000\002\115\014\000\002\115\007\000\002\115" +
    "\007\000\002\115\007\000\002\113\007\000\002\113\021" +
    "\000\002\113\014\000\002\113\014\000\002\113\014\000" +
    "\002\113\007\000\002\113\007\000\002\113\007\000\002" +
    "\113\027\000\002\113\020\000\002\113\020\000\002\113" +
    "\020\000\002\113\011\000\002\113\011\000\002\113\011" +
    "\000\002\114\003\000\002\114\004\000\002\114\006\000" +
    "\002\117\006\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\005\000\002\006" +
    "\007\000\002\006\013\000\002\006\011\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\007\005\000\002\007\007\000\002\007\013\000\002" +
    "\007\011\000\002\010\005\000\002\010\007\000\002\010" +
    "\013\000\002\010\011\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\011\005\000\002\011\007\000" +
    "\002\011\013\000\002\011\011\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\017\006\000\002\071" +
    "\004\000\002\071\007\000\002\071\004\000\002\072\004" +
    "\000\002\072\005\000\002\022\011\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\010\000\002" +
    "\022\010\000\002\022\010\000\002\022\010\000\002\024" +
    "\007\000\002\024\005\000\002\025\007\000\002\025\005" +
    "\000\002\026\007\000\002\026\005\000\002\027\007\000" +
    "\002\027\005\000\002\127\004\000\002\127\004\000\002" +
    "\127\004\000\002\127\004\000\002\127\003\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\023\013" +
    "\000\002\023\007\000\002\023\013\000\002\023\013\000" +
    "\002\023\007\000\002\023\020\000\002\023\015\000\002" +
    "\023\011\000\002\023\015\000\002\023\015\000\002\023" +
    "\011\000\002\023\022\000\002\120\003\000\002\120\003" +
    "\000\002\031\015\000\002\031\016\000\002\031\013\000" +
    "\002\031\005\000\002\037\006\000\002\032\012\000\002" +
    "\032\011\000\002\034\012\000\002\034\011\000\002\034" +
    "\005\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\076\024\000\002\076\020\000" +
    "\002\103\004\000\002\100\003\000\002\100\003\000\002" +
    "\101\003\000\002\101\003\000\002\077\004\000\002\077" +
    "\012\000\002\077\007\000\002\104\004\000\002\102\003" +
    "\000\002\102\003\000\002\105\016\000\002\106\010\000" +
    "\002\106\006\000\002\106\010\000\002\106\012\000\002" +
    "\106\012\000\002\106\010\000\002\106\003\000\002\107" +
    "\005\000\002\107\005\000\002\107\005\000\002\107\005" +
    "\000\002\107\004\000\002\107\004\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\126\007\000\002" +
    "\126\007\000\002\126\005\000\002\126\005\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\035\011\000" +
    "\002\035\011\000\002\035\011\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\035" +
    "\011\000\002\035\013\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\042\010\000\002\042\007\000\002\045\006\000\002" +
    "\041\011\000\002\041\012\000\002\046\016\000\002\046" +
    "\016\000\002\046\016\000\002\046\016\000\002\047\004" +
    "\000\002\047\006\000\002\050\004\000\002\050\006\000" +
    "\002\051\004\000\002\051\006\000\002\052\004\000\002" +
    "\052\006\000\002\053\007\000\002\053\007\000\002\053" +
    "\007\000\002\053\007\000\002\053\013\000\002\053\014" +
    "\000\002\053\014\000\002\053\014\000\002\053\014\000" +
    "\002\073\007\000\002\073\007\000\002\073\007\000\002" +
    "\073\007\000\002\056\004\000\002\057\004\000\002\061" +
    "\004\000\002\060\004\000\002\012\005\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\030\004\000" +
    "\002\030\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u033f\000\052\006\016\007\022\011\021\017\064\020" +
    "\005\021\037\022\006\023\004\031\057\037\026\041\023" +
    "\044\053\045\031\051\033\052\063\053\015\055\055\056" +
    "\032\111\011\124\035\001\002\000\054\002\uffed\006\uffed" +
    "\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed\124\uffed\001" +
    "\002\000\004\016\u0341\001\002\000\004\016\u0340\001\002" +
    "\000\074\002\uffc2\006\uffc2\007\uffc2\011\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\031\uffc2\033\uffc2" +
    "\034\uffc2\037\uffc2\041\uffc2\044\uffc2\045\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\055\uffc2\056\uffc2\111\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\124\uffc2\001\002\000\004\002" +
    "\u033f\001\002\000\004\023\u0334\001\002\000\054\002\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0\045\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\111\ufff0\124" +
    "\ufff0\001\002\000\054\002\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\031\ufffa\037" +
    "\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\056\ufffa\111\ufffa\124\ufffa\001\002\000\074\002" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\026\uffc1\031\uffc1\033\uffc1\034\uffc1\037" +
    "\uffc1\041\uffc1\044\uffc1\045\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\055\uffc1\056\uffc1\111\uffc1\116\uffc1\117\uffc1\120\uffc1\121" +
    "\uffc1\122\uffc1\124\uffc1\001\002\000\004\016\u0331\001\002" +
    "\000\004\016\u031c\001\002\000\054\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052" +
    "\uffef\053\uffef\055\uffef\056\uffef\111\uffef\124\uffef\001\002" +
    "\000\054\002\uffa4\006\uffa4\007\uffa4\011\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\031\uffa4\037\uffa4\041\uffa4" +
    "\044\uffa4\045\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056" +
    "\uffa4\111\uffa4\124\uffa4\001\002\000\012\015\u02c8\016\u02c6" +
    "\060\u02c7\077\u02c5\001\002\000\004\016\u02c2\001\002\000" +
    "\004\016\u02a5\001\002\000\020\011\u026a\066\u026d\070\u026c" +
    "\071\u026b\072\u0269\073\u0268\074\u0267\001\002\000\054\002" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056\ufff7\111\ufff7" +
    "\124\ufff7\001\002\000\004\016\u0261\001\002\000\054\002" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\031\ufff6\037\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\111\ufff6" +
    "\124\ufff6\001\002\000\054\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\031\ufff8" +
    "\037\ufff8\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\055\ufff8\056\ufff8\111\ufff8\124\ufff8\001\002\000\004" +
    "\016\u0236\001\002\000\006\013\206\023\u022d\001\002\000" +
    "\004\024\u0225\001\002\000\054\002\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031" +
    "\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\055\ufff3\056\ufff3\111\ufff3\124\ufff3\001\002\000" +
    "\004\016\u0204\001\002\000\054\002\uffa3\006\uffa3\007\uffa3" +
    "\011\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\031" +
    "\uffa3\037\uffa3\041\uffa3\044\uffa3\045\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\055\uffa3\056\uffa3\111\uffa3\124\uffa3\001\002\000" +
    "\004\016\u0203\001\002\000\054\002\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031" +
    "\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\056\ufff2\111\ufff2\124\ufff2\001\002\000" +
    "\054\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\031\uffee\037\uffee\041\uffee\044" +
    "\uffee\045\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee" +
    "\111\uffee\124\uffee\001\002\000\054\002\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\031\ufff1\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\111\ufff1\124\ufff1\001\002" +
    "\000\054\002\uffff\006\016\007\022\011\021\017\064\020" +
    "\005\021\037\022\006\023\004\031\057\037\026\041\023" +
    "\044\053\045\031\051\033\052\063\053\015\055\055\056" +
    "\032\111\011\124\035\001\002\000\074\002\uffc0\006\uffc0" +
    "\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\026\uffc0\031\uffc0\033\uffc0\034\uffc0\037\uffc0\041\uffc0" +
    "\044\uffc0\045\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056" +
    "\uffc0\111\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\122\uffc0" +
    "\124\uffc0\001\002\000\004\023\u0145\001\002\000\054\002" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc" +
    "\124\ufffc\001\002\000\054\002\ufffb\006\ufffb\007\ufffb\011" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb" +
    "\037\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\055\ufffb\056\ufffb\111\ufffb\124\ufffb\001\002\000\074" +
    "\002\uffc3\006\uffc3\007\uffc3\011\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\026\uffc3\031\uffc3\033\uffc3\034\uffc3" +
    "\037\uffc3\041\uffc3\044\uffc3\045\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\055\uffc3\056\uffc3\111\uffc3\116\uffc3\117\uffc3\120\uffc3" +
    "\121\uffc3\122\uffc3\124\uffc3\001\002\000\054\002\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9\124\ufff9" +
    "\001\002\000\004\011\u0124\001\002\000\004\024\u0117\001" +
    "\002\000\006\011\354\076\356\001\002\000\006\013\206" +
    "\023\207\001\002\000\056\002\uff4a\006\uff4a\007\uff4a\011" +
    "\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\031\uff4a" +
    "\037\uff4a\041\uff4a\044\uff4a\045\uff4a\046\uff4a\051\uff4a\052" +
    "\uff4a\053\uff4a\055\uff4a\056\uff4a\111\uff4a\124\uff4a\001\002" +
    "\000\006\016\323\023\uffe7\001\002\000\054\002\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\111\ufff5\124\ufff5" +
    "\001\002\000\006\011\212\067\214\001\002\000\054\002" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111\ufff4" +
    "\124\ufff4\001\002\000\004\011\205\001\002\000\006\011" +
    "\070\016\067\001\002\000\054\002\001\006\016\007\022" +
    "\011\021\017\064\020\005\021\037\022\006\023\004\031" +
    "\057\037\026\041\023\044\053\045\031\051\033\052\063" +
    "\053\015\055\055\056\032\111\011\124\035\001\002\000" +
    "\004\002\ufffd\001\002\000\006\011\uff0a\076\uff0a\001\002" +
    "\000\004\024\071\001\002\000\004\017\072\001\002\000" +
    "\004\016\073\001\002\000\004\011\074\001\002\000\004" +
    "\025\075\001\002\000\004\023\076\001\002\000\004\023" +
    "\077\001\002\000\010\026\101\055\055\056\032\001\002" +
    "\000\054\002\uff2e\006\uff2e\007\uff2e\011\uff2e\017\uff2e\020" +
    "\uff2e\021\uff2e\022\uff2e\023\uff2e\031\uff2e\037\uff2e\041\uff2e" +
    "\044\uff2e\045\uff2e\051\uff2e\052\uff2e\053\uff2e\055\uff2e\056" +
    "\uff2e\111\uff2e\124\uff2e\001\002\000\014\006\uff01\011\uff01" +
    "\026\101\035\uff01\052\uff01\001\002\000\004\035\151\001" +
    "\002\000\004\023\104\001\002\000\004\026\101\001\002" +
    "\000\004\035\106\001\002\000\004\016\107\001\002\000" +
    "\012\004\110\005\113\010\111\011\112\001\002\000\060" +
    "\002\uff70\006\uff70\007\uff70\011\uff70\013\uff70\016\145\017" +
    "\uff70\020\uff70\021\uff70\022\uff70\023\uff70\031\uff70\037\uff70" +
    "\041\uff70\044\uff70\045\uff70\051\uff70\052\uff70\053\uff70\055" +
    "\uff70\056\uff70\111\uff70\124\uff70\001\002\000\056\002\uff73" +
    "\006\uff73\007\uff73\011\uff73\013\uff73\017\uff73\020\uff73\021" +
    "\uff73\022\uff73\023\uff73\031\uff73\037\uff73\041\uff73\044\uff73" +
    "\045\uff73\051\uff73\052\uff73\053\uff73\055\uff73\056\uff73\111" +
    "\uff73\124\uff73\001\002\000\010\016\127\107\130\110\126" +
    "\001\002\000\004\016\114\001\002\000\016\054\122\107" +
    "\120\110\116\112\115\113\117\114\123\001\002\000\012" +
    "\004\uff3a\005\uff3a\011\uff3a\016\uff3a\001\002\000\012\004" +
    "\uff3b\005\uff3b\011\uff3b\016\uff3b\001\002\000\012\004\uff39" +
    "\005\uff39\011\uff39\016\uff39\001\002\000\012\004\uff3c\005" +
    "\uff3c\011\uff3c\016\uff3c\001\002\000\004\005\124\001\002" +
    "\000\012\004\uff37\005\uff37\011\uff37\016\uff37\001\002\000" +
    "\012\004\uff38\005\uff38\011\uff38\016\uff38\001\002\000\004" +
    "\011\125\001\002\000\056\002\uff71\006\uff71\007\uff71\011" +
    "\uff71\013\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71" +
    "\031\uff71\037\uff71\041\uff71\044\uff71\045\uff71\051\uff71\052" +
    "\uff71\053\uff71\055\uff71\056\uff71\111\uff71\124\uff71\001\002" +
    "\000\006\011\uff6d\016\uff6d\001\002\000\016\054\122\107" +
    "\120\110\116\112\115\113\117\114\123\001\002\000\006" +
    "\011\uff6e\016\uff6e\001\002\000\004\011\132\001\002\000" +
    "\004\024\133\001\002\000\004\011\134\001\002\000\004" +
    "\016\135\001\002\000\006\107\130\110\126\001\002\000" +
    "\004\016\137\001\002\000\004\004\140\001\002\000\004" +
    "\025\141\001\002\000\056\002\uff6f\006\uff6f\007\uff6f\011" +
    "\uff6f\013\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f" +
    "\031\uff6f\037\uff6f\041\uff6f\044\uff6f\045\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\055\uff6f\056\uff6f\111\uff6f\124\uff6f\001\002" +
    "\000\004\016\143\001\002\000\004\011\144\001\002\000" +
    "\056\002\uff74\006\uff74\007\uff74\011\uff74\013\uff74\017\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\031\uff74\037\uff74\041" +
    "\uff74\044\uff74\045\uff74\051\uff74\052\uff74\053\uff74\055\uff74" +
    "\056\uff74\111\uff74\124\uff74\001\002\000\016\054\122\107" +
    "\120\110\116\112\115\113\117\114\123\001\002\000\004" +
    "\016\147\001\002\000\004\004\150\001\002\000\056\002" +
    "\uff72\006\uff72\007\uff72\011\uff72\013\uff72\017\uff72\020\uff72" +
    "\021\uff72\022\uff72\023\uff72\031\uff72\037\uff72\041\uff72\044" +
    "\uff72\045\uff72\051\uff72\052\uff72\053\uff72\055\uff72\056\uff72" +
    "\111\uff72\124\uff72\001\002\000\004\016\152\001\002\000" +
    "\012\004\153\005\156\010\154\011\155\001\002\000\060" +
    "\002\uff76\006\uff76\007\uff76\011\uff76\013\uff76\016\200\017" +
    "\uff76\020\uff76\021\uff76\022\uff76\023\uff76\031\uff76\037\uff76" +
    "\041\uff76\044\uff76\045\uff76\051\uff76\052\uff76\053\uff76\055" +
    "\uff76\056\uff76\111\uff76\124\uff76\001\002\000\056\002\uff79" +
    "\006\uff79\007\uff79\011\uff79\013\uff79\017\uff79\020\uff79\021" +
    "\uff79\022\uff79\023\uff79\031\uff79\037\uff79\041\uff79\044\uff79" +
    "\045\uff79\051\uff79\052\uff79\053\uff79\055\uff79\056\uff79\111" +
    "\uff79\124\uff79\001\002\000\010\016\163\107\130\110\126" +
    "\001\002\000\004\016\157\001\002\000\016\054\122\107" +
    "\120\110\116\112\115\113\117\114\123\001\002\000\004" +
    "\005\161\001\002\000\004\011\162\001\002\000\056\002" +
    "\uff77\006\uff77\007\uff77\011\uff77\013\uff77\017\uff77\020\uff77" +
    "\021\uff77\022\uff77\023\uff77\031\uff77\037\uff77\041\uff77\044" +
    "\uff77\045\uff77\051\uff77\052\uff77\053\uff77\055\uff77\056\uff77" +
    "\111\uff77\124\uff77\001\002\000\016\054\122\107\120\110" +
    "\116\112\115\113\117\114\123\001\002\000\004\011\165" +
    "\001\002\000\004\024\166\001\002\000\004\011\167\001" +
    "\002\000\004\016\170\001\002\000\006\107\130\110\126" +
    "\001\002\000\004\016\172\001\002\000\004\004\173\001" +
    "\002\000\004\025\174\001\002\000\056\002\uff75\006\uff75" +
    "\007\uff75\011\uff75\013\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045\uff75" +
    "\051\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75\124" +
    "\uff75\001\002\000\004\016\176\001\002\000\004\011\177" +
    "\001\002\000\056\002\uff7a\006\uff7a\007\uff7a\011\uff7a\013" +
    "\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\031\uff7a" +
    "\037\uff7a\041\uff7a\044\uff7a\045\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\055\uff7a\056\uff7a\111\uff7a\124\uff7a\001\002\000\016" +
    "\054\122\107\120\110\116\112\115\113\117\114\123\001" +
    "\002\000\004\016\202\001\002\000\004\004\203\001\002" +
    "\000\056\002\uff78\006\uff78\007\uff78\011\uff78\013\uff78\017" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\031\uff78\037\uff78" +
    "\041\uff78\044\uff78\045\uff78\051\uff78\052\uff78\053\uff78\055" +
    "\uff78\056\uff78\111\uff78\124\uff78\001\002\000\012\006\uff02" +
    "\011\uff02\035\uff02\052\uff02\001\002\000\006\013\206\023" +
    "\207\001\002\000\004\023\211\001\002\000\100\002\uff03" +
    "\006\uff03\007\uff03\011\uff03\017\uff03\020\uff03\021\uff03\022" +
    "\uff03\023\uff03\026\uff03\031\uff03\033\uff03\034\uff03\037\uff03" +
    "\041\uff03\043\uff03\044\uff03\045\uff03\046\uff03\051\uff03\052" +
    "\uff03\053\uff03\055\uff03\056\uff03\111\uff03\116\uff03\117\uff03" +
    "\120\uff03\121\uff03\122\uff03\124\uff03\001\002\000\054\002" +
    "\uff69\006\uff69\007\uff69\011\uff69\017\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\031\uff69\037\uff69\041\uff69\044\uff69\045" +
    "\uff69\051\uff69\052\uff69\053\uff69\055\uff69\056\uff69\111\uff69" +
    "\124\uff69\001\002\000\102\002\uff04\006\uff04\007\uff04\011" +
    "\uff04\017\uff04\020\uff04\021\uff04\022\uff04\023\uff04\026\uff04" +
    "\031\uff04\033\uff04\034\uff04\037\uff04\041\uff04\043\uff04\044" +
    "\uff04\045\uff04\046\uff04\051\uff04\052\uff04\053\uff04\055\uff04" +
    "\056\uff04\105\uff04\111\uff04\116\uff04\117\uff04\120\uff04\121" +
    "\uff04\122\uff04\124\uff04\001\002\000\016\012\235\013\uff05" +
    "\016\uff05\023\uff05\024\234\077\233\001\002\000\010\013" +
    "\206\016\222\023\207\001\002\000\004\024\215\001\002" +
    "\000\004\022\006\001\002\000\004\011\217\001\002\000" +
    "\004\025\220\001\002\000\006\013\206\023\207\001\002" +
    "\000\054\002\uff34\006\uff34\007\uff34\011\uff34\017\uff34\020" +
    "\uff34\021\uff34\022\uff34\023\uff34\031\uff34\037\uff34\041\uff34" +
    "\044\uff34\045\uff34\051\uff34\052\uff34\053\uff34\055\uff34\056" +
    "\uff34\111\uff34\124\uff34\001\002\000\004\015\224\001\002" +
    "\000\074\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\031\uffb3\033\uffb3" +
    "\034\uffb3\037\uffb3\041\uffb3\044\uffb3\045\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\055\uffb3\056\uffb3\111\uffb3\116\uffb3\117\uffb3" +
    "\120\uffb3\121\uffb3\122\uffb3\124\uffb3\001\002\000\004\016" +
    "\225\001\002\000\010\004\226\005\231\010\227\001\002" +
    "\000\006\013\uffaf\023\uffaf\001\002\000\006\013\uffad\023" +
    "\uffad\001\002\000\006\013\206\023\207\001\002\000\006" +
    "\013\uffae\023\uffae\001\002\000\074\002\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\026\uffb0\031\uffb0\033\uffb0\034\uffb0\037\uffb0\041\uffb0\044" +
    "\uffb0\045\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0" +
    "\111\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0\124" +
    "\uffb0\001\002\000\006\004\303\100\304\001\002\000\014" +
    "\017\247\020\243\021\246\022\241\025\251\001\002\000" +
    "\004\011\236\001\002\000\012\012\235\013\uff05\016\uff05" +
    "\023\uff05\001\002\000\010\013\uff06\016\uff06\023\uff06\001" +
    "\002\000\014\017\247\020\243\021\246\022\241\025\uff7e" +
    "\001\002\000\004\016\276\001\002\000\014\017\247\020" +
    "\243\021\246\022\241\025\uff7d\001\002\000\004\016\271" +
    "\001\002\000\014\017\247\020\243\021\246\022\241\025" +
    "\uff7c\001\002\000\014\017\247\020\243\021\246\022\241" +
    "\025\uff7b\001\002\000\004\016\263\001\002\000\004\016" +
    "\257\001\002\000\004\025\254\001\002\000\004\023\077" +
    "\001\002\000\004\023\253\001\002\000\054\002\uff8c\006" +
    "\uff8c\007\uff8c\011\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\031\uff8c\037\uff8c\041\uff8c\044\uff8c\045\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\111\uff8c\124\uff8c" +
    "\001\002\000\004\023\077\001\002\000\006\013\206\023" +
    "\207\001\002\000\054\002\uff90\006\uff90\007\uff90\011\uff90" +
    "\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\031\uff90\037" +
    "\uff90\041\uff90\044\uff90\045\uff90\051\uff90\052\uff90\053\uff90" +
    "\055\uff90\056\uff90\111\uff90\124\uff90\001\002\000\004\011" +
    "\260\001\002\000\016\012\261\017\uff89\020\uff89\021\uff89" +
    "\022\uff89\025\uff89\001\002\000\004\017\247\001\002\000" +
    "\014\017\uff8a\020\uff8a\021\uff8a\022\uff8a\025\uff8a\001\002" +
    "\000\004\011\264\001\002\000\016\012\265\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\025\uff83\001\002\000\004\021\246" +
    "\001\002\000\014\017\uff84\020\uff84\021\uff84\022\uff84\025" +
    "\uff84\001\002\000\004\025\uff7f\001\002\000\004\025\uff80" +
    "\001\002\000\004\011\272\001\002\000\016\012\273\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\025\uff85\001\002\000\004" +
    "\020\243\001\002\000\014\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\025\uff86\001\002\000\004\025\uff81\001\002\000\004" +
    "\011\277\001\002\000\016\012\300\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\025\uff87\001\002\000\004\022\241\001\002" +
    "\000\014\017\uff88\020\uff88\021\uff88\022\uff88\025\uff88\001" +
    "\002\000\004\025\uff82\001\002\000\004\100\306\001\002" +
    "\000\006\013\206\023\207\001\002\000\054\002\uff15\006" +
    "\uff15\007\uff15\011\uff15\017\uff15\020\uff15\021\uff15\022\uff15" +
    "\023\uff15\031\uff15\037\uff15\041\uff15\044\uff15\045\uff15\051" +
    "\uff15\052\uff15\053\uff15\055\uff15\056\uff15\111\uff15\124\uff15" +
    "\001\002\000\004\016\307\001\002\000\004\015\310\001" +
    "\002\000\004\101\311\001\002\000\004\016\312\001\002" +
    "\000\004\010\314\001\002\000\004\102\321\001\002\000" +
    "\006\012\316\016\315\001\002\000\004\102\uff19\001\002" +
    "\000\004\016\317\001\002\000\004\010\314\001\002\000" +
    "\004\102\uff18\001\002\000\006\013\206\023\207\001\002" +
    "\000\054\002\uff20\006\uff20\007\uff20\011\uff20\017\uff20\020" +
    "\uff20\021\uff20\022\uff20\023\uff20\031\uff20\037\uff20\041\uff20" +
    "\044\uff20\045\uff20\051\uff20\052\uff20\053\uff20\055\uff20\056" +
    "\uff20\111\uff20\124\uff20\001\002\000\006\011\324\103\325" +
    "\001\002\000\004\016\330\001\002\000\004\016\326\001" +
    "\002\000\004\031\327\001\002\000\004\023\uffe6\001\002" +
    "\000\004\015\331\001\002\000\004\016\332\001\002\000" +
    "\004\057\333\001\002\000\004\031\334\001\002\000\004" +
    "\024\335\001\002\000\014\004\336\005\344\010\341\014" +
    "\340\025\343\001\002\000\012\012\uff00\013\uff00\023\uff00" +
    "\025\uff00\001\002\000\004\012\350\001\002\000\012\012" +
    "\ufeff\013\ufeff\023\ufeff\025\ufeff\001\002\000\012\012\ufefe" +
    "\013\ufefe\023\ufefe\025\ufefe\001\002\000\004\025\346\001" +
    "\002\000\006\013\206\023\207\001\002\000\012\012\ufefd" +
    "\013\ufefd\023\ufefd\025\ufefd\001\002\000\054\002\uff6c\006" +
    "\uff6c\007\uff6c\011\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c" +
    "\023\uff6c\031\uff6c\037\uff6c\041\uff6c\044\uff6c\045\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\055\uff6c\056\uff6c\111\uff6c\124\uff6c" +
    "\001\002\000\006\013\206\023\207\001\002\000\054\002" +
    "\uff6b\006\uff6b\007\uff6b\011\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b\045" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\055\uff6b\056\uff6b\111\uff6b" +
    "\124\uff6b\001\002\000\004\016\351\001\002\000\012\004" +
    "\336\005\344\010\341\014\340\001\002\000\004\025\uff68" +
    "\001\002\000\054\002\uff97\006\uff97\007\uff97\011\uff97\017" +
    "\uff97\020\uff97\021\uff97\022\uff97\023\uff97\031\uff97\037\uff97" +
    "\041\uff97\044\uff97\045\uff97\051\uff97\052\uff97\053\uff97\055" +
    "\uff97\056\uff97\111\uff97\124\uff97\001\002\000\016\012\235" +
    "\013\uff05\016\uff05\023\uff05\024\376\077\377\001\002\000" +
    "\010\013\206\016\364\023\207\001\002\000\004\024\357" +
    "\001\002\000\004\022\006\001\002\000\004\011\361\001" +
    "\002\000\004\025\362\001\002\000\006\013\206\023\207" +
    "\001\002\000\054\002\uff36\006\uff36\007\uff36\011\uff36\017" +
    "\uff36\020\uff36\021\uff36\022\uff36\023\uff36\031\uff36\037\uff36" +
    "\041\uff36\044\uff36\045\uff36\051\uff36\052\uff36\053\uff36\055" +
    "\uff36\056\uff36\111\uff36\124\uff36\001\002\000\004\015\366" +
    "\001\002\000\074\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\037\uffbf\041\uffbf\044\uffbf\045\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\111\uffbf\116\uffbf" +
    "\117\uffbf\120\uffbf\121\uffbf\122\uffbf\124\uffbf\001\002\000" +
    "\004\016\367\001\002\000\012\004\372\005\374\010\373" +
    "\014\371\001\002\000\006\013\206\023\207\001\002\000" +
    "\006\013\uffb9\023\uffb9\001\002\000\006\013\uffbb\023\uffbb" +
    "\001\002\000\006\013\uffb8\023\uffb8\001\002\000\006\013" +
    "\uffba\023\uffba\001\002\000\074\002\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\026" +
    "\uffbc\031\uffbc\033\uffbc\034\uffbc\037\uffbc\041\uffbc\044\uffbc" +
    "\045\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc\111" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\121\uffbc\122\uffbc\124\uffbc" +
    "\001\002\000\014\017\247\020\243\021\246\022\241\025" +
    "\u0111\001\002\000\006\004\u0100\100\u0101\001\002\000\004" +
    "\100\u0103\001\002\000\006\013\206\023\207\001\002\000" +
    "\054\002\uff17\006\uff17\007\uff17\011\uff17\017\uff17\020\uff17" +
    "\021\uff17\022\uff17\023\uff17\031\uff17\037\uff17\041\uff17\044" +
    "\uff17\045\uff17\051\uff17\052\uff17\053\uff17\055\uff17\056\uff17" +
    "\111\uff17\124\uff17\001\002\000\004\016\u0104\001\002\000" +
    "\004\015\u0105\001\002\000\004\101\u0106\001\002\000\004" +
    "\016\u0107\001\002\000\004\004\u0108\001\002\000\006\012" +
    "\u010d\016\u010c\001\002\000\004\102\u010a\001\002\000\006" +
    "\013\206\023\207\001\002\000\054\002\uff23\006\uff23\007" +
    "\uff23\011\uff23\017\uff23\020\uff23\021\uff23\022\uff23\023\uff23" +
    "\031\uff23\037\uff23\041\uff23\044\uff23\045\uff23\051\uff23\052" +
    "\uff23\053\uff23\055\uff23\056\uff23\111\uff23\124\uff23\001\002" +
    "\000\004\102\uff1f\001\002\000\004\016\u010e\001\002\000" +
    "\004\004\u0108\001\002\000\004\102\uff1e\001\002\000\004" +
    "\025\u0114\001\002\000\004\023\077\001\002\000\004\023" +
    "\u0113\001\002\000\054\002\uff8e\006\uff8e\007\uff8e\011\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\031\uff8e\037" +
    "\uff8e\041\uff8e\044\uff8e\045\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\111\uff8e\124\uff8e\001\002\000\004\023" +
    "\077\001\002\000\006\013\206\023\207\001\002\000\054" +
    "\002\uff92\006\uff92\007\uff92\011\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\031\uff92\037\uff92\041\uff92\044\uff92" +
    "\045\uff92\051\uff92\052\uff92\053\uff92\055\uff92\056\uff92\111" +
    "\uff92\124\uff92\001\002\000\012\017\247\020\243\021\246" +
    "\022\241\001\002\000\004\025\u0119\001\002\000\004\023" +
    "\u011a\001\002\000\004\026\101\001\002\000\054\002\uff28" +
    "\006\uff28\007\uff28\011\uff28\017\uff28\020\uff28\021\uff28\022" +
    "\uff28\023\uff28\031\uff28\037\uff28\041\uff28\044\uff28\045\uff28" +
    "\051\uff28\052\uff28\053\uff28\055\uff28\056\uff28\111\uff28\124" +
    "\uff28\001\002\000\004\011\u011d\001\002\000\004\016\u011e" +
    "\001\002\000\004\015\u011f\001\002\000\004\016\u0120\001" +
    "\002\000\004\011\u0121\001\002\000\006\013\206\023\207" +
    "\001\002\000\056\002\uff25\006\uff25\007\uff25\011\uff25\017" +
    "\uff25\020\uff25\021\uff25\022\uff25\023\uff25\026\101\031\uff25" +
    "\037\uff25\041\uff25\044\uff25\045\uff25\051\uff25\052\uff25\053" +
    "\uff25\055\uff25\056\uff25\111\uff25\124\uff25\001\002\000\054" +
    "\002\uff24\006\uff24\007\uff24\011\uff24\017\uff24\020\uff24\021" +
    "\uff24\022\uff24\023\uff24\031\uff24\037\uff24\041\uff24\044\uff24" +
    "\045\uff24\051\uff24\052\uff24\053\uff24\055\uff24\056\uff24\111" +
    "\uff24\124\uff24\001\002\000\016\012\235\013\uff05\016\uff05" +
    "\023\uff05\024\u012d\077\u012c\001\002\000\010\013\206\016" +
    "\u0126\023\207\001\002\000\004\015\u0128\001\002\000\074" +
    "\002\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\026\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\037\uffb7\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\111\uffb7\116\uffb7\117\uffb7\120\uffb7" +
    "\121\uffb7\122\uffb7\124\uffb7\001\002\000\004\016\u0129\001" +
    "\002\000\004\014\u012a\001\002\000\006\013\206\023\207" +
    "\001\002\000\074\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\037\uffb4\041\uffb4\044\uffb4\045\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\111\uffb4\116\uffb4" +
    "\117\uffb4\120\uffb4\121\uffb4\122\uffb4\124\uffb4\001\002\000" +
    "\006\004\u0135\100\u0136\001\002\000\014\017\247\020\243" +
    "\021\246\022\241\025\u012f\001\002\000\004\025\u0132\001" +
    "\002\000\004\023\077\001\002\000\004\023\u0131\001\002" +
    "\000\054\002\uff8d\006\uff8d\007\uff8d\011\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\023\uff8d\031\uff8d\037\uff8d\041\uff8d" +
    "\044\uff8d\045\uff8d\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056" +
    "\uff8d\111\uff8d\124\uff8d\001\002\000\004\023\077\001\002" +
    "\000\006\013\206\023\207\001\002\000\054\002\uff91\006" +
    "\uff91\007\uff91\011\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\031\uff91\037\uff91\041\uff91\044\uff91\045\uff91\051" +
    "\uff91\052\uff91\053\uff91\055\uff91\056\uff91\111\uff91\124\uff91" +
    "\001\002\000\004\100\u0138\001\002\000\006\013\206\023" +
    "\207\001\002\000\054\002\uff14\006\uff14\007\uff14\011\uff14" +
    "\017\uff14\020\uff14\021\uff14\022\uff14\023\uff14\031\uff14\037" +
    "\uff14\041\uff14\044\uff14\045\uff14\051\uff14\052\uff14\053\uff14" +
    "\055\uff14\056\uff14\111\uff14\124\uff14\001\002\000\004\016" +
    "\u0139\001\002\000\004\015\u013a\001\002\000\004\101\u013b" +
    "\001\002\000\004\016\u013c\001\002\000\004\014\u013d\001" +
    "\002\000\006\012\u0142\016\u0141\001\002\000\004\102\u013f" +
    "\001\002\000\006\013\206\023\207\001\002\000\054\002" +
    "\uff21\006\uff21\007\uff21\011\uff21\017\uff21\020\uff21\021\uff21" +
    "\022\uff21\023\uff21\031\uff21\037\uff21\041\uff21\044\uff21\045" +
    "\uff21\051\uff21\052\uff21\053\uff21\055\uff21\056\uff21\111\uff21" +
    "\124\uff21\001\002\000\004\102\uff1b\001\002\000\004\016" +
    "\u0143\001\002\000\004\014\u013d\001\002\000\004\102\uff1a" +
    "\001\002\000\004\026\u0146\001\002\000\022\033\u0147\034" +
    "\u0149\115\u014f\116\u0150\117\u014c\120\u014d\121\u014a\122\u0148" +
    "\001\002\000\006\016\u01d4\023\u01d5\001\002\000\004\023" +
    "\u01d0\001\002\000\006\016\u01a2\023\u01a3\001\002\000\004" +
    "\023\u0199\001\002\000\054\002\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\031\uffeb" +
    "\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\055\uffeb\056\uffeb\111\uffeb\124\uffeb\001\002\000\004" +
    "\023\u0195\001\002\000\004\023\u0182\001\002\000\064\002" +
    "\uffec\006\uffec\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\031\uffec\034\u0149\037\uffec\041\uffec\044" +
    "\uffec\045\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec" +
    "\111\uffec\120\u014d\121\u014a\122\u0148\124\uffec\001\002\000" +
    "\004\023\u016e\001\002\000\004\023\u0151\001\002\000\004" +
    "\026\u0152\001\002\000\004\026\u0153\001\002\000\014\017" +
    "\u0158\020\005\021\037\022\006\124\035\001\002\000\004" +
    "\011\236\001\002\000\074\002\uffc7\006\uffc7\007\uffc7\011" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\u016b" +
    "\031\uffc7\033\uffc7\034\uffc7\037\uffc7\041\uffc7\044\uffc7\045" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\111\uffc7" +
    "\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7\124\uffc7\001" +
    "\002\000\004\011\236\001\002\000\004\011\236\001\002" +
    "\000\004\016\067\001\002\000\066\002\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\031\uffd0\034\uffd0\037\uffd0\041\uffd0\044\uffd0\045\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0\111\uffd0\117\u015b" +
    "\120\uffd0\121\uffd0\122\uffd0\124\uffd0\001\002\000\004\011" +
    "\236\001\002\000\004\023\u015c\001\002\000\004\026\u015d" +
    "\001\002\000\004\026\u015e\001\002\000\014\017\u0158\020" +
    "\005\021\037\022\006\124\035\001\002\000\064\002\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\031\uffd2\034\uffd2\037\uffd2\041\uffd2\044\uffd2" +
    "\045\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\111" +
    "\uffd2\120\uffd2\121\uffd2\122\uffd2\124\uffd2\001\002\000\010" +
    "\013\206\016\u0161\023\207\001\002\000\004\015\u0163\001" +
    "\002\000\074\002\uffac\006\uffac\007\uffac\011\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\026\uffac\031\uffac\033" +
    "\uffac\034\uffac\037\uffac\041\uffac\044\uffac\045\uffac\051\uffac" +
    "\052\uffac\053\uffac\055\uffac\056\uffac\111\uffac\116\uffac\117" +
    "\uffac\120\uffac\121\uffac\122\uffac\124\uffac\001\002\000\004" +
    "\016\u0164\001\002\000\012\004\u0166\005\u0169\010\u0167\014" +
    "\u0165\001\002\000\006\013\uffa6\023\uffa6\001\002\000\006" +
    "\013\uffa8\023\uffa8\001\002\000\006\013\uffa5\023\uffa5\001" +
    "\002\000\006\013\206\023\207\001\002\000\006\013\uffa7" +
    "\023\uffa7\001\002\000\074\002\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9" +
    "\031\uffa9\033\uffa9\034\uffa9\037\uffa9\041\uffa9\044\uffa9\045" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9\056\uffa9\111\uffa9" +
    "\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122\uffa9\124\uffa9\001" +
    "\002\000\074\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\u016c\031\uffc6\033" +
    "\uffc6\034\uffc6\037\uffc6\041\uffc6\044\uffc6\045\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\055\uffc6\056\uffc6\111\uffc6\116\uffc6\117" +
    "\uffc6\120\uffc6\121\uffc6\122\uffc6\124\uffc6\001\002\000\014" +
    "\017\u0158\020\005\021\037\022\006\124\035\001\002\000" +
    "\072\002\uffc5\006\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\031\uffc5\033\uffc5\034\uffc5\037" +
    "\uffc5\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\056\uffc5\111\uffc5\116\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\122\uffc5\124\uffc5\001\002\000\004\026\u016f\001\002" +
    "\000\004\026\u0170\001\002\000\014\017\u0158\020\005\021" +
    "\037\022\006\124\035\001\002\000\070\002\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\031\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111\uffd1\116" +
    "\u0172\117\u0173\120\uffd1\121\uffd1\122\uffd1\124\uffd1\001\002" +
    "\000\004\023\u0178\001\002\000\004\023\u0174\001\002\000" +
    "\004\026\u0175\001\002\000\004\026\u0176\001\002\000\014" +
    "\017\u0158\020\005\021\037\022\006\124\035\001\002\000" +
    "\064\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\031\uffd3\034\uffd3\037\uffd3\041" +
    "\uffd3\044\uffd3\045\uffd3\051\uffd3\052\uffd3\053\uffd3\055\uffd3" +
    "\056\uffd3\111\uffd3\120\uffd3\121\uffd3\122\uffd3\124\uffd3\001" +
    "\002\000\004\026\u0179\001\002\000\004\026\u017a\001\002" +
    "\000\014\017\u0158\020\005\021\037\022\006\124\035\001" +
    "\002\000\066\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\031\uffd4\034\uffd4\037" +
    "\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\055\uffd4\056\uffd4\111\uffd4\117\u017c\120\uffd4\121\uffd4\122" +
    "\uffd4\124\uffd4\001\002\000\004\023\u017d\001\002\000\004" +
    "\026\u017e\001\002\000\004\026\u017f\001\002\000\014\017" +
    "\u0158\020\005\021\037\022\006\124\035\001\002\000\064" +
    "\002\uffd5\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\031\uffd5\034\uffd5\037\uffd5\041\uffd5" +
    "\044\uffd5\045\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056" +
    "\uffd5\111\uffd5\120\uffd5\121\uffd5\122\uffd5\124\uffd5\001\002" +
    "\000\054\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\031\uffea\037\uffea\041\uffea" +
    "\044\uffea\045\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056" +
    "\uffea\111\uffea\124\uffea\001\002\000\004\026\u0183\001\002" +
    "\000\004\026\u0184\001\002\000\014\017\u0158\020\005\021" +
    "\037\022\006\124\035\001\002\000\060\002\uffd9\006\uffd9" +
    "\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\031\uffd9\037\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\055\uffd9\056\uffd9\111\uffd9\121\u0186\122" +
    "\u0187\124\uffd9\001\002\000\004\023\u018c\001\002\000\004" +
    "\023\u0188\001\002\000\004\026\u0189\001\002\000\004\026" +
    "\u018a\001\002\000\014\017\u0158\020\005\021\037\022\006" +
    "\124\035\001\002\000\054\002\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\031\uffdb" +
    "\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\055\uffdb\056\uffdb\111\uffdb\124\uffdb\001\002\000\004" +
    "\026\u018d\001\002\000\004\026\u018e\001\002\000\014\017" +
    "\u0158\020\005\021\037\022\006\124\035\001\002\000\056" +
    "\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\031\uffdc\037\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\111" +
    "\uffdc\122\u0190\124\uffdc\001\002\000\004\023\u0191\001\002" +
    "\000\004\026\u0192\001\002\000\004\026\u0193\001\002\000" +
    "\014\017\u0158\020\005\021\037\022\006\124\035\001\002" +
    "\000\054\002\uffdd\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\031\uffdd\037\uffdd\041\uffdd" +
    "\044\uffdd\045\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\056" +
    "\uffdd\111\uffdd\124\uffdd\001\002\000\004\026\u0196\001\002" +
    "\000\004\026\u0197\001\002\000\014\017\u0158\020\005\021" +
    "\037\022\006\124\035\001\002\000\064\002\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\031\uffcf\034\uffcf\037\uffcf\041\uffcf\044\uffcf\045\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\111\uffcf\120" +
    "\uffcf\121\uffcf\122\uffcf\124\uffcf\001\002\000\004\026\u019a" +
    "\001\002\000\004\026\u019b\001\002\000\014\017\u0158\020" +
    "\005\021\037\022\006\124\035\001\002\000\056\002\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\031\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\111\uffd8\122" +
    "\u019d\124\uffd8\001\002\000\004\023\u019e\001\002\000\004" +
    "\026\u019f\001\002\000\004\026\u01a0\001\002\000\014\017" +
    "\u0158\020\005\021\037\022\006\124\035\001\002\000\054" +
    "\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\031\uffda\037\uffda\041\uffda\044\uffda" +
    "\045\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\111" +
    "\uffda\124\uffda\001\002\000\010\120\u01a9\121\u01a7\122\u01a8" +
    "\001\002\000\004\026\u01a4\001\002\000\004\026\u01a5\001" +
    "\002\000\014\017\u0158\020\005\021\037\022\006\124\035" +
    "\001\002\000\054\002\uffde\006\uffde\007\uffde\011\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\031\uffde\037\uffde" +
    "\041\uffde\044\uffde\045\uffde\051\uffde\052\uffde\053\uffde\055" +
    "\uffde\056\uffde\111\uffde\124\uffde\001\002\000\004\023\u01c5" +
    "\001\002\000\004\023\u01c1\001\002\000\004\023\u01aa\001" +
    "\002\000\004\026\u01ab\001\002\000\004\026\u01ac\001\002" +
    "\000\014\017\u0158\020\005\021\037\022\006\124\035\001" +
    "\002\000\056\002\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\031\uffe1\034\u01ae\037" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\111\uffe1\124\uffe1\001\002\000\004\016" +
    "\u01af\001\002\000\006\121\u01b0\122\u01b1\001\002\000\004" +
    "\023\u01b6\001\002\000\004\023\u01b2\001\002\000\004\026" +
    "\u01b3\001\002\000\004\026\u01b4\001\002\000\014\017\u0158" +
    "\020\005\021\037\022\006\124\035\001\002\000\054\002" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\031\uffe3\037\uffe3\041\uffe3\044\uffe3\045" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\111\uffe3" +
    "\124\uffe3\001\002\000\004\026\u01b7\001\002\000\004\026" +
    "\u01b8\001\002\000\014\017\u0158\020\005\021\037\022\006" +
    "\124\035\001\002\000\056\002\uffe4\006\uffe4\007\uffe4\011" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\031\uffe4" +
    "\034\u01ba\037\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\055\uffe4\056\uffe4\111\uffe4\124\uffe4\001\002" +
    "\000\004\016\u01bb\001\002\000\004\122\u01bc\001\002\000" +
    "\004\023\u01bd\001\002\000\004\026\u01be\001\002\000\004" +
    "\026\u01bf\001\002\000\014\017\u0158\020\005\021\037\022" +
    "\006\124\035\001\002\000\054\002\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\031" +
    "\uffe5\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\055\uffe5\056\uffe5\111\uffe5\124\uffe5\001\002\000" +
    "\004\026\u01c2\001\002\000\004\026\u01c3\001\002\000\014" +
    "\017\u0158\020\005\021\037\022\006\124\035\001\002\000" +
    "\054\002\uffdf\006\uffdf\007\uffdf\011\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\031\uffdf\037\uffdf\041\uffdf\044" +
    "\uffdf\045\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\056\uffdf" +
    "\111\uffdf\124\uffdf\001\002\000\004\026\u01c6\001\002\000" +
    "\004\026\u01c7\001\002\000\014\017\u0158\020\005\021\037" +
    "\022\006\124\035\001\002\000\056\002\uffe0\006\uffe0\007" +
    "\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\031\uffe0\034\u01c9\037\uffe0\041\uffe0\044\uffe0\045\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\055\uffe0\056\uffe0\111\uffe0\124\uffe0" +
    "\001\002\000\004\016\u01ca\001\002\000\004\122\u01cb\001" +
    "\002\000\004\023\u01cc\001\002\000\004\026\u01cd\001\002" +
    "\000\004\026\u01ce\001\002\000\014\017\u0158\020\005\021" +
    "\037\022\006\124\035\001\002\000\054\002\uffe2\006\uffe2" +
    "\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\031\uffe2\037\uffe2\041\uffe2\044\uffe2\045\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\055\uffe2\056\uffe2\111\uffe2\124\uffe2\001" +
    "\002\000\004\026\u01d1\001\002\000\004\026\u01d2\001\002" +
    "\000\014\017\u0158\020\005\021\037\022\006\124\035\001" +
    "\002\000\054\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\031\uffd7\037\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7" +
    "\056\uffd7\111\uffd7\124\uffd7\001\002\000\010\115\u01d9\116" +
    "\u01da\117\u01db\001\002\000\004\026\u01d6\001\002\000\004" +
    "\026\u01d7\001\002\000\014\017\u0158\020\005\021\037\022" +
    "\006\124\035\001\002\000\064\002\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\031" +
    "\uffd6\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\055\uffd6\056\uffd6\111\uffd6\120\uffd6\121" +
    "\uffd6\122\uffd6\124\uffd6\001\002\000\004\023\u01eb\001\002" +
    "\000\004\023\u01e0\001\002\000\004\023\u01dc\001\002\000" +
    "\004\026\u01dd\001\002\000\004\026\u01de\001\002\000\014" +
    "\017\u0158\020\005\021\037\022\006\124\035\001\002\000" +
    "\064\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\031\uffc8\034\uffc8\037\uffc8\041" +
    "\uffc8\044\uffc8\045\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\056\uffc8\111\uffc8\120\uffc8\121\uffc8\122\uffc8\124\uffc8\001" +
    "\002\000\004\026\u01e1\001\002\000\004\026\u01e2\001\002" +
    "\000\014\017\u0158\020\005\021\037\022\006\124\035\001" +
    "\002\000\066\002\uffc9\006\uffc9\007\uffc9\011\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\031\uffc9\033\u01e4\034" +
    "\uffc9\037\uffc9\041\uffc9\044\uffc9\045\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\111\uffc9\120\uffc9\121\uffc9\122" +
    "\uffc9\124\uffc9\001\002\000\004\016\u01e5\001\002\000\004" +
    "\117\u01e6\001\002\000\004\023\u01e7\001\002\000\004\026" +
    "\u01e8\001\002\000\004\026\u01e9\001\002\000\014\017\u0158" +
    "\020\005\021\037\022\006\124\035\001\002\000\064\002" +
    "\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\031\uffcb\034\uffcb\037\uffcb\041\uffcb\044" +
    "\uffcb\045\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb" +
    "\111\uffcb\120\uffcb\121\uffcb\122\uffcb\124\uffcb\001\002\000" +
    "\004\026\u01ec\001\002\000\004\026\u01ed\001\002\000\014" +
    "\017\u0158\020\005\021\037\022\006\124\035\001\002\000" +
    "\066\002\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\031\uffca\033\u01ef\034\uffca\037" +
    "\uffca\041\uffca\044\uffca\045\uffca\051\uffca\052\uffca\053\uffca" +
    "\055\uffca\056\uffca\111\uffca\120\uffca\121\uffca\122\uffca\124" +
    "\uffca\001\002\000\004\016\u01f0\001\002\000\006\116\u01f1" +
    "\117\u01f2\001\002\000\004\023\u01f7\001\002\000\004\023" +
    "\u01f3\001\002\000\004\026\u01f4\001\002\000\004\026\u01f5" +
    "\001\002\000\014\017\u0158\020\005\021\037\022\006\124" +
    "\035\001\002\000\064\002\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\031\uffcc\034" +
    "\uffcc\037\uffcc\041\uffcc\044\uffcc\045\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\055\uffcc\056\uffcc\111\uffcc\120\uffcc\121\uffcc\122" +
    "\uffcc\124\uffcc\001\002\000\004\026\u01f8\001\002\000\004" +
    "\026\u01f9\001\002\000\014\017\u0158\020\005\021\037\022" +
    "\006\124\035\001\002\000\066\002\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\031" +
    "\uffcd\033\u01fb\034\uffcd\037\uffcd\041\uffcd\044\uffcd\045\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\111\uffcd\120" +
    "\uffcd\121\uffcd\122\uffcd\124\uffcd\001\002\000\004\016\u01fc" +
    "\001\002\000\004\117\u01fd\001\002\000\004\023\u01fe\001" +
    "\002\000\004\026\u01ff\001\002\000\004\026\u0200\001\002" +
    "\000\014\017\u0158\020\005\021\037\022\006\124\035\001" +
    "\002\000\064\002\uffce\006\uffce\007\uffce\011\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\031\uffce\034\uffce\037" +
    "\uffce\041\uffce\044\uffce\045\uffce\051\uffce\052\uffce\053\uffce" +
    "\055\uffce\056\uffce\111\uffce\120\uffce\121\uffce\122\uffce\124" +
    "\uffce\001\002\000\004\002\ufffe\001\002\000\020\011\uff09" +
    "\066\uff09\070\uff09\071\uff09\072\uff09\073\uff09\074\uff09\001" +
    "\002\000\012\017\u0158\020\005\021\037\022\006\001\002" +
    "\000\004\011\236\001\002\000\004\011\236\001\002\000" +
    "\004\011\236\001\002\000\004\011\236\001\002\000\010" +
    "\013\206\016\u020a\023\207\001\002\000\004\015\u020c\001" +
    "\002\000\074\002\uffbe\006\uffbe\007\uffbe\011\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\031\uffbe\033" +
    "\uffbe\034\uffbe\037\uffbe\041\uffbe\044\uffbe\045\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\055\uffbe\056\uffbe\111\uffbe\116\uffbe\117" +
    "\uffbe\120\uffbe\121\uffbe\122\uffbe\124\uffbe\001\002\000\004" +
    "\016\u020d\001\002\000\012\004\372\005\374\010\373\014" +
    "\371\001\002\000\006\013\206\023\207\001\002\000\074" +
    "\002\uffbd\006\uffbd\007\uffbd\011\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\037\uffbd\041\uffbd\044\uffbd\045\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\055\uffbd\056\uffbd\111\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\121\uffbd\122\uffbd\124\uffbd\001\002\000\010\013\206\016" +
    "\u0211\023\207\001\002\000\004\015\u0213\001\002\000\074" +
    "\002\uffb6\006\uffb6\007\uffb6\011\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\026\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\037\uffb6\041\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\055\uffb6\056\uffb6\111\uffb6\116\uffb6\117\uffb6\120\uffb6" +
    "\121\uffb6\122\uffb6\124\uffb6\001\002\000\004\016\u0214\001" +
    "\002\000\004\014\u0215\001\002\000\006\013\206\023\207" +
    "\001\002\000\074\002\uffb5\006\uffb5\007\uffb5\011\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\037\uffb5\041\uffb5\044\uffb5\045\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\111\uffb5\116\uffb5" +
    "\117\uffb5\120\uffb5\121\uffb5\122\uffb5\124\uffb5\001\002\000" +
    "\010\013\206\016\u0218\023\207\001\002\000\004\015\u021a" +
    "\001\002\000\074\002\uffab\006\uffab\007\uffab\011\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab\031\uffab" +
    "\033\uffab\034\uffab\037\uffab\041\uffab\044\uffab\045\uffab\051" +
    "\uffab\052\uffab\053\uffab\055\uffab\056\uffab\111\uffab\116\uffab" +
    "\117\uffab\120\uffab\121\uffab\122\uffab\124\uffab\001\002\000" +
    "\004\016\u021b\001\002\000\012\004\u0166\005\u0169\010\u0167" +
    "\014\u0165\001\002\000\006\013\206\023\207\001\002\000" +
    "\074\002\uffaa\006\uffaa\007\uffaa\011\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\026\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\037\uffaa\041\uffaa\044\uffaa\045\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\055\uffaa\056\uffaa\111\uffaa\116\uffaa\117\uffaa\120" +
    "\uffaa\121\uffaa\122\uffaa\124\uffaa\001\002\000\010\013\206" +
    "\016\u021f\023\207\001\002\000\004\015\u0221\001\002\000" +
    "\074\002\uffb2\006\uffb2\007\uffb2\011\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\026\uffb2\031\uffb2\033\uffb2\034" +
    "\uffb2\037\uffb2\041\uffb2\044\uffb2\045\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\055\uffb2\056\uffb2\111\uffb2\116\uffb2\117\uffb2\120" +
    "\uffb2\121\uffb2\122\uffb2\124\uffb2\001\002\000\004\016\u0222" +
    "\001\002\000\010\004\226\005\231\010\227\001\002\000" +
    "\006\013\206\023\207\001\002\000\074\002\uffb1\006\uffb1" +
    "\007\uffb1\011\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\037\uffb1\041\uffb1" +
    "\044\uffb1\045\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056" +
    "\uffb1\111\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1" +
    "\124\uffb1\001\002\000\004\025\u0226\001\002\000\004\023" +
    "\u0227\001\002\000\004\026\101\001\002\000\054\002\uff27" +
    "\006\uff27\007\uff27\011\uff27\017\uff27\020\uff27\021\uff27\022" +
    "\uff27\023\uff27\031\uff27\037\uff27\041\uff27\044\uff27\045\uff27" +
    "\051\uff27\052\uff27\053\uff27\055\uff27\056\uff27\111\uff27\124" +
    "\uff27\001\002\000\004\052\u022a\001\002\000\004\011\u022b" +
    "\001\002\000\006\013\206\023\207\001\002\000\054\002" +
    "\uff26\006\uff26\007\uff26\011\uff26\017\uff26\020\uff26\021\uff26" +
    "\022\uff26\023\uff26\031\uff26\037\uff26\041\uff26\044\uff26\045" +
    "\uff26\051\uff26\052\uff26\053\uff26\055\uff26\056\uff26\111\uff26" +
    "\124\uff26\001\002\000\056\002\uff03\006\uff03\007\uff03\011" +
    "\uff03\017\uff03\020\uff03\021\uff03\022\uff03\023\uff03\031\uff03" +
    "\037\uff03\041\uff03\044\uff03\045\uff03\051\uff03\052\uff03\053" +
    "\uff03\055\uff03\056\uff03\106\u0230\111\uff03\124\uff03\001\002" +
    "\000\054\002\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\031\uff95\037\uff95\041\uff95" +
    "\044\uff95\045\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056" +
    "\uff95\111\uff95\124\uff95\001\002\000\004\105\u0234\001\002" +
    "\000\006\013\206\023\u0231\001\002\000\006\105\uff03\106" +
    "\u0230\001\002\000\004\105\uff94\001\002\000\004\105\uff93" +
    "\001\002\000\006\013\206\023\207\001\002\000\054\002" +
    "\uff96\006\uff96\007\uff96\011\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\031\uff96\037\uff96\041\uff96\044\uff96\045" +
    "\uff96\051\uff96\052\uff96\053\uff96\055\uff96\056\uff96\111\uff96" +
    "\124\uff96\001\002\000\006\011\u0239\017\u0238\001\002\000" +
    "\004\015\u025d\001\002\000\004\016\u0256\001\002\000\004" +
    "\016\u0255\001\002\000\004\046\u023b\001\002\000\004\016" +
    "\u023c\001\002\000\006\004\u023d\011\u023e\001\002\000\010" +
    "\013\uff52\016\uff52\023\uff52\001\002\000\010\013\uff53\016" +
    "\uff53\023\uff53\001\002\000\004\016\u0240\001\002\000\006" +
    "\030\u0242\065\u0241\001\002\000\004\016\uff5b\001\002\000" +
    "\004\016\uff5a\001\002\000\004\016\u0244\001\002\000\006" +
    "\004\u023d\011\u023e\001\002\000\004\016\u0246\001\002\000" +
    "\010\047\u024a\050\u0248\111\u0249\001\002\000\004\016\u024f" +
    "\001\002\000\004\016\uff58\001\002\000\006\013\206\023" +
    "\207\001\002\000\004\016\uff59\001\002\000\004\026\101" +
    "\001\002\000\054\002\uff5d\006\uff5d\007\uff5d\011\uff5d\017" +
    "\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\031\uff5d\037\uff5d" +
    "\041\uff5d\044\uff5d\045\uff5d\051\uff5d\052\uff5d\053\uff5d\055" +
    "\uff5d\056\uff5d\111\uff5d\124\uff5d\001\002\000\004\006\016" +
    "\001\002\000\054\002\uff5c\006\uff5c\007\uff5c\011\uff5c\017" +
    "\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\031\uff5c\037\uff5c" +
    "\041\uff5c\044\uff5c\045\uff5c\051\uff5c\052\uff5c\053\uff5c\055" +
    "\uff5c\056\uff5c\111\uff5c\124\uff5c\001\002\000\004\004\u0250" +
    "\001\002\000\004\016\u0251\001\002\000\004\111\u0252\001" +
    "\002\000\006\013\206\023\207\001\002\000\004\026\101" +
    "\001\002\000\054\002\uff5e\006\uff5e\007\uff5e\011\uff5e\017" +
    "\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\031\uff5e\037\uff5e" +
    "\041\uff5e\044\uff5e\045\uff5e\051\uff5e\052\uff5e\053\uff5e\055" +
    "\uff5e\056\uff5e\111\uff5e\124\uff5e\001\002\000\006\015\uff54" +
    "\046\uff57\001\002\000\004\011\u0257\001\002\000\004\016" +
    "\u0258\001\002\000\004\015\u0259\001\002\000\004\016\u025a" +
    "\001\002\000\004\004\u025b\001\002\000\004\016\u025c\001" +
    "\002\000\004\046\uff56\001\002\000\004\016\u025e\001\002" +
    "\000\004\004\u025f\001\002\000\004\016\u0260\001\002\000" +
    "\004\046\uff55\001\002\000\004\031\u0262\001\002\000\006" +
    "\016\u0263\023\uffe9\001\002\000\004\103\u0264\001\002\000" +
    "\004\016\u0265\001\002\000\004\031\u0266\001\002\000\004" +
    "\023\uffe8\001\002\000\004\024\u02a0\001\002\000\004\024" +
    "\u029b\001\002\000\004\024\u0296\001\002\000\016\012\235" +
    "\013\uff05\016\uff05\023\uff05\024\u027e\077\u027d\001\002\000" +
    "\004\024\u0278\001\002\000\004\024\u0273\001\002\000\004" +
    "\024\u026e\001\002\000\004\022\006\001\002\000\004\011" +
    "\u0270\001\002\000\004\025\u0271\001\002\000\006\013\206" +
    "\023\207\001\002\000\054\002\uff35\006\uff35\007\uff35\011" +
    "\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\031\uff35" +
    "\037\uff35\041\uff35\044\uff35\045\uff35\051\uff35\052\uff35\053" +
    "\uff35\055\uff35\056\uff35\111\uff35\124\uff35\001\002\000\004" +
    "\021\037\001\002\000\004\011\u0275\001\002\000\004\025" +
    "\u0276\001\002\000\006\013\206\023\207\001\002\000\054" +
    "\002\uff33\006\uff33\007\uff33\011\uff33\017\uff33\020\uff33\021" +
    "\uff33\022\uff33\023\uff33\031\uff33\037\uff33\041\uff33\044\uff33" +
    "\045\uff33\051\uff33\052\uff33\053\uff33\055\uff33\056\uff33\111" +
    "\uff33\124\uff33\001\002\000\004\021\037\001\002\000\004" +
    "\011\u027a\001\002\000\004\025\u027b\001\002\000\006\013" +
    "\206\023\207\001\002\000\054\002\uff32\006\uff32\007\uff32" +
    "\011\uff32\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32\031" +
    "\uff32\037\uff32\041\uff32\044\uff32\045\uff32\051\uff32\052\uff32" +
    "\053\uff32\055\uff32\056\uff32\111\uff32\124\uff32\001\002\000" +
    "\006\004\u0286\100\u0287\001\002\000\014\017\247\020\243" +
    "\021\246\022\241\025\u0280\001\002\000\004\025\u0283\001" +
    "\002\000\004\023\077\001\002\000\004\023\u0282\001\002" +
    "\000\054\002\uff8b\006\uff8b\007\uff8b\011\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\031\uff8b\037\uff8b\041\uff8b" +
    "\044\uff8b\045\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056" +
    "\uff8b\111\uff8b\124\uff8b\001\002\000\004\023\077\001\002" +
    "\000\006\013\206\023\207\001\002\000\054\002\uff8f\006" +
    "\uff8f\007\uff8f\011\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\031\uff8f\037\uff8f\041\uff8f\044\uff8f\045\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f\111\uff8f\124\uff8f" +
    "\001\002\000\004\100\u0289\001\002\000\006\013\206\023" +
    "\207\001\002\000\054\002\uff16\006\uff16\007\uff16\011\uff16" +
    "\017\uff16\020\uff16\021\uff16\022\uff16\023\uff16\031\uff16\037" +
    "\uff16\041\uff16\044\uff16\045\uff16\051\uff16\052\uff16\053\uff16" +
    "\055\uff16\056\uff16\111\uff16\124\uff16\001\002\000\004\016" +
    "\u028a\001\002\000\004\015\u028b\001\002\000\004\101\u028c" +
    "\001\002\000\004\016\u028d\001\002\000\004\005\u028f\001" +
    "\002\000\004\102\u0294\001\002\000\006\012\u0291\016\u0290" +
    "\001\002\000\004\102\uff1d\001\002\000\004\016\u0292\001" +
    "\002\000\004\005\u028f\001\002\000\004\102\uff1c\001\002" +
    "\000\006\013\206\023\207\001\002\000\054\002\uff22\006" +
    "\uff22\007\uff22\011\uff22\017\uff22\020\uff22\021\uff22\022\uff22" +
    "\023\uff22\031\uff22\037\uff22\041\uff22\044\uff22\045\uff22\051" +
    "\uff22\052\uff22\053\uff22\055\uff22\056\uff22\111\uff22\124\uff22" +
    "\001\002\000\004\021\037\001\002\000\004\011\u0298\001" +
    "\002\000\004\025\u0299\001\002\000\006\013\206\023\207" +
    "\001\002\000\054\002\uff31\006\uff31\007\uff31\011\uff31\017" +
    "\uff31\020\uff31\021\uff31\022\uff31\023\uff31\031\uff31\037\uff31" +
    "\041\uff31\044\uff31\045\uff31\051\uff31\052\uff31\053\uff31\055" +
    "\uff31\056\uff31\111\uff31\124\uff31\001\002\000\004\021\037" +
    "\001\002\000\004\011\u029d\001\002\000\004\025\u029e\001" +
    "\002\000\006\013\206\023\207\001\002\000\054\002\uff30" +
    "\006\uff30\007\uff30\011\uff30\017\uff30\020\uff30\021\uff30\022" +
    "\uff30\023\uff30\031\uff30\037\uff30\041\uff30\044\uff30\045\uff30" +
    "\051\uff30\052\uff30\053\uff30\055\uff30\056\uff30\111\uff30\124" +
    "\uff30\001\002\000\004\021\037\001\002\000\004\011\u02a2" +
    "\001\002\000\004\025\u02a3\001\002\000\006\013\206\023" +
    "\207\001\002\000\054\002\uff2f\006\uff2f\007\uff2f\011\uff2f" +
    "\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f\031\uff2f\037" +
    "\uff2f\041\uff2f\044\uff2f\045\uff2f\051\uff2f\052\uff2f\053\uff2f" +
    "\055\uff2f\056\uff2f\111\uff2f\124\uff2f\001\002\000\006\004" +
    "\u02a6\011\u02a7\001\002\000\004\016\u02bd\001\002\000\004" +
    "\016\u02b8\001\002\000\004\016\u02a9\001\002\000\004\042" +
    "\u02aa\001\002\000\004\023\077\001\002\000\006\013\206" +
    "\023\207\001\002\000\056\002\uff66\006\uff66\007\uff66\011" +
    "\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\031\uff66" +
    "\037\uff66\041\uff66\043\u02ad\044\uff66\045\uff66\051\uff66\052" +
    "\uff66\053\uff66\055\uff66\056\uff66\111\uff66\124\uff66\001\002" +
    "\000\006\016\u02af\023\077\001\002\000\054\002\uff67\006" +
    "\uff67\007\uff67\011\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\031\uff67\037\uff67\041\uff67\044\uff67\045\uff67\051" +
    "\uff67\052\uff67\053\uff67\055\uff67\056\uff67\111\uff67\124\uff67" +
    "\001\002\000\006\004\u02a6\011\u02a7\001\002\000\006\013" +
    "\206\023\207\001\002\000\054\002\uff63\006\uff63\007\uff63" +
    "\011\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\031" +
    "\uff63\037\uff63\041\uff63\044\uff63\045\uff63\051\uff63\052\uff63" +
    "\053\uff63\055\uff63\056\uff63\111\uff63\124\uff63\001\002\000" +
    "\004\016\u02b3\001\002\000\004\042\u02b4\001\002\000\004" +
    "\023\077\001\002\000\006\013\206\023\207\001\002\000" +
    "\056\002\uff64\006\uff64\007\uff64\011\uff64\017\uff64\020\uff64" +
    "\021\uff64\022\uff64\023\uff64\031\uff64\037\uff64\041\uff64\043" +
    "\u02ad\044\uff64\045\uff64\051\uff64\052\uff64\053\uff64\055\uff64" +
    "\056\uff64\111\uff64\124\uff64\001\002\000\054\002\uff65\006" +
    "\uff65\007\uff65\011\uff65\017\uff65\020\uff65\021\uff65\022\uff65" +
    "\023\uff65\031\uff65\037\uff65\041\uff65\044\uff65\045\uff65\051" +
    "\uff65\052\uff65\053\uff65\055\uff65\056\uff65\111\uff65\124\uff65" +
    "\001\002\000\016\054\122\107\120\110\116\112\115\113" +
    "\117\114\123\001\002\000\004\016\u02ba\001\002\000\006" +
    "\004\u02bb\011\u02bc\001\002\000\004\016\uff61\001\002\000" +
    "\004\016\uff5f\001\002\000\016\054\122\107\120\110\116" +
    "\112\115\113\117\114\123\001\002\000\004\016\u02bf\001" +
    "\002\000\006\004\u02c0\011\u02c1\001\002\000\004\016\uff62" +
    "\001\002\000\004\016\uff60\001\002\000\004\011\u02c3\001" +
    "\002\000\006\013\206\023\207\001\002\000\054\002\uff98" +
    "\006\uff98\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\031\uff98\037\uff98\041\uff98\044\uff98\045\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98\111\uff98\124" +
    "\uff98\001\002\000\004\004\u0315\001\002\000\004\015\u02fa" +
    "\001\002\000\004\011\u02f4\001\002\000\012\004\u02ca\011" +
    "\u02cc\110\u02c9\125\u02cb\001\002\000\006\004\u02f2\011\u02f3" +
    "\001\002\000\024\013\uff42\023\uff42\054\122\107\120\110" +
    "\116\112\115\113\117\114\123\126\u02f0\001\002\000\006" +
    "\004\u02ec\011\u02ed\001\002\000\030\013\uff43\023\uff43\054" +
    "\122\107\120\110\116\112\115\113\117\114\123\126\u02ea" +
    "\127\u02dd\130\u02dc\001\002\000\006\013\uff41\023\uff41\001" +
    "\002\000\006\013\206\023\207\001\002\000\060\002\uff4f" +
    "\006\uff4f\007\uff4f\011\uff4f\017\uff4f\020\uff4f\021\uff4f\022" +
    "\uff4f\023\uff4f\026\101\031\uff4f\037\uff4f\041\uff4f\044\uff4f" +
    "\045\uff4f\046\uff4f\051\uff4f\052\uff4f\053\uff4f\055\uff4f\056" +
    "\uff4f\111\uff4f\124\uff4f\001\002\000\004\011\u02d1\001\002" +
    "\000\010\015\u02c8\016\u02d3\060\u02c7\001\002\000\056\002" +
    "\uff4b\006\uff4b\007\uff4b\011\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\023\uff4b\031\uff4b\037\uff4b\041\uff4b\044\uff4b\045" +
    "\uff4b\046\uff4b\051\uff4b\052\uff4b\053\uff4b\055\uff4b\056\uff4b" +
    "\111\uff4b\124\uff4b\001\002\000\004\015\u02d4\001\002\000" +
    "\004\016\u02d5\001\002\000\010\004\u02d6\011\u02d7\110\u02c9" +
    "\001\002\000\022\013\uff42\023\uff42\054\122\107\120\110" +
    "\116\112\115\113\117\114\123\001\002\000\026\013\uff43" +
    "\023\uff43\054\122\107\120\110\116\112\115\113\117\114" +
    "\123\127\u02dd\130\u02dc\001\002\000\006\013\206\023\207" +
    "\001\002\000\060\002\uff4e\006\uff4e\007\uff4e\011\uff4e\017" +
    "\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\026\101\031\uff4e" +
    "\037\uff4e\041\uff4e\044\uff4e\045\uff4e\046\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\055\uff4e\056\uff4e\111\uff4e\124\uff4e\001\002" +
    "\000\004\011\u02d1\001\002\000\056\002\uff4d\006\uff4d\007" +
    "\uff4d\011\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d" +
    "\031\uff4d\037\uff4d\041\uff4d\044\uff4d\045\uff4d\046\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\055\uff4d\056\uff4d\111\uff4d\124\uff4d" +
    "\001\002\000\004\011\u02e4\001\002\000\004\011\u02e1\001" +
    "\002\000\006\004\u02df\011\u02e0\001\002\000\006\013\uff46" +
    "\023\uff46\001\002\000\006\013\uff48\023\uff48\001\002\000" +
    "\010\013\uff3e\023\uff3e\130\u02e2\001\002\000\004\011\u02e3" +
    "\001\002\000\006\013\uff40\023\uff40\001\002\000\010\013" +
    "\uff3d\023\uff3d\127\u02e5\001\002\000\004\011\u02e6\001\002" +
    "\000\006\013\uff3f\023\uff3f\001\002\000\006\004\u02e8\011" +
    "\u02e9\001\002\000\006\013\uff49\023\uff49\001\002\000\006" +
    "\013\uff47\023\uff47\001\002\000\006\013\206\023\207\001" +
    "\002\000\056\002\uff0c\006\uff0c\007\uff0c\011\uff0c\017\uff0c" +
    "\020\uff0c\021\uff0c\022\uff0c\023\uff0c\031\uff0c\037\uff0c\041" +
    "\uff0c\044\uff0c\045\uff0c\046\uff0c\051\uff0c\052\uff0c\053\uff0c" +
    "\055\uff0c\056\uff0c\111\uff0c\124\uff0c\001\002\000\006\013" +
    "\206\023\207\001\002\000\006\013\206\023\207\001\002" +
    "\000\056\002\uff0e\006\uff0e\007\uff0e\011\uff0e\017\uff0e\020" +
    "\uff0e\021\uff0e\022\uff0e\023\uff0e\031\uff0e\037\uff0e\041\uff0e" +
    "\044\uff0e\045\uff0e\046\uff0e\051\uff0e\052\uff0e\053\uff0e\055" +
    "\uff0e\056\uff0e\111\uff0e\124\uff0e\001\002\000\056\002\uff0d" +
    "\006\uff0d\007\uff0d\011\uff0d\017\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\031\uff0d\037\uff0d\041\uff0d\044\uff0d\045\uff0d" +
    "\046\uff0d\051\uff0d\052\uff0d\053\uff0d\055\uff0d\056\uff0d\111" +
    "\uff0d\124\uff0d\001\002\000\006\013\206\023\207\001\002" +
    "\000\056\002\uff0b\006\uff0b\007\uff0b\011\uff0b\017\uff0b\020" +
    "\uff0b\021\uff0b\022\uff0b\023\uff0b\031\uff0b\037\uff0b\041\uff0b" +
    "\044\uff0b\045\uff0b\046\uff0b\051\uff0b\052\uff0b\053\uff0b\055" +
    "\uff0b\056\uff0b\111\uff0b\124\uff0b\001\002\000\006\013\uff44" +
    "\023\uff44\001\002\000\006\013\uff45\023\uff45\001\002\000" +
    "\004\015\u02f5\001\002\000\010\004\u02d6\011\u02d7\110\u02c9" +
    "\001\002\000\006\013\206\023\207\001\002\000\060\002" +
    "\uff50\006\uff50\007\uff50\011\uff50\017\uff50\020\uff50\021\uff50" +
    "\022\uff50\023\uff50\026\101\031\uff50\037\uff50\041\uff50\044" +
    "\uff50\045\uff50\046\uff50\051\uff50\052\uff50\053\uff50\055\uff50" +
    "\056\uff50\111\uff50\124\uff50\001\002\000\004\011\u02d1\001" +
    "\002\000\056\002\uff4c\006\uff4c\007\uff4c\011\uff4c\017\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\031\uff4c\037\uff4c\041" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\051\uff4c\052\uff4c\053\uff4c" +
    "\055\uff4c\056\uff4c\111\uff4c\124\uff4c\001\002\000\004\016" +
    "\u02fb\001\002\000\012\004\u02d6\011\u02d7\057\u02fc\110\u02c9" +
    "\001\002\000\014\017\u02fd\020\u02fe\021\u0300\022\u02ff\031" +
    "\u0301\001\002\000\004\077\u0311\001\002\000\004\077\u030d" +
    "\001\002\000\004\077\u0309\001\002\000\004\077\u0305\001" +
    "\002\000\004\024\u0302\001\002\000\004\025\u0303\001\002" +
    "\000\006\013\206\023\207\001\002\000\054\002\uff6a\006" +
    "\uff6a\007\uff6a\011\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a" +
    "\023\uff6a\031\uff6a\037\uff6a\041\uff6a\044\uff6a\045\uff6a\051" +
    "\uff6a\052\uff6a\053\uff6a\055\uff6a\056\uff6a\111\uff6a\124\uff6a" +
    "\001\002\000\004\004\u0306\001\002\000\004\100\u0307\001" +
    "\002\000\006\013\206\023\207\001\002\000\054\002\uff10" +
    "\006\uff10\007\uff10\011\uff10\017\uff10\020\uff10\021\uff10\022" +
    "\uff10\023\uff10\031\uff10\037\uff10\041\uff10\044\uff10\045\uff10" +
    "\051\uff10\052\uff10\053\uff10\055\uff10\056\uff10\111\uff10\124" +
    "\uff10\001\002\000\004\004\u030a\001\002\000\004\100\u030b" +
    "\001\002\000\006\013\206\023\207\001\002\000\054\002" +
    "\uff11\006\uff11\007\uff11\011\uff11\017\uff11\020\uff11\021\uff11" +
    "\022\uff11\023\uff11\031\uff11\037\uff11\041\uff11\044\uff11\045" +
    "\uff11\051\uff11\052\uff11\053\uff11\055\uff11\056\uff11\111\uff11" +
    "\124\uff11\001\002\000\004\004\u030e\001\002\000\004\100" +
    "\u030f\001\002\000\006\013\206\023\207\001\002\000\054" +
    "\002\uff0f\006\uff0f\007\uff0f\011\uff0f\017\uff0f\020\uff0f\021" +
    "\uff0f\022\uff0f\023\uff0f\031\uff0f\037\uff0f\041\uff0f\044\uff0f" +
    "\045\uff0f\051\uff0f\052\uff0f\053\uff0f\055\uff0f\056\uff0f\111" +
    "\uff0f\124\uff0f\001\002\000\004\004\u0312\001\002\000\004" +
    "\100\u0313\001\002\000\006\013\206\023\207\001\002\000" +
    "\054\002\uff12\006\uff12\007\uff12\011\uff12\017\uff12\020\uff12" +
    "\021\uff12\022\uff12\023\uff12\031\uff12\037\uff12\041\uff12\044" +
    "\uff12\045\uff12\051\uff12\052\uff12\053\uff12\055\uff12\056\uff12" +
    "\111\uff12\124\uff12\001\002\000\004\100\u0316\001\002\000" +
    "\004\016\u0317\001\002\000\004\015\u0318\001\002\000\004" +
    "\016\u0319\001\002\000\012\004\336\005\344\010\341\014" +
    "\340\001\002\000\006\013\206\023\207\001\002\000\054" +
    "\002\uff13\006\uff13\007\uff13\011\uff13\017\uff13\020\uff13\021" +
    "\uff13\022\uff13\023\uff13\031\uff13\037\uff13\041\uff13\044\uff13" +
    "\045\uff13\051\uff13\052\uff13\053\uff13\055\uff13\056\uff13\111" +
    "\uff13\124\uff13\001\002\000\012\004\u031d\005\u0321\011\u0320" +
    "\014\u031e\001\002\000\010\012\u032e\013\uff9c\023\uff9c\001" +
    "\002\000\010\012\u032b\013\uff9d\023\uff9d\001\002\000\006" +
    "\013\206\023\207\001\002\000\012\012\u0326\013\uff9a\023" +
    "\uff9a\060\u0325\001\002\000\010\012\u0322\013\uff9b\023\uff9b" +
    "\001\002\000\004\016\u0323\001\002\000\012\004\u031d\005" +
    "\u0321\011\u0320\014\u031e\001\002\000\006\013\uff9f\023\uff9f" +
    "\001\002\000\004\011\u0329\001\002\000\004\016\u0327\001" +
    "\002\000\012\004\u031d\005\u0321\011\u0320\014\u031e\001\002" +
    "\000\006\013\uff9e\023\uff9e\001\002\000\006\013\uff99\023" +
    "\uff99\001\002\000\054\002\uffa2\006\uffa2\007\uffa2\011\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\031\uffa2\037" +
    "\uffa2\041\uffa2\044\uffa2\045\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\055\uffa2\056\uffa2\111\uffa2\124\uffa2\001\002\000\004\016" +
    "\u032c\001\002\000\012\004\u031d\005\u0321\011\u0320\014\u031e" +
    "\001\002\000\006\013\uffa1\023\uffa1\001\002\000\004\016" +
    "\u032f\001\002\000\012\004\u031d\005\u0321\011\u0320\014\u031e" +
    "\001\002\000\006\013\uffa0\023\uffa0\001\002\000\004\123" +
    "\u0332\001\002\000\004\023\u0333\001\002\000\054\002\uffc4" +
    "\006\uffc4\007\uffc4\011\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\031\uffc4\037\uffc4\041\uffc4\044\uffc4\045\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\111\uffc4\124" +
    "\uffc4\001\002\000\004\026\101\001\002\000\004\011\u02d1" +
    "\001\002\000\004\046\u0337\001\002\000\004\016\u0338\001" +
    "\002\000\006\004\u023d\011\u023e\001\002\000\004\016\u033a" +
    "\001\002\000\006\030\u0242\065\u0241\001\002\000\004\016" +
    "\u033c\001\002\000\006\004\u023d\011\u023e\001\002\000\006" +
    "\013\206\023\207\001\002\000\054\002\uff51\006\uff51\007" +
    "\uff51\011\uff51\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51" +
    "\031\uff51\037\uff51\041\uff51\044\uff51\045\uff51\051\uff51\052" +
    "\uff51\053\uff51\055\uff51\056\uff51\111\uff51\124\uff51\001\002" +
    "\000\004\002\000\001\002\000\004\011\uff07\001\002\000" +
    "\006\011\uff08\067\uff08\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u033f\000\076\002\007\004\064\005\045\006\047\007" +
    "\006\010\013\011\043\015\046\016\017\017\035\022\012" +
    "\031\050\032\037\035\041\042\011\046\016\053\040\055" +
    "\042\056\053\057\023\060\051\061\060\071\027\073\055" +
    "\076\024\105\057\106\026\112\061\116\044\117\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u022d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\002\u0201\004\064\005\045\006\047\007\006\010\013" +
    "\011\043\015\046\016\017\017\035\022\012\031\050\032" +
    "\037\035\041\042\011\046\016\053\040\055\042\056\053" +
    "\057\023\060\051\061\060\071\027\073\055\076\024\105" +
    "\057\106\026\112\061\116\044\117\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0124" +
    "\001\001\000\002\001\001\000\004\012\354\001\001\000" +
    "\004\013\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\002\065" +
    "\004\064\005\045\006\047\007\006\010\013\011\043\015" +
    "\046\016\017\017\035\022\012\031\050\032\037\035\041" +
    "\042\011\046\016\053\040\055\042\056\053\057\023\060" +
    "\051\061\060\071\027\073\055\076\024\105\057\106\026" +
    "\112\061\116\044\117\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\077\001\001\000\006\030\101\071\102" +
    "\001\001\000\002\001\001\000\004\030\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\130\001\001" +
    "\000\002\001\001\000\004\110\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\163\001\001\000\002\001\001\000\004" +
    "\110\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\222\001\001\000\002\001\001" +
    "\000\004\060\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\237\025\241\026\243\027\244" +
    "\127\247\001\001\000\004\012\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\237\025\241\026\243" +
    "\027\244\127\301\001\001\000\002\001\001\000\014\024" +
    "\237\025\241\026\243\027\244\127\274\001\001\000\002" +
    "\001\001\000\014\024\237\025\241\026\243\027\244\127" +
    "\267\001\001\000\014\024\237\025\241\026\243\027\244" +
    "\127\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\254\001\001\000\004\013" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\317\001\001\000\002\001" +
    "\001\000\004\013\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\341\040\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\364\001" +
    "\001\000\002\001\001\000\004\060\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\367\001\001\000\004\013\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\237\025" +
    "\241\026\243\027\244\127\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0114\001\001\000\004\013\u0115\001\001\000\002" +
    "\001\001\000\014\024\237\025\241\026\243\027\244\127" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\u011b\041\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0121\001\001\000\006\030" +
    "\u011b\041\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\237\025\241\026\243\027\244\127\u012d\001\001\000\002" +
    "\001\001\000\004\023\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0132\001\001\000\004\013\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0143\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\113\u014d\115\u014a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u0158\001\001\000\004\012\u0124\001" +
    "\001\000\002\001\001\000\004\012\u015f\001\001\000\004" +
    "\012\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0154\006\047\007\006\010" +
    "\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u015e" +
    "\001\001\000\002\001\001\000\004\013\u0161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0154\006" +
    "\047\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153" +
    "\061\u0159\114\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0154\006\047\007\006" +
    "\010\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0154\006\047" +
    "\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061" +
    "\u0159\114\u017a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0154\006" +
    "\047\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153" +
    "\061\u0159\114\u017f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0154" +
    "\006\047\007\006\010\013\011\043\056\u0156\057\u0155\060" +
    "\u0153\061\u0159\114\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u0154\006\047\007\006\010\013\011\043" +
    "\056\u0156\057\u0155\060\u0153\061\u0159\114\u018a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u0154\006\047\007\006\010\013\011\043\056\u0156\057" +
    "\u0155\060\u0153\061\u0159\114\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0154\006\047\007\006\010\013\011\043\056\u0156" +
    "\057\u0155\060\u0153\061\u0159\114\u0193\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0154" +
    "\006\047\007\006\010\013\011\043\056\u0156\057\u0155\060" +
    "\u0153\061\u0159\114\u0197\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0154\006\047\007" +
    "\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159" +
    "\114\u019b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0154\006\047" +
    "\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061" +
    "\u0159\114\u01a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0154\006" +
    "\047\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153" +
    "\061\u0159\114\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0154\006\047\007\006\010" +
    "\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u01ac" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0154\006\047\007\006\010" +
    "\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u01b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u0154\006\047\007\006\010\013\011\043" +
    "\056\u0156\057\u0155\060\u0153\061\u0159\114\u01b8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u01bf\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0154\006\047" +
    "\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061" +
    "\u0159\114\u01c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0154\006\047\007\006\010" +
    "\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0154\006\047\007\006\010\013\011\043\056" +
    "\u0156\057\u0155\060\u0153\061\u0159\114\u01ce\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u01d2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u0154\006\047\007\006\010\013\011\043\056\u0156\057" +
    "\u0155\060\u0153\061\u0159\114\u01d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0154\006\047" +
    "\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061" +
    "\u0159\114\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0154\006\047\007\006\010" +
    "\013\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u01e2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0154\006\047\007\006\010\013\011\043\056" +
    "\u0156\057\u0155\060\u0153\061\u0159\114\u01e9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0154\006\047\007\006\010\013\011\043\056\u0156\057\u0155" +
    "\060\u0153\061\u0159\114\u01f5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0154\006\047" +
    "\007\006\010\013\011\043\056\u0156\057\u0155\060\u0153\061" +
    "\u0159\114\u01f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0154\006\047\007\006\010\013" +
    "\011\043\056\u0156\057\u0155\060\u0153\061\u0159\114\u0200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u0207\057\u0205\060\u0206\061\u0204\001\001\000" +
    "\004\012\u021d\001\001\000\004\012\u0216\001\001\000\004" +
    "\012\u020f\001\001\000\004\012\u0208\001\001\000\004\013" +
    "\u020a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u020d\001\001\000\004\013\u020e\001" +
    "\001\000\002\001\001\000\004\013\u0211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0215\001\001\000\002\001\001\000\004" +
    "\013\u0218\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u021b\001\001\000\004\013\u021c" +
    "\001\001\000\002\001\001\000\004\013\u021f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u0222\001\001\000\004\013\u0223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u0228" +
    "\045\u0227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u022b\001\001\000\002\001\001" +
    "\000\004\072\u022e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0231\001\001\000\004\072\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0234\001" +
    "\001\000\002\001\001\000\006\077\u0239\104\u0236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u0242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0244\001\001\000\002\001" +
    "\001\000\004\101\u0246\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u024a\001\001\000\002\001\001\000" +
    "\006\030\u024c\103\u024b\001\001\000\002\001\001\000\004" +
    "\016\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0252\001\001" +
    "\000\006\030\u024c\103\u0253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u026e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0271" +
    "\001\001\000\002\001\001\000\004\057\u0273\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0276\001\001" +
    "\000\002\001\001\000\004\057\u0278\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u027b\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\237\025\241\026" +
    "\243\027\244\127\u027e\001\001\000\002\001\001\000\004" +
    "\023\u0280\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0283\001\001\000\004\013\u0284\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0287\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u028d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0292\001\001\000\002\001\001\000" +
    "\004\013\u0294\001\001\000\002\001\001\000\004\057\u0296" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0299\001\001\000\002\001\001\000\004\057\u029b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u029e\001" +
    "\001\000\002\001\001\000\004\057\u02a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u02a3\001\001\000" +
    "\002\001\001\000\004\033\u02a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u02aa\001\001\000\004\013\u02ab\001\001\000\004" +
    "\034\u02ad\001\001\000\004\023\u02af\001\001\000\002\001" +
    "\001\000\004\033\u02b1\001\001\000\004\013\u02b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u02b4\001\001\000\004\013\u02b5\001\001\000\004" +
    "\034\u02b6\001\001\000\002\001\001\000\004\110\u02b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\u02bd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u02c3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u02cd\126\u02cc\001\001\000\002\001\001\000" +
    "\004\110\u02e6\001\001\000\002\001\001\000\004\110\u02dd" +
    "\001\001\000\002\001\001\000\004\013\u02ce\001\001\000" +
    "\004\030\u02cf\001\001\000\006\073\055\106\u02d1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u02d7\126\u02cc\001\001\000\004" +
    "\110\u02e6\001\001\000\004\110\u02dd\001\001\000\004\013" +
    "\u02d8\001\001\000\004\030\u02d9\001\001\000\006\073\055" +
    "\106\u02da\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u02ea\001\001\000\002\001\001\000\004\013\u02ee" +
    "\001\001\000\004\013\u02ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\u02f5\126\u02cc\001\001\000\004\013\u02f6\001\001" +
    "\000\004\030\u02f7\001\001\000\006\073\055\106\u02f8\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\u02d7" +
    "\126\u02cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u030b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u030f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0319\001\001\000\004\013\u031a\001\001\000" +
    "\002\001\001\000\004\020\u031e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0329\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u032c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u032f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0334\001\001" +
    "\000\006\073\055\106\u0335\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0338\001\001\000\002\001\001" +
    "\000\004\100\u033a\001\001\000\002\001\001\000\004\102" +
    "\u033c\001\001\000\004\013\u033d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CLASESA ::= tipodeclase newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipodeclase ::= IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipodeclase ::= IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODOSCLASES ::= metodos newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de metodo: "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOSCLASES ::= propum newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOSCLASES ::= proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOSCLASES ::= propum newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOSCLASES ::= proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOSCLASES ::= proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDOCLASES ::= propiedades newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de propiedad "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOCLASES ::= propu newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDOCLASES ::= propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDOCLASES ::= propu newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTENIDOCLASES ::= propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDOCLASES ::= propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIP ::= cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIP ::= entero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(c); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIP ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIP ::= identificador 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCIONESS ::= reducciondetipoente identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCIONESS ::= reducciondetipocadena identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCIONESS ::= reducciondetipobol identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCIONESS ::= reducciondetiporeal identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCIONESS ::= reducciondetipoente identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONESS ::= reducciondetipocadena identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCIONESS ::= reducciondetipobol identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCIONESS ::= reducciondetiporeal identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CANTIDADDEPARAMETROS ::= PARAMETROSE CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CANTIDADDEPARAMETROS ::= PARAMETROSC CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CANTIDADDEPARAMETROS ::= PARAMETROSB CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANTIDADDEPARAMETROS ::= PARAMETROSR CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANTIDADDEPARAMETROS ::= PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CANTIDADDEPARAMETROS ::= PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CANTIDADDEPARAMETROS ::= PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CANTIDADDEPARAMETROS ::= PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPOF ::= newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CUERPOF ::= newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CUERPOF ::= newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPOF ::= newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPOF ::= newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CUERPOF ::= newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPOF ::= newline COMM newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CUERPOF ::= newline COMM newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CUERPOF ::= newline COMM newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CUERPOF ::= newline COMM newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPOF ::= newline COMM newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOF ::= newline COMM newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // est ::= ifs libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // est ::= ifs libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // seguimiento ::= els libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // seguimiento ::= els libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // seguimiento ::= els CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cond ::= entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cond ::= identificador libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cond ::= entero libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cond ::= identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // operacionesmatematicas ::= OPERADORESLOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OPERADORESLOGICOS ::= identificador and identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OPERADORESLOGICOS ::= identificador or identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OPERADORESLOGICOS ::= identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERADORESLOGICOS ::= identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // simbolosdeopera ::= porc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         int valor=0;
        try {
	valor= Integer.parseInt((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un entero"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FunE ::= reducciondetiporeal tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         Double valor=0.0;
        try {
	valor= Double.parseDouble((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un numero real"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FunE ::= reducciondetipobol tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            String compara=(String)s;
          if(compara.compareTo("verdadero")==0||compara.compareTo("falso")==0){
          	 System.out.println("Cambio exitoso"); 
	}else{
             System.out.println("no se puede realizar el cambio"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FunE ::= reducciondetiporeal tipo_ca4 para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        String compara=(String) s ;
          if(compara.compareTo("seno")==0){
          	 System.out.println("La operacion a realizar es el calculo de seno"); 
	}        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FunE ::= reducciondetiporeal tipo_ca5 para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        String compara=(String) s ;
          if(compara.compareTo("coseno")==0){
          	 System.out.println("La operacion a realizar es el calculo de coseno"); 
	}        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // FunE ::= reducciondetiporeal tipo_ca6 para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        String compara=(String) s ;
          if(compara.compareTo("tangente")==0){
          	 System.out.println("La operacion a realizar es el calculo de la tangente"); 
	}        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FunE ::= reducciondetiporeal tipo_ca7 para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        String compara=(String) s ;
          if(compara.compareTo("logaritmo")==0){
          	 System.out.println("La operacion a realizar es el calculo del logaritmo"); 
	}        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FunE ::= reducciondetiporeal tipo_ca8 para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
        String compara=(String) s ;
          if(compara.compareTo("raiz")==0){
          	 System.out.println("La operacion a realizar es el calculo dela raiz"); 
	}        
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FunE ::= tipo_ent identificador para tipo_ent libre identificador parb newline CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // contructoDes ::= constru para CANTIDADDEPARAMETROS parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TiposArr ::= identificador libre asignacion libre insta tipo_ent corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TiposArr ::= identificador libre asignacion libre insta tipo_cadena corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TiposArr ::= identificador libre asignacion libre insta tipo_real corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TiposArr ::= identificador libre asignacion libre insta tipo_bol corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
