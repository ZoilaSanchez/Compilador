
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\005" +
    "\000\002\005\011\000\002\006\005\000\002\006\011\000" +
    "\002\007\005\000\002\007\011\000\002\010\005\000\002" +
    "\010\011\000\002\014\003\000\002\014\003\000\002\015" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\005\000\002" +
    "\016\006\000\002\021\011\000\002\021\010\000\002\021" +
    "\011\000\002\021\011\000\002\023\006\000\002\023\004" +
    "\000\002\024\007\000\002\024\005\000\002\025\007\000" +
    "\002\025\005\000\002\026\006\000\002\026\004\000\002" +
    "\022\013\000\002\022\006\000\002\030\015\000\002\030" +
    "\016\000\002\030\013\000\002\030\005\000\002\036\006" +
    "\000\002\031\011\000\002\031\010\000\002\033\011\000" +
    "\002\033\010\000\002\032\007\000\002\032\007\000\002" +
    "\032\007\000\002\032\007\000\002\034\011\000\002\034" +
    "\011\000\002\034\011\000\002\034\011\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\041\017\000\002\041\007\000\002" +
    "\040\011\000\002\040\012\000\002\044\006\000\002\045" +
    "\016\000\002\045\016\000\002\045\016\000\002\045\016" +
    "\000\002\046\004\000\002\046\006\000\002\047\004\000" +
    "\002\047\006\000\002\050\004\000\002\050\006\000\002" +
    "\051\004\000\002\051\006\000\002\052\007\000\002\052" +
    "\007\000\002\052\007\000\002\052\007\000\002\052\013" +
    "\000\002\052\014\000\002\055\004\000\002\056\004\000" +
    "\002\060\004\000\002\057\004\000\002\011\005\000\002" +
    "\011\003\000\002\012\004\000\002\012\003\000\002\027" +
    "\004\000\002\027\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\032\006\013\007\011\011\045\017\025\020" +
    "\016\021\022\022\044\031\023\040\026\043\014\050\033" +
    "\051\006\001\002\000\034\002\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\040\ufff5" +
    "\043\ufff5\050\ufff5\051\ufff5\001\002\000\034\002\001\006" +
    "\013\007\011\011\045\017\025\020\016\021\022\022\044" +
    "\031\023\040\026\043\014\050\033\051\006\001\002\000" +
    "\004\011\u015f\001\002\000\034\002\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\031\uffe7\040" +
    "\uffe7\043\uffe7\050\uffe7\051\uffe7\001\002\000\034\002\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\031\ufff7\040\ufff7\043\ufff7\050\ufff7\051\ufff7\001\002" +
    "\000\004\016\u015c\001\002\000\034\002\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\031\uffe6" +
    "\040\uffe6\043\uffe6\050\uffe6\051\uffe6\001\002\000\004\016" +
    "\u0147\001\002\000\004\024\u0133\001\002\000\012\011\377" +
    "\065\u0102\066\u0101\075\u0103\001\002\000\004\016\376\001" +
    "\002\000\004\002\375\001\002\000\034\002\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\031" +
    "\ufff6\040\ufff6\043\ufff6\050\ufff6\051\ufff6\001\002\000\034" +
    "\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\031\ufffc\040\ufffc\043\ufffc\050\ufffc\051\ufffc" +
    "\001\002\000\004\016\374\001\002\000\004\016\353\001" +
    "\002\000\034\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\031\ufffb\040\ufffb\043\ufffb\050" +
    "\ufffb\051\ufffb\001\002\000\004\016\352\001\002\000\006" +
    "\004\321\011\322\001\002\000\034\002\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0" +
    "\040\ufff0\043\ufff0\050\ufff0\051\ufff0\001\002\000\034\002" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\031\ufff8\040\ufff8\043\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\016\011\250\067\252\070\251\071\247\072\246" +
    "\073\245\001\002\000\004\011\202\001\002\000\004\024" +
    "\172\001\002\000\034\002\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3\040\ufff3\043" +
    "\ufff3\050\ufff3\051\ufff3\001\002\000\034\002\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031" +
    "\ufff9\040\ufff9\043\ufff9\050\ufff9\051\ufff9\001\002\000\034" +
    "\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\031\ufff4\040\ufff4\043\ufff4\050\ufff4\051\ufff4" +
    "\001\002\000\034\002\uffff\006\013\007\011\011\045\017" +
    "\025\020\016\021\022\022\044\031\023\040\026\043\014" +
    "\050\033\051\006\001\002\000\034\002\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031\ufffa" +
    "\040\ufffa\043\ufffa\050\ufffa\051\ufffa\001\002\000\034\002" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\031\ufff1\040\ufff1\043\ufff1\050\ufff1\051\ufff1\001" +
    "\002\000\004\011\107\001\002\000\034\002\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031" +
    "\ufff2\040\ufff2\043\ufff2\050\ufff2\051\ufff2\001\002\000\004" +
    "\016\106\001\002\000\006\016\047\076\046\001\002\000" +
    "\004\004\073\001\002\000\004\015\050\001\002\000\004" +
    "\016\051\001\002\000\004\056\052\001\002\000\014\017" +
    "\054\020\053\021\057\022\056\031\060\001\002\000\006" +
    "\016\uff8f\076\uff8f\001\002\000\006\016\uff91\076\uff91\001" +
    "\002\000\004\076\067\001\002\000\006\016\uff90\076\uff90" +
    "\001\002\000\006\016\uff8e\076\uff8e\001\002\000\004\024" +
    "\061\001\002\000\004\025\062\001\002\000\006\013\063" +
    "\023\064\001\002\000\004\023\066\001\002\000\040\002" +
    "\uff98\006\uff98\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\026\uff98\031\uff98\040\uff98\042\uff98\043\uff98\050" +
    "\uff98\051\uff98\001\002\000\034\002\uffca\006\uffca\007\uffca" +
    "\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\031\uffca\040" +
    "\uffca\043\uffca\050\uffca\051\uffca\001\002\000\040\002\uff99" +
    "\006\uff99\007\uff99\011\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\026\uff99\031\uff99\040\uff99\042\uff99\043\uff99\050\uff99" +
    "\051\uff99\001\002\000\004\004\070\001\002\000\004\077" +
    "\071\001\002\000\006\013\063\023\064\001\002\000\034" +
    "\002\uffa0\006\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\031\uffa0\040\uffa0\043\uffa0\050\uffa0\051\uffa0" +
    "\001\002\000\004\077\074\001\002\000\004\016\075\001" +
    "\002\000\004\015\076\001\002\000\004\016\077\001\002" +
    "\000\012\004\100\005\104\010\103\014\102\001\002\000" +
    "\012\012\uff95\013\uff95\023\uff95\025\uff95\001\002\000\006" +
    "\013\063\023\064\001\002\000\012\012\uff94\013\uff94\023" +
    "\uff94\025\uff94\001\002\000\012\012\uff93\013\uff93\023\uff93" +
    "\025\uff93\001\002\000\012\012\uff92\013\uff92\023\uff92\025" +
    "\uff92\001\002\000\034\002\uffa1\006\uffa1\007\uffa1\011\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\040\uffa1\043" +
    "\uffa1\050\uffa1\051\uffa1\001\002\000\004\011\uff9c\001\002" +
    "\000\016\012\121\013\uff9a\016\uff9a\023\uff9a\024\117\076" +
    "\120\001\002\000\010\013\063\016\111\023\064\001\002" +
    "\000\004\015\113\001\002\000\034\002\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\031\uffeb" +
    "\040\uffeb\043\uffeb\050\uffeb\051\uffeb\001\002\000\004\016" +
    "\114\001\002\000\004\010\115\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffea\006\uffea\007\uffea\011" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\031\uffea\040\uffea" +
    "\043\uffea\050\uffea\051\uffea\001\002\000\004\020\145\001" +
    "\002\000\006\004\124\077\125\001\002\000\004\011\122" +
    "\001\002\000\012\012\121\013\uff9a\016\uff9a\023\uff9a\001" +
    "\002\000\010\013\uff9b\016\uff9b\023\uff9b\001\002\000\004" +
    "\077\127\001\002\000\006\013\063\023\064\001\002\000" +
    "\034\002\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\031\uffa3\040\uffa3\043\uffa3\050\uffa3\051" +
    "\uffa3\001\002\000\004\016\130\001\002\000\004\015\131" +
    "\001\002\000\004\100\132\001\002\000\004\016\133\001" +
    "\002\000\004\010\135\001\002\000\004\101\142\001\002" +
    "\000\006\012\137\016\136\001\002\000\004\101\uffa7\001" +
    "\002\000\004\016\140\001\002\000\004\010\135\001\002" +
    "\000\004\101\uffa6\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffae\006\uffae\007\uffae\011\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\031\uffae\040\uffae\043\uffae\050" +
    "\uffae\051\uffae\001\002\000\004\025\152\001\002\000\004" +
    "\016\146\001\002\000\004\011\147\001\002\000\006\012" +
    "\150\025\uffd1\001\002\000\004\020\145\001\002\000\004" +
    "\025\uffd2\001\002\000\004\023\153\001\002\000\004\026" +
    "\157\001\002\000\006\013\063\023\064\001\002\000\034" +
    "\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\031\uffd8\040\uffd8\043\uffd8\050\uffd8\051\uffd8" +
    "\001\002\000\004\035\161\001\002\000\012\011\uff96\026" +
    "\157\035\uff96\051\uff96\001\002\000\010\011\uff97\035\uff97" +
    "\051\uff97\001\002\000\006\004\163\016\162\001\002\000" +
    "\004\011\164\001\002\000\006\013\uffcd\023\uffcd\001\002" +
    "\000\004\016\165\001\002\000\004\063\166\001\002\000" +
    "\004\016\167\001\002\000\004\011\170\001\002\000\006" +
    "\013\uffce\023\uffce\001\002\000\004\002\ufffe\001\002\000" +
    "\004\025\173\001\002\000\004\023\174\001\002\000\004" +
    "\026\157\001\002\000\034\002\uffb5\006\uffb5\007\uffb5\011" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\031\uffb5\040\uffb5" +
    "\043\uffb5\050\uffb5\051\uffb5\001\002\000\004\051\177\001" +
    "\002\000\004\011\200\001\002\000\006\013\063\023\064" +
    "\001\002\000\034\002\uffb2\006\uffb2\007\uffb2\011\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\031\uffb2\040\uffb2\043\uffb2" +
    "\050\uffb2\051\uffb2\001\002\000\016\012\121\013\uff9a\016" +
    "\uff9a\023\uff9a\024\213\076\212\001\002\000\010\013\063" +
    "\016\204\023\064\001\002\000\004\015\206\001\002\000" +
    "\034\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\031\uffed\040\uffed\043\uffed\050\uffed\051" +
    "\uffed\001\002\000\004\016\207\001\002\000\004\014\210" +
    "\001\002\000\006\013\063\023\064\001\002\000\034\002" +
    "\uffec\006\uffec\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\031\uffec\040\uffec\043\uffec\050\uffec\051\uffec\001" +
    "\002\000\006\004\224\077\225\001\002\000\004\022\214" +
    "\001\002\000\004\016\220\001\002\000\004\023\153\001" +
    "\002\000\006\013\063\023\064\001\002\000\034\002\uffd9" +
    "\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\031\uffd9\040\uffd9\043\uffd9\050\uffd9\051\uffd9\001\002" +
    "\000\004\011\221\001\002\000\006\012\222\023\uffd3\001" +
    "\002\000\004\022\214\001\002\000\004\023\uffd4\001\002" +
    "\000\004\077\227\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffa2\006\uffa2\007\uffa2\011\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\031\uffa2\040\uffa2\043\uffa2\050" +
    "\uffa2\051\uffa2\001\002\000\004\016\230\001\002\000\004" +
    "\015\231\001\002\000\004\100\232\001\002\000\004\016" +
    "\233\001\002\000\004\014\234\001\002\000\006\012\241" +
    "\016\240\001\002\000\004\101\236\001\002\000\006\013" +
    "\063\023\064\001\002\000\034\002\uffaf\006\uffaf\007\uffaf" +
    "\011\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\031\uffaf\040" +
    "\uffaf\043\uffaf\050\uffaf\051\uffaf\001\002\000\004\101\uffa9" +
    "\001\002\000\004\016\242\001\002\000\004\014\234\001" +
    "\002\000\004\101\uffa8\001\002\000\004\024\314\001\002" +
    "\000\004\024\uffb7\001\002\000\004\024\uffb8\001\002\000" +
    "\004\024\uffb9\001\002\000\016\012\121\013\uff9a\016\uff9a" +
    "\023\uff9a\024\262\076\263\001\002\000\004\024\uffba\001" +
    "\002\000\004\024\uffbb\001\002\000\010\013\063\016\254" +
    "\023\064\001\002\000\004\015\256\001\002\000\034\002" +
    "\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\031\uffe9\040\uffe9\043\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\004\016\257\001\002\000\004\005\260\001\002" +
    "\000\006\013\063\023\064\001\002\000\034\002\uffe8\006" +
    "\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\031\uffe8\040\uffe8\043\uffe8\050\uffe8\051\uffe8\001\002\000" +
    "\004\021\022\001\002\000\006\004\264\077\265\001\002" +
    "\000\004\077\267\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffa4\006\uffa4\007\uffa4\011\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\031\uffa4\040\uffa4\043\uffa4\050" +
    "\uffa4\051\uffa4\001\002\000\004\016\270\001\002\000\004" +
    "\015\271\001\002\000\004\100\272\001\002\000\004\016" +
    "\273\001\002\000\004\005\275\001\002\000\004\101\302" +
    "\001\002\000\006\012\277\016\276\001\002\000\004\101" +
    "\uffab\001\002\000\004\016\300\001\002\000\004\005\275" +
    "\001\002\000\004\101\uffaa\001\002\000\006\013\063\023" +
    "\064\001\002\000\034\002\uffb0\006\uffb0\007\uffb0\011\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\031\uffb0\040\uffb0\043" +
    "\uffb0\050\uffb0\051\uffb0\001\002\000\004\025\311\001\002" +
    "\000\004\011\306\001\002\000\006\012\307\025\uffcf\001" +
    "\002\000\004\021\022\001\002\000\004\025\uffd0\001\002" +
    "\000\004\023\153\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\031\uffd7\040\uffd7\043\uffd7\050" +
    "\uffd7\051\uffd7\001\002\000\004\021\022\001\002\000\004" +
    "\011\316\001\002\000\004\025\317\001\002\000\006\013" +
    "\063\023\064\001\002\000\034\002\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\031\uffbc\040" +
    "\uffbc\043\uffbc\050\uffbc\051\uffbc\001\002\000\004\016\345" +
    "\001\002\000\004\016\340\001\002\000\004\016\324\001" +
    "\002\000\004\041\325\001\002\000\004\023\153\001\002" +
    "\000\006\013\063\023\064\001\002\000\036\002\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\031\uffc6\040\uffc6\042\330\043\uffc6\050\uffc6\051\uffc6\001" +
    "\002\000\006\004\321\011\322\001\002\000\034\002\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\031\uffc7\040\uffc7\043\uffc7\050\uffc7\051\uffc7\001\002" +
    "\000\004\016\333\001\002\000\004\041\334\001\002\000" +
    "\004\023\153\001\002\000\006\013\063\023\064\001\002" +
    "\000\036\002\uffc4\006\uffc4\007\uffc4\011\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\031\uffc4\040\uffc4\042\330\043\uffc4" +
    "\050\uffc4\051\uffc4\001\002\000\034\002\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\031\uffc5" +
    "\040\uffc5\043\uffc5\050\uffc5\051\uffc5\001\002\000\004\063" +
    "\341\001\002\000\004\016\342\001\002\000\006\004\343" +
    "\011\344\001\002\000\004\016\uffc2\001\002\000\004\016" +
    "\uffc0\001\002\000\004\063\346\001\002\000\004\016\347" +
    "\001\002\000\006\004\350\011\351\001\002\000\004\016" +
    "\uffc3\001\002\000\004\016\uffc1\001\002\000\012\011\uff9f" +
    "\065\uff9f\066\uff9f\075\uff9f\001\002\000\004\011\354\001" +
    "\002\000\004\016\355\001\002\000\004\015\356\001\002" +
    "\000\004\016\357\001\002\000\004\056\360\001\002\000" +
    "\004\031\361\001\002\000\004\024\362\001\002\000\014" +
    "\004\100\005\104\010\103\014\102\025\365\001\002\000" +
    "\004\012\371\001\002\000\004\025\367\001\002\000\006" +
    "\013\063\023\064\001\002\000\034\002\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\031\uffcc" +
    "\040\uffcc\043\uffcc\050\uffcc\051\uffcc\001\002\000\006\013" +
    "\063\023\064\001\002\000\034\002\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\031\uffcb\040" +
    "\uffcb\043\uffcb\050\uffcb\051\uffcb\001\002\000\004\016\372" +
    "\001\002\000\012\004\100\005\104\010\103\014\102\001" +
    "\002\000\004\025\uffc8\001\002\000\016\011\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001\002\000\004\002" +
    "\000\001\002\000\004\011\uff9d\001\002\000\016\012\121" +
    "\013\uff9a\016\uff9a\023\uff9a\024\u0119\076\u011a\001\002\000" +
    "\010\013\063\016\u0113\023\064\001\002\000\004\024\u010e" +
    "\001\002\000\004\024\u0109\001\002\000\004\024\u0104\001" +
    "\002\000\004\022\044\001\002\000\004\011\u0106\001\002" +
    "\000\004\025\u0107\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\031\uffbf\040\uffbf\043\uffbf\050" +
    "\uffbf\051\uffbf\001\002\000\004\022\044\001\002\000\004" +
    "\011\u010b\001\002\000\004\025\u010c\001\002\000\006\013" +
    "\063\023\064\001\002\000\034\002\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\031\uffbe\040" +
    "\uffbe\043\uffbe\050\uffbe\051\uffbe\001\002\000\004\022\044" +
    "\001\002\000\004\011\u0110\001\002\000\004\025\u0111\001" +
    "\002\000\006\013\063\023\064\001\002\000\034\002\uffbd" +
    "\006\uffbd\007\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\031\uffbd\040\uffbd\043\uffbd\050\uffbd\051\uffbd\001\002" +
    "\000\004\015\u0115\001\002\000\034\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\031\uffef" +
    "\040\uffef\043\uffef\050\uffef\051\uffef\001\002\000\004\016" +
    "\u0116\001\002\000\004\004\u0117\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffee\006\uffee\007\uffee\011" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\031\uffee\040\uffee" +
    "\043\uffee\050\uffee\051\uffee\001\002\000\004\017\025\001" +
    "\002\000\006\004\u011b\077\u011c\001\002\000\004\077\u011e" +
    "\001\002\000\006\013\063\023\064\001\002\000\034\002" +
    "\uffa5\006\uffa5\007\uffa5\011\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\031\uffa5\040\uffa5\043\uffa5\050\uffa5\051\uffa5\001" +
    "\002\000\004\016\u011f\001\002\000\004\015\u0120\001\002" +
    "\000\004\100\u0121\001\002\000\004\016\u0122\001\002\000" +
    "\004\004\u0123\001\002\000\006\012\u0128\016\u0127\001\002" +
    "\000\004\101\u0125\001\002\000\006\013\063\023\064\001" +
    "\002\000\034\002\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\031\uffb1\040\uffb1\043\uffb1\050" +
    "\uffb1\051\uffb1\001\002\000\004\101\uffad\001\002\000\004" +
    "\016\u0129\001\002\000\004\004\u0123\001\002\000\004\101" +
    "\uffac\001\002\000\004\025\u0130\001\002\000\004\011\u012d" +
    "\001\002\000\006\012\u012e\025\uffd5\001\002\000\004\017" +
    "\025\001\002\000\004\025\uffd6\001\002\000\004\023\153" +
    "\001\002\000\006\013\063\023\064\001\002\000\034\002" +
    "\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\031\uffda\040\uffda\043\uffda\050\uffda\051\uffda\001" +
    "\002\000\012\017\054\020\053\021\057\022\056\001\002" +
    "\000\004\016\u0135\001\002\000\004\011\u0136\001\002\000" +
    "\004\012\u0137\001\002\000\004\016\u0138\001\002\000\012" +
    "\017\054\020\053\021\057\022\056\001\002\000\004\016" +
    "\u013a\001\002\000\004\011\u013b\001\002\000\004\025\u013c" +
    "\001\002\000\004\023\u013d\001\002\000\004\026\157\001" +
    "\002\000\034\002\uffb6\006\uffb6\007\uffb6\011\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\031\uffb6\040\uffb6\043\uffb6\050" +
    "\uffb6\051\uffb6\001\002\000\004\011\u0140\001\002\000\004" +
    "\016\u0141\001\002\000\004\015\u0142\001\002\000\004\016" +
    "\u0143\001\002\000\004\011\u0144\001\002\000\006\013\063" +
    "\023\064\001\002\000\036\002\uffb4\006\uffb4\007\uffb4\011" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\026\157\031\uffb4" +
    "\040\uffb4\043\uffb4\050\uffb4\051\uffb4\001\002\000\034\002" +
    "\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\031\uffb3\040\uffb3\043\uffb3\050\uffb3\051\uffb3\001" +
    "\002\000\012\004\u0149\005\u014c\011\u014b\014\u0148\001\002" +
    "\000\010\012\u0159\013\uffe0\023\uffe0\001\002\000\010\012" +
    "\u0156\013\uffdf\023\uffdf\001\002\000\006\013\063\023\064" +
    "\001\002\000\012\012\u0151\013\uffdd\023\uffdd\057\u0150\001" +
    "\002\000\010\012\u014d\013\uffde\023\uffde\001\002\000\004" +
    "\016\u014e\001\002\000\012\004\u0149\005\u014c\011\u014b\014" +
    "\u0148\001\002\000\006\013\uffe2\023\uffe2\001\002\000\004" +
    "\011\u0154\001\002\000\004\016\u0152\001\002\000\012\004" +
    "\u0149\005\u014c\011\u014b\014\u0148\001\002\000\006\013\uffe1" +
    "\023\uffe1\001\002\000\006\013\uffdc\023\uffdc\001\002\000" +
    "\034\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\031\uffe5\040\uffe5\043\uffe5\050\uffe5\051" +
    "\uffe5\001\002\000\004\016\u0157\001\002\000\012\004\u0149" +
    "\005\u014c\011\u014b\014\u0148\001\002\000\006\013\uffe3\023" +
    "\uffe3\001\002\000\004\016\u015a\001\002\000\012\004\u0149" +
    "\005\u014c\011\u014b\014\u0148\001\002\000\006\013\uffe4\023" +
    "\uffe4\001\002\000\004\011\u015d\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\031\uffdb\040\uffdb" +
    "\043\uffdb\050\uffdb\051\uffdb\001\002\000\006\013\063\023" +
    "\064\001\002\000\034\002\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\031\uffc9\040\uffc9\043" +
    "\uffc9\050\uffc9\051\uffc9\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\056\002\016\003\004\004\020\005\033\006" +
    "\042\007\040\010\026\014\023\015\006\016\011\021\037" +
    "\030\034\031\027\034\007\041\017\045\003\052\035\054" +
    "\036\055\014\056\030\057\031\060\041\001\001\000\002" +
    "\001\001\000\056\002\u0160\003\004\004\020\005\033\006" +
    "\042\007\040\010\026\014\023\015\006\016\011\021\037" +
    "\030\034\031\027\034\007\041\017\045\003\052\035\054" +
    "\036\055\014\056\030\057\031\060\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\252\035\243\001\001\000\004\011\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\170\003\004\004\020\005" +
    "\033\006\042\007\040\010\026\014\023\015\006\016\011" +
    "\021\037\030\034\031\027\034\007\041\017\045\003\052" +
    "\035\054\036\055\014\056\030\057\031\060\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\100\001\001\000\002\001\001\000" +
    "\004\012\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\115\001\001\000\002\001\001\000\004\025\143" +
    "\001\001\000\002\001\001\000\004\011\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\140\001\001" +
    "\000\002\001\001\000\004\012\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\150\001\001\000\002\001" +
    "\001\000\004\022\153\001\001\000\004\027\155\001\001" +
    "\000\004\012\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\175\044\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\214\001" +
    "\001\000\002\001\001\000\004\022\215\001\001\000\004" +
    "\012\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\260\001\001\000\002" +
    "\001\001\000\006\026\303\056\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\300\001\001\000\002\001\001\000\004" +
    "\012\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\307\056\304" +
    "\001\001\000\002\001\001\000\004\022\311\001\001\000" +
    "\004\012\312\001\001\000\002\001\001\000\004\056\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\325\001\001\000\004\012\326\001\001\000\004\033\330" +
    "\001\001\000\004\032\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\334\001\001" +
    "\000\004\012\335\001\001\000\004\033\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\363\037\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\365\001\001\000\002\001\001\000\004\012" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0107\001\001\000\002\001" +
    "\001\000\004\057\u0109\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u010c\001\001\000\002\001\001\000" +
    "\004\057\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0117\001\001\000\002\001\001\000\006\023" +
    "\u012a\055\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u012e\055\u012b\001\001\000\002\001" +
    "\001\000\004\022\u0130\001\001\000\004\012\u0131\001\001" +
    "\000\002\001\001\000\004\042\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u013e" +
    "\040\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0144\001\001\000\006\027\u013e\040" +
    "\u0145\001\001\000\002\001\001\000\004\017\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u015a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u015d\001\001\000\002\001\001" +
    "\000\004\012\u015f\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre boleano finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre real finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
