
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\005" +
    "\000\002\005\011\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\006\005\000\002" +
    "\006\011\000\002\007\005\000\002\007\011\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\010\005" +
    "\000\002\010\011\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\016\006\000\002\021\011\000\002" +
    "\021\010\000\002\021\011\000\002\021\011\000\002\023" +
    "\006\000\002\023\004\000\002\024\007\000\002\024\005" +
    "\000\002\025\007\000\002\025\005\000\002\026\006\000" +
    "\002\026\004\000\002\022\013\000\002\022\006\000\002" +
    "\030\015\000\002\030\016\000\002\030\013\000\002\030" +
    "\005\000\002\036\006\000\002\031\011\000\002\031\010" +
    "\000\002\033\011\000\002\033\010\000\002\032\007\000" +
    "\002\032\007\000\002\032\007\000\002\032\007\000\002" +
    "\034\011\000\002\034\011\000\002\034\011\000\002\034" +
    "\011\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\041\017\000" +
    "\002\041\007\000\002\040\011\000\002\040\012\000\002" +
    "\044\006\000\002\045\016\000\002\045\016\000\002\045" +
    "\016\000\002\045\016\000\002\046\004\000\002\046\006" +
    "\000\002\047\004\000\002\047\006\000\002\050\004\000" +
    "\002\050\006\000\002\051\004\000\002\051\006\000\002" +
    "\052\007\000\002\052\007\000\002\052\007\000\002\052" +
    "\007\000\002\052\013\000\002\052\014\000\002\055\004" +
    "\000\002\056\004\000\002\060\004\000\002\057\004\000" +
    "\002\011\005\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\027\004\000\002\027\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\032\006\012\007\007\011\045\017\025\020" +
    "\014\021\022\022\040\031\024\040\026\043\016\050\033" +
    "\051\006\001\002\000\034\002\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\040\ufff5" +
    "\043\ufff5\050\ufff5\051\ufff5\001\002\000\034\002\001\006" +
    "\012\007\007\011\045\017\025\020\014\021\022\022\040" +
    "\031\024\040\026\043\016\050\033\051\006\001\002\000" +
    "\004\011\u016a\001\002\000\004\016\u0167\001\002\000\034" +
    "\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\031\uffdc\040\uffdc\043\uffdc\050\uffdc\051\uffdc" +
    "\001\002\000\034\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\040\ufff7\043\ufff7" +
    "\050\ufff7\051\ufff7\001\002\000\004\016\u0152\001\002\000" +
    "\034\002\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\031\uffdb\040\uffdb\043\uffdb\050\uffdb\051" +
    "\uffdb\001\002\000\004\016\u0151\001\002\000\012\011\u0119" +
    "\065\u011c\066\u011b\075\u011d\001\002\000\004\024\u0105\001" +
    "\002\000\004\002\u0104\001\002\000\034\002\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\031" +
    "\ufff6\040\ufff6\043\ufff6\050\ufff6\051\ufff6\001\002\000\034" +
    "\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\031\ufffc\040\ufffc\043\ufffc\050\ufffc\051\ufffc" +
    "\001\002\000\004\016\u0103\001\002\000\034\002\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\031\ufffb\040\ufffb\043\ufffb\050\ufffb\051\ufffb\001\002\000" +
    "\004\016\362\001\002\000\004\016\361\001\002\000\006" +
    "\004\330\011\331\001\002\000\034\002\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0" +
    "\040\ufff0\043\ufff0\050\ufff0\051\ufff0\001\002\000\034\002" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\031\ufff8\040\ufff8\043\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\016\011\252\067\255\070\254\071\253\072\251" +
    "\073\247\001\002\000\004\011\205\001\002\000\004\024" +
    "\175\001\002\000\034\002\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3\040\ufff3\043" +
    "\ufff3\050\ufff3\051\ufff3\001\002\000\034\002\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\031" +
    "\ufff9\040\ufff9\043\ufff9\050\ufff9\051\ufff9\001\002\000\034" +
    "\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\031\ufff4\040\ufff4\043\ufff4\050\ufff4\051\ufff4" +
    "\001\002\000\034\002\uffff\006\012\007\007\011\045\017" +
    "\025\020\014\021\022\022\040\031\024\040\026\043\016" +
    "\050\033\051\006\001\002\000\004\016\173\001\002\000" +
    "\034\002\ufffa\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\031\ufffa\040\ufffa\043\ufffa\050\ufffa\051" +
    "\ufffa\001\002\000\034\002\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\040\ufff1\043" +
    "\ufff1\050\ufff1\051\ufff1\001\002\000\004\011\106\001\002" +
    "\000\034\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\031\ufff2\040\ufff2\043\ufff2\050\ufff2" +
    "\051\ufff2\001\002\000\006\016\047\076\046\001\002\000" +
    "\004\004\073\001\002\000\004\015\050\001\002\000\004" +
    "\016\051\001\002\000\004\056\052\001\002\000\014\017" +
    "\054\020\053\021\057\022\056\031\060\001\002\000\006" +
    "\016\uff84\076\uff84\001\002\000\006\016\uff86\076\uff86\001" +
    "\002\000\004\076\067\001\002\000\006\016\uff85\076\uff85" +
    "\001\002\000\006\016\uff83\076\uff83\001\002\000\004\024" +
    "\061\001\002\000\004\025\062\001\002\000\006\013\063" +
    "\023\064\001\002\000\004\023\066\001\002\000\040\002" +
    "\uff8d\006\uff8d\007\uff8d\011\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\026\uff8d\031\uff8d\040\uff8d\042\uff8d\043\uff8d\050" +
    "\uff8d\051\uff8d\001\002\000\034\002\uffbf\006\uffbf\007\uffbf" +
    "\011\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\031\uffbf\040" +
    "\uffbf\043\uffbf\050\uffbf\051\uffbf\001\002\000\040\002\uff8e" +
    "\006\uff8e\007\uff8e\011\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\026\uff8e\031\uff8e\040\uff8e\042\uff8e\043\uff8e\050\uff8e" +
    "\051\uff8e\001\002\000\004\004\070\001\002\000\004\077" +
    "\071\001\002\000\006\013\063\023\064\001\002\000\034" +
    "\002\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\031\uff95\040\uff95\043\uff95\050\uff95\051\uff95" +
    "\001\002\000\004\077\074\001\002\000\004\016\075\001" +
    "\002\000\004\015\076\001\002\000\004\016\077\001\002" +
    "\000\012\004\100\005\104\010\103\014\102\001\002\000" +
    "\012\012\uff8a\013\uff8a\023\uff8a\025\uff8a\001\002\000\006" +
    "\013\063\023\064\001\002\000\012\012\uff89\013\uff89\023" +
    "\uff89\025\uff89\001\002\000\012\012\uff88\013\uff88\023\uff88" +
    "\025\uff88\001\002\000\012\012\uff87\013\uff87\023\uff87\025" +
    "\uff87\001\002\000\034\002\uff96\006\uff96\007\uff96\011\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\031\uff96\040\uff96\043" +
    "\uff96\050\uff96\051\uff96\001\002\000\016\012\123\013\uff8f" +
    "\016\uff8f\023\uff8f\024\121\076\122\001\002\000\010\013" +
    "\063\016\110\023\064\001\002\000\004\015\112\001\002" +
    "\000\034\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\031\uffe7\040\uffe7\043\uffe7\050\uffe7" +
    "\051\uffe7\001\002\000\004\016\113\001\002\000\010\004" +
    "\114\005\117\010\115\001\002\000\006\013\uffe5\023\uffe5" +
    "\001\002\000\006\013\uffe3\023\uffe3\001\002\000\006\013" +
    "\063\023\064\001\002\000\006\013\uffe4\023\uffe4\001\002" +
    "\000\034\002\uffe6\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\031\uffe6\040\uffe6\043\uffe6\050\uffe6" +
    "\051\uffe6\001\002\000\004\020\147\001\002\000\006\004" +
    "\126\077\127\001\002\000\004\011\124\001\002\000\012" +
    "\012\123\013\uff8f\016\uff8f\023\uff8f\001\002\000\010\013" +
    "\uff90\016\uff90\023\uff90\001\002\000\004\077\131\001\002" +
    "\000\006\013\063\023\064\001\002\000\034\002\uff98\006" +
    "\uff98\007\uff98\011\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\031\uff98\040\uff98\043\uff98\050\uff98\051\uff98\001\002\000" +
    "\004\016\132\001\002\000\004\015\133\001\002\000\004" +
    "\100\134\001\002\000\004\016\135\001\002\000\004\010" +
    "\137\001\002\000\004\101\144\001\002\000\006\012\141" +
    "\016\140\001\002\000\004\101\uff9c\001\002\000\004\016" +
    "\142\001\002\000\004\010\137\001\002\000\004\101\uff9b" +
    "\001\002\000\006\013\063\023\064\001\002\000\034\002" +
    "\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\031\uffa3\040\uffa3\043\uffa3\050\uffa3\051\uffa3\001" +
    "\002\000\004\025\154\001\002\000\004\016\150\001\002" +
    "\000\004\011\151\001\002\000\006\012\152\025\uffc6\001" +
    "\002\000\004\020\147\001\002\000\004\025\uffc7\001\002" +
    "\000\004\023\155\001\002\000\004\026\161\001\002\000" +
    "\006\013\063\023\064\001\002\000\034\002\uffcd\006\uffcd" +
    "\007\uffcd\011\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\031" +
    "\uffcd\040\uffcd\043\uffcd\050\uffcd\051\uffcd\001\002\000\004" +
    "\035\163\001\002\000\012\011\uff8b\026\161\035\uff8b\051" +
    "\uff8b\001\002\000\010\011\uff8c\035\uff8c\051\uff8c\001\002" +
    "\000\006\004\165\016\164\001\002\000\004\011\166\001" +
    "\002\000\006\013\uffc2\023\uffc2\001\002\000\004\016\167" +
    "\001\002\000\004\063\170\001\002\000\004\016\171\001" +
    "\002\000\004\011\172\001\002\000\006\013\uffc3\023\uffc3" +
    "\001\002\000\004\011\uff91\001\002\000\004\002\ufffe\001" +
    "\002\000\004\025\176\001\002\000\004\023\177\001\002" +
    "\000\004\026\161\001\002\000\034\002\uffaa\006\uffaa\007" +
    "\uffaa\011\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\031\uffaa" +
    "\040\uffaa\043\uffaa\050\uffaa\051\uffaa\001\002\000\004\051" +
    "\202\001\002\000\004\011\203\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffa7\006\uffa7\007\uffa7\011" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\031\uffa7\040\uffa7" +
    "\043\uffa7\050\uffa7\051\uffa7\001\002\000\016\012\123\013" +
    "\uff8f\016\uff8f\023\uff8f\024\216\076\215\001\002\000\010" +
    "\013\063\016\207\023\064\001\002\000\004\015\211\001" +
    "\002\000\034\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\031\uffe9\040\uffe9\043\uffe9\050" +
    "\uffe9\051\uffe9\001\002\000\004\016\212\001\002\000\004" +
    "\014\213\001\002\000\006\013\063\023\064\001\002\000" +
    "\034\002\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\031\uffe8\040\uffe8\043\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\006\004\227\077\230\001\002\000\004" +
    "\022\217\001\002\000\004\016\223\001\002\000\004\023" +
    "\155\001\002\000\006\013\063\023\064\001\002\000\034" +
    "\002\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\031\uffce\040\uffce\043\uffce\050\uffce\051\uffce" +
    "\001\002\000\004\011\224\001\002\000\006\012\225\023" +
    "\uffc8\001\002\000\004\022\217\001\002\000\004\023\uffc9" +
    "\001\002\000\004\077\232\001\002\000\006\013\063\023" +
    "\064\001\002\000\034\002\uff97\006\uff97\007\uff97\011\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\031\uff97\040\uff97\043" +
    "\uff97\050\uff97\051\uff97\001\002\000\004\016\233\001\002" +
    "\000\004\015\234\001\002\000\004\100\235\001\002\000" +
    "\004\016\236\001\002\000\004\014\237\001\002\000\006" +
    "\012\244\016\243\001\002\000\004\101\241\001\002\000" +
    "\006\013\063\023\064\001\002\000\034\002\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\031" +
    "\uffa4\040\uffa4\043\uffa4\050\uffa4\051\uffa4\001\002\000\004" +
    "\101\uff9e\001\002\000\004\016\245\001\002\000\004\014" +
    "\237\001\002\000\004\101\uff9d\001\002\000\004\024\uffac" +
    "\001\002\000\004\024\323\001\002\000\004\024\uffad\001" +
    "\002\000\016\012\123\013\uff8f\016\uff8f\023\uff8f\024\271" +
    "\076\272\001\002\000\004\024\uffae\001\002\000\004\024" +
    "\uffaf\001\002\000\004\024\uffb0\001\002\000\010\013\063" +
    "\016\257\023\064\001\002\000\004\015\261\001\002\000" +
    "\034\002\uffe2\006\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\031\uffe2\040\uffe2\043\uffe2\050\uffe2\051" +
    "\uffe2\001\002\000\004\016\262\001\002\000\012\004\263" +
    "\005\267\010\265\014\264\001\002\000\006\013\uffe0\023" +
    "\uffe0\001\002\000\006\013\uffde\023\uffde\001\002\000\006" +
    "\013\uffdd\023\uffdd\001\002\000\006\013\063\023\064\001" +
    "\002\000\006\013\uffdf\023\uffdf\001\002\000\034\002\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\031\uffe1\040\uffe1\043\uffe1\050\uffe1\051\uffe1\001\002" +
    "\000\004\021\022\001\002\000\006\004\273\077\274\001" +
    "\002\000\004\077\276\001\002\000\006\013\063\023\064" +
    "\001\002\000\034\002\uff99\006\uff99\007\uff99\011\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\031\uff99\040\uff99\043\uff99" +
    "\050\uff99\051\uff99\001\002\000\004\016\277\001\002\000" +
    "\004\015\300\001\002\000\004\100\301\001\002\000\004" +
    "\016\302\001\002\000\004\005\304\001\002\000\004\101" +
    "\311\001\002\000\006\012\306\016\305\001\002\000\004" +
    "\101\uffa0\001\002\000\004\016\307\001\002\000\004\005" +
    "\304\001\002\000\004\101\uff9f\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffa5\006\uffa5\007\uffa5\011" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\031\uffa5\040\uffa5" +
    "\043\uffa5\050\uffa5\051\uffa5\001\002\000\004\025\320\001" +
    "\002\000\004\011\315\001\002\000\006\012\316\025\uffc4" +
    "\001\002\000\004\021\022\001\002\000\004\025\uffc5\001" +
    "\002\000\004\023\155\001\002\000\006\013\063\023\064" +
    "\001\002\000\034\002\uffcc\006\uffcc\007\uffcc\011\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\031\uffcc\040\uffcc\043\uffcc" +
    "\050\uffcc\051\uffcc\001\002\000\004\021\022\001\002\000" +
    "\004\011\325\001\002\000\004\025\326\001\002\000\006" +
    "\013\063\023\064\001\002\000\034\002\uffb1\006\uffb1\007" +
    "\uffb1\011\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\031\uffb1" +
    "\040\uffb1\043\uffb1\050\uffb1\051\uffb1\001\002\000\004\016" +
    "\354\001\002\000\004\016\347\001\002\000\004\016\333" +
    "\001\002\000\004\041\334\001\002\000\004\023\155\001" +
    "\002\000\006\013\063\023\064\001\002\000\036\002\uffbb" +
    "\006\uffbb\007\uffbb\011\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\031\uffbb\040\uffbb\042\337\043\uffbb\050\uffbb\051\uffbb" +
    "\001\002\000\006\004\330\011\331\001\002\000\034\002" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\031\uffbc\040\uffbc\043\uffbc\050\uffbc\051\uffbc\001" +
    "\002\000\004\016\342\001\002\000\004\041\343\001\002" +
    "\000\004\023\155\001\002\000\006\013\063\023\064\001" +
    "\002\000\036\002\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\031\uffb9\040\uffb9\042\337\043" +
    "\uffb9\050\uffb9\051\uffb9\001\002\000\034\002\uffba\006\uffba" +
    "\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba\031" +
    "\uffba\040\uffba\043\uffba\050\uffba\051\uffba\001\002\000\004" +
    "\063\350\001\002\000\004\016\351\001\002\000\006\004" +
    "\352\011\353\001\002\000\004\016\uffb7\001\002\000\004" +
    "\016\uffb5\001\002\000\004\063\355\001\002\000\004\016" +
    "\356\001\002\000\006\004\357\011\360\001\002\000\004" +
    "\016\uffb8\001\002\000\004\016\uffb6\001\002\000\012\011" +
    "\uff94\065\uff94\066\uff94\075\uff94\001\002\000\004\011\363" +
    "\001\002\000\004\016\364\001\002\000\004\015\365\001" +
    "\002\000\004\016\366\001\002\000\004\056\367\001\002" +
    "\000\004\031\370\001\002\000\004\024\371\001\002\000" +
    "\014\004\100\005\104\010\103\014\102\025\374\001\002" +
    "\000\004\012\u0100\001\002\000\004\025\376\001\002\000" +
    "\006\013\063\023\064\001\002\000\034\002\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\031" +
    "\uffc1\040\uffc1\043\uffc1\050\uffc1\051\uffc1\001\002\000\006" +
    "\013\063\023\064\001\002\000\034\002\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\031\uffc0" +
    "\040\uffc0\043\uffc0\050\uffc0\051\uffc0\001\002\000\004\016" +
    "\u0101\001\002\000\012\004\100\005\104\010\103\014\102" +
    "\001\002\000\004\025\uffbd\001\002\000\016\011\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\073\uff93\001\002\000\004" +
    "\002\000\001\002\000\012\017\054\020\053\021\057\022" +
    "\056\001\002\000\004\016\u0107\001\002\000\004\011\u0108" +
    "\001\002\000\004\012\u0109\001\002\000\004\016\u010a\001" +
    "\002\000\012\017\054\020\053\021\057\022\056\001\002" +
    "\000\004\016\u010c\001\002\000\004\011\u010d\001\002\000" +
    "\004\025\u010e\001\002\000\004\023\u010f\001\002\000\004" +
    "\026\161\001\002\000\034\002\uffab\006\uffab\007\uffab\011" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\031\uffab\040\uffab" +
    "\043\uffab\050\uffab\051\uffab\001\002\000\004\011\u0112\001" +
    "\002\000\004\016\u0113\001\002\000\004\015\u0114\001\002" +
    "\000\004\016\u0115\001\002\000\004\011\u0116\001\002\000" +
    "\006\013\063\023\064\001\002\000\036\002\uffa9\006\uffa9" +
    "\007\uffa9\011\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\026" +
    "\161\031\uffa9\040\uffa9\043\uffa9\050\uffa9\051\uffa9\001\002" +
    "\000\034\002\uffa8\006\uffa8\007\uffa8\011\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\031\uffa8\040\uffa8\043\uffa8\050\uffa8" +
    "\051\uffa8\001\002\000\016\012\123\013\uff8f\016\uff8f\023" +
    "\uff8f\024\u0137\076\u0138\001\002\000\010\013\063\016\u012d" +
    "\023\064\001\002\000\004\024\u0128\001\002\000\004\024" +
    "\u0123\001\002\000\004\024\u011e\001\002\000\004\022\040" +
    "\001\002\000\004\011\u0120\001\002\000\004\025\u0121\001" +
    "\002\000\006\013\063\023\064\001\002\000\034\002\uffb4" +
    "\006\uffb4\007\uffb4\011\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\031\uffb4\040\uffb4\043\uffb4\050\uffb4\051\uffb4\001\002" +
    "\000\004\022\040\001\002\000\004\011\u0125\001\002\000" +
    "\004\025\u0126\001\002\000\006\013\063\023\064\001\002" +
    "\000\034\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\031\uffb3\040\uffb3\043\uffb3\050\uffb3" +
    "\051\uffb3\001\002\000\004\022\040\001\002\000\004\011" +
    "\u012a\001\002\000\004\025\u012b\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffb2\006\uffb2\007\uffb2\011" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\031\uffb2\040\uffb2" +
    "\043\uffb2\050\uffb2\051\uffb2\001\002\000\004\015\u012f\001" +
    "\002\000\034\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\031\uffef\040\uffef\043\uffef\050" +
    "\uffef\051\uffef\001\002\000\004\016\u0130\001\002\000\012" +
    "\004\u0133\005\u0135\010\u0134\014\u0132\001\002\000\006\013" +
    "\063\023\064\001\002\000\006\013\uffeb\023\uffeb\001\002" +
    "\000\006\013\uffed\023\uffed\001\002\000\006\013\uffea\023" +
    "\uffea\001\002\000\006\013\uffec\023\uffec\001\002\000\034" +
    "\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\031\uffee\040\uffee\043\uffee\050\uffee\051\uffee" +
    "\001\002\000\004\017\025\001\002\000\006\004\u0139\077" +
    "\u013a\001\002\000\004\077\u013c\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uff9a\006\uff9a\007\uff9a\011" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\031\uff9a\040\uff9a" +
    "\043\uff9a\050\uff9a\051\uff9a\001\002\000\004\016\u013d\001" +
    "\002\000\004\015\u013e\001\002\000\004\100\u013f\001\002" +
    "\000\004\016\u0140\001\002\000\004\004\u0141\001\002\000" +
    "\006\012\u0146\016\u0145\001\002\000\004\101\u0143\001\002" +
    "\000\006\013\063\023\064\001\002\000\034\002\uffa6\006" +
    "\uffa6\007\uffa6\011\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\031\uffa6\040\uffa6\043\uffa6\050\uffa6\051\uffa6\001\002\000" +
    "\004\101\uffa2\001\002\000\004\016\u0147\001\002\000\004" +
    "\004\u0141\001\002\000\004\101\uffa1\001\002\000\004\025" +
    "\u014e\001\002\000\004\011\u014b\001\002\000\006\012\u014c" +
    "\025\uffca\001\002\000\004\017\025\001\002\000\004\025" +
    "\uffcb\001\002\000\004\023\155\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\031\uffcf\040\uffcf" +
    "\043\uffcf\050\uffcf\051\uffcf\001\002\000\004\011\uff92\001" +
    "\002\000\012\004\u0153\005\u0157\011\u0156\014\u0154\001\002" +
    "\000\010\012\u0164\013\uffd4\023\uffd4\001\002\000\010\012" +
    "\u0161\013\uffd5\023\uffd5\001\002\000\006\013\063\023\064" +
    "\001\002\000\012\012\u015c\013\uffd2\023\uffd2\057\u015b\001" +
    "\002\000\010\012\u0158\013\uffd3\023\uffd3\001\002\000\004" +
    "\016\u0159\001\002\000\012\004\u0153\005\u0157\011\u0156\014" +
    "\u0154\001\002\000\006\013\uffd7\023\uffd7\001\002\000\004" +
    "\011\u015f\001\002\000\004\016\u015d\001\002\000\012\004" +
    "\u0153\005\u0157\011\u0156\014\u0154\001\002\000\006\013\uffd6" +
    "\023\uffd6\001\002\000\006\013\uffd1\023\uffd1\001\002\000" +
    "\034\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\031\uffda\040\uffda\043\uffda\050\uffda\051" +
    "\uffda\001\002\000\004\016\u0162\001\002\000\012\004\u0153" +
    "\005\u0157\011\u0156\014\u0154\001\002\000\006\013\uffd9\023" +
    "\uffd9\001\002\000\004\016\u0165\001\002\000\012\004\u0153" +
    "\005\u0157\011\u0156\014\u0154\001\002\000\006\013\uffd8\023" +
    "\uffd8\001\002\000\004\011\u0168\001\002\000\006\013\063" +
    "\023\064\001\002\000\034\002\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\031\uffd0\040\uffd0" +
    "\043\uffd0\050\uffd0\051\uffd0\001\002\000\006\013\063\023" +
    "\064\001\002\000\034\002\uffbe\006\uffbe\007\uffbe\011\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\031\uffbe\040\uffbe\043" +
    "\uffbe\050\uffbe\051\uffbe\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\056\002\016\003\004\004\020\005\033\006" +
    "\043\007\041\010\026\014\022\015\007\016\012\021\040" +
    "\030\034\031\027\034\010\041\017\045\003\052\035\054" +
    "\036\055\014\056\030\057\031\060\042\001\001\000\002" +
    "\001\001\000\056\002\u016b\003\004\004\020\005\033\006" +
    "\043\007\041\010\026\014\022\015\007\016\012\021\040" +
    "\030\034\031\027\034\010\041\017\045\003\052\035\054" +
    "\036\055\014\056\030\057\031\060\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\255\035\247\001\001\000\004\011\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\002\173\003\004\004\020\005" +
    "\033\006\043\007\041\010\026\014\022\015\007\016\012" +
    "\021\040\030\034\031\027\034\010\041\017\045\003\052" +
    "\035\054\036\055\014\056\030\057\031\060\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\100\001\001\000\002\001\001\000" +
    "\004\012\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\145\001\001\000" +
    "\002\001\001\000\004\011\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\142\001\001\000\002\001" +
    "\001\000\004\012\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\152\001\001\000\002\001\001\000\004" +
    "\022\155\001\001\000\004\027\157\001\001\000\004\012" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\200\044\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\217" +
    "\001\001\000\002\001\001\000\004\022\220\001\001\000" +
    "\004\012\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\312\056" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\307\001\001" +
    "\000\002\001\001\000\004\012\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\316\056\313\001\001\000\002\001\001\000" +
    "\004\022\320\001\001\000\004\012\321\001\001\000\002" +
    "\001\001\000\004\056\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\334\001\001\000\004\012\335" +
    "\001\001\000\004\033\337\001\001\000\004\032\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\343\001\001\000\004\012\344\001\001\000" +
    "\004\033\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\372\037\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\374\001\001\000" +
    "\002\001\001\000\004\012\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0110\040\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0116\001\001" +
    "\000\006\027\u0110\040\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0121" +
    "\001\001\000\002\001\001\000\004\057\u0123\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0126\001\001" +
    "\000\002\001\001\000\004\057\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u012b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u0130\001\001\000\004\012\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\u0148\055\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u014c\055\u0149\001\001\000\002\001\001\000\004" +
    "\022\u014e\001\001\000\004\012\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u015f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u015d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0168\001\001\000\002\001\001\000\004" +
    "\012\u016a\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
    }

}
