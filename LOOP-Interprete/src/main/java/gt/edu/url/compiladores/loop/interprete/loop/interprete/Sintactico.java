
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\112\007\000\002\116\005\000" +
    "\002\116\011\000\002\115\027\000\002\115\020\000\002" +
    "\115\020\000\002\115\020\000\002\115\011\000\002\115" +
    "\011\000\002\115\011\000\002\113\027\000\002\113\020" +
    "\000\002\113\020\000\002\113\020\000\002\113\011\000" +
    "\002\113\011\000\002\113\011\000\002\114\003\000\002" +
    "\114\004\000\002\114\006\000\002\117\006\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\006\011\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\007\005\000\002\007\011\000\002\010\005\000\002\010" +
    "\011\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\011\005\000\002\011\011\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\017\006\000\002" +
    "\071\004\000\002\071\007\000\002\072\004\000\002\072" +
    "\005\000\002\022\011\000\002\022\010\000\002\022\011" +
    "\000\002\022\011\000\002\024\006\000\002\024\004\000" +
    "\002\025\007\000\002\025\005\000\002\026\007\000\002" +
    "\026\005\000\002\027\006\000\002\027\004\000\002\023" +
    "\013\000\002\023\006\000\002\031\015\000\002\031\016" +
    "\000\002\031\013\000\002\031\005\000\002\037\006\000" +
    "\002\032\011\000\002\032\010\000\002\034\011\000\002" +
    "\034\010\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\076\024\000\002\076\020" +
    "\000\002\103\004\000\002\100\003\000\002\100\003\000" +
    "\002\101\003\000\002\101\003\000\002\077\004\000\002" +
    "\077\012\000\002\077\007\000\002\104\004\000\002\102" +
    "\003\000\002\102\003\000\002\105\016\000\002\106\006" +
    "\000\002\106\010\000\002\106\012\000\002\106\010\000" +
    "\002\107\005\000\002\107\005\000\002\107\005\000\002" +
    "\107\005\000\002\107\004\000\002\107\004\000\002\107" +
    "\003\000\002\107\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\035\011\000\002\035\011\000\002\035\011\000\002" +
    "\035\011\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\042\017" +
    "\000\002\042\007\000\002\041\003\000\002\045\006\000" +
    "\002\046\016\000\002\046\016\000\002\046\016\000\002" +
    "\046\016\000\002\047\004\000\002\047\006\000\002\050" +
    "\004\000\002\050\006\000\002\051\004\000\002\051\006" +
    "\000\002\052\004\000\002\052\006\000\002\053\007\000" +
    "\002\053\007\000\002\053\007\000\002\053\007\000\002" +
    "\053\013\000\002\053\014\000\002\056\004\000\002\057" +
    "\004\000\002\061\004\000\002\060\004\000\002\012\005" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\030\004\000\002\030\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\046\006\015\007\021\011\020\017\061\020" +
    "\004\021\034\022\005\031\054\037\026\041\023\044\051" +
    "\045\030\051\032\052\060\053\014\055\053\056\031\111" +
    "\010\001\002\000\004\016\u0239\001\002\000\004\016\u0238" +
    "\001\002\000\056\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\026\uffd7\031\uffd7\033\uffd7" +
    "\034\uffd7\037\uffd7\041\uffd7\044\uffd7\045\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\055\uffd7\056\uffd7\111\uffd7\001\002\000\004" +
    "\002\u0237\001\002\000\004\023\u022c\001\002\000\050\002" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0\045\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\111\ufff0\001\002" +
    "\000\056\002\uffd6\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\026\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\055\uffd6\056\uffd6\111\uffd6\001\002\000\050\002\ufffa" +
    "\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\031\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\055\ufffa\056\ufffa\111\ufffa\001\002\000" +
    "\004\016\u0229\001\002\000\004\016\u0214\001\002\000\050" +
    "\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef" +
    "\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef\111\uffef\001" +
    "\002\000\050\002\uffc1\006\uffc1\007\uffc1\011\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\031\uffc1\037\uffc1\041\uffc1\044" +
    "\uffc1\045\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\111\uffc1\001\002\000\010\015\320\016\u0200\077\u01ff\001" +
    "\002\000\004\016\u01fc\001\002\000\016\011\u01da\070\u01dc" +
    "\071\u01db\072\u01d9\073\u01d8\074\u01d6\001\002\000\006\004" +
    "\u01bd\011\u01be\001\002\000\050\002\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\031\ufff7\037" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\055\ufff7\056\ufff7\111\ufff7\001\002\000\050\002\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\031\ufff6\037\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\055\ufff6\056\ufff6\111\ufff6\001\002\000\004" +
    "\016\u01b7\001\002\000\050\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\031\ufff8\037\ufff8" +
    "\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\111\ufff8\001\002\000\004\016\u018c\001\002" +
    "\000\004\023\u0184\001\002\000\004\024\u017c\001\002\000" +
    "\050\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\031\ufff3\037\ufff3\041\ufff3\044\ufff3\045" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\111\ufff3" +
    "\001\002\000\004\016\u017b\001\002\000\050\002\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\031\uffc0\037\uffc0\041\uffc0\044\uffc0\045\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\055\uffc0\056\uffc0\111\uffc0\001\002\000\050" +
    "\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\031\uffee\037\uffee\041\uffee\044\uffee\045\uffee" +
    "\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee\111\uffee\001" +
    "\002\000\050\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\031\ufff2\037\ufff2\041\ufff2\044" +
    "\ufff2\045\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056\ufff2" +
    "\111\ufff2\001\002\000\050\002\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\037\ufff1" +
    "\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\111\ufff1\001\002\000\050\002\uffff\006\015" +
    "\007\021\011\020\017\061\020\004\021\034\022\005\031" +
    "\054\037\026\041\023\044\051\045\030\051\032\052\060" +
    "\053\014\055\053\056\031\111\010\001\002\000\056\002" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\026\uffd5\031\uffd5\033\uffd5\034\uffd5\037\uffd5\041" +
    "\uffd5\044\uffd5\045\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5" +
    "\056\uffd5\111\uffd5\001\002\000\004\023\u010d\001\002\000" +
    "\050\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc" +
    "\001\002\000\050\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\031\ufffb\037\ufffb\041\ufffb" +
    "\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\111\ufffb\001\002\000\056\002\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\026\uffd8\031" +
    "\uffd8\033\uffd8\034\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\111\uffd8\001" +
    "\002\000\050\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\031\ufff9\037\ufff9\041\ufff9\044" +
    "\ufff9\045\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9" +
    "\111\ufff9\001\002\000\004\011\353\001\002\000\004\024" +
    "\275\001\002\000\012\011\205\066\210\067\207\076\211" +
    "\001\002\000\006\013\066\023\067\001\002\000\004\016" +
    "\157\001\002\000\050\002\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\037\ufff5\041" +
    "\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5" +
    "\056\ufff5\111\ufff5\001\002\000\004\011\072\001\002\000" +
    "\050\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111\ufff4" +
    "\001\002\000\004\011\065\001\002\000\004\016\064\001" +
    "\002\000\050\002\001\006\015\007\021\011\020\017\061" +
    "\020\004\021\034\022\005\031\054\037\026\041\023\044" +
    "\051\045\030\051\032\052\060\053\014\055\053\056\031" +
    "\111\010\001\002\000\004\002\ufffd\001\002\000\012\011" +
    "\uff57\066\uff57\067\uff57\076\uff57\001\002\000\006\013\066" +
    "\023\067\001\002\000\004\023\071\001\002\000\062\002" +
    "\uff50\006\uff50\007\uff50\011\uff50\017\uff50\020\uff50\021\uff50" +
    "\022\uff50\026\uff50\031\uff50\033\uff50\034\uff50\037\uff50\041" +
    "\uff50\043\uff50\044\uff50\045\uff50\046\uff50\051\uff50\052\uff50" +
    "\053\uff50\055\uff50\056\uff50\111\uff50\001\002\000\050\002" +
    "\uff9f\006\uff9f\007\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\031\uff9f\037\uff9f\041\uff9f\044\uff9f\045\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\111\uff9f\001\002" +
    "\000\064\002\uff51\006\uff51\007\uff51\011\uff51\017\uff51\020" +
    "\uff51\021\uff51\022\uff51\026\uff51\031\uff51\033\uff51\034\uff51" +
    "\037\uff51\041\uff51\043\uff51\044\uff51\045\uff51\046\uff51\051" +
    "\uff51\052\uff51\053\uff51\055\uff51\056\uff51\105\uff51\111\uff51" +
    "\001\002\000\016\012\107\013\uff52\016\uff52\023\uff52\024" +
    "\105\077\106\001\002\000\010\013\066\016\074\023\067" +
    "\001\002\000\004\015\076\001\002\000\056\002\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\026\uffcc\031\uffcc\033\uffcc\034\uffcc\037\uffcc\041\uffcc\044" +
    "\uffcc\045\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\111\uffcc\001\002\000\004\016\077\001\002\000\010\004" +
    "\100\005\103\010\101\001\002\000\006\013\uffca\023\uffca" +
    "\001\002\000\006\013\uffc8\023\uffc8\001\002\000\006\013" +
    "\066\023\067\001\002\000\006\013\uffc9\023\uffc9\001\002" +
    "\000\056\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\026\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\037\uffcb\041\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\055\uffcb\056\uffcb\111\uffcb\001\002\000\004\020\133" +
    "\001\002\000\006\004\112\100\113\001\002\000\004\011" +
    "\110\001\002\000\012\012\107\013\uff52\016\uff52\023\uff52" +
    "\001\002\000\010\013\uff53\016\uff53\023\uff53\001\002\000" +
    "\004\100\115\001\002\000\006\013\066\023\067\001\002" +
    "\000\050\002\uff5b\006\uff5b\007\uff5b\011\uff5b\017\uff5b\020" +
    "\uff5b\021\uff5b\022\uff5b\031\uff5b\037\uff5b\041\uff5b\044\uff5b" +
    "\045\uff5b\051\uff5b\052\uff5b\053\uff5b\055\uff5b\056\uff5b\111" +
    "\uff5b\001\002\000\004\016\116\001\002\000\004\015\117" +
    "\001\002\000\004\101\120\001\002\000\004\016\121\001" +
    "\002\000\004\010\123\001\002\000\004\102\130\001\002" +
    "\000\006\012\125\016\124\001\002\000\004\102\uff5f\001" +
    "\002\000\004\016\126\001\002\000\004\010\123\001\002" +
    "\000\004\102\uff5e\001\002\000\006\013\066\023\067\001" +
    "\002\000\050\002\uff66\006\uff66\007\uff66\011\uff66\017\uff66" +
    "\020\uff66\021\uff66\022\uff66\031\uff66\037\uff66\041\uff66\044" +
    "\uff66\045\uff66\051\uff66\052\uff66\053\uff66\055\uff66\056\uff66" +
    "\111\uff66\001\002\000\004\025\140\001\002\000\004\016" +
    "\134\001\002\000\004\011\135\001\002\000\006\012\136" +
    "\025\uffa7\001\002\000\004\020\133\001\002\000\004\025" +
    "\uffa8\001\002\000\004\023\141\001\002\000\004\026\144" +
    "\001\002\000\006\013\066\023\067\001\002\000\050\002" +
    "\uffae\006\uffae\007\uffae\011\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\031\uffae\037\uffae\041\uffae\044\uffae\045\uffae\051" +
    "\uffae\052\uffae\053\uffae\055\uffae\056\uffae\111\uffae\001\002" +
    "\000\014\006\uff4e\011\uff4e\026\144\035\uff4e\052\uff4e\001" +
    "\002\000\004\035\146\001\002\000\006\004\150\016\147" +
    "\001\002\000\004\011\151\001\002\000\006\013\uffa3\023" +
    "\uffa3\001\002\000\004\016\152\001\002\000\004\064\153" +
    "\001\002\000\004\016\154\001\002\000\004\011\155\001" +
    "\002\000\006\013\uffa4\023\uffa4\001\002\000\012\006\uff4f" +
    "\011\uff4f\035\uff4f\052\uff4f\001\002\000\004\011\160\001" +
    "\002\000\004\016\161\001\002\000\004\015\162\001\002" +
    "\000\004\016\163\001\002\000\004\057\164\001\002\000" +
    "\004\031\165\001\002\000\004\024\166\001\002\000\014" +
    "\004\170\005\175\010\172\014\171\025\174\001\002\000" +
    "\004\012\201\001\002\000\012\012\uff4d\013\uff4d\023\uff4d" +
    "\025\uff4d\001\002\000\012\012\uff4c\013\uff4c\023\uff4c\025" +
    "\uff4c\001\002\000\012\012\uff4b\013\uff4b\023\uff4b\025\uff4b" +
    "\001\002\000\004\025\177\001\002\000\006\013\066\023" +
    "\067\001\002\000\012\012\uff4a\013\uff4a\023\uff4a\025\uff4a" +
    "\001\002\000\050\002\uffa2\006\uffa2\007\uffa2\011\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\031\uffa2\037\uffa2\041\uffa2" +
    "\044\uffa2\045\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\056" +
    "\uffa2\111\uffa2\001\002\000\006\013\066\023\067\001\002" +
    "\000\050\002\uffa1\006\uffa1\007\uffa1\011\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\031\uffa1\037\uffa1\041\uffa1\044\uffa1" +
    "\045\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\111" +
    "\uffa1\001\002\000\004\016\202\001\002\000\012\004\170" +
    "\005\175\010\172\014\171\001\002\000\004\025\uff9e\001" +
    "\002\000\050\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\031\uffb4\037\uffb4\041\uffb4\044" +
    "\uffb4\045\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4" +
    "\111\uffb4\001\002\000\016\012\107\013\uff52\016\uff52\023" +
    "\uff52\024\243\077\244\001\002\000\010\013\066\016\231" +
    "\023\067\001\002\000\004\024\224\001\002\000\004\024" +
    "\217\001\002\000\004\024\212\001\002\000\004\022\005" +
    "\001\002\000\004\011\214\001\002\000\004\025\215\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uff76" +
    "\006\uff76\007\uff76\011\uff76\017\uff76\020\uff76\021\uff76\022" +
    "\uff76\031\uff76\037\uff76\041\uff76\044\uff76\045\uff76\051\uff76" +
    "\052\uff76\053\uff76\055\uff76\056\uff76\111\uff76\001\002\000" +
    "\004\022\005\001\002\000\004\011\221\001\002\000\004" +
    "\025\222\001\002\000\006\013\066\023\067\001\002\000" +
    "\050\002\uff75\006\uff75\007\uff75\011\uff75\017\uff75\020\uff75" +
    "\021\uff75\022\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045" +
    "\uff75\051\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75" +
    "\001\002\000\004\022\005\001\002\000\004\011\226\001" +
    "\002\000\004\025\227\001\002\000\006\013\066\023\067" +
    "\001\002\000\050\002\uff74\006\uff74\007\uff74\011\uff74\017" +
    "\uff74\020\uff74\021\uff74\022\uff74\031\uff74\037\uff74\041\uff74" +
    "\044\uff74\045\uff74\051\uff74\052\uff74\053\uff74\055\uff74\056" +
    "\uff74\111\uff74\001\002\000\004\015\233\001\002\000\056" +
    "\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\026\uffd4\031\uffd4\033\uffd4\034\uffd4\037\uffd4" +
    "\041\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4\053\uffd4\055" +
    "\uffd4\056\uffd4\111\uffd4\001\002\000\004\016\234\001\002" +
    "\000\012\004\236\005\241\010\240\014\237\001\002\000" +
    "\006\013\066\023\067\001\002\000\006\013\uffd2\023\uffd2" +
    "\001\002\000\006\013\uffd0\023\uffd0\001\002\000\006\013" +
    "\uffcf\023\uffcf\001\002\000\006\013\uffd1\023\uffd1\001\002" +
    "\000\056\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\037\uffd3\041\uffd3\044\uffd3\045\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\055\uffd3\056\uffd3\111\uffd3\001\002\000\004\017\061" +
    "\001\002\000\006\004\245\100\246\001\002\000\004\100" +
    "\250\001\002\000\006\013\066\023\067\001\002\000\050" +
    "\002\uff5d\006\uff5d\007\uff5d\011\uff5d\017\uff5d\020\uff5d\021" +
    "\uff5d\022\uff5d\031\uff5d\037\uff5d\041\uff5d\044\uff5d\045\uff5d" +
    "\051\uff5d\052\uff5d\053\uff5d\055\uff5d\056\uff5d\111\uff5d\001" +
    "\002\000\004\016\251\001\002\000\004\015\252\001\002" +
    "\000\004\101\253\001\002\000\004\016\254\001\002\000" +
    "\004\004\255\001\002\000\006\012\262\016\261\001\002" +
    "\000\004\102\257\001\002\000\006\013\066\023\067\001" +
    "\002\000\050\002\uff69\006\uff69\007\uff69\011\uff69\017\uff69" +
    "\020\uff69\021\uff69\022\uff69\031\uff69\037\uff69\041\uff69\044" +
    "\uff69\045\uff69\051\uff69\052\uff69\053\uff69\055\uff69\056\uff69" +
    "\111\uff69\001\002\000\004\102\uff65\001\002\000\004\016" +
    "\263\001\002\000\004\004\255\001\002\000\004\102\uff64" +
    "\001\002\000\004\025\272\001\002\000\004\011\267\001" +
    "\002\000\006\012\270\025\uffab\001\002\000\004\017\061" +
    "\001\002\000\004\025\uffac\001\002\000\004\023\141\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uffb0" +
    "\006\uffb0\007\uffb0\011\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\031\uffb0\037\uffb0\041\uffb0\044\uffb0\045\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\055\uffb0\056\uffb0\111\uffb0\001\002\000" +
    "\012\017\277\020\276\021\302\022\301\001\002\000\006" +
    "\016\uff47\077\uff47\001\002\000\006\016\uff49\077\uff49\001" +
    "\002\000\004\016\303\001\002\000\006\016\uff48\077\uff48" +
    "\001\002\000\006\016\uff46\077\uff46\001\002\000\004\011" +
    "\304\001\002\000\004\012\305\001\002\000\004\016\306" +
    "\001\002\000\012\017\277\020\276\021\302\022\301\001" +
    "\002\000\004\016\310\001\002\000\004\011\311\001\002" +
    "\000\004\025\312\001\002\000\004\023\313\001\002\000" +
    "\004\011\314\001\002\000\006\015\320\016\317\001\002" +
    "\000\050\002\uff6b\006\uff6b\007\uff6b\011\uff6b\017\uff6b\020" +
    "\uff6b\021\uff6b\022\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b" +
    "\045\uff6b\051\uff6b\052\uff6b\053\uff6b\055\uff6b\056\uff6b\111" +
    "\uff6b\001\002\000\050\002\uff6d\006\uff6d\007\uff6d\011\uff6d" +
    "\017\uff6d\020\uff6d\021\uff6d\022\uff6d\031\uff6d\037\uff6d\041" +
    "\uff6d\044\uff6d\045\uff6d\051\uff6d\052\uff6d\053\uff6d\055\uff6d" +
    "\056\uff6d\111\uff6d\001\002\000\004\015\345\001\002\000" +
    "\010\004\322\011\323\110\321\001\002\000\006\004\343" +
    "\011\344\001\002\000\020\013\uff7c\023\uff7c\107\333\110" +
    "\331\112\330\113\332\114\335\001\002\000\020\013\uff7d" +
    "\023\uff7d\107\333\110\331\112\330\113\332\114\335\001" +
    "\002\000\006\013\066\023\067\001\002\000\054\002\uff87" +
    "\006\uff87\007\uff87\011\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\026\144\031\uff87\037\uff87\041\uff87\044\uff87\045\uff87" +
    "\046\uff87\051\uff87\052\uff87\053\uff87\055\uff87\056\uff87\111" +
    "\uff87\001\002\000\004\011\314\001\002\000\052\002\uff84" +
    "\006\uff84\007\uff84\011\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\031\uff84\037\uff84\041\uff84\044\uff84\045\uff84\046\uff84" +
    "\051\uff84\052\uff84\053\uff84\055\uff84\056\uff84\111\uff84\001" +
    "\002\000\006\004\uff79\011\uff79\001\002\000\006\004\uff7a" +
    "\011\uff7a\001\002\000\006\004\uff78\011\uff78\001\002\000" +
    "\006\004\uff7b\011\uff7b\001\002\000\006\004\336\011\337" +
    "\001\002\000\006\004\uff77\011\uff77\001\002\000\006\013" +
    "\uff80\023\uff80\001\002\000\006\013\uff82\023\uff82\001\002" +
    "\000\006\004\341\011\342\001\002\000\006\013\uff83\023" +
    "\uff83\001\002\000\006\013\uff81\023\uff81\001\002\000\006" +
    "\013\uff7e\023\uff7e\001\002\000\006\013\uff7f\023\uff7f\001" +
    "\002\000\004\016\346\001\002\000\010\004\322\011\323" +
    "\110\321\001\002\000\006\013\066\023\067\001\002\000" +
    "\054\002\uff86\006\uff86\007\uff86\011\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\026\144\031\uff86\037\uff86\041\uff86\044" +
    "\uff86\045\uff86\046\uff86\051\uff86\052\uff86\053\uff86\055\uff86" +
    "\056\uff86\111\uff86\001\002\000\004\011\314\001\002\000" +
    "\052\002\uff85\006\uff85\007\uff85\011\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\031\uff85\037\uff85\041\uff85\044\uff85\045" +
    "\uff85\046\uff85\051\uff85\052\uff85\053\uff85\055\uff85\056\uff85" +
    "\111\uff85\001\002\000\016\012\107\013\uff52\016\uff52\023" +
    "\uff52\024\363\077\364\001\002\000\010\013\066\016\355" +
    "\023\067\001\002\000\004\015\357\001\002\000\056\002" +
    "\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\026\uffce\031\uffce\033\uffce\034\uffce\037\uffce\041" +
    "\uffce\044\uffce\045\uffce\051\uffce\052\uffce\053\uffce\055\uffce" +
    "\056\uffce\111\uffce\001\002\000\004\016\360\001\002\000" +
    "\004\014\361\001\002\000\006\013\066\023\067\001\002" +
    "\000\056\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\026\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\037\uffcd\041\uffcd\044\uffcd\045\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\055\uffcd\056\uffcd\111\uffcd\001\002\000\004\022\u0105" +
    "\001\002\000\006\004\365\100\366\001\002\000\004\100" +
    "\370\001\002\000\006\013\066\023\067\001\002\000\050" +
    "\002\uff5a\006\uff5a\007\uff5a\011\uff5a\017\uff5a\020\uff5a\021" +
    "\uff5a\022\uff5a\031\uff5a\037\uff5a\041\uff5a\044\uff5a\045\uff5a" +
    "\051\uff5a\052\uff5a\053\uff5a\055\uff5a\056\uff5a\111\uff5a\001" +
    "\002\000\004\016\371\001\002\000\004\015\372\001\002" +
    "\000\004\101\373\001\002\000\004\016\374\001\002\000" +
    "\004\014\375\001\002\000\006\012\u0102\016\u0101\001\002" +
    "\000\004\102\377\001\002\000\006\013\066\023\067\001" +
    "\002\000\050\002\uff67\006\uff67\007\uff67\011\uff67\017\uff67" +
    "\020\uff67\021\uff67\022\uff67\031\uff67\037\uff67\041\uff67\044" +
    "\uff67\045\uff67\051\uff67\052\uff67\053\uff67\055\uff67\056\uff67" +
    "\111\uff67\001\002\000\004\102\uff61\001\002\000\004\016" +
    "\u0103\001\002\000\004\014\375\001\002\000\004\102\uff60" +
    "\001\002\000\004\016\u0109\001\002\000\004\023\141\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uffaf" +
    "\006\uffaf\007\uffaf\011\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\031\uffaf\037\uffaf\041\uffaf\044\uffaf\045\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\055\uffaf\056\uffaf\111\uffaf\001\002\000" +
    "\004\011\u010a\001\002\000\006\012\u010b\023\uffa9\001\002" +
    "\000\004\022\u0105\001\002\000\004\023\uffaa\001\002\000" +
    "\004\026\u010e\001\002\000\004\033\u010f\001\002\000\004" +
    "\016\u0150\001\002\000\004\034\u0112\001\002\000\050\002" +
    "\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051" +
    "\uffed\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed\001\002" +
    "\000\004\016\u0113\001\002\000\010\120\u0116\121\u0114\122" +
    "\u0115\001\002\000\004\023\u0145\001\002\000\004\023\u0141" +
    "\001\002\000\004\023\u0117\001\002\000\004\026\u0118\001" +
    "\002\000\004\026\u0119\001\002\000\012\017\061\020\004" +
    "\021\034\022\005\001\002\000\004\011\110\001\002\000" +
    "\056\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\026\u013e\031\uffdc\033\uffdc\034\uffdc\037" +
    "\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\111\uffdc\001\002\000\004\011\110\001" +
    "\002\000\004\011\110\001\002\000\052\002\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\031" +
    "\uffe6\034\u0120\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\055\uffe6\056\uffe6\111\uffe6\001\002\000" +
    "\004\011\110\001\002\000\004\016\u0121\001\002\000\006" +
    "\121\u0122\122\u0123\001\002\000\004\023\u0128\001\002\000" +
    "\004\023\u0124\001\002\000\004\026\u0125\001\002\000\004" +
    "\026\u0126\001\002\000\012\017\061\020\004\021\034\022" +
    "\005\001\002\000\050\002\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\031\uffe8\037\uffe8\041" +
    "\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8" +
    "\056\uffe8\111\uffe8\001\002\000\004\026\u0129\001\002\000" +
    "\004\026\u012a\001\002\000\012\017\061\020\004\021\034" +
    "\022\005\001\002\000\052\002\uffe9\006\uffe9\007\uffe9\011" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\031\uffe9\034\u012c" +
    "\037\uffe9\041\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\055\uffe9\056\uffe9\111\uffe9\001\002\000\004\016\u012d" +
    "\001\002\000\004\122\u012e\001\002\000\004\023\u012f\001" +
    "\002\000\004\026\u0130\001\002\000\004\026\u0131\001\002" +
    "\000\012\017\061\020\004\021\034\022\005\001\002\000" +
    "\050\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\031\uffea\037\uffea\041\uffea\044\uffea\045" +
    "\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\111\uffea" +
    "\001\002\000\010\013\066\016\u0134\023\067\001\002\000" +
    "\004\015\u0136\001\002\000\056\002\uffc7\006\uffc7\007\uffc7" +
    "\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\026\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\037\uffc7\041\uffc7\044\uffc7\045\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\111\uffc7\001" +
    "\002\000\004\016\u0137\001\002\000\012\004\u0139\005\u013c" +
    "\010\u013a\014\u0138\001\002\000\006\013\uffc3\023\uffc3\001" +
    "\002\000\006\013\uffc5\023\uffc5\001\002\000\006\013\uffc2" +
    "\023\uffc2\001\002\000\006\013\066\023\067\001\002\000" +
    "\006\013\uffc4\023\uffc4\001\002\000\056\002\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\026" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\037\uffc6\041\uffc6\044\uffc6" +
    "\045\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\111" +
    "\uffc6\001\002\000\056\002\uffdb\006\uffdb\007\uffdb\011\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\026\u013f\031\uffdb\033" +
    "\uffdb\034\uffdb\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\055\uffdb\056\uffdb\111\uffdb\001\002\000" +
    "\012\017\061\020\004\021\034\022\005\001\002\000\054" +
    "\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\031\uffda\033\uffda\034\uffda\037\uffda\041\uffda" +
    "\044\uffda\045\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056" +
    "\uffda\111\uffda\001\002\000\004\026\u0142\001\002\000\004" +
    "\026\u0143\001\002\000\012\017\061\020\004\021\034\022" +
    "\005\001\002\000\050\002\uffe4\006\uffe4\007\uffe4\011\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\031\uffe4\037\uffe4\041" +
    "\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4" +
    "\056\uffe4\111\uffe4\001\002\000\004\026\u0146\001\002\000" +
    "\004\026\u0147\001\002\000\012\017\061\020\004\021\034" +
    "\022\005\001\002\000\052\002\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\031\uffe5\034\u0149" +
    "\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\055\uffe5\056\uffe5\111\uffe5\001\002\000\004\016\u014a" +
    "\001\002\000\004\122\u014b\001\002\000\004\023\u014c\001" +
    "\002\000\004\026\u014d\001\002\000\004\026\u014e\001\002" +
    "\000\012\017\061\020\004\021\034\022\005\001\002\000" +
    "\050\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\031\uffe7\037\uffe7\041\uffe7\044\uffe7\045" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056\uffe7\111\uffe7" +
    "\001\002\000\010\115\u0151\116\u0152\117\u0153\001\002\000" +
    "\004\023\u0163\001\002\000\004\023\u0158\001\002\000\004" +
    "\023\u0154\001\002\000\004\026\u0155\001\002\000\004\026" +
    "\u0156\001\002\000\012\017\061\020\004\021\034\022\005" +
    "\001\002\000\004\034\uffdd\001\002\000\004\026\u0159\001" +
    "\002\000\004\026\u015a\001\002\000\012\017\061\020\004" +
    "\021\034\022\005\001\002\000\006\033\u015c\034\uffde\001" +
    "\002\000\004\016\u015d\001\002\000\004\117\u015e\001\002" +
    "\000\004\023\u015f\001\002\000\004\026\u0160\001\002\000" +
    "\004\026\u0161\001\002\000\012\017\061\020\004\021\034" +
    "\022\005\001\002\000\004\034\uffe0\001\002\000\004\026" +
    "\u0164\001\002\000\004\026\u0165\001\002\000\012\017\061" +
    "\020\004\021\034\022\005\001\002\000\006\033\u0167\034" +
    "\uffdf\001\002\000\004\016\u0168\001\002\000\006\116\u0169" +
    "\117\u016a\001\002\000\004\023\u016f\001\002\000\004\023" +
    "\u016b\001\002\000\004\026\u016c\001\002\000\004\026\u016d" +
    "\001\002\000\012\017\061\020\004\021\034\022\005\001" +
    "\002\000\004\034\uffe1\001\002\000\004\026\u0170\001\002" +
    "\000\004\026\u0171\001\002\000\012\017\061\020\004\021" +
    "\034\022\005\001\002\000\006\033\u0173\034\uffe2\001\002" +
    "\000\004\016\u0174\001\002\000\004\117\u0175\001\002\000" +
    "\004\023\u0176\001\002\000\004\026\u0177\001\002\000\004" +
    "\026\u0178\001\002\000\012\017\061\020\004\021\034\022" +
    "\005\001\002\000\004\034\uffe3\001\002\000\004\002\ufffe" +
    "\001\002\000\016\011\uff56\070\uff56\071\uff56\072\uff56\073" +
    "\uff56\074\uff56\001\002\000\004\025\u017d\001\002\000\004" +
    "\023\u017e\001\002\000\004\026\144\001\002\000\050\002" +
    "\uff6c\006\uff6c\007\uff6c\011\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\031\uff6c\037\uff6c\041\uff6c\044\uff6c\045\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\055\uff6c\056\uff6c\111\uff6c\001\002" +
    "\000\004\052\u0181\001\002\000\004\011\u0182\001\002\000" +
    "\006\013\066\023\067\001\002\000\050\002\uff6a\006\uff6a" +
    "\007\uff6a\011\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\031" +
    "\uff6a\037\uff6a\041\uff6a\044\uff6a\045\uff6a\051\uff6a\052\uff6a" +
    "\053\uff6a\055\uff6a\056\uff6a\111\uff6a\001\002\000\004\106" +
    "\u0186\001\002\000\004\105\u018a\001\002\000\006\013\066" +
    "\023\u0187\001\002\000\006\105\uff50\106\u0186\001\002\000" +
    "\004\105\uffb2\001\002\000\004\105\uffb1\001\002\000\006" +
    "\013\066\023\067\001\002\000\050\002\uffb3\006\uffb3\007" +
    "\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\031\uffb3" +
    "\037\uffb3\041\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\055\uffb3\056\uffb3\111\uffb3\001\002\000\006\011\u018f" +
    "\017\u018e\001\002\000\004\015\u01b3\001\002\000\004\016" +
    "\u01ac\001\002\000\004\016\u01ab\001\002\000\004\046\u0191" +
    "\001\002\000\004\016\u0192\001\002\000\006\004\u0193\011" +
    "\u0194\001\002\000\010\013\uff89\016\uff89\023\uff89\001\002" +
    "\000\010\013\uff8a\016\uff8a\023\uff8a\001\002\000\004\016" +
    "\u0196\001\002\000\006\030\u0198\065\u0197\001\002\000\004" +
    "\016\uff92\001\002\000\004\016\uff91\001\002\000\004\016" +
    "\u019a\001\002\000\006\004\u0193\011\u0194\001\002\000\004" +
    "\016\u019c\001\002\000\010\047\u01a0\050\u019e\111\u019f\001" +
    "\002\000\004\016\u01a5\001\002\000\004\016\uff8f\001\002" +
    "\000\006\013\066\023\067\001\002\000\004\016\uff90\001" +
    "\002\000\004\026\144\001\002\000\050\002\uff94\006\uff94" +
    "\007\uff94\011\uff94\017\uff94\020\uff94\021\uff94\022\uff94\031" +
    "\uff94\037\uff94\041\uff94\044\uff94\045\uff94\051\uff94\052\uff94" +
    "\053\uff94\055\uff94\056\uff94\111\uff94\001\002\000\004\006" +
    "\015\001\002\000\050\002\uff93\006\uff93\007\uff93\011\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\031\uff93\037\uff93\041" +
    "\uff93\044\uff93\045\uff93\051\uff93\052\uff93\053\uff93\055\uff93" +
    "\056\uff93\111\uff93\001\002\000\004\004\u01a6\001\002\000" +
    "\004\016\u01a7\001\002\000\004\111\u01a8\001\002\000\006" +
    "\013\066\023\067\001\002\000\004\026\144\001\002\000" +
    "\050\002\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\031\uff95\037\uff95\041\uff95\044\uff95\045" +
    "\uff95\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95\111\uff95" +
    "\001\002\000\006\015\uff8b\046\uff8e\001\002\000\004\011" +
    "\u01ad\001\002\000\004\016\u01ae\001\002\000\004\015\u01af" +
    "\001\002\000\004\016\u01b0\001\002\000\004\004\u01b1\001" +
    "\002\000\004\016\u01b2\001\002\000\004\046\uff8d\001\002" +
    "\000\004\016\u01b4\001\002\000\004\004\u01b5\001\002\000" +
    "\004\016\u01b6\001\002\000\004\046\uff8c\001\002\000\004" +
    "\031\u01b8\001\002\000\006\016\u01b9\023\uffec\001\002\000" +
    "\004\103\u01ba\001\002\000\004\016\u01bb\001\002\000\004" +
    "\031\u01bc\001\002\000\004\023\uffeb\001\002\000\004\016" +
    "\u01d1\001\002\000\004\016\u01cc\001\002\000\004\016\u01c0" +
    "\001\002\000\004\042\u01c1\001\002\000\004\023\141\001" +
    "\002\000\006\013\066\023\067\001\002\000\052\002\uff9c" +
    "\006\uff9c\007\uff9c\011\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\031\uff9c\037\uff9c\041\uff9c\043\u01c4\044\uff9c\045\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\111\uff9c\001" +
    "\002\000\006\004\u01bd\011\u01be\001\002\000\050\002\uff9d" +
    "\006\uff9d\007\uff9d\011\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\031\uff9d\037\uff9d\041\uff9d\044\uff9d\045\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\055\uff9d\056\uff9d\111\uff9d\001\002\000" +
    "\004\016\u01c7\001\002\000\004\042\u01c8\001\002\000\004" +
    "\023\141\001\002\000\006\013\066\023\067\001\002\000" +
    "\052\002\uff9a\006\uff9a\007\uff9a\011\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\031\uff9a\037\uff9a\041\uff9a\043\u01c4\044" +
    "\uff9a\045\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\056\uff9a" +
    "\111\uff9a\001\002\000\050\002\uff9b\006\uff9b\007\uff9b\011" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\031\uff9b\037\uff9b" +
    "\041\uff9b\044\uff9b\045\uff9b\051\uff9b\052\uff9b\053\uff9b\055" +
    "\uff9b\056\uff9b\111\uff9b\001\002\000\004\064\u01cd\001\002" +
    "\000\004\016\u01ce\001\002\000\006\004\u01cf\011\u01d0\001" +
    "\002\000\004\016\uff98\001\002\000\004\016\uff96\001\002" +
    "\000\004\064\u01d2\001\002\000\004\016\u01d3\001\002\000" +
    "\006\004\u01d4\011\u01d5\001\002\000\004\016\uff99\001\002" +
    "\000\004\016\uff97\001\002\000\004\024\uff6e\001\002\000" +
    "\004\024\u01f7\001\002\000\004\024\uff6f\001\002\000\004" +
    "\024\uff70\001\002\000\016\012\107\013\uff52\016\uff52\023" +
    "\uff52\024\u01dd\077\u01de\001\002\000\004\024\uff71\001\002" +
    "\000\004\024\uff72\001\002\000\004\021\034\001\002\000" +
    "\006\004\u01df\100\u01e0\001\002\000\004\100\u01e2\001\002" +
    "\000\006\013\066\023\067\001\002\000\050\002\uff5c\006" +
    "\uff5c\007\uff5c\011\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\031\uff5c\037\uff5c\041\uff5c\044\uff5c\045\uff5c\051\uff5c\052" +
    "\uff5c\053\uff5c\055\uff5c\056\uff5c\111\uff5c\001\002\000\004" +
    "\016\u01e3\001\002\000\004\015\u01e4\001\002\000\004\101" +
    "\u01e5\001\002\000\004\016\u01e6\001\002\000\004\005\u01e8" +
    "\001\002\000\004\102\u01ed\001\002\000\006\012\u01ea\016" +
    "\u01e9\001\002\000\004\102\uff63\001\002\000\004\016\u01eb" +
    "\001\002\000\004\005\u01e8\001\002\000\004\102\uff62\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uff68" +
    "\006\uff68\007\uff68\011\uff68\017\uff68\020\uff68\021\uff68\022" +
    "\uff68\031\uff68\037\uff68\041\uff68\044\uff68\045\uff68\051\uff68" +
    "\052\uff68\053\uff68\055\uff68\056\uff68\111\uff68\001\002\000" +
    "\004\011\u01f4\001\002\000\004\025\u01f1\001\002\000\004" +
    "\023\141\001\002\000\006\013\066\023\067\001\002\000" +
    "\050\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\031\uffad\037\uffad\041\uffad\044\uffad\045" +
    "\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\111\uffad" +
    "\001\002\000\006\012\u01f5\025\uffa5\001\002\000\004\021" +
    "\034\001\002\000\004\025\uffa6\001\002\000\004\021\034" +
    "\001\002\000\004\011\u01f9\001\002\000\004\025\u01fa\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uff73" +
    "\006\uff73\007\uff73\011\uff73\017\uff73\020\uff73\021\uff73\022" +
    "\uff73\031\uff73\037\uff73\041\uff73\044\uff73\045\uff73\051\uff73" +
    "\052\uff73\053\uff73\055\uff73\056\uff73\111\uff73\001\002\000" +
    "\004\011\u01fd\001\002\000\006\013\066\023\067\001\002" +
    "\000\050\002\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\031\uffb5\037\uffb5\041\uffb5\044\uffb5" +
    "\045\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\111" +
    "\uffb5\001\002\000\004\004\u020d\001\002\000\004\015\u0201" +
    "\001\002\000\004\016\u0202\001\002\000\012\004\322\011" +
    "\323\057\u0203\110\321\001\002\000\014\017\277\020\276" +
    "\021\302\022\301\031\u0205\001\002\000\004\077\u0209\001" +
    "\002\000\004\024\u0206\001\002\000\004\025\u0207\001\002" +
    "\000\006\013\066\023\067\001\002\000\050\002\uffa0\006" +
    "\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\031\uffa0\037\uffa0\041\uffa0\044\uffa0\045\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\055\uffa0\056\uffa0\111\uffa0\001\002\000\004" +
    "\004\u020a\001\002\000\004\100\u020b\001\002\000\006\013" +
    "\066\023\067\001\002\000\050\002\uff58\006\uff58\007\uff58" +
    "\011\uff58\017\uff58\020\uff58\021\uff58\022\uff58\031\uff58\037" +
    "\uff58\041\uff58\044\uff58\045\uff58\051\uff58\052\uff58\053\uff58" +
    "\055\uff58\056\uff58\111\uff58\001\002\000\004\100\u020e\001" +
    "\002\000\004\016\u020f\001\002\000\004\015\u0210\001\002" +
    "\000\004\016\u0211\001\002\000\012\004\170\005\175\010" +
    "\172\014\171\001\002\000\006\013\066\023\067\001\002" +
    "\000\050\002\uff59\006\uff59\007\uff59\011\uff59\017\uff59\020" +
    "\uff59\021\uff59\022\uff59\031\uff59\037\uff59\041\uff59\044\uff59" +
    "\045\uff59\051\uff59\052\uff59\053\uff59\055\uff59\056\uff59\111" +
    "\uff59\001\002\000\012\004\u0215\005\u0219\011\u0218\014\u0216" +
    "\001\002\000\010\012\u0226\013\uffb9\023\uffb9\001\002\000" +
    "\010\012\u0223\013\uffba\023\uffba\001\002\000\006\013\066" +
    "\023\067\001\002\000\012\012\u021e\013\uffb7\023\uffb7\060" +
    "\u021d\001\002\000\010\012\u021a\013\uffb8\023\uffb8\001\002" +
    "\000\004\016\u021b\001\002\000\012\004\u0215\005\u0219\011" +
    "\u0218\014\u0216\001\002\000\006\013\uffbc\023\uffbc\001\002" +
    "\000\004\011\u0221\001\002\000\004\016\u021f\001\002\000" +
    "\012\004\u0215\005\u0219\011\u0218\014\u0216\001\002\000\006" +
    "\013\uffbb\023\uffbb\001\002\000\006\013\uffb6\023\uffb6\001" +
    "\002\000\050\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\031\uffbf\037\uffbf\041\uffbf\044" +
    "\uffbf\045\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf" +
    "\111\uffbf\001\002\000\004\016\u0224\001\002\000\012\004" +
    "\u0215\005\u0219\011\u0218\014\u0216\001\002\000\006\013\uffbe" +
    "\023\uffbe\001\002\000\004\016\u0227\001\002\000\012\004" +
    "\u0215\005\u0219\011\u0218\014\u0216\001\002\000\006\013\uffbd" +
    "\023\uffbd\001\002\000\004\123\u022a\001\002\000\004\023" +
    "\u022b\001\002\000\050\002\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031\uffd9\037\uffd9\041" +
    "\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9" +
    "\056\uffd9\111\uffd9\001\002\000\004\026\144\001\002\000" +
    "\004\011\314\001\002\000\004\046\u022f\001\002\000\004" +
    "\016\u0230\001\002\000\006\004\u0193\011\u0194\001\002\000" +
    "\004\016\u0232\001\002\000\006\030\u0198\065\u0197\001\002" +
    "\000\004\016\u0234\001\002\000\006\004\u0193\011\u0194\001" +
    "\002\000\006\013\066\023\067\001\002\000\050\002\uff88" +
    "\006\uff88\007\uff88\011\uff88\017\uff88\020\uff88\021\uff88\022" +
    "\uff88\031\uff88\037\uff88\041\uff88\044\uff88\045\uff88\051\uff88" +
    "\052\uff88\053\uff88\055\uff88\056\uff88\111\uff88\001\002\000" +
    "\004\002\000\001\002\000\004\011\uff54\001\002\000\004" +
    "\011\uff55\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\074\002\006\004\061\005\043\006\045\007" +
    "\005\010\011\011\041\015\044\016\016\017\034\022\012" +
    "\031\046\032\036\035\037\042\010\046\015\053\035\055" +
    "\040\056\051\057\021\060\047\061\055\071\026\076\023" +
    "\105\054\106\024\112\056\116\042\117\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u0132\036\u01d6\001\001\000\004" +
    "\033\u01be\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\002\u0179\004\061\005\043\006" +
    "\045\007\005\010\011\011\041\015\044\016\016\017\034" +
    "\022\012\031\046\032\036\035\037\042\010\046\015\053" +
    "\035\055\040\056\051\057\021\060\047\061\055\071\026" +
    "\076\023\105\054\106\024\112\056\116\042\117\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\353\001\001\000\002\001\001\000\004\012\205" +
    "\001\001\000\004\013\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\002\062\004" +
    "\061\005\043\006\045\007\005\010\011\011\041\015\044" +
    "\016\016\017\034\022\012\031\046\032\036\035\037\042" +
    "\010\046\015\053\035\055\040\056\051\057\021\060\047" +
    "\061\055\071\026\076\023\105\054\106\024\112\056\116" +
    "\042\117\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\131\001\001" +
    "\000\002\001\001\000\004\012\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\126\001\001\000\002" +
    "\001\001\000\004\013\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\136\001\001\000\002\001\001\000" +
    "\004\023\141\001\001\000\004\030\144\001\001\000\004" +
    "\013\142\001\001\000\002\001\001\000\004\030\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\172\040\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\215\001\001\000" +
    "\002\001\001\000\004\060\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\222\001\001\000\002\001" +
    "\001\000\004\060\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\234\001\001\000\004\013\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\264\056\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\270" +
    "\056\265\001\001\000\002\001\001\000\004\023\272\001" +
    "\001\000\004\013\273\001\001\000\002\001\001\000\004" +
    "\043\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\315\106\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\323\001\001\000\002\001" +
    "\001\000\004\110\337\001\001\000\004\110\333\001\001" +
    "\000\004\013\324\001\001\000\004\030\325\001\001\000" +
    "\004\106\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\346\001\001\000\004\013\347\001\001\000" +
    "\004\030\350\001\001\000\004\106\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\361\001\001\000\002\001\001\000" +
    "\004\025\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0106\001\001" +
    "\000\004\013\u0107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u010f\001\001\000" +
    "\002\001\001\000\004\115\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u011a\006\045\007\005\010\011\011" +
    "\041\056\u011c\057\u011b\060\u0119\061\u011e\114\u011d\001\001" +
    "\000\004\012\353\001\001\000\002\001\001\000\004\012" +
    "\u0132\001\001\000\004\012\205\001\001\000\002\001\001" +
    "\000\004\012\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u011a\006\045\007\005\010" +
    "\011\011\041\056\u011c\057\u011b\060\u0119\061\u011e\114\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u011a\006\045\007\005\010\011\011\041" +
    "\056\u011c\057\u011b\060\u0119\061\u011e\114\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u011a\006\045\007\005\010\011\011\041\056\u011c\057\u011b" +
    "\060\u0119\061\u011e\114\u0131\001\001\000\002\001\001\000" +
    "\004\013\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u011a\006\045\007\005\010\011\011\041" +
    "\056\u011c\057\u011b\060\u0119\061\u011e\114\u013f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u011a\006\045\007\005\010\011\011\041\056\u011c\057" +
    "\u011b\060\u0119\061\u011e\114\u0143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u011a\006" +
    "\045\007\005\010\011\011\041\056\u011c\057\u011b\060\u0119" +
    "\061\u011e\114\u0147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u011a\006\045\007\005\010" +
    "\011\011\041\056\u011c\057\u011b\060\u0119\061\u011e\114\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u011a\006\045\007\005\010" +
    "\011\011\041\056\u011c\057\u011b\060\u0119\061\u011e\114\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u011a\006\045\007\005\010\011\011\041" +
    "\056\u011c\057\u011b\060\u0119\061\u011e\114\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u011a\006\045\007\005\010\011\011\041\056\u011c\057\u011b" +
    "\060\u0119\061\u011e\114\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u011a\006\045" +
    "\007\005\010\011\011\041\056\u011c\057\u011b\060\u0119\061" +
    "\u011e\114\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u011a\006\045" +
    "\007\005\010\011\011\041\056\u011c\057\u011b\060\u0119\061" +
    "\u011e\114\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u011a\006\045\007\005\010" +
    "\011\011\041\056\u011c\057\u011b\060\u0119\061\u011e\114\u0171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u011a\006\045\007\005\010\011\011\041\056" +
    "\u011c\057\u011b\060\u0119\061\u011e\114\u0178\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\u017f\045\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0182\001\001\000\002\001\001\000\004\072\u0184" +
    "\001\001\000\002\001\001\000\004\013\u0187\001\001\000" +
    "\004\072\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u018a\001\001\000\002\001\001\000\006\077" +
    "\u018f\104\u018c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u0194\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u019a" +
    "\001\001\000\002\001\001\000\004\101\u019c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u01a0\001\001" +
    "\000\002\001\001\000\006\030\u01a2\103\u01a1\001\001\000" +
    "\002\001\001\000\004\016\u01a3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u01a8\001\001\000\006\030\u01a2\103\u01a9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u01c1\001\001\000\004\013\u01c2\001\001" +
    "\000\004\034\u01c4\001\001\000\004\033\u01c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01c8\001\001\000\004\013\u01c9\001\001\000\004\034" +
    "\u01ca\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u01ef\057\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u01e0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\u01e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u01eb" +
    "\001\001\000\002\001\001\000\004\013\u01ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01f1\001\001\000\004\013\u01f2\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u01f5\057\u01ee\001\001" +
    "\000\002\001\001\000\004\057\u01f7\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u01fa\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u01fd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\346\001\001\000\004\043\u0203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u020b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0211\001\001\000\004" +
    "\013\u0212\001\001\000\002\001\001\000\004\020\u0216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u021b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u021f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0224\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u022c\001\001\000\004\106\u022d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\u0230\001\001\000" +
    "\002\001\001\000\004\100\u0232\001\001\000\002\001\001" +
    "\000\004\102\u0234\001\001\000\004\013\u0235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
