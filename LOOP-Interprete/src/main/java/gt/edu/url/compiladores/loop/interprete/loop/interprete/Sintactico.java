
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\006\000\002" +
    "\005\012\000\002\006\006\000\002\006\012\000\002\007" +
    "\006\000\002\007\012\000\002\010\006\000\002\010\012" +
    "\000\002\014\003\000\002\014\003\000\002\015\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\016\006" +
    "\000\002\021\012\000\002\021\011\000\002\021\012\000" +
    "\002\021\012\000\002\023\007\000\002\023\005\000\002" +
    "\024\007\000\002\024\005\000\002\025\007\000\002\025" +
    "\005\000\002\026\007\000\002\026\005\000\002\022\013" +
    "\000\002\030\015\000\002\030\013\000\002\030\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\027\004\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\024\006\010\007\007\011\030\017\020\020" +
    "\012\021\015\022\027\030\017\052\005\001\002\000\026" +
    "\002\001\006\010\007\007\011\030\017\020\020\012\021" +
    "\015\022\027\030\017\052\005\001\002\000\004\011\240" +
    "\001\002\000\026\002\uffee\006\uffee\007\uffee\011\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\030\uffee\052\uffee\001\002" +
    "\000\004\016\235\001\002\000\004\016\210\001\002\000" +
    "\026\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\030\uffed\052\uffed\001\002\000\004\016" +
    "\165\001\002\000\004\002\164\001\002\000\026\002\ufffe" +
    "\006\ufffe\007\ufffe\011\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\030\ufffe\052\ufffe\001\002\000\004\016\141\001\002" +
    "\000\026\002\ufffd\006\ufffd\007\ufffd\011\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\030\ufffd\052\ufffd\001\002\000\004" +
    "\016\127\001\002\000\004\016\104\001\002\000\026\002" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\030\ufff7\052\ufff7\001\002\000\026\002\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\030\ufffa\052\ufffa\001\002\000\026\002\ufffb\006\ufffb\007" +
    "\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\030\ufffb" +
    "\052\ufffb\001\002\000\026\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\030\ufff8\052\ufff8" +
    "\001\002\000\026\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\030\ufffc\052\ufffc\001\002" +
    "\000\026\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\030\ufff9\052\ufff9\001\002\000\004" +
    "\016\044\001\002\000\004\016\031\001\002\000\004\015" +
    "\032\001\002\000\004\016\033\001\002\000\004\057\034" +
    "\001\002\000\004\030\035\001\002\000\004\024\036\001" +
    "\002\000\004\025\037\001\002\000\006\013\040\023\041" +
    "\001\002\000\004\023\043\001\002\000\026\002\uffce\006" +
    "\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\030\uffce\052\uffce\001\002\000\026\002\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\030\uffd3" +
    "\052\uffd3\001\002\000\026\002\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\030\uffcf\052\uffcf" +
    "\001\002\000\004\011\045\001\002\000\014\012\056\013" +
    "\uffd0\016\uffd0\023\uffd0\024\055\001\002\000\010\013\040" +
    "\016\047\023\041\001\002\000\004\015\051\001\002\000" +
    "\026\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\030\ufff4\052\ufff4\001\002\000\004\016" +
    "\052\001\002\000\004\014\053\001\002\000\006\013\040" +
    "\023\041\001\002\000\026\002\ufff3\006\ufff3\007\ufff3\011" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\030\ufff3\052\ufff3" +
    "\001\002\000\004\022\061\001\002\000\004\011\057\001" +
    "\002\000\012\012\056\013\uffd0\016\uffd0\023\uffd0\001\002" +
    "\000\010\013\uffd1\016\uffd1\023\uffd1\001\002\000\004\016" +
    "\100\001\002\000\004\023\063\001\002\000\004\026\067" +
    "\001\002\000\006\013\040\023\041\001\002\000\026\002" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\030\uffe0\052\uffe0\001\002\000\004\034\071\001" +
    "\002\000\006\026\067\034\uffcc\001\002\000\004\034\uffcd" +
    "\001\002\000\004\016\072\001\002\000\004\011\073\001" +
    "\002\000\004\016\074\001\002\000\004\035\075\001\002" +
    "\000\004\016\076\001\002\000\004\011\077\001\002\000" +
    "\006\013\uffd5\023\uffd5\001\002\000\004\011\101\001\002" +
    "\000\006\012\102\023\uffda\001\002\000\004\022\061\001" +
    "\002\000\004\023\uffdb\001\002\000\004\011\105\001\002" +
    "\000\014\012\056\013\uffd0\016\uffd0\023\uffd0\024\115\001" +
    "\002\000\010\013\040\016\107\023\041\001\002\000\004" +
    "\015\111\001\002\000\026\002\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\030\ufff6\052\ufff6" +
    "\001\002\000\004\016\112\001\002\000\004\004\113\001" +
    "\002\000\006\013\040\023\041\001\002\000\026\002\ufff5" +
    "\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\030\ufff5\052\ufff5\001\002\000\004\017\116\001\002" +
    "\000\004\016\123\001\002\000\004\025\120\001\002\000" +
    "\004\023\063\001\002\000\006\013\040\023\041\001\002" +
    "\000\026\002\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\030\uffe1\052\uffe1\001\002\000\004" +
    "\011\124\001\002\000\006\012\125\025\uffdc\001\002\000" +
    "\004\017\116\001\002\000\004\025\uffdd\001\002\000\004" +
    "\011\130\001\002\000\004\016\131\001\002\000\004\015" +
    "\132\001\002\000\004\016\133\001\002\000\004\057\134" +
    "\001\002\000\004\030\135\001\002\000\004\024\136\001" +
    "\002\000\004\025\137\001\002\000\006\013\040\023\041" +
    "\001\002\000\026\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\030\uffd4\052\uffd4\001\002" +
    "\000\004\011\142\001\002\000\014\012\056\013\uffd0\016" +
    "\uffd0\023\uffd0\024\152\001\002\000\010\013\040\016\144" +
    "\023\041\001\002\000\004\015\146\001\002\000\026\002" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\030\ufff0\052\ufff0\001\002\000\004\016\147\001" +
    "\002\000\004\005\150\001\002\000\006\013\040\023\041" +
    "\001\002\000\026\002\uffef\006\uffef\007\uffef\011\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\030\uffef\052\uffef\001\002" +
    "\000\004\021\154\001\002\000\004\025\161\001\002\000" +
    "\004\016\155\001\002\000\004\011\156\001\002\000\006" +
    "\012\157\025\uffd6\001\002\000\004\021\154\001\002\000" +
    "\004\025\uffd7\001\002\000\004\023\063\001\002\000\006" +
    "\013\040\023\041\001\002\000\026\002\uffde\006\uffde\007" +
    "\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde\030\uffde" +
    "\052\uffde\001\002\000\004\002\000\001\002\000\004\011" +
    "\166\001\002\000\014\012\056\013\uffd0\016\uffd0\023\uffd0" +
    "\024\176\001\002\000\010\013\040\016\170\023\041\001" +
    "\002\000\004\015\172\001\002\000\026\002\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\030" +
    "\ufff2\052\ufff2\001\002\000\004\016\173\001\002\000\004" +
    "\010\174\001\002\000\006\013\040\023\041\001\002\000" +
    "\026\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\030\ufff1\052\ufff1\001\002\000\004\020" +
    "\200\001\002\000\004\025\205\001\002\000\004\016\201" +
    "\001\002\000\004\011\202\001\002\000\006\012\203\025" +
    "\uffd8\001\002\000\004\020\200\001\002\000\004\025\uffd9" +
    "\001\002\000\004\023\063\001\002\000\006\013\040\023" +
    "\041\001\002\000\026\002\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\030\uffdf\052\uffdf\001" +
    "\002\000\012\004\211\005\215\011\214\014\212\001\002" +
    "\000\010\012\232\013\uffe6\023\uffe6\001\002\000\010\012" +
    "\227\013\uffe7\023\uffe7\001\002\000\006\013\040\023\041" +
    "\001\002\000\012\012\222\013\uffe4\023\uffe4\060\221\001" +
    "\002\000\010\012\216\013\uffe5\023\uffe5\001\002\000\004" +
    "\016\217\001\002\000\012\004\211\005\215\011\214\014" +
    "\212\001\002\000\006\013\uffe9\023\uffe9\001\002\000\004" +
    "\011\225\001\002\000\004\016\223\001\002\000\012\004" +
    "\211\005\215\011\214\014\212\001\002\000\006\013\uffe8" +
    "\023\uffe8\001\002\000\006\013\uffe3\023\uffe3\001\002\000" +
    "\026\002\uffec\006\uffec\007\uffec\011\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\030\uffec\052\uffec\001\002\000\004\016" +
    "\230\001\002\000\012\004\211\005\215\011\214\014\212" +
    "\001\002\000\006\013\uffeb\023\uffeb\001\002\000\004\016" +
    "\233\001\002\000\012\004\211\005\215\011\214\014\212" +
    "\001\002\000\006\013\uffea\023\uffea\001\002\000\004\011" +
    "\236\001\002\000\006\013\040\023\041\001\002\000\026" +
    "\002\uffe2\006\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\030\uffe2\052\uffe2\001\002\000\006\013\040" +
    "\023\041\001\002\000\026\002\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\030\uffd2\052\uffd2" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\032\002\012\003\003\004\013\005\021\006" +
    "\025\007\023\010\020\014\015\015\005\016\010\021\024" +
    "\030\022\001\001\000\032\002\241\003\003\004\013\005" +
    "\021\006\025\007\023\010\020\014\015\015\005\016\010" +
    "\021\024\030\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\045\001\001\000\002\001\001\000" +
    "\004\012\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\053\001" +
    "\001\000\002\001\001\000\004\024\061\001\001\000\004" +
    "\011\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\063\001\001\000\004\027\065" +
    "\001\001\000\004\012\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\102\001\001\000\002\001\001\000\004\011\105\001\001" +
    "\000\002\001\001\000\004\012\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\113\001\001\000\002\001\001\000\004\023" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\120\001\001\000\004\012\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\137\001\001\000\002\001\001\000\004\011\142" +
    "\001\001\000\002\001\001\000\004\012\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\150\001\001\000\002\001\001\000" +
    "\004\026\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\157\001" +
    "\001\000\002\001\001\000\004\022\161\001\001\000\004" +
    "\012\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\166\001\001\000\002\001\001\000\004\012\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\174\001\001\000\002" +
    "\001\001\000\004\025\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\203\001\001\000\002\001\001\000\004\022\205\001" +
    "\001\000\004\012\206\001\001\000\002\001\001\000\004" +
    "\017\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\236\001\001" +
    "\000\002\001\001\000\004\012\240\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECENTERO ::= tipo_ent libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECENTERO ::= tipo_ent libre VARSECUE libre asignacion libre entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECCADENA ::= tipo_cadena libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECCADENA ::= tipo_cadena libre VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECBOLEAN ::= tipo_bol libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECBOLEAN ::= tipo_bol libre VARSECUE libre asignacion libre boleano finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLAREAL ::= tipo_real libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLAREAL ::= tipo_real libre VARSECUE libre asignacion libre real finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONESS ::= tipo_ent libre identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONESS ::= tipo_cadena libre identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONESS ::= tipo_bol libre identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONESS ::= tipo_real libre identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPOF ::= newline TABULA retornar libre identificador libre operadores libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
