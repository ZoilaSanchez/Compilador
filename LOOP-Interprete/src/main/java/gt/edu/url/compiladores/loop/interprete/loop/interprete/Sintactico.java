
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\134\013\000\002\134\010\000\002\112\006\000\002" +
    "\112\006\000\002\112\007\000\002\112\007\000\002\112" +
    "\007\000\002\112\010\000\002\116\005\000\002\116\011" +
    "\000\002\116\003\000\002\116\007\000\002\135\003\000" +
    "\002\135\003\000\002\135\003\000\002\115\006\000\002" +
    "\115\011\000\002\115\010\000\002\115\010\000\002\115" +
    "\010\000\002\115\012\000\002\115\007\000\002\115\007" +
    "\000\002\136\003\000\002\136\003\000\002\136\003\000" +
    "\002\113\006\000\002\113\010\000\002\113\007\000\002" +
    "\113\007\000\002\113\010\000\002\113\011\000\002\113" +
    "\012\000\002\113\010\000\002\114\003\000\002\114\004" +
    "\000\002\114\006\000\002\114\003\000\002\117\006\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\005\000\002\006\007\000\002\006" +
    "\013\000\002\006\011\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\007\005\000" +
    "\002\007\007\000\002\007\013\000\002\007\011\000\002" +
    "\010\005\000\002\010\007\000\002\010\013\000\002\010" +
    "\011\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\011\005\000\002\011\007\000\002\011\013\000" +
    "\002\011\011\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\012\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\007\000\002\017" +
    "\006\000\002\071\004\000\002\071\007\000\002\071\004" +
    "\000\002\072\004\000\002\072\005\000\002\022\011\000" +
    "\002\022\011\000\002\022\011\000\002\022\011\000\002" +
    "\022\010\000\002\022\010\000\002\022\010\000\002\022" +
    "\010\000\002\024\007\000\002\024\005\000\002\025\007" +
    "\000\002\025\005\000\002\026\007\000\002\026\005\000" +
    "\002\027\007\000\002\027\005\000\002\127\004\000\002" +
    "\127\004\000\002\127\004\000\002\127\004\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\127\003" +
    "\000\002\023\005\000\002\023\013\000\002\023\007\000" +
    "\002\023\007\000\002\023\013\000\002\023\013\000\002" +
    "\023\007\000\002\023\020\000\002\023\014\000\002\023" +
    "\010\000\002\023\014\000\002\023\014\000\002\023\010" +
    "\000\002\023\021\000\002\023\014\000\002\133\003\000" +
    "\002\133\003\000\002\133\003\000\002\133\004\000\002" +
    "\133\004\000\002\133\004\000\002\120\003\000\002\120" +
    "\003\000\002\031\015\000\002\031\016\000\002\031\013" +
    "\000\002\031\010\000\002\031\010\000\002\031\005\000" +
    "\002\037\006\000\002\037\003\000\002\037\003\000\002" +
    "\032\012\000\002\032\011\000\002\034\012\000\002\034" +
    "\011\000\002\034\005\000\002\033\007\000\002\033\013" +
    "\000\002\076\024\000\002\076\020\000\002\103\004\000" +
    "\002\103\003\000\002\100\003\000\002\100\003\000\002" +
    "\101\003\000\002\101\003\000\002\077\004\000\002\077" +
    "\012\000\002\077\007\000\002\104\004\000\002\102\003" +
    "\000\002\102\003\000\002\105\016\000\002\105\017\000" +
    "\002\105\017\000\002\106\010\000\002\106\006\000\002" +
    "\106\010\000\002\106\010\000\002\106\012\000\002\106" +
    "\012\000\002\106\010\000\002\106\012\000\002\106\003" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\005\000\002\107\004\000\002\107\004\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\126" +
    "\007\000\002\126\007\000\002\126\005\000\002\126\005" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\035" +
    "\011\000\002\035\013\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\042\010\000\002\042\007\000\002\042\007\000\002" +
    "\045\006\000\002\041\014\000\002\041\011\000\002\041" +
    "\011\000\002\041\012\000\002\041\012\000\002\046\016" +
    "\000\002\046\016\000\002\046\016\000\002\046\016\000" +
    "\002\047\004\000\002\047\006\000\002\050\004\000\002" +
    "\050\006\000\002\051\004\000\002\051\006\000\002\052" +
    "\004\000\002\052\006\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\013\000" +
    "\002\053\014\000\002\053\014\000\002\053\014\000\002" +
    "\053\014\000\002\073\007\000\002\073\007\000\002\073" +
    "\007\000\002\073\007\000\002\056\004\000\002\057\004" +
    "\000\002\061\004\000\002\060\004\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\003\000\002" +
    "\030\004\000\002\030\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0314\000\052\006\017\007\023\011\022\017\065\020" +
    "\006\021\040\022\007\023\004\031\060\037\030\041\025" +
    "\044\054\045\032\051\034\052\064\053\016\055\056\056" +
    "\033\111\012\124\036\001\002\000\054\002\uffec\006\uffec" +
    "\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\031\uffec\037\uffec\041\uffec\044\uffec\045\uffec\051\uffec" +
    "\052\uffec\053\uffec\055\uffec\056\uffec\111\uffec\124\uffec\001" +
    "\002\000\054\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031\ufff2\037\ufff2\041" +
    "\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2" +
    "\056\ufff2\111\ufff2\124\ufff2\001\002\000\004\016\u0316\001" +
    "\002\000\004\016\u0315\001\002\000\076\002\uffc3\006\uffc3" +
    "\007\uffc3\011\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\031\uffc3\033\uffc3\034\uffc3\037\uffc3\041\uffc3" +
    "\044\uffc3\045\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\056" +
    "\uffc3\111\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3" +
    "\122\uffc3\124\uffc3\001\002\000\004\002\u0314\001\002\000" +
    "\006\016\u02f2\023\u02f3\001\002\000\054\002\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\031\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\055\ufffa\056\ufffa\111\ufffa\124\ufffa\001" +
    "\002\000\076\002\uffc2\006\uffc2\007\uffc2\011\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\031\uffc2\033" +
    "\uffc2\034\uffc2\037\uffc2\041\uffc2\044\uffc2\045\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\111\uffc2\115\uffc2\116" +
    "\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\124\uffc2\001\002" +
    "\000\054\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\031\uffef\037\uffef\041\uffef" +
    "\044\uffef\045\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056" +
    "\uffef\111\uffef\124\uffef\001\002\000\004\016\u02ef\001\002" +
    "\000\004\016\u02d5\001\002\000\054\002\uffee\006\uffee\007" +
    "\uffee\011\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\031\uffee\037\uffee\041\uffee\044\uffee\045\uffee\051\uffee\052" +
    "\uffee\053\uffee\055\uffee\056\uffee\111\uffee\124\uffee\001\002" +
    "\000\060\002\uffa5\006\uffa5\007\uffa5\011\uffa5\013\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\026\uffa5\031\uffa5" +
    "\037\uffa5\041\uffa5\044\uffa5\045\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\055\uffa5\056\uffa5\111\uffa5\124\uffa5\001\002\000\012" +
    "\015\u0276\016\u0274\060\u0275\077\u0273\001\002\000\004\016" +
    "\u0270\001\002\000\020\011\u024c\066\u024a\070\u0249\071\u0248" +
    "\072\u0247\073\u0246\074\u0245\001\002\000\004\016\u0226\001" +
    "\002\000\054\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\031\ufff7\037\ufff7\041" +
    "\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7" +
    "\056\ufff7\111\ufff7\124\ufff7\001\002\000\054\002\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\031\ufff6\037\ufff6\041\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\111\ufff6\124\ufff6" +
    "\001\002\000\004\016\u0220\001\002\000\054\002\ufff8\006" +
    "\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\031\ufff8\037\ufff8\041\ufff8\044\ufff8\045\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\111\ufff8\124\ufff8" +
    "\001\002\000\004\016\u01f4\001\002\000\006\013\200\023" +
    "\u01eb\001\002\000\004\024\u01e3\001\002\000\054\002\ufff3" +
    "\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\031\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\111\ufff3\124" +
    "\ufff3\001\002\000\004\016\u01c2\001\002\000\060\002\uffa4" +
    "\006\uffa4\007\uffa4\011\uffa4\013\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\026\uffa4\031\uffa4\037\uffa4\041\uffa4" +
    "\044\uffa4\045\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056" +
    "\uffa4\111\uffa4\124\uffa4\001\002\000\004\016\u01c1\001\002" +
    "\000\054\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\031\ufff1\037\ufff1\041\ufff1" +
    "\044\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056" +
    "\ufff1\111\ufff1\124\ufff1\001\002\000\054\002\uffed\006\uffed" +
    "\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed\124\uffed\001" +
    "\002\000\054\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\031\ufff0\037\ufff0\041" +
    "\ufff0\044\ufff0\045\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0" +
    "\056\ufff0\111\ufff0\124\ufff0\001\002\000\054\002\uffff\006" +
    "\017\007\023\011\022\017\065\020\006\021\040\022\007" +
    "\023\004\031\060\037\030\041\025\044\054\045\032\051" +
    "\034\052\064\053\016\055\056\056\033\111\012\124\036" +
    "\001\002\000\076\002\uffc1\006\uffc1\007\uffc1\011\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1\031\uffc1" +
    "\033\uffc1\034\uffc1\037\uffc1\041\uffc1\044\uffc1\045\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\111\uffc1\115\uffc1" +
    "\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122\uffc1\124\uffc1\001" +
    "\002\000\004\023\u0172\001\002\000\054\002\ufffc\006\ufffc" +
    "\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc\124\ufffc\001" +
    "\002\000\054\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb\037\ufffb\041" +
    "\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb" +
    "\056\ufffb\111\ufffb\124\ufffb\001\002\000\076\002\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4\037\uffc4\041" +
    "\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\111\uffc4\115\uffc4\116\uffc4\117\uffc4\120\uffc4\121" +
    "\uffc4\122\uffc4\124\uffc4\001\002\000\054\002\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9\124\ufff9\001" +
    "\002\000\004\011\u0151\001\002\000\004\024\u0135\001\002" +
    "\000\006\011\u010a\076\u010c\001\002\000\006\013\200\023" +
    "\201\001\002\000\056\002\uff39\006\uff39\007\uff39\011\uff39" +
    "\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39\031\uff39\037" +
    "\uff39\041\uff39\044\uff39\045\uff39\046\uff39\051\uff39\052\uff39" +
    "\053\uff39\055\uff39\056\uff39\111\uff39\124\uff39\001\002\000" +
    "\010\016\364\023\uffe1\060\365\001\002\000\054\002\ufff5" +
    "\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\111\ufff5\124" +
    "\ufff5\001\002\000\006\011\256\067\260\001\002\000\054" +
    "\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4" +
    "\045\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111" +
    "\ufff4\124\ufff4\001\002\000\004\011\254\001\002\000\006" +
    "\011\071\016\070\001\002\000\054\002\001\006\017\007" +
    "\023\011\022\017\065\020\006\021\040\022\007\023\004" +
    "\031\060\037\030\041\025\044\054\045\032\051\034\052" +
    "\064\053\016\055\056\056\033\111\012\124\036\001\002" +
    "\000\004\002\ufffd\001\002\000\010\011\ufef9\032\243\076" +
    "\ufef9\001\002\000\004\024\072\001\002\000\004\017\073" +
    "\001\002\000\004\016\074\001\002\000\004\011\075\001" +
    "\002\000\004\025\076\001\002\000\004\023\077\001\002" +
    "\000\004\023\100\001\002\000\016\006\017\007\023\026" +
    "\107\041\025\055\056\056\033\001\002\000\054\002\uff21" +
    "\006\uff21\007\uff21\011\uff21\017\uff21\020\uff21\021\uff21\022" +
    "\uff21\023\uff21\031\uff21\037\uff21\041\uff21\044\uff21\045\uff21" +
    "\051\uff21\052\uff21\053\uff21\055\uff21\056\uff21\111\uff21\124" +
    "\uff21\001\002\000\016\006\017\007\023\026\uff69\041\025" +
    "\055\056\056\033\001\002\000\004\035\161\001\002\000" +
    "\004\026\112\001\002\000\016\006\017\007\023\026\uff6a" +
    "\041\025\055\056\056\033\001\002\000\016\006\017\007" +
    "\023\026\uff68\041\025\055\056\056\033\001\002\000\012" +
    "\006\017\007\023\026\112\035\ufef0\001\002\000\056\002" +
    "\uff79\006\uff79\007\uff79\011\uff79\013\uff79\017\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\031\uff79\037\uff79\041\uff79\044" +
    "\uff79\045\uff79\051\uff79\052\uff79\053\uff79\055\uff79\056\uff79" +
    "\111\uff79\124\uff79\001\002\000\012\006\ufef1\011\ufef1\035" +
    "\ufef1\052\ufef1\001\002\000\014\006\ufef0\011\ufef0\026\112" +
    "\035\ufef0\052\ufef0\001\002\000\004\026\uff66\001\002\000" +
    "\004\026\uff65\001\002\000\004\035\116\001\002\000\004" +
    "\016\117\001\002\000\012\004\120\005\123\010\121\011" +
    "\122\001\002\000\060\002\uff6d\006\uff6d\007\uff6d\011\uff6d" +
    "\013\uff6d\016\155\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023" +
    "\uff6d\031\uff6d\037\uff6d\041\uff6d\044\uff6d\045\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\055\uff6d\056\uff6d\111\uff6d\124\uff6d\001" +
    "\002\000\056\002\uff70\006\uff70\007\uff70\011\uff70\013\uff70" +
    "\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\031\uff70\037" +
    "\uff70\041\uff70\044\uff70\045\uff70\051\uff70\052\uff70\053\uff70" +
    "\055\uff70\056\uff70\111\uff70\124\uff70\001\002\000\010\016" +
    "\137\107\140\110\136\001\002\000\004\016\124\001\002" +
    "\000\016\054\132\107\130\110\126\112\125\113\127\114" +
    "\133\001\002\000\012\004\uff29\005\uff29\011\uff29\016\uff29" +
    "\001\002\000\012\004\uff2a\005\uff2a\011\uff2a\016\uff2a\001" +
    "\002\000\012\004\uff28\005\uff28\011\uff28\016\uff28\001\002" +
    "\000\012\004\uff2b\005\uff2b\011\uff2b\016\uff2b\001\002\000" +
    "\004\005\134\001\002\000\012\004\uff26\005\uff26\011\uff26" +
    "\016\uff26\001\002\000\012\004\uff27\005\uff27\011\uff27\016" +
    "\uff27\001\002\000\004\011\135\001\002\000\056\002\uff6e" +
    "\006\uff6e\007\uff6e\011\uff6e\013\uff6e\017\uff6e\020\uff6e\021" +
    "\uff6e\022\uff6e\023\uff6e\031\uff6e\037\uff6e\041\uff6e\044\uff6e" +
    "\045\uff6e\051\uff6e\052\uff6e\053\uff6e\055\uff6e\056\uff6e\111" +
    "\uff6e\124\uff6e\001\002\000\006\011\uff63\016\uff63\001\002" +
    "\000\016\054\132\107\130\110\126\112\125\113\127\114" +
    "\133\001\002\000\006\011\uff64\016\uff64\001\002\000\004" +
    "\011\142\001\002\000\004\024\143\001\002\000\004\011" +
    "\144\001\002\000\004\016\145\001\002\000\006\107\140" +
    "\110\136\001\002\000\004\016\147\001\002\000\004\004" +
    "\150\001\002\000\004\025\151\001\002\000\056\002\uff6c" +
    "\006\uff6c\007\uff6c\011\uff6c\013\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\031\uff6c\037\uff6c\041\uff6c\044\uff6c" +
    "\045\uff6c\051\uff6c\052\uff6c\053\uff6c\055\uff6c\056\uff6c\111" +
    "\uff6c\124\uff6c\001\002\000\004\016\153\001\002\000\004" +
    "\011\154\001\002\000\056\002\uff71\006\uff71\007\uff71\011" +
    "\uff71\013\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71" +
    "\031\uff71\037\uff71\041\uff71\044\uff71\045\uff71\051\uff71\052" +
    "\uff71\053\uff71\055\uff71\056\uff71\111\uff71\124\uff71\001\002" +
    "\000\016\054\132\107\130\110\126\112\125\113\127\114" +
    "\133\001\002\000\004\016\157\001\002\000\004\004\160" +
    "\001\002\000\056\002\uff6f\006\uff6f\007\uff6f\011\uff6f\013" +
    "\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\031\uff6f" +
    "\037\uff6f\041\uff6f\044\uff6f\045\uff6f\051\uff6f\052\uff6f\053" +
    "\uff6f\055\uff6f\056\uff6f\111\uff6f\124\uff6f\001\002\000\006" +
    "\011\163\016\162\001\002\000\012\004\211\005\214\010" +
    "\212\011\213\001\002\000\004\060\164\001\002\000\004" +
    "\011\165\001\002\000\004\024\166\001\002\000\014\004" +
    "\167\005\176\010\172\011\173\014\170\001\002\000\012" +
    "\012\ufeef\013\ufeef\023\ufeef\025\ufeef\001\002\000\012\012" +
    "\ufeee\013\ufeee\023\ufeee\025\ufeee\001\002\000\006\012\206" +
    "\025\uff5b\001\002\000\012\012\ufeed\013\ufeed\023\ufeed\025" +
    "\ufeed\001\002\000\014\012\204\013\ufef4\016\ufef4\023\ufef4" +
    "\025\ufef4\001\002\000\004\025\uff5a\001\002\000\004\025" +
    "\177\001\002\000\012\012\ufeec\013\ufeec\023\ufeec\025\ufeec" +
    "\001\002\000\006\013\200\023\201\001\002\000\004\023" +
    "\203\001\002\000\104\002\ufef2\006\ufef2\007\ufef2\011\ufef2" +
    "\013\ufef2\017\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\026" +
    "\ufef2\031\ufef2\033\ufef2\034\ufef2\037\ufef2\041\ufef2\043\ufef2" +
    "\044\ufef2\045\ufef2\046\ufef2\051\ufef2\052\ufef2\053\ufef2\055" +
    "\ufef2\056\ufef2\111\ufef2\115\ufef2\116\ufef2\117\ufef2\120\ufef2" +
    "\121\ufef2\122\ufef2\124\ufef2\001\002\000\056\002\uff6b\006" +
    "\uff6b\007\uff6b\011\uff6b\013\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\031\uff6b\037\uff6b\041\uff6b\044\uff6b\045" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\055\uff6b\056\uff6b\111\uff6b" +
    "\124\uff6b\001\002\000\106\002\ufef3\006\ufef3\007\ufef3\011" +
    "\ufef3\013\ufef3\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3" +
    "\026\ufef3\031\ufef3\033\ufef3\034\ufef3\037\ufef3\041\ufef3\043" +
    "\ufef3\044\ufef3\045\ufef3\046\ufef3\051\ufef3\052\ufef3\053\ufef3" +
    "\055\ufef3\056\ufef3\105\ufef3\111\ufef3\115\ufef3\116\ufef3\117" +
    "\ufef3\120\ufef3\121\ufef3\122\ufef3\124\ufef3\001\002\000\004" +
    "\011\173\001\002\000\012\013\ufef5\016\ufef5\023\ufef5\025" +
    "\ufef5\001\002\000\004\016\207\001\002\000\012\004\167" +
    "\005\176\010\172\014\170\001\002\000\004\025\uff5c\001" +
    "\002\000\060\002\uff73\006\uff73\007\uff73\011\uff73\013\uff73" +
    "\016\236\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\031" +
    "\uff73\037\uff73\041\uff73\044\uff73\045\uff73\051\uff73\052\uff73" +
    "\053\uff73\055\uff73\056\uff73\111\uff73\124\uff73\001\002\000" +
    "\056\002\uff77\006\uff77\007\uff77\011\uff77\013\uff77\017\uff77" +
    "\020\uff77\021\uff77\022\uff77\023\uff77\031\uff77\037\uff77\041" +
    "\uff77\044\uff77\045\uff77\051\uff77\052\uff77\053\uff77\055\uff77" +
    "\056\uff77\111\uff77\124\uff77\001\002\000\064\002\uff76\006" +
    "\uff76\007\uff76\011\uff76\013\uff76\016\221\017\uff76\020\uff76" +
    "\021\uff76\022\uff76\023\uff76\031\uff76\037\uff76\041\uff76\044" +
    "\uff76\045\uff76\051\uff76\052\uff76\053\uff76\055\uff76\056\uff76" +
    "\107\140\110\136\111\uff76\124\uff76\001\002\000\004\016" +
    "\215\001\002\000\016\054\132\107\130\110\126\112\125" +
    "\113\127\114\133\001\002\000\004\005\217\001\002\000" +
    "\004\011\220\001\002\000\056\002\uff74\006\uff74\007\uff74" +
    "\011\uff74\013\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\031\uff74\037\uff74\041\uff74\044\uff74\045\uff74\051\uff74" +
    "\052\uff74\053\uff74\055\uff74\056\uff74\111\uff74\124\uff74\001" +
    "\002\000\016\054\132\107\130\110\126\112\125\113\127" +
    "\114\133\001\002\000\004\011\223\001\002\000\004\024" +
    "\224\001\002\000\004\011\225\001\002\000\004\016\226" +
    "\001\002\000\006\107\140\110\136\001\002\000\004\016" +
    "\230\001\002\000\004\004\231\001\002\000\004\025\232" +
    "\001\002\000\056\002\uff72\006\uff72\007\uff72\011\uff72\013" +
    "\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\031\uff72" +
    "\037\uff72\041\uff72\044\uff72\045\uff72\051\uff72\052\uff72\053" +
    "\uff72\055\uff72\056\uff72\111\uff72\124\uff72\001\002\000\004" +
    "\016\234\001\002\000\004\011\235\001\002\000\056\002" +
    "\uff78\006\uff78\007\uff78\011\uff78\013\uff78\017\uff78\020\uff78" +
    "\021\uff78\022\uff78\023\uff78\031\uff78\037\uff78\041\uff78\044" +
    "\uff78\045\uff78\051\uff78\052\uff78\053\uff78\055\uff78\056\uff78" +
    "\111\uff78\124\uff78\001\002\000\016\054\132\107\130\110" +
    "\126\112\125\113\127\114\133\001\002\000\004\016\240" +
    "\001\002\000\004\004\241\001\002\000\056\002\uff75\006" +
    "\uff75\007\uff75\011\uff75\013\uff75\017\uff75\020\uff75\021\uff75" +
    "\022\uff75\023\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045" +
    "\uff75\051\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75" +
    "\124\uff75\001\002\000\004\026\uff67\001\002\000\004\024" +
    "\244\001\002\000\006\022\245\025\246\001\002\000\004" +
    "\016\250\001\002\000\006\013\200\023\201\001\002\000" +
    "\054\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\031\uffea\037\uffea\041\uffea\044" +
    "\uffea\045\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea" +
    "\111\uffea\124\uffea\001\002\000\004\011\251\001\002\000" +
    "\004\025\252\001\002\000\006\013\200\023\201\001\002" +
    "\000\054\002\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\031\uffeb\037\uffeb\041\uffeb" +
    "\044\uffeb\045\uffeb\051\uffeb\052\uffeb\053\uffeb\055\uffeb\056" +
    "\uffeb\111\uffeb\124\uffeb\001\002\000\006\013\200\023\201" +
    "\001\002\000\054\002\uff5d\006\uff5d\007\uff5d\011\uff5d\017" +
    "\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\031\uff5d\037\uff5d" +
    "\041\uff5d\044\uff5d\045\uff5d\051\uff5d\052\uff5d\053\uff5d\055" +
    "\uff5d\056\uff5d\111\uff5d\124\uff5d\001\002\000\016\012\204" +
    "\013\ufef4\016\ufef4\023\ufef4\024\300\077\277\001\002\000" +
    "\010\013\200\016\266\023\201\001\002\000\004\024\261" +
    "\001\002\000\004\022\007\001\002\000\004\011\263\001" +
    "\002\000\004\025\264\001\002\000\006\013\200\023\201" +
    "\001\002\000\054\002\uff23\006\uff23\007\uff23\011\uff23\017" +
    "\uff23\020\uff23\021\uff23\022\uff23\023\uff23\031\uff23\037\uff23" +
    "\041\uff23\044\uff23\045\uff23\051\uff23\052\uff23\053\uff23\055" +
    "\uff23\056\uff23\111\uff23\124\uff23\001\002\000\004\015\270" +
    "\001\002\000\076\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\026\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\037\uffb4\041\uffb4\044\uffb4\045\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\111\uffb4\115\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4\124\uffb4\001" +
    "\002\000\004\016\271\001\002\000\010\004\272\005\275" +
    "\010\273\001\002\000\006\013\uffb0\023\uffb0\001\002\000" +
    "\006\013\uffae\023\uffae\001\002\000\006\013\200\023\201" +
    "\001\002\000\006\013\uffaf\023\uffaf\001\002\000\076\002" +
    "\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\037" +
    "\uffb1\041\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\111\uffb1\115\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\122\uffb1\124\uffb1\001\002\000\006\004\344" +
    "\100\345\001\002\000\014\017\310\020\304\021\307\022" +
    "\302\025\312\001\002\000\014\017\310\020\304\021\307" +
    "\022\302\025\uff7d\001\002\000\004\016\337\001\002\000" +
    "\014\017\310\020\304\021\307\022\302\025\uff7c\001\002" +
    "\000\004\016\332\001\002\000\014\017\310\020\304\021" +
    "\307\022\302\025\uff7b\001\002\000\014\017\310\020\304" +
    "\021\307\022\302\025\uff7a\001\002\000\004\016\324\001" +
    "\002\000\004\016\320\001\002\000\004\025\315\001\002" +
    "\000\004\023\100\001\002\000\004\023\314\001\002\000" +
    "\054\002\uff8b\006\uff8b\007\uff8b\011\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\031\uff8b\037\uff8b\041\uff8b\044" +
    "\uff8b\045\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b" +
    "\111\uff8b\124\uff8b\001\002\000\004\023\100\001\002\000" +
    "\006\013\200\023\201\001\002\000\054\002\uff8f\006\uff8f" +
    "\007\uff8f\011\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\031\uff8f\037\uff8f\041\uff8f\044\uff8f\045\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\055\uff8f\056\uff8f\111\uff8f\124\uff8f\001" +
    "\002\000\004\011\321\001\002\000\016\012\322\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\025\uff88\001\002\000\004\017" +
    "\310\001\002\000\014\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\025\uff89\001\002\000\004\011\325\001\002\000\016\012" +
    "\326\017\uff82\020\uff82\021\uff82\022\uff82\025\uff82\001\002" +
    "\000\004\021\307\001\002\000\014\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\025\uff83\001\002\000\004\025\uff7e\001\002" +
    "\000\004\025\uff7f\001\002\000\004\011\333\001\002\000" +
    "\016\012\334\017\uff84\020\uff84\021\uff84\022\uff84\025\uff84" +
    "\001\002\000\004\020\304\001\002\000\014\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\025\uff85\001\002\000\004\025\uff80" +
    "\001\002\000\004\011\340\001\002\000\016\012\341\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\025\uff86\001\002\000\004" +
    "\022\302\001\002\000\014\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\025\uff87\001\002\000\004\025\uff81\001\002\000\004" +
    "\100\347\001\002\000\006\013\200\023\201\001\002\000" +
    "\054\002\uff04\006\uff04\007\uff04\011\uff04\017\uff04\020\uff04" +
    "\021\uff04\022\uff04\023\uff04\031\uff04\037\uff04\041\uff04\044" +
    "\uff04\045\uff04\051\uff04\052\uff04\053\uff04\055\uff04\056\uff04" +
    "\111\uff04\124\uff04\001\002\000\004\016\350\001\002\000" +
    "\004\015\351\001\002\000\004\101\352\001\002\000\004" +
    "\016\353\001\002\000\004\010\355\001\002\000\004\102" +
    "\362\001\002\000\006\012\357\016\356\001\002\000\004" +
    "\102\uff08\001\002\000\004\016\360\001\002\000\004\010" +
    "\355\001\002\000\004\102\uff07\001\002\000\006\013\200" +
    "\023\201\001\002\000\054\002\uff0f\006\uff0f\007\uff0f\011" +
    "\uff0f\017\uff0f\020\uff0f\021\uff0f\022\uff0f\023\uff0f\031\uff0f" +
    "\037\uff0f\041\uff0f\044\uff0f\045\uff0f\051\uff0f\052\uff0f\053" +
    "\uff0f\055\uff0f\056\uff0f\111\uff0f\124\uff0f\001\002\000\006" +
    "\011\372\103\373\001\002\000\004\015\366\001\002\000" +
    "\004\024\367\001\002\000\004\025\370\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff5e\006\uff5e\007" +
    "\uff5e\011\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e" +
    "\031\uff5e\037\uff5e\041\uff5e\044\uff5e\045\uff5e\051\uff5e\052" +
    "\uff5e\053\uff5e\055\uff5e\056\uff5e\111\uff5e\124\uff5e\001\002" +
    "\000\004\016\376\001\002\000\004\016\374\001\002\000" +
    "\004\031\375\001\002\000\004\023\uffe0\001\002\000\004" +
    "\015\377\001\002\000\004\016\u0100\001\002\000\004\057" +
    "\u0101\001\002\000\004\031\u0102\001\002\000\004\024\u0103" +
    "\001\002\000\016\004\167\005\176\010\172\011\173\014" +
    "\170\025\u0105\001\002\000\004\025\u0107\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff62\006\uff62\007" +
    "\uff62\011\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62" +
    "\031\uff62\037\uff62\041\uff62\044\uff62\045\uff62\051\uff62\052" +
    "\uff62\053\uff62\055\uff62\056\uff62\111\uff62\124\uff62\001\002" +
    "\000\006\013\200\023\201\001\002\000\054\002\uff61\006" +
    "\uff61\007\uff61\011\uff61\017\uff61\020\uff61\021\uff61\022\uff61" +
    "\023\uff61\031\uff61\037\uff61\041\uff61\044\uff61\045\uff61\051" +
    "\uff61\052\uff61\053\uff61\055\uff61\056\uff61\111\uff61\124\uff61" +
    "\001\002\000\056\002\uff96\006\uff96\007\uff96\011\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\026\uff96\031\uff96" +
    "\037\uff96\041\uff96\044\uff96\045\uff96\051\uff96\052\uff96\053" +
    "\uff96\055\uff96\056\uff96\111\uff96\124\uff96\001\002\000\016" +
    "\012\204\013\ufef4\016\ufef4\023\ufef4\024\u011d\077\u011c\001" +
    "\002\000\010\013\200\016\u0112\023\201\001\002\000\004" +
    "\024\u010d\001\002\000\004\022\007\001\002\000\004\011" +
    "\u010f\001\002\000\004\025\u0110\001\002\000\006\013\200" +
    "\023\201\001\002\000\054\002\uff25\006\uff25\007\uff25\011" +
    "\uff25\017\uff25\020\uff25\021\uff25\022\uff25\023\uff25\031\uff25" +
    "\037\uff25\041\uff25\044\uff25\045\uff25\051\uff25\052\uff25\053" +
    "\uff25\055\uff25\056\uff25\111\uff25\124\uff25\001\002\000\004" +
    "\015\u0114\001\002\000\076\002\uffc0\006\uffc0\007\uffc0\011" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0" +
    "\031\uffc0\033\uffc0\034\uffc0\037\uffc0\041\uffc0\044\uffc0\045" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\111\uffc0" +
    "\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\122\uffc0\124" +
    "\uffc0\001\002\000\004\016\u0115\001\002\000\012\004\u0117" +
    "\005\u011a\010\u0119\014\u0118\001\002\000\006\013\200\023" +
    "\201\001\002\000\006\013\uffbc\023\uffbc\001\002\000\006" +
    "\013\uffba\023\uffba\001\002\000\006\013\uffb9\023\uffb9\001" +
    "\002\000\006\013\uffbb\023\uffbb\001\002\000\076\002\uffbd" +
    "\006\uffbd\007\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd\037\uffbd" +
    "\041\uffbd\044\uffbd\045\uffbd\051\uffbd\052\uffbd\053\uffbd\055" +
    "\uffbd\056\uffbd\111\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\121\uffbd\122\uffbd\124\uffbd\001\002\000\006\004\u0125\100" +
    "\u0126\001\002\000\014\017\310\020\304\021\307\022\302" +
    "\025\u011f\001\002\000\004\025\u0122\001\002\000\004\023" +
    "\100\001\002\000\004\023\u0121\001\002\000\054\002\uff8d" +
    "\006\uff8d\007\uff8d\011\uff8d\017\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\023\uff8d\031\uff8d\037\uff8d\041\uff8d\044\uff8d\045\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\111\uff8d\124" +
    "\uff8d\001\002\000\004\023\100\001\002\000\006\013\200" +
    "\023\201\001\002\000\054\002\uff91\006\uff91\007\uff91\011" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\031\uff91" +
    "\037\uff91\041\uff91\044\uff91\045\uff91\051\uff91\052\uff91\053" +
    "\uff91\055\uff91\056\uff91\111\uff91\124\uff91\001\002\000\004" +
    "\100\u0128\001\002\000\006\013\200\023\201\001\002\000" +
    "\054\002\uff06\006\uff06\007\uff06\011\uff06\017\uff06\020\uff06" +
    "\021\uff06\022\uff06\023\uff06\031\uff06\037\uff06\041\uff06\044" +
    "\uff06\045\uff06\051\uff06\052\uff06\053\uff06\055\uff06\056\uff06" +
    "\111\uff06\124\uff06\001\002\000\004\016\u0129\001\002\000" +
    "\004\015\u012a\001\002\000\004\101\u012b\001\002\000\004" +
    "\016\u012c\001\002\000\004\004\u012d\001\002\000\006\012" +
    "\u0132\016\u0131\001\002\000\004\102\u012f\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff12\006\uff12\007" +
    "\uff12\011\uff12\017\uff12\020\uff12\021\uff12\022\uff12\023\uff12" +
    "\031\uff12\037\uff12\041\uff12\044\uff12\045\uff12\051\uff12\052" +
    "\uff12\053\uff12\055\uff12\056\uff12\111\uff12\124\uff12\001\002" +
    "\000\004\102\uff0e\001\002\000\004\016\u0133\001\002\000" +
    "\004\004\u012d\001\002\000\004\102\uff0d\001\002\000\014" +
    "\017\310\020\304\021\307\022\302\025\u0137\001\002\000" +
    "\004\025\u014e\001\002\000\004\023\u0138\001\002\000\004" +
    "\026\112\001\002\000\054\002\uff1a\006\uff1a\007\uff1a\011" +
    "\uff1a\017\uff1a\020\uff1a\021\uff1a\022\uff1a\023\uff1a\031\uff1a" +
    "\037\uff1a\041\uff1a\044\uff1a\045\uff1a\051\uff1a\052\uff1a\053" +
    "\uff1a\055\uff1a\056\uff1a\111\uff1a\124\uff1a\001\002\000\006" +
    "\011\u013c\035\u013b\001\002\000\004\016\u0146\001\002\000" +
    "\004\016\u013d\001\002\000\004\015\u013e\001\002\000\004" +
    "\016\u013f\001\002\000\014\004\167\005\176\010\172\011" +
    "\u0141\014\170\001\002\000\006\013\200\023\201\001\002" +
    "\000\006\013\200\023\201\001\002\000\056\002\uff15\006" +
    "\uff15\007\uff15\011\uff15\017\uff15\020\uff15\021\uff15\022\uff15" +
    "\023\uff15\026\112\031\uff15\037\uff15\041\uff15\044\uff15\045" +
    "\uff15\051\uff15\052\uff15\053\uff15\055\uff15\056\uff15\111\uff15" +
    "\124\uff15\001\002\000\054\002\uff13\006\uff13\007\uff13\011" +
    "\uff13\017\uff13\020\uff13\021\uff13\022\uff13\023\uff13\031\uff13" +
    "\037\uff13\041\uff13\044\uff13\045\uff13\051\uff13\052\uff13\053" +
    "\uff13\055\uff13\056\uff13\111\uff13\124\uff13\001\002\000\056" +
    "\002\uff16\006\uff16\007\uff16\011\uff16\017\uff16\020\uff16\021" +
    "\uff16\022\uff16\023\uff16\026\112\031\uff16\037\uff16\041\uff16" +
    "\044\uff16\045\uff16\051\uff16\052\uff16\053\uff16\055\uff16\056" +
    "\uff16\111\uff16\124\uff16\001\002\000\054\002\uff14\006\uff14" +
    "\007\uff14\011\uff14\017\uff14\020\uff14\021\uff14\022\uff14\023" +
    "\uff14\031\uff14\037\uff14\041\uff14\044\uff14\045\uff14\051\uff14" +
    "\052\uff14\053\uff14\055\uff14\056\uff14\111\uff14\124\uff14\001" +
    "\002\000\004\011\u0147\001\002\000\004\060\u0148\001\002" +
    "\000\004\011\u0149\001\002\000\004\024\u014a\001\002\000" +
    "\004\011\u014b\001\002\000\004\025\u014c\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff17\006\uff17\007" +
    "\uff17\011\uff17\017\uff17\020\uff17\021\uff17\022\uff17\023\uff17" +
    "\031\uff17\037\uff17\041\uff17\044\uff17\045\uff17\051\uff17\052" +
    "\uff17\053\uff17\055\uff17\056\uff17\111\uff17\124\uff17\001\002" +
    "\000\004\023\u014f\001\002\000\004\026\112\001\002\000" +
    "\054\002\uff1b\006\uff1b\007\uff1b\011\uff1b\017\uff1b\020\uff1b" +
    "\021\uff1b\022\uff1b\023\uff1b\031\uff1b\037\uff1b\041\uff1b\044" +
    "\uff1b\045\uff1b\051\uff1b\052\uff1b\053\uff1b\055\uff1b\056\uff1b" +
    "\111\uff1b\124\uff1b\001\002\000\016\012\204\013\ufef4\016" +
    "\ufef4\023\ufef4\024\u0159\077\u015a\001\002\000\010\013\200" +
    "\016\u0153\023\201\001\002\000\004\015\u0155\001\002\000" +
    "\076\002\uffb8\006\uffb8\007\uffb8\011\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\026\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\037\uffb8\041\uffb8\044\uffb8\045\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\055\uffb8\056\uffb8\111\uffb8\115\uffb8\116\uffb8\117" +
    "\uffb8\120\uffb8\121\uffb8\122\uffb8\124\uffb8\001\002\000\004" +
    "\016\u0156\001\002\000\004\014\u0157\001\002\000\006\013" +
    "\200\023\201\001\002\000\076\002\uffb5\006\uffb5\007\uffb5" +
    "\011\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\026" +
    "\uffb5\031\uffb5\033\uffb5\034\uffb5\037\uffb5\041\uffb5\044\uffb5" +
    "\045\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\111" +
    "\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5" +
    "\124\uffb5\001\002\000\014\017\310\020\304\021\307\022" +
    "\302\025\u016c\001\002\000\006\004\u015b\100\u015c\001\002" +
    "\000\004\100\u015e\001\002\000\006\013\200\023\201\001" +
    "\002\000\054\002\uff03\006\uff03\007\uff03\011\uff03\017\uff03" +
    "\020\uff03\021\uff03\022\uff03\023\uff03\031\uff03\037\uff03\041" +
    "\uff03\044\uff03\045\uff03\051\uff03\052\uff03\053\uff03\055\uff03" +
    "\056\uff03\111\uff03\124\uff03\001\002\000\004\016\u015f\001" +
    "\002\000\004\015\u0160\001\002\000\004\101\u0161\001\002" +
    "\000\004\016\u0162\001\002\000\004\014\u0163\001\002\000" +
    "\006\012\u0168\016\u0167\001\002\000\004\102\u0165\001\002" +
    "\000\006\013\200\023\201\001\002\000\054\002\uff10\006" +
    "\uff10\007\uff10\011\uff10\017\uff10\020\uff10\021\uff10\022\uff10" +
    "\023\uff10\031\uff10\037\uff10\041\uff10\044\uff10\045\uff10\051" +
    "\uff10\052\uff10\053\uff10\055\uff10\056\uff10\111\uff10\124\uff10" +
    "\001\002\000\004\102\uff0a\001\002\000\004\016\u0169\001" +
    "\002\000\004\014\u0163\001\002\000\004\102\uff09\001\002" +
    "\000\004\025\u016f\001\002\000\004\023\100\001\002\000" +
    "\004\023\u016e\001\002\000\054\002\uff8c\006\uff8c\007\uff8c" +
    "\011\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\031" +
    "\uff8c\037\uff8c\041\uff8c\044\uff8c\045\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\055\uff8c\056\uff8c\111\uff8c\124\uff8c\001\002\000" +
    "\004\023\100\001\002\000\006\013\200\023\201\001\002" +
    "\000\054\002\uff90\006\uff90\007\uff90\011\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\031\uff90\037\uff90\041\uff90" +
    "\044\uff90\045\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056" +
    "\uff90\111\uff90\124\uff90\001\002\000\016\006\017\007\023" +
    "\026\u0174\041\025\055\056\056\033\001\002\000\004\026" +
    "\u01bc\001\002\000\022\033\u0175\034\u0176\115\u017e\116\u017d" +
    "\117\u0179\120\u017b\121\u0178\122\u0177\001\002\000\006\016" +
    "\u01af\023\u01b0\001\002\000\006\016\u01a2\023\u01a3\001\002" +
    "\000\004\023\uffdd\001\002\000\004\023\uffde\001\002\000" +
    "\004\023\uffd2\001\002\000\054\002\uffe8\006\uffe8\007\uffe8" +
    "\011\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\031" +
    "\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\055\uffe8\056\uffe8\111\uffe8\124\uffe8\001\002\000" +
    "\004\023\uffdf\001\002\000\064\002\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\031" +
    "\uffe9\034\u0176\037\uffe9\041\uffe9\044\uffe9\045\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\055\uffe9\056\uffe9\111\uffe9\120\u017b\121" +
    "\u0178\122\u0177\124\uffe9\001\002\000\004\023\uffd3\001\002" +
    "\000\004\023\uffd4\001\002\000\004\023\u019c\001\002\000" +
    "\004\023\u0181\001\002\000\004\026\u0182\001\002\000\004" +
    "\026\u0183\001\002\000\016\017\u0188\020\006\021\040\022" +
    "\007\041\025\124\036\001\002\000\004\011\173\001\002" +
    "\000\076\002\uffc9\006\uffc9\007\uffc9\011\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\026\u0199\031\uffc9\033\uffc9" +
    "\034\uffc9\037\uffc9\041\uffc9\044\uffc9\045\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\055\uffc9\056\uffc9\111\uffc9\115\uffc9\116\uffc9" +
    "\117\uffc9\120\uffc9\121\uffc9\122\uffc9\124\uffc9\001\002\000" +
    "\004\011\173\001\002\000\004\011\173\001\002\000\004" +
    "\016\u018d\001\002\000\064\002\uffd5\006\uffd5\007\uffd5\011" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\031\uffd5" +
    "\034\u0176\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\055\uffd5\056\uffd5\111\uffd5\120\u017b\121\u0178" +
    "\122\u0177\124\uffd5\001\002\000\074\002\uffc6\006\uffc6\007" +
    "\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\031\uffc6\033\uffc6\034\uffc6\037\uffc6\041\uffc6\044\uffc6\045" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\111\uffc6" +
    "\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6\124" +
    "\uffc6\001\002\000\004\011\173\001\002\000\054\002\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\031\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\111\uffd8\124" +
    "\uffd8\001\002\000\004\011\ufef9\001\002\000\010\013\200" +
    "\016\u018f\023\201\001\002\000\004\015\u0191\001\002\000" +
    "\076\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\026\uffad\031\uffad\033\uffad\034" +
    "\uffad\037\uffad\041\uffad\044\uffad\045\uffad\051\uffad\052\uffad" +
    "\053\uffad\055\uffad\056\uffad\111\uffad\115\uffad\116\uffad\117" +
    "\uffad\120\uffad\121\uffad\122\uffad\124\uffad\001\002\000\004" +
    "\016\u0192\001\002\000\012\004\u0193\005\u0197\010\u0195\014" +
    "\u0194\001\002\000\006\013\uffa9\023\uffa9\001\002\000\006" +
    "\013\uffa7\023\uffa7\001\002\000\006\013\uffa6\023\uffa6\001" +
    "\002\000\006\013\200\023\201\001\002\000\006\013\uffa8" +
    "\023\uffa8\001\002\000\076\002\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\026\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\037\uffaa\041\uffaa\044\uffaa\045" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa\111\uffaa" +
    "\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122\uffaa\124" +
    "\uffaa\001\002\000\076\002\uffc8\006\uffc8\007\uffc8\011\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\u019a\031" +
    "\uffc8\033\uffc8\034\uffc8\037\uffc8\041\uffc8\044\uffc8\045\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\111\uffc8\115" +
    "\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\124\uffc8" +
    "\001\002\000\016\017\u0188\020\006\021\040\022\007\041" +
    "\025\124\036\001\002\000\074\002\uffc7\006\uffc7\007\uffc7" +
    "\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\037\uffc7\041\uffc7\044\uffc7\045\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\111\uffc7\115" +
    "\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7\124\uffc7" +
    "\001\002\000\004\026\u019d\001\002\000\004\026\u019e\001" +
    "\002\000\016\017\u0188\020\006\021\040\022\007\041\025" +
    "\124\036\001\002\000\074\002\uffce\006\uffce\007\uffce\011" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\031\uffce" +
    "\033\u0175\034\uffce\037\uffce\041\uffce\044\uffce\045\uffce\051" +
    "\uffce\052\uffce\053\uffce\055\uffce\056\uffce\111\uffce\115\u017e" +
    "\116\u017d\117\u0179\120\uffce\121\uffce\122\uffce\124\uffce\001" +
    "\002\000\064\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\031\uffcd\034\uffcd\037" +
    "\uffcd\041\uffcd\044\uffcd\045\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\055\uffcd\056\uffcd\111\uffcd\120\uffcd\121\uffcd\122\uffcd\124" +
    "\uffcd\001\002\000\054\002\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\037" +
    "\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\055\uffe7\056\uffe7\111\uffe7\124\uffe7\001\002\000\010\120" +
    "\u017b\121\u0178\122\u0177\001\002\000\004\026\u01a4\001\002" +
    "\000\004\026\u01a5\001\002\000\016\017\u0188\020\006\021" +
    "\040\022\007\041\025\124\036\001\002\000\064\002\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\031\uffd6\034\u0176\037\uffd6\041\uffd6\044\uffd6" +
    "\045\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\111" +
    "\uffd6\120\u017b\121\u0178\122\u0177\124\uffd6\001\002\000\054" +
    "\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\031\uffd9\037\uffd9\041\uffd9\044\uffd9" +
    "\045\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\111" +
    "\uffd9\124\uffd9\001\002\000\004\023\u01a9\001\002\000\056" +
    "\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\026\u01aa\031\uffdc\037\uffdc\041\uffdc" +
    "\044\uffdc\045\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc\056" +
    "\uffdc\111\uffdc\124\uffdc\001\002\000\014\026\u01ac\034\u0176" +
    "\120\u017b\121\u0178\122\u0177\001\002\000\054\002\uffda\006" +
    "\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\031\uffda\037\uffda\041\uffda\044\uffda\045\uffda\051" +
    "\uffda\052\uffda\053\uffda\055\uffda\056\uffda\111\uffda\124\uffda" +
    "\001\002\000\016\017\u0188\020\006\021\040\022\007\041" +
    "\025\124\036\001\002\000\064\002\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\031" +
    "\uffdb\034\u0176\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\055\uffdb\056\uffdb\111\uffdb\120\u017b\121" +
    "\u0178\122\u0177\124\uffdb\001\002\000\054\002\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\031\uffd7\037\uffd7\041\uffd7\044\uffd7\045\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\055\uffd7\056\uffd7\111\uffd7\124\uffd7\001" +
    "\002\000\010\115\u017e\116\u017d\117\u0179\001\002\000\004" +
    "\026\u01b1\001\002\000\004\026\u01b2\001\002\000\016\017" +
    "\u0188\020\006\021\040\022\007\041\025\124\036\001\002" +
    "\000\074\002\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\031\uffcf\033\u0175\034\uffcf" +
    "\037\uffcf\041\uffcf\044\uffcf\045\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\055\uffcf\056\uffcf\111\uffcf\115\u017e\116\u017d\117\u0179" +
    "\120\uffcf\121\uffcf\122\uffcf\124\uffcf\001\002\000\064\002" +
    "\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\031\uffca\034\uffca\037\uffca\041\uffca\044" +
    "\uffca\045\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca" +
    "\111\uffca\120\uffca\121\uffca\122\uffca\124\uffca\001\002\000" +
    "\004\023\u01b6\001\002\000\066\002\uffd1\006\uffd1\007\uffd1" +
    "\011\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026" +
    "\u01b7\031\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111\uffd1\120" +
    "\uffd1\121\uffd1\122\uffd1\124\uffd1\001\002\000\014\026\u01b9" +
    "\033\u0175\115\u017e\116\u017d\117\u0179\001\002\000\064\002" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\031\uffd0\034\uffd0\037\uffd0\041\uffd0\044" +
    "\uffd0\045\uffd0\051\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0" +
    "\111\uffd0\120\uffd0\121\uffd0\122\uffd0\124\uffd0\001\002\000" +
    "\016\017\u0188\020\006\021\040\022\007\041\025\124\036" +
    "\001\002\000\074\002\uffcc\006\uffcc\007\uffcc\011\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\031\uffcc\033\u0175" +
    "\034\uffcc\037\uffcc\041\uffcc\044\uffcc\045\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\055\uffcc\056\uffcc\111\uffcc\115\u017e\116\u017d" +
    "\117\u0179\120\uffcc\121\uffcc\122\uffcc\124\uffcc\001\002\000" +
    "\064\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\031\uffcb\034\uffcb\037\uffcb\041" +
    "\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb\053\uffcb\055\uffcb" +
    "\056\uffcb\111\uffcb\120\uffcb\121\uffcb\122\uffcb\124\uffcb\001" +
    "\002\000\022\033\u0175\034\u0176\115\u017e\116\u017d\117\u0179" +
    "\120\u017b\121\u0178\122\u0177\001\002\000\054\002\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\031\uffe5\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\111\uffe5\124\uffe5" +
    "\001\002\000\064\002\uffe6\006\uffe6\007\uffe6\011\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\031\uffe6\034\u0176" +
    "\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\055\uffe6\056\uffe6\111\uffe6\120\u017b\121\u0178\122\u0177" +
    "\124\uffe6\001\002\000\054\002\uffe4\006\uffe4\007\uffe4\011" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\031\uffe4" +
    "\037\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\055\uffe4\056\uffe4\111\uffe4\124\uffe4\001\002\000\004" +
    "\002\ufffe\001\002\000\020\011\ufef8\066\ufef8\070\ufef8\071" +
    "\ufef8\072\ufef8\073\ufef8\074\ufef8\001\002\000\012\017\u0188" +
    "\020\006\021\040\022\007\001\002\000\004\011\173\001" +
    "\002\000\004\011\173\001\002\000\004\011\173\001\002" +
    "\000\004\011\173\001\002\000\010\013\200\016\u01c8\023" +
    "\201\001\002\000\004\015\u01ca\001\002\000\076\002\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\026\uffb7\031\uffb7\033\uffb7\034\uffb7\037\uffb7" +
    "\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053\uffb7\055" +
    "\uffb7\056\uffb7\111\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7" +
    "\121\uffb7\122\uffb7\124\uffb7\001\002\000\004\016\u01cb\001" +
    "\002\000\004\014\u01cc\001\002\000\006\013\200\023\201" +
    "\001\002\000\076\002\uffb6\006\uffb6\007\uffb6\011\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\037\uffb6\041\uffb6\044\uffb6\045\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\111\uffb6\115\uffb6" +
    "\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\124\uffb6\001" +
    "\002\000\010\013\200\016\u01cf\023\201\001\002\000\004" +
    "\015\u01d1\001\002\000\076\002\uffbf\006\uffbf\007\uffbf\011" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\037\uffbf\041\uffbf\044\uffbf\045" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\111\uffbf" +
    "\115\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf\124" +
    "\uffbf\001\002\000\004\016\u01d2\001\002\000\012\004\u0117" +
    "\005\u011a\010\u0119\014\u0118\001\002\000\006\013\200\023" +
    "\201\001\002\000\076\002\uffbe\006\uffbe\007\uffbe\011\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\031" +
    "\uffbe\033\uffbe\034\uffbe\037\uffbe\041\uffbe\044\uffbe\045\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\111\uffbe\115" +
    "\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe\124\uffbe" +
    "\001\002\000\010\013\200\016\u01d6\023\201\001\002\000" +
    "\004\015\u01d8\001\002\000\076\002\uffac\006\uffac\007\uffac" +
    "\011\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\026" +
    "\uffac\031\uffac\033\uffac\034\uffac\037\uffac\041\uffac\044\uffac" +
    "\045\uffac\051\uffac\052\uffac\053\uffac\055\uffac\056\uffac\111" +
    "\uffac\115\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac" +
    "\124\uffac\001\002\000\004\016\u01d9\001\002\000\012\004" +
    "\u0193\005\u0197\010\u0195\014\u0194\001\002\000\006\013\200" +
    "\023\201\001\002\000\076\002\uffab\006\uffab\007\uffab\011" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab" +
    "\031\uffab\033\uffab\034\uffab\037\uffab\041\uffab\044\uffab\045" +
    "\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab\111\uffab" +
    "\115\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab\124" +
    "\uffab\001\002\000\010\013\200\016\u01dd\023\201\001\002" +
    "\000\004\015\u01df\001\002\000\076\002\uffb3\006\uffb3\007" +
    "\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\026\uffb3\031\uffb3\033\uffb3\034\uffb3\037\uffb3\041\uffb3\044" +
    "\uffb3\045\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3" +
    "\111\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\122" +
    "\uffb3\124\uffb3\001\002\000\004\016\u01e0\001\002\000\010" +
    "\004\272\005\275\010\273\001\002\000\006\013\200\023" +
    "\201\001\002\000\076\002\uffb2\006\uffb2\007\uffb2\011\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\037\uffb2\041\uffb2\044\uffb2\045\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\111\uffb2\115" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2\124\uffb2" +
    "\001\002\000\004\025\u01e4\001\002\000\004\023\u01e5\001" +
    "\002\000\004\026\112\001\002\000\054\002\uff19\006\uff19" +
    "\007\uff19\011\uff19\017\uff19\020\uff19\021\uff19\022\uff19\023" +
    "\uff19\031\uff19\037\uff19\041\uff19\044\uff19\045\uff19\051\uff19" +
    "\052\uff19\053\uff19\055\uff19\056\uff19\111\uff19\124\uff19\001" +
    "\002\000\004\052\u01e8\001\002\000\004\011\u01e9\001\002" +
    "\000\006\013\200\023\201\001\002\000\054\002\uff18\006" +
    "\uff18\007\uff18\011\uff18\017\uff18\020\uff18\021\uff18\022\uff18" +
    "\023\uff18\031\uff18\037\uff18\041\uff18\044\uff18\045\uff18\051" +
    "\uff18\052\uff18\053\uff18\055\uff18\056\uff18\111\uff18\124\uff18" +
    "\001\002\000\060\002\ufef2\006\ufef2\007\ufef2\011\ufef2\017" +
    "\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\026\ufef2\031\ufef2" +
    "\037\ufef2\041\ufef2\044\ufef2\045\ufef2\051\ufef2\052\ufef2\053" +
    "\ufef2\055\ufef2\056\ufef2\106\u01ee\111\ufef2\124\ufef2\001\002" +
    "\000\056\002\uff94\006\uff94\007\uff94\011\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\026\uff94\031\uff94\037\uff94" +
    "\041\uff94\044\uff94\045\uff94\051\uff94\052\uff94\053\uff94\055" +
    "\uff94\056\uff94\111\uff94\124\uff94\001\002\000\004\105\u01f2" +
    "\001\002\000\006\013\200\023\u01ef\001\002\000\006\105" +
    "\ufef2\106\u01ee\001\002\000\004\105\uff93\001\002\000\004" +
    "\105\uff92\001\002\000\006\013\200\023\201\001\002\000" +
    "\056\002\uff95\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95" +
    "\021\uff95\022\uff95\023\uff95\026\uff95\031\uff95\037\uff95\041" +
    "\uff95\044\uff95\045\uff95\051\uff95\052\uff95\053\uff95\055\uff95" +
    "\056\uff95\111\uff95\124\uff95\001\002\000\006\011\u01f6\017" +
    "\u01f7\001\002\000\004\015\u021c\001\002\000\004\016\u021b" +
    "\001\002\000\004\016\u0214\001\002\000\004\046\u01f9\001" +
    "\002\000\004\016\u01fa\001\002\000\006\004\u01fb\011\u01fc" +
    "\001\002\000\010\013\uff45\016\uff45\023\uff45\001\002\000" +
    "\010\013\uff46\016\uff46\023\uff46\001\002\000\004\016\u01fe" +
    "\001\002\000\006\030\u0200\065\u01ff\001\002\000\004\016" +
    "\uff4e\001\002\000\004\016\uff4d\001\002\000\004\016\u0202" +
    "\001\002\000\006\004\u01fb\011\u01fc\001\002\000\004\016" +
    "\u0204\001\002\000\010\047\u0208\050\u0206\111\u0207\001\002" +
    "\000\004\016\u020e\001\002\000\004\016\uff4b\001\002\000" +
    "\006\013\200\023\201\001\002\000\004\016\uff4c\001\002" +
    "\000\006\026\112\111\012\001\002\000\054\002\uff51\006" +
    "\uff51\007\uff51\011\uff51\017\uff51\020\uff51\021\uff51\022\uff51" +
    "\023\uff51\031\uff51\037\uff51\041\uff51\044\uff51\045\uff51\051" +
    "\uff51\052\uff51\053\uff51\055\uff51\056\uff51\111\uff51\124\uff51" +
    "\001\002\000\004\006\017\001\002\000\054\002\uff4f\006" +
    "\uff4f\007\uff4f\011\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f" +
    "\023\uff4f\031\uff4f\037\uff4f\041\uff4f\044\uff4f\045\uff4f\051" +
    "\uff4f\052\uff4f\053\uff4f\055\uff4f\056\uff4f\111\uff4f\124\uff4f" +
    "\001\002\000\054\002\uff50\006\uff50\007\uff50\011\uff50\017" +
    "\uff50\020\uff50\021\uff50\022\uff50\023\uff50\031\uff50\037\uff50" +
    "\041\uff50\044\uff50\045\uff50\051\uff50\052\uff50\053\uff50\055" +
    "\uff50\056\uff50\111\uff50\124\uff50\001\002\000\004\004\u020f" +
    "\001\002\000\004\016\u0210\001\002\000\004\111\u0211\001" +
    "\002\000\006\013\200\023\201\001\002\000\006\026\112" +
    "\111\012\001\002\000\054\002\uff52\006\uff52\007\uff52\011" +
    "\uff52\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\031\uff52" +
    "\037\uff52\041\uff52\044\uff52\045\uff52\051\uff52\052\uff52\053" +
    "\uff52\055\uff52\056\uff52\111\uff52\124\uff52\001\002\000\004" +
    "\011\u0215\001\002\000\004\016\u0216\001\002\000\004\015" +
    "\u0217\001\002\000\004\016\u0218\001\002\000\004\004\u0219" +
    "\001\002\000\004\016\u021a\001\002\000\004\046\uff49\001" +
    "\002\000\006\015\uff47\046\uff4a\001\002\000\004\016\u021d" +
    "\001\002\000\004\004\u021e\001\002\000\004\016\u021f\001" +
    "\002\000\004\046\uff48\001\002\000\004\031\u0221\001\002" +
    "\000\006\016\u0222\023\uffe3\001\002\000\004\103\u0223\001" +
    "\002\000\004\016\u0224\001\002\000\004\031\u0225\001\002" +
    "\000\004\023\uffe2\001\002\000\006\004\u0227\011\u0228\001" +
    "\002\000\004\016\u023d\001\002\000\004\016\u0239\001\002" +
    "\000\004\016\u022a\001\002\000\004\042\u022b\001\002\000" +
    "\004\023\100\001\002\000\006\013\200\023\201\001\002" +
    "\000\100\002\uff58\006\uff58\007\uff58\011\uff58\017\uff58\020" +
    "\uff58\021\uff58\022\uff58\023\uff58\026\uff58\031\uff58\033\uff58" +
    "\034\uff58\037\uff58\041\uff58\043\u022e\044\uff58\045\uff58\051" +
    "\uff58\052\uff58\053\uff58\055\uff58\056\uff58\111\uff58\115\uff58" +
    "\116\uff58\117\uff58\120\uff58\121\uff58\122\uff58\124\uff58\001" +
    "\002\000\006\016\u0230\023\100\001\002\000\076\002\uff59" +
    "\006\uff59\007\uff59\011\uff59\017\uff59\020\uff59\021\uff59\022" +
    "\uff59\023\uff59\026\uff59\031\uff59\033\uff59\034\uff59\037\uff59" +
    "\041\uff59\044\uff59\045\uff59\051\uff59\052\uff59\053\uff59\055" +
    "\uff59\056\uff59\111\uff59\115\uff59\116\uff59\117\uff59\120\uff59" +
    "\121\uff59\122\uff59\124\uff59\001\002\000\006\004\u0227\011" +
    "\u0228\001\002\000\006\013\200\023\201\001\002\000\076" +
    "\002\uff55\006\uff55\007\uff55\011\uff55\017\uff55\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\026\uff55\031\uff55\033\uff55\034\uff55" +
    "\037\uff55\041\uff55\044\uff55\045\uff55\051\uff55\052\uff55\053" +
    "\uff55\055\uff55\056\uff55\111\uff55\115\uff55\116\uff55\117\uff55" +
    "\120\uff55\121\uff55\122\uff55\124\uff55\001\002\000\004\016" +
    "\u0234\001\002\000\004\042\u0235\001\002\000\004\023\100" +
    "\001\002\000\006\013\200\023\201\001\002\000\100\002" +
    "\uff56\006\uff56\007\uff56\011\uff56\017\uff56\020\uff56\021\uff56" +
    "\022\uff56\023\uff56\026\uff56\031\uff56\033\uff56\034\uff56\037" +
    "\uff56\041\uff56\043\u022e\044\uff56\045\uff56\051\uff56\052\uff56" +
    "\053\uff56\055\uff56\056\uff56\111\uff56\115\uff56\116\uff56\117" +
    "\uff56\120\uff56\121\uff56\122\uff56\124\uff56\001\002\000\076" +
    "\002\uff57\006\uff57\007\uff57\011\uff57\017\uff57\020\uff57\021" +
    "\uff57\022\uff57\023\uff57\026\uff57\031\uff57\033\uff57\034\uff57" +
    "\037\uff57\041\uff57\044\uff57\045\uff57\051\uff57\052\uff57\053" +
    "\uff57\055\uff57\056\uff57\111\uff57\115\uff57\116\uff57\117\uff57" +
    "\120\uff57\121\uff57\122\uff57\124\uff57\001\002\000\016\054" +
    "\132\107\130\110\126\112\125\113\127\114\133\001\002" +
    "\000\004\016\u023b\001\002\000\004\004\u023c\001\002\000" +
    "\004\016\uff54\001\002\000\016\054\132\107\130\110\126" +
    "\112\125\113\127\114\133\001\002\000\004\016\u023f\001" +
    "\002\000\004\011\u0240\001\002\000\004\016\u0241\001\002" +
    "\000\004\015\u0242\001\002\000\004\016\u0243\001\002\000" +
    "\004\011\u0244\001\002\000\004\016\uff53\001\002\000\004" +
    "\024\uff1c\001\002\000\004\024\uff1d\001\002\000\004\024" +
    "\uff1e\001\002\000\004\024\uff1f\001\002\000\004\024\uff20" +
    "\001\002\000\004\024\u026b\001\002\000\004\024\u0266\001" +
    "\002\000\016\012\204\013\ufef4\016\ufef4\023\ufef4\024\u024d" +
    "\077\u024e\001\002\000\014\017\310\020\304\021\307\022" +
    "\302\025\u0260\001\002\000\006\004\u024f\100\u0250\001\002" +
    "\000\004\100\u0252\001\002\000\006\013\200\023\201\001" +
    "\002\000\054\002\uff05\006\uff05\007\uff05\011\uff05\017\uff05" +
    "\020\uff05\021\uff05\022\uff05\023\uff05\031\uff05\037\uff05\041" +
    "\uff05\044\uff05\045\uff05\051\uff05\052\uff05\053\uff05\055\uff05" +
    "\056\uff05\111\uff05\124\uff05\001\002\000\004\016\u0253\001" +
    "\002\000\004\015\u0254\001\002\000\004\101\u0255\001\002" +
    "\000\004\016\u0256\001\002\000\004\005\u0258\001\002\000" +
    "\004\102\u025d\001\002\000\006\012\u025a\016\u0259\001\002" +
    "\000\004\102\uff0c\001\002\000\004\016\u025b\001\002\000" +
    "\004\005\u0258\001\002\000\004\102\uff0b\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff11\006\uff11\007" +
    "\uff11\011\uff11\017\uff11\020\uff11\021\uff11\022\uff11\023\uff11" +
    "\031\uff11\037\uff11\041\uff11\044\uff11\045\uff11\051\uff11\052" +
    "\uff11\053\uff11\055\uff11\056\uff11\111\uff11\124\uff11\001\002" +
    "\000\004\025\u0263\001\002\000\004\023\100\001\002\000" +
    "\004\023\u0262\001\002\000\054\002\uff8a\006\uff8a\007\uff8a" +
    "\011\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\031" +
    "\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\111\uff8a\124\uff8a\001\002\000" +
    "\004\023\100\001\002\000\006\013\200\023\201\001\002" +
    "\000\054\002\uff8e\006\uff8e\007\uff8e\011\uff8e\017\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\031\uff8e\037\uff8e\041\uff8e" +
    "\044\uff8e\045\uff8e\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056" +
    "\uff8e\111\uff8e\124\uff8e\001\002\000\004\021\040\001\002" +
    "\000\004\011\u0268\001\002\000\004\025\u0269\001\002\000" +
    "\006\013\200\023\201\001\002\000\054\002\uff22\006\uff22" +
    "\007\uff22\011\uff22\017\uff22\020\uff22\021\uff22\022\uff22\023" +
    "\uff22\031\uff22\037\uff22\041\uff22\044\uff22\045\uff22\051\uff22" +
    "\052\uff22\053\uff22\055\uff22\056\uff22\111\uff22\124\uff22\001" +
    "\002\000\004\022\007\001\002\000\004\011\u026d\001\002" +
    "\000\004\025\u026e\001\002\000\006\013\200\023\201\001" +
    "\002\000\054\002\uff24\006\uff24\007\uff24\011\uff24\017\uff24" +
    "\020\uff24\021\uff24\022\uff24\023\uff24\031\uff24\037\uff24\041" +
    "\uff24\044\uff24\045\uff24\051\uff24\052\uff24\053\uff24\055\uff24" +
    "\056\uff24\111\uff24\124\uff24\001\002\000\004\011\u0271\001" +
    "\002\000\006\013\200\023\201\001\002\000\060\002\uff97" +
    "\006\uff97\007\uff97\011\uff97\013\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\026\uff97\031\uff97\037\uff97\041\uff97" +
    "\044\uff97\045\uff97\051\uff97\052\uff97\053\uff97\055\uff97\056" +
    "\uff97\111\uff97\124\uff97\001\002\000\004\004\u02ce\001\002" +
    "\000\004\015\u02b3\001\002\000\004\011\u02af\001\002\000" +
    "\014\004\u0278\011\u0279\031\u027d\110\u0277\125\u027a\001\002" +
    "\000\006\004\u02ad\011\u02ae\001\002\000\024\013\uff31\023" +
    "\uff31\054\132\107\130\110\126\112\125\113\127\114\133" +
    "\126\u02ab\001\002\000\030\013\uff32\023\uff32\054\132\107" +
    "\130\110\126\112\125\113\127\114\133\126\u02a9\127\u028f" +
    "\130\u028e\001\002\000\006\004\u02a5\011\u02a6\001\002\000" +
    "\006\013\uff30\023\uff30\001\002\000\006\013\200\023\201" +
    "\001\002\000\004\024\u027e\001\002\000\004\025\u027f\001" +
    "\002\000\006\013\200\023\201\001\002\000\060\002\uff3e" +
    "\006\uff3e\007\uff3e\011\uff3e\017\uff3e\020\uff3e\021\uff3e\022" +
    "\uff3e\023\uff3e\026\112\031\uff3e\037\uff3e\041\uff3e\044\uff3e" +
    "\045\uff3e\046\uff3e\051\uff3e\052\uff3e\053\uff3e\055\uff3e\056" +
    "\uff3e\111\uff3e\124\uff3e\001\002\000\004\011\u0282\001\002" +
    "\000\010\015\u0276\016\u0284\060\u0285\001\002\000\056\002" +
    "\uff3a\006\uff3a\007\uff3a\011\uff3a\017\uff3a\020\uff3a\021\uff3a" +
    "\022\uff3a\023\uff3a\031\uff3a\037\uff3a\041\uff3a\044\uff3a\045" +
    "\uff3a\046\uff3a\051\uff3a\052\uff3a\053\uff3a\055\uff3a\056\uff3a" +
    "\111\uff3a\124\uff3a\001\002\000\004\015\u029c\001\002\000" +
    "\004\011\u0286\001\002\000\004\015\u0287\001\002\000\010" +
    "\004\u0288\011\u0289\110\u0277\001\002\000\022\013\uff31\023" +
    "\uff31\054\132\107\130\110\126\112\125\113\127\114\133" +
    "\001\002\000\026\013\uff32\023\uff32\054\132\107\130\110" +
    "\126\112\125\113\127\114\133\127\u028f\130\u028e\001\002" +
    "\000\006\013\200\023\201\001\002\000\060\002\uff41\006" +
    "\uff41\007\uff41\011\uff41\017\uff41\020\uff41\021\uff41\022\uff41" +
    "\023\uff41\026\112\031\uff41\037\uff41\041\uff41\044\uff41\045" +
    "\uff41\046\uff41\051\uff41\052\uff41\053\uff41\055\uff41\056\uff41" +
    "\111\uff41\124\uff41\001\002\000\004\011\u0282\001\002\000" +
    "\056\002\uff3c\006\uff3c\007\uff3c\011\uff3c\017\uff3c\020\uff3c" +
    "\021\uff3c\022\uff3c\023\uff3c\031\uff3c\037\uff3c\041\uff3c\044" +
    "\uff3c\045\uff3c\046\uff3c\051\uff3c\052\uff3c\053\uff3c\055\uff3c" +
    "\056\uff3c\111\uff3c\124\uff3c\001\002\000\004\011\u0296\001" +
    "\002\000\004\011\u0293\001\002\000\006\004\u0291\011\u0292" +
    "\001\002\000\006\013\uff35\023\uff35\001\002\000\006\013" +
    "\uff37\023\uff37\001\002\000\010\013\uff2d\023\uff2d\130\u0294" +
    "\001\002\000\004\011\u0295\001\002\000\006\013\uff2f\023" +
    "\uff2f\001\002\000\010\013\uff2c\023\uff2c\127\u0297\001\002" +
    "\000\004\011\u0298\001\002\000\006\013\uff2e\023\uff2e\001" +
    "\002\000\006\004\u029a\011\u029b\001\002\000\006\013\uff38" +
    "\023\uff38\001\002\000\006\013\uff36\023\uff36\001\002\000" +
    "\004\016\u029d\001\002\000\010\004\u0288\011\u0289\110\u0277" +
    "\001\002\000\006\013\200\023\201\001\002\000\060\002" +
    "\uff3f\006\uff3f\007\uff3f\011\uff3f\017\uff3f\020\uff3f\021\uff3f" +
    "\022\uff3f\023\uff3f\026\112\031\uff3f\037\uff3f\041\uff3f\044" +
    "\uff3f\045\uff3f\046\uff3f\051\uff3f\052\uff3f\053\uff3f\055\uff3f" +
    "\056\uff3f\111\uff3f\124\uff3f\001\002\000\004\011\u0282\001" +
    "\002\000\056\002\uff3d\006\uff3d\007\uff3d\011\uff3d\017\uff3d" +
    "\020\uff3d\021\uff3d\022\uff3d\023\uff3d\031\uff3d\037\uff3d\041" +
    "\uff3d\044\uff3d\045\uff3d\046\uff3d\051\uff3d\052\uff3d\053\uff3d" +
    "\055\uff3d\056\uff3d\111\uff3d\124\uff3d\001\002\000\060\002" +
    "\uff40\006\uff40\007\uff40\011\uff40\017\uff40\020\uff40\021\uff40" +
    "\022\uff40\023\uff40\026\112\031\uff40\037\uff40\041\uff40\044" +
    "\uff40\045\uff40\046\uff40\051\uff40\052\uff40\053\uff40\055\uff40" +
    "\056\uff40\111\uff40\124\uff40\001\002\000\004\011\u0282\001" +
    "\002\000\056\002\uff3b\006\uff3b\007\uff3b\011\uff3b\017\uff3b" +
    "\020\uff3b\021\uff3b\022\uff3b\023\uff3b\031\uff3b\037\uff3b\041" +
    "\uff3b\044\uff3b\045\uff3b\046\uff3b\051\uff3b\052\uff3b\053\uff3b" +
    "\055\uff3b\056\uff3b\111\uff3b\124\uff3b\001\002\000\006\013" +
    "\200\023\201\001\002\000\006\013\200\023\201\001\002" +
    "\000\056\002\ufefd\006\ufefd\007\ufefd\011\ufefd\017\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\023\ufefd\031\ufefd\037\ufefd\041\ufefd" +
    "\044\ufefd\045\ufefd\046\ufefd\051\ufefd\052\ufefd\053\ufefd\055" +
    "\ufefd\056\ufefd\111\ufefd\124\ufefd\001\002\000\056\002\ufefc" +
    "\006\ufefc\007\ufefc\011\ufefc\017\ufefc\020\ufefc\021\ufefc\022" +
    "\ufefc\023\ufefc\031\ufefc\037\ufefc\041\ufefc\044\ufefc\045\ufefc" +
    "\046\ufefc\051\ufefc\052\ufefc\053\ufefc\055\ufefc\056\ufefc\111" +
    "\ufefc\124\ufefc\001\002\000\006\013\200\023\201\001\002" +
    "\000\056\002\ufefb\006\ufefb\007\ufefb\011\ufefb\017\ufefb\020" +
    "\ufefb\021\ufefb\022\ufefb\023\ufefb\031\ufefb\037\ufefb\041\ufefb" +
    "\044\ufefb\045\ufefb\046\ufefb\051\ufefb\052\ufefb\053\ufefb\055" +
    "\ufefb\056\ufefb\111\ufefb\124\ufefb\001\002\000\006\013\200" +
    "\023\201\001\002\000\056\002\ufefa\006\ufefa\007\ufefa\011" +
    "\ufefa\017\ufefa\020\ufefa\021\ufefa\022\ufefa\023\ufefa\031\ufefa" +
    "\037\ufefa\041\ufefa\044\ufefa\045\ufefa\046\ufefa\051\ufefa\052" +
    "\ufefa\053\ufefa\055\ufefa\056\ufefa\111\ufefa\124\ufefa\001\002" +
    "\000\006\013\uff33\023\uff33\001\002\000\006\013\uff34\023" +
    "\uff34\001\002\000\006\015\u0287\024\u02b0\001\002\000\004" +
    "\025\u02b1\001\002\000\006\013\200\023\201\001\002\000" +
    "\054\002\uff5f\006\uff5f\007\uff5f\011\uff5f\017\uff5f\020\uff5f" +
    "\021\uff5f\022\uff5f\023\uff5f\031\uff5f\037\uff5f\041\uff5f\044" +
    "\uff5f\045\uff5f\051\uff5f\052\uff5f\053\uff5f\055\uff5f\056\uff5f" +
    "\111\uff5f\124\uff5f\001\002\000\004\016\u02b4\001\002\000" +
    "\012\004\u0288\011\u0289\057\u02b5\110\u0277\001\002\000\014" +
    "\017\u02b6\020\u02b7\021\u02b9\022\u02b8\031\u02ba\001\002\000" +
    "\004\077\u02ca\001\002\000\004\077\u02c6\001\002\000\004" +
    "\077\u02c2\001\002\000\004\077\u02be\001\002\000\004\024" +
    "\u02bb\001\002\000\004\025\u02bc\001\002\000\006\013\200" +
    "\023\201\001\002\000\054\002\uff60\006\uff60\007\uff60\011" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\031\uff60" +
    "\037\uff60\041\uff60\044\uff60\045\uff60\051\uff60\052\uff60\053" +
    "\uff60\055\uff60\056\uff60\111\uff60\124\uff60\001\002\000\004" +
    "\004\u02bf\001\002\000\004\100\u02c0\001\002\000\006\013" +
    "\200\023\201\001\002\000\054\002\ufeff\006\ufeff\007\ufeff" +
    "\011\ufeff\017\ufeff\020\ufeff\021\ufeff\022\ufeff\023\ufeff\031" +
    "\ufeff\037\ufeff\041\ufeff\044\ufeff\045\ufeff\051\ufeff\052\ufeff" +
    "\053\ufeff\055\ufeff\056\ufeff\111\ufeff\124\ufeff\001\002\000" +
    "\004\004\u02c3\001\002\000\004\100\u02c4\001\002\000\006" +
    "\013\200\023\201\001\002\000\054\002\uff00\006\uff00\007" +
    "\uff00\011\uff00\017\uff00\020\uff00\021\uff00\022\uff00\023\uff00" +
    "\031\uff00\037\uff00\041\uff00\044\uff00\045\uff00\051\uff00\052" +
    "\uff00\053\uff00\055\uff00\056\uff00\111\uff00\124\uff00\001\002" +
    "\000\004\004\u02c7\001\002\000\004\100\u02c8\001\002\000" +
    "\006\013\200\023\201\001\002\000\054\002\ufefe\006\ufefe" +
    "\007\ufefe\011\ufefe\017\ufefe\020\ufefe\021\ufefe\022\ufefe\023" +
    "\ufefe\031\ufefe\037\ufefe\041\ufefe\044\ufefe\045\ufefe\051\ufefe" +
    "\052\ufefe\053\ufefe\055\ufefe\056\ufefe\111\ufefe\124\ufefe\001" +
    "\002\000\004\004\u02cb\001\002\000\004\100\u02cc\001\002" +
    "\000\006\013\200\023\201\001\002\000\054\002\uff01\006" +
    "\uff01\007\uff01\011\uff01\017\uff01\020\uff01\021\uff01\022\uff01" +
    "\023\uff01\031\uff01\037\uff01\041\uff01\044\uff01\045\uff01\051" +
    "\uff01\052\uff01\053\uff01\055\uff01\056\uff01\111\uff01\124\uff01" +
    "\001\002\000\004\100\u02cf\001\002\000\004\016\u02d0\001" +
    "\002\000\004\015\u02d1\001\002\000\004\016\u02d2\001\002" +
    "\000\012\004\167\005\176\010\172\014\170\001\002\000" +
    "\006\013\200\023\201\001\002\000\054\002\uff02\006\uff02" +
    "\007\uff02\011\uff02\017\uff02\020\uff02\021\uff02\022\uff02\023" +
    "\uff02\031\uff02\037\uff02\041\uff02\044\uff02\045\uff02\051\uff02" +
    "\052\uff02\053\uff02\055\uff02\056\uff02\111\uff02\124\uff02\001" +
    "\002\000\012\004\u02d6\005\u02da\011\u02d9\014\u02d7\001\002" +
    "\000\010\012\u02ec\013\uff9c\023\uff9c\001\002\000\010\012" +
    "\u02e9\013\uff9d\023\uff9d\001\002\000\006\013\200\023\201" +
    "\001\002\000\012\012\u02df\013\uff9a\023\uff9a\060\u02de\001" +
    "\002\000\010\012\u02db\013\uff9b\023\uff9b\001\002\000\004" +
    "\016\u02dc\001\002\000\012\004\u02d6\005\u02da\011\u02d9\014" +
    "\u02d7\001\002\000\006\013\uffa0\023\uffa0\001\002\000\004" +
    "\011\u02e2\001\002\000\004\016\u02e0\001\002\000\012\004" +
    "\u02d6\005\u02da\011\u02d9\014\u02d7\001\002\000\006\013\uff9f" +
    "\023\uff9f\001\002\000\010\013\uff99\023\uff99\024\u02e3\001" +
    "\002\000\004\025\u02e4\001\002\000\010\012\u02e5\013\uff98" +
    "\023\uff98\001\002\000\004\016\u02e6\001\002\000\012\004" +
    "\u02d6\005\u02da\011\u02d9\014\u02d7\001\002\000\006\013\uff9e" +
    "\023\uff9e\001\002\000\060\002\uffa3\006\uffa3\007\uffa3\011" +
    "\uffa3\013\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\026\uffa3\031\uffa3\037\uffa3\041\uffa3\044\uffa3\045\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\111\uffa3\124\uffa3" +
    "\001\002\000\004\016\u02ea\001\002\000\012\004\u02d6\005" +
    "\u02da\011\u02d9\014\u02d7\001\002\000\006\013\uffa2\023\uffa2" +
    "\001\002\000\004\016\u02ed\001\002\000\012\004\u02d6\005" +
    "\u02da\011\u02d9\014\u02d7\001\002\000\006\013\uffa1\023\uffa1" +
    "\001\002\000\004\123\u02f0\001\002\000\004\023\u02f1\001" +
    "\002\000\054\002\uffc5\006\uffc5\007\uffc5\011\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\031\uffc5\037\uffc5\041" +
    "\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\111\uffc5\124\uffc5\001\002\000\006\055\056\056" +
    "\033\001\002\000\010\026\112\055\056\056\033\001\002" +
    "\000\004\026\112\001\002\000\004\011\u0282\001\002\000" +
    "\004\046\u02f7\001\002\000\004\016\u02f8\001\002\000\006" +
    "\004\u01fb\011\u01fc\001\002\000\004\016\u02fa\001\002\000" +
    "\006\030\u0200\065\u01ff\001\002\000\004\016\u02fc\001\002" +
    "\000\006\004\u01fb\011\u01fc\001\002\000\006\013\200\023" +
    "\201\001\002\000\054\002\uff44\006\uff44\007\uff44\011\uff44" +
    "\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44\031\uff44\037" +
    "\uff44\041\uff44\044\uff44\045\uff44\051\uff44\052\uff44\053\uff44" +
    "\055\uff44\056\uff44\111\uff44\124\uff44\001\002\000\004\011" +
    "\u0282\001\002\000\004\046\u0301\001\002\000\004\016\u0302" +
    "\001\002\000\006\004\u01fb\011\u01fc\001\002\000\004\016" +
    "\u0304\001\002\000\006\030\u0200\065\u01ff\001\002\000\004" +
    "\016\u0306\001\002\000\006\004\u01fb\011\u01fc\001\002\000" +
    "\006\013\200\023\201\001\002\000\054\002\uff42\006\uff42" +
    "\007\uff42\011\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\031\uff42\037\uff42\041\uff42\044\uff42\045\uff42\051\uff42" +
    "\052\uff42\053\uff42\055\uff42\056\uff42\111\uff42\124\uff42\001" +
    "\002\000\004\026\112\001\002\000\004\011\u0282\001\002" +
    "\000\004\046\u030c\001\002\000\004\016\u030d\001\002\000" +
    "\006\004\u01fb\011\u01fc\001\002\000\004\016\u030f\001\002" +
    "\000\006\030\u0200\065\u01ff\001\002\000\004\016\u0311\001" +
    "\002\000\006\004\u01fb\011\u01fc\001\002\000\006\013\200" +
    "\023\201\001\002\000\054\002\uff43\006\uff43\007\uff43\011" +
    "\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\031\uff43" +
    "\037\uff43\041\uff43\044\uff43\045\uff43\051\uff43\052\uff43\053" +
    "\uff43\055\uff43\056\uff43\111\uff43\124\uff43\001\002\000\004" +
    "\002\000\001\002\000\004\011\ufef6\001\002\000\006\011" +
    "\ufef7\067\ufef7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0314\000\100\002\010\004\065\005\046\006\050\007" +
    "\007\010\013\011\044\015\047\016\020\017\036\022\012" +
    "\031\051\032\040\035\042\042\014\046\017\053\041\055" +
    "\043\056\054\057\023\060\052\061\061\071\030\073\056" +
    "\076\025\105\060\106\026\112\062\116\045\117\034\134" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u018d\036\u024a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u01eb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\002\u01bf\004\065" +
    "\005\046\006\050\007\007\010\013\011\044\015\047\016" +
    "\020\017\036\022\012\031\051\032\040\035\042\042\014" +
    "\046\017\053\041\055\043\056\054\057\023\060\052\061" +
    "\061\071\030\073\056\076\025\105\060\106\026\112\062" +
    "\116\045\117\034\134\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0151\001\001\000" +
    "\002\001\001\000\004\012\u010a\001\001\000\004\013\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\002\066\004\065\005" +
    "\046\006\050\007\007\010\013\011\044\015\047\016\020" +
    "\017\036\022\012\031\051\032\040\035\042\042\014\046" +
    "\017\053\041\055\043\056\054\057\023\060\052\061\061" +
    "\071\030\073\056\076\025\105\060\106\026\112\062\116" +
    "\045\117\034\134\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\100\001\001\000\020\015\101\016\020\017" +
    "\036\030\102\032\105\071\104\133\103\001\001\000\002" +
    "\001\001\000\016\015\101\016\020\017\036\032\105\071" +
    "\104\133\241\001\001\000\002\001\001\000\004\030\114" +
    "\001\001\000\016\015\101\016\020\017\036\032\105\071" +
    "\104\133\113\001\001\000\016\015\101\016\020\017\036" +
    "\032\105\071\104\133\112\001\001\000\012\015\107\016" +
    "\020\017\036\030\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\140\001\001\000\002\001\001\000\004\110\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\173\037" +
    "\174\040\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\120\221\001\001\000\002\001\001\000\004\110" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\252\001\001\000" +
    "\002\001\001\000\004\013\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\266\001\001\000\002\001" +
    "\001\000\004\060\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\300\025\302\026\304\027" +
    "\305\127\310\001\001\000\014\024\300\025\302\026\304" +
    "\027\305\127\342\001\001\000\002\001\001\000\014\024" +
    "\300\025\302\026\304\027\305\127\335\001\001\000\002" +
    "\001\001\000\014\024\300\025\302\026\304\027\305\127" +
    "\330\001\001\000\014\024\300\025\302\026\304\027\305" +
    "\127\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\315\001\001\000\004\013" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\360\001\001\000\002\001" +
    "\001\000\004\013\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\173\037" +
    "\u0103\040\170\001\001\000\002\001\001\000\004\013\u0105" +
    "\001\001\000\002\001\001\000\004\013\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0112\001\001\000\002\001\001\000\004\060\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0115\001\001\000\004" +
    "\013\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\300\025\302\026\304\027\305\127" +
    "\u011d\001\001\000\002\001\001\000\004\023\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0122\001" +
    "\001\000\004\013\u0123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u012d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u012f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u0133\001" +
    "\001\000\002\001\001\000\014\024\300\025\302\026\304" +
    "\027\305\127\u0135\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u0139\041\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u013f\001\001" +
    "\000\004\013\u0143\001\001\000\004\013\u0141\001\001\000" +
    "\006\030\u0139\041\u0142\001\001\000\002\001\001\000\006" +
    "\030\u0139\041\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u014c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u0139" +
    "\041\u014f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0157\001" +
    "\001\000\002\001\001\000\014\024\300\025\302\026\304" +
    "\027\305\127\u016a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0163\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u016f" +
    "\001\001\000\004\013\u0170\001\001\000\002\001\001\000" +
    "\016\015\101\016\020\017\036\032\105\071\104\133\u0172" +
    "\001\001\000\002\001\001\000\012\113\u017b\115\u0179\135" +
    "\u017f\136\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\115\u01a0\135\u017f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\u0184\006\050\007\007\010\013\011\044\032" +
    "\u0189\056\u0186\057\u0185\060\u0183\061\u018a\114\u0188\001\001" +
    "\000\004\012\u0151\001\001\000\002\001\001\000\004\012" +
    "\u018d\001\001\000\004\012\u010a\001\001\000\002\001\001" +
    "\000\006\115\u018b\135\u017f\001\001\000\002\001\001\000" +
    "\004\012\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u018f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u0195\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\u0184\006\050\007\007\010\013\011" +
    "\044\032\u0189\056\u0186\057\u0185\060\u0183\061\u018a\114\u019a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\u0184\006\050\007\007\010\013\011\044" +
    "\032\u0189\056\u0186\057\u0185\060\u0183\061\u018a\114\u019e\001" +
    "\001\000\006\113\u019f\136\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\u01a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\u0184\006\050\007\007" +
    "\010\013\011\044\032\u0189\056\u0186\057\u0185\060\u0183\061" +
    "\u018a\114\u01a5\001\001\000\006\115\u01a6\135\u017f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\115\u01aa\135\u017f\001\001\000\002\001\001\000\030" +
    "\005\u0184\006\050\007\007\010\013\011\044\032\u0189\056" +
    "\u0186\057\u0185\060\u0183\061\u018a\114\u01ac\001\001\000\006" +
    "\115\u01ad\135\u017f\001\001\000\002\001\001\000\004\136" +
    "\u01b4\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\u0184\006\050\007\007\010\013\011\044\032\u0189\056" +
    "\u0186\057\u0185\060\u0183\061\u018a\114\u01b2\001\001\000\006" +
    "\113\u01b3\136\u017e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\113\u01b7\136\u017e\001\001" +
    "\000\002\001\001\000\030\005\u0184\006\050\007\007\010" +
    "\013\011\044\032\u0189\056\u0186\057\u0185\060\u0183\061\u018a" +
    "\114\u01b9\001\001\000\006\113\u01ba\136\u017e\001\001\000" +
    "\002\001\001\000\012\113\u01bd\115\u01bc\135\u017f\136\u017e" +
    "\001\001\000\002\001\001\000\006\115\u01be\135\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u01c4\057\u01c3\060\u01c5\061\u01c2\001\001\000" +
    "\004\012\u01db\001\001\000\004\012\u01d4\001\001\000\004" +
    "\012\u01cd\001\001\000\004\012\u01c6\001\001\000\004\013" +
    "\u01c8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u01cc\001\001\000" +
    "\002\001\001\000\004\013\u01cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u01d2\001" +
    "\001\000\004\013\u01d3\001\001\000\002\001\001\000\004" +
    "\013\u01d6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u01d9\001\001\000\004\013\u01da" +
    "\001\001\000\002\001\001\000\004\013\u01dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u01e0\001\001\000\004\013\u01e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u01e6" +
    "\045\u01e5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01e9\001\001\000\002\001\001" +
    "\000\004\072\u01ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u01ef\001\001\000\004\072\u01f0\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u01f2\001" +
    "\001\000\002\001\001\000\006\077\u01f7\104\u01f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u01fc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u0200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0202\001\001\000\002\001" +
    "\001\000\004\101\u0204\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0208\001\001\000\002\001\001\000" +
    "\010\030\u020a\103\u0209\105\u020b\001\001\000\002\001\001" +
    "\000\004\016\u020c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0211\001\001\000\010\030\u020a\103\u0212\105" +
    "\u020b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0228\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u022b\001\001\000\004\013\u022c\001\001\000\004\034\u022e" +
    "\001\001\000\004\023\u0230\001\001\000\002\001\001\000" +
    "\004\033\u0232\001\001\000\004\013\u0231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0235\001\001\000\004\013\u0236\001\001\000\004\034\u0237" +
    "\001\001\000\002\001\001\000\004\110\u0239\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u023d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\300\025\302\026\304\027\305\127\u025e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u025b\001\001\000\002\001" +
    "\001\000\004\013\u025d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0260\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0263\001\001\000\004\013\u0264" +
    "\001\001\000\002\001\001\000\004\057\u0266\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0269\001\001" +
    "\000\002\001\001\000\004\060\u026b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u026e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\u027b\126\u027a\001\001\000\002\001" +
    "\001\000\004\110\u0298\001\001\000\004\110\u028f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u02a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u027f" +
    "\001\001\000\004\030\u0280\001\001\000\006\073\056\106" +
    "\u0282\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u0289\126\u027a\001\001\000\004\110\u0298\001\001\000\004" +
    "\110\u028f\001\001\000\004\013\u028a\001\001\000\004\030" +
    "\u028b\001\001\000\006\073\056\106\u028c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u029d\126\u027a\001\001\000\004\013\u029e\001\001\000\004" +
    "\030\u029f\001\001\000\006\073\056\106\u02a0\001\001\000" +
    "\002\001\001\000\004\030\u02a2\001\001\000\006\073\056" +
    "\106\u02a3\001\001\000\002\001\001\000\004\013\u02a7\001" +
    "\001\000\004\013\u02a6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02a9\001\001\000\002\001\001\000" +
    "\004\013\u02ab\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u02b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u029d\126\u027a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u02bc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u02c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u02c8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u02cc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u02d2\001\001\000\004\013" +
    "\u02d3\001\001\000\002\001\001\000\004\020\u02d7\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u02e7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u02dc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u02e0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u02e6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u02ea\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u02ed\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0308\001\001" +
    "\000\006\030\u02f4\071\u02f3\001\001\000\004\030\u02fe\001" +
    "\001\000\006\073\056\106\u02f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u02f8\001\001\000\002\001" +
    "\001\000\004\100\u02fa\001\001\000\002\001\001\000\004" +
    "\102\u02fc\001\001\000\004\013\u02fd\001\001\000\002\001" +
    "\001\000\006\073\056\106\u02ff\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0302\001\001\000\002\001" +
    "\001\000\004\100\u0304\001\001\000\002\001\001\000\004" +
    "\102\u0306\001\001\000\004\013\u0307\001\001\000\002\001" +
    "\001\000\004\030\u0309\001\001\000\006\073\056\106\u030a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u030d\001\001\000\002\001\001\000\004\100\u030f\001\001" +
    "\000\002\001\001\000\004\102\u0311\001\001\000\004\013" +
    "\u0312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigoli ::= primero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primero ::= tipo_ent libre principal para tipo_cadena libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primero",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primero ::= tipo_ent libre principal para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primero",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASESA ::= tipodeclase newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CLASESA ::= tipodeclase newline comentariooleer salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CLASESA ::= tipodeclase newline comentariooleer salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CLASESA ::= tipodeclase newline comentariooleer salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipodeclase ::= IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipodeclase ::= IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipometodos ::= propum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipometodos",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tipometodos ::= proprim 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipometodos",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Tipometodos ::= proprom 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipometodos",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOSCLASES ::= metodos libre Tipometodos newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOSCLASES ::= metodos libre Tipometodos newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOSCLASES ::= metodos libre Tipometodos newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOSCLASES ::= metodos newline salto salto DEC METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOSCLASES ::= Tipometodos newline salto salto DEC METODOSCLASES 
            {
              Object RESULT =null;
		
                    System.out.println("Error en estructura de metodos revisar: ");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOSCLASES ::= metodos libre Tipometodos newline salto salto DEC METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODOSCLASES ::= metodos newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de metodo: "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODOSCLASES ::= Tipometodos newline salto salto DEC 
            {
              Object RESULT =null;
		
                    System.out.println("Error en estructura de metodos revisar: ");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipopropied ::= propu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipopropied",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipopropied ::= propri 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipopropied",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipopropied ::= propro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipopropied",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDOCLASES ::= propiedades libre Tipopropied newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTENIDOCLASES ::= propiedades libre Tipopropied newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDOCLASES ::= propiedades newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de propiedad "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDOCLASES ::= Tipopropied newline salto salto DEC 
            {
              Object RESULT =null;
		
                    System.out.println("Error en estructura de clases revisar" );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDOCLASES ::= Tipopropied newline salto salto DEC CONTENIDOCLASES 
            {
              Object RESULT =null;
		
                    System.out.println("Error en estructura de clases revisar");
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOCLASES ::= propiedades libre Tipopropied newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDOCLASES ::= propiedades libre Tipopropied newline salto salto DEC CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOCLASES ::= propiedades newline salto salto DEC CONTENIDOCLASES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEC ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIP ::= identificador pun identificador para parb coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIP ::= cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIP ::= entero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(c); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIP ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIP ::= identificador 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIP ::= identificador pun identificador para parb 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t+""+x+""+y); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCIONESS ::= reducciondetipoente identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCIONESS ::= reducciondetipocadena identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCIONESS ::= reducciondetipobol identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCIONESS ::= reducciondetiporeal identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONESS ::= reducciondetipoente identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCIONESS ::= reducciondetipocadena identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCIONESS ::= reducciondetipobol identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCIONESS ::= reducciondetiporeal identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CANTIDADDEPARAMETROS ::= PARAMETROSE CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CANTIDADDEPARAMETROS ::= PARAMETROSC CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANTIDADDEPARAMETROS ::= PARAMETROSB CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANTIDADDEPARAMETROS ::= PARAMETROSR CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CANTIDADDEPARAMETROS ::= PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CANTIDADDEPARAMETROS ::= PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CANTIDADDEPARAMETROS ::= PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CANTIDADDEPARAMETROS ::= PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CUERPOF ::= newline salto MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CUERPOF ::= newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPOF ::= newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPOF ::= newline TABULA retornar libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CUERPOF ::= newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPOF ::= newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CUERPOF ::= newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CUERPOF ::= newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CUERPOF ::= newline comentariooleer TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPOF ::= newline comentariooleer TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOF ::= newline comentariooleer TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CUERPOF ::= newline comentariooleer TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CUERPOF ::= newline comentariooleer TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CUERPOF ::= newline comentariooleer TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CUERPOF ::= newline TABULA retornar identificador pun identificador para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // comentariooleer ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // comentariooleer ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // comentariooleer ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // comentariooleer ::= MES comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comentariooleer ::= est comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // comentariooleer ::= COMM comentariooleer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comentariooleer",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Linstancias ::= identificador pun identificador para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Linstancias ::= IDmayu pun asignacion para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // datos ::= tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // datos ::= VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // est ::= ifs libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // est ::= ifs libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // seguimiento ::= els libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // seguimiento ::= els libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // seguimiento ::= els CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // cond ::= identificador libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cond ::= entero libre simbolosdeopera libre identificador libre asignacion libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // cuerpociclos ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Whiles ::= haccer libre COMM TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Whiles ::= haccer newline COMM TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ASIGNA ::= identificador asignacion IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ASIGNA ::= identificador asignacion IDmayu para parb finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // operacionesmatematicas ::= OPERADORESLOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPERADORESLOGICOS ::= identificador and identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OPERADORESLOGICOS ::= identificador or identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // OPERADORESLOGICOS ::= identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPERADORESLOGICOS ::= identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // simbolosdeopera ::= porc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         int valor=0;
        try {
	valor= Integer.parseInt((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un entero"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FunE ::= reducciondetiporeal tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         Double valor=0.0;
        try {
	valor= Double.parseDouble((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un numero real"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // FunE ::= reducciondetipobol tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            String compara=(String)s;
          if(compara.compareTo("verdadero")==0||compara.compareTo("falso")==0){
          	 System.out.println("Cambio exitoso"); 
	}else{
             System.out.println("no se puede realizar el cambio"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		
            
          
          	 System.out.println("Operacion matematica"); 
	
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FunE ::= tipo_ent identificador para tipo_ent libre identificador parb newline CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // contructoDes ::= constru para CANTIDADDEPARAMETROS parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // contructoDes ::= constru para parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CUERPOD ::= TABULA retornar libre identificador pun identificador para identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CUERPOD ::= TABULA identificador libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CUERPOD ::= TABULA identificador libre asignacion libre tipodatoss finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TiposArr ::= identificador libre asignacion libre insta tipo_ent corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TiposArr ::= identificador libre asignacion libre insta tipo_cadena corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TiposArr ::= identificador libre asignacion libre insta tipo_real corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TiposArr ::= identificador libre asignacion libre insta tipo_bol corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
