
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\112\006\000" +
    "\002\112\006\000\002\112\007\000\002\112\007\000\002" +
    "\112\007\000\002\112\010\000\002\116\005\000\002\116" +
    "\011\000\002\116\003\000\002\116\007\000\002\115\027" +
    "\000\002\115\020\000\002\115\020\000\002\115\020\000" +
    "\002\115\011\000\002\115\011\000\002\115\011\000\002" +
    "\115\007\000\002\115\021\000\002\115\014\000\002\115" +
    "\014\000\002\115\014\000\002\115\007\000\002\115\007" +
    "\000\002\115\007\000\002\113\007\000\002\113\021\000" +
    "\002\113\014\000\002\113\014\000\002\113\014\000\002" +
    "\113\007\000\002\113\007\000\002\113\007\000\002\113" +
    "\027\000\002\113\020\000\002\113\020\000\002\113\020" +
    "\000\002\113\011\000\002\113\011\000\002\113\011\000" +
    "\002\114\003\000\002\114\004\000\002\114\006\000\002" +
    "\117\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\005\000\002\006\007" +
    "\000\002\006\013\000\002\006\011\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\007\005\000\002\007\007\000\002\007\013\000\002\007" +
    "\011\000\002\010\005\000\002\010\007\000\002\010\013" +
    "\000\002\010\011\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\011\005\000\002\011\007\000\002" +
    "\011\013\000\002\011\011\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\005\000\002\017\006\000\002\071\004" +
    "\000\002\071\007\000\002\071\004\000\002\072\004\000" +
    "\002\072\005\000\002\022\011\000\002\022\011\000\002" +
    "\022\011\000\002\022\011\000\002\022\010\000\002\022" +
    "\010\000\002\022\010\000\002\022\010\000\002\024\007" +
    "\000\002\024\005\000\002\025\007\000\002\025\005\000" +
    "\002\026\007\000\002\026\005\000\002\027\007\000\002" +
    "\027\005\000\002\127\004\000\002\127\004\000\002\127" +
    "\004\000\002\127\004\000\002\127\003\000\002\127\003" +
    "\000\002\127\003\000\002\127\003\000\002\023\013\000" +
    "\002\023\007\000\002\023\013\000\002\023\013\000\002" +
    "\023\007\000\002\023\020\000\002\023\014\000\002\023" +
    "\010\000\002\023\014\000\002\023\014\000\002\023\010" +
    "\000\002\023\021\000\002\120\003\000\002\120\003\000" +
    "\002\031\015\000\002\031\016\000\002\031\013\000\002" +
    "\031\005\000\002\037\006\000\002\032\012\000\002\032" +
    "\011\000\002\034\012\000\002\034\011\000\002\034\005" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\076\024\000\002\076\020\000\002" +
    "\103\004\000\002\100\003\000\002\100\003\000\002\101" +
    "\003\000\002\101\003\000\002\077\004\000\002\077\012" +
    "\000\002\077\007\000\002\104\004\000\002\102\003\000" +
    "\002\102\003\000\002\105\016\000\002\106\010\000\002" +
    "\106\006\000\002\106\010\000\002\106\012\000\002\106" +
    "\012\000\002\106\010\000\002\106\003\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\004\000\002\107\004\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\126\007\000\002\126" +
    "\007\000\002\126\005\000\002\126\005\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\035" +
    "\013\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\042\010\000" +
    "\002\042\007\000\002\045\006\000\002\041\011\000\002" +
    "\041\012\000\002\046\016\000\002\046\016\000\002\046" +
    "\016\000\002\046\016\000\002\047\004\000\002\047\006" +
    "\000\002\050\004\000\002\050\006\000\002\051\004\000" +
    "\002\051\006\000\002\052\004\000\002\052\006\000\002" +
    "\053\007\000\002\053\007\000\002\053\007\000\002\053" +
    "\007\000\002\053\013\000\002\053\014\000\002\053\014" +
    "\000\002\053\014\000\002\053\014\000\002\073\007\000" +
    "\002\073\007\000\002\073\007\000\002\073\007\000\002" +
    "\056\004\000\002\057\004\000\002\061\004\000\002\060" +
    "\004\000\002\012\005\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\030\004\000\002\030\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0330\000\052\006\016\007\022\011\021\017\064\020" +
    "\005\021\036\022\006\023\004\031\057\037\026\041\024" +
    "\044\053\045\031\051\033\052\063\053\015\055\055\056" +
    "\032\111\011\124\035\001\002\000\054\002\uffed\006\uffed" +
    "\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed\124\uffed\001" +
    "\002\000\004\016\u0332\001\002\000\004\016\u0331\001\002" +
    "\000\074\002\uffbf\006\uffbf\007\uffbf\011\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\037\uffbf\041\uffbf\044\uffbf\045\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\055\uffbf\056\uffbf\111\uffbf\116\uffbf\117\uffbf" +
    "\120\uffbf\121\uffbf\122\uffbf\124\uffbf\001\002\000\004\002" +
    "\u0330\001\002\000\004\023\u0325\001\002\000\054\002\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0\045\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\111\ufff0\124" +
    "\ufff0\001\002\000\054\002\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\031\ufffa\037" +
    "\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\055\ufffa\056\ufffa\111\ufffa\124\ufffa\001\002\000\074\002" +
    "\uffbe\006\uffbe\007\uffbe\011\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe\037" +
    "\uffbe\041\uffbe\044\uffbe\045\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\111\uffbe\116\uffbe\117\uffbe\120\uffbe\121" +
    "\uffbe\122\uffbe\124\uffbe\001\002\000\004\016\u0322\001\002" +
    "\000\004\016\u030d\001\002\000\054\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052" +
    "\uffef\053\uffef\055\uffef\056\uffef\111\uffef\124\uffef\001\002" +
    "\000\054\002\uffa1\006\uffa1\007\uffa1\011\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\031\uffa1\037\uffa1\041\uffa1" +
    "\044\uffa1\045\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\056" +
    "\uffa1\111\uffa1\124\uffa1\001\002\000\012\015\u02b9\016\u02b7" +
    "\060\u02b8\077\u02b6\001\002\000\004\016\u02b3\001\002\000" +
    "\020\011\u028f\066\u028d\070\u028c\071\u028b\072\u028a\073\u0289" +
    "\074\u0288\001\002\000\004\016\u026b\001\002\000\054\002" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056\ufff7\111\ufff7" +
    "\124\ufff7\001\002\000\004\016\u0265\001\002\000\054\002" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\031\ufff6\037\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\111\ufff6" +
    "\124\ufff6\001\002\000\054\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\031\ufff8" +
    "\037\ufff8\041\ufff8\044\ufff8\045\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\055\ufff8\056\ufff8\111\ufff8\124\ufff8\001\002\000\004" +
    "\016\u023a\001\002\000\006\013\205\023\u0231\001\002\000" +
    "\004\024\u0229\001\002\000\054\002\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031" +
    "\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051\ufff3\052\ufff3" +
    "\053\ufff3\055\ufff3\056\ufff3\111\ufff3\124\ufff3\001\002\000" +
    "\004\016\u0208\001\002\000\004\016\u0207\001\002\000\054" +
    "\002\uffa0\006\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\031\uffa0\037\uffa0\041\uffa0\044\uffa0" +
    "\045\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\111" +
    "\uffa0\124\uffa0\001\002\000\054\002\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031" +
    "\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\056\ufff2\111\ufff2\124\ufff2\001\002\000" +
    "\054\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\031\uffee\037\uffee\041\uffee\044" +
    "\uffee\045\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee" +
    "\111\uffee\124\uffee\001\002\000\054\002\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\031\ufff1\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\111\ufff1\124\ufff1\001\002" +
    "\000\054\002\uffff\006\016\007\022\011\021\017\064\020" +
    "\005\021\036\022\006\023\004\031\057\037\026\041\024" +
    "\044\053\045\031\051\033\052\063\053\015\055\055\056" +
    "\032\111\011\124\035\001\002\000\074\002\uffbd\006\uffbd" +
    "\007\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\026\uffbd\031\uffbd\033\uffbd\034\uffbd\037\uffbd\041\uffbd" +
    "\044\uffbd\045\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056" +
    "\uffbd\111\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd" +
    "\124\uffbd\001\002\000\004\023\u0144\001\002\000\054\002" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc" +
    "\124\ufffc\001\002\000\054\002\ufffb\006\ufffb\007\ufffb\011" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb" +
    "\037\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\055\ufffb\056\ufffb\111\ufffb\124\ufffb\001\002\000\074" +
    "\002\uffc0\006\uffc0\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\026\uffc0\031\uffc0\033\uffc0\034\uffc0" +
    "\037\uffc0\041\uffc0\044\uffc0\045\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\055\uffc0\056\uffc0\111\uffc0\116\uffc0\117\uffc0\120\uffc0" +
    "\121\uffc0\122\uffc0\124\uffc0\001\002\000\054\002\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9\124\ufff9" +
    "\001\002\000\004\011\u0123\001\002\000\004\024\u0116\001" +
    "\002\000\006\011\353\076\355\001\002\000\006\013\205" +
    "\023\206\001\002\000\056\002\uff47\006\uff47\007\uff47\011" +
    "\uff47\017\uff47\020\uff47\021\uff47\022\uff47\023\uff47\031\uff47" +
    "\037\uff47\041\uff47\044\uff47\045\uff47\046\uff47\051\uff47\052" +
    "\uff47\053\uff47\055\uff47\056\uff47\111\uff47\124\uff47\001\002" +
    "\000\006\016\322\023\uffe4\001\002\000\054\002\ufff5\006" +
    "\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\111\ufff5\124\ufff5" +
    "\001\002\000\006\011\211\067\213\001\002\000\054\002" +
    "\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111\ufff4" +
    "\124\ufff4\001\002\000\004\011\204\001\002\000\006\011" +
    "\070\016\067\001\002\000\054\002\001\006\016\007\022" +
    "\011\021\017\064\020\005\021\036\022\006\023\004\031" +
    "\057\037\026\041\024\044\053\045\031\051\033\052\063" +
    "\053\015\055\055\056\032\111\011\124\035\001\002\000" +
    "\004\002\ufffd\001\002\000\006\011\uff0b\076\uff0b\001\002" +
    "\000\004\024\071\001\002\000\004\017\072\001\002\000" +
    "\004\016\073\001\002\000\004\011\074\001\002\000\004" +
    "\025\075\001\002\000\004\023\076\001\002\000\004\023" +
    "\077\001\002\000\010\026\101\055\055\056\032\001\002" +
    "\000\054\002\uff2f\006\uff2f\007\uff2f\011\uff2f\017\uff2f\020" +
    "\uff2f\021\uff2f\022\uff2f\023\uff2f\031\uff2f\037\uff2f\041\uff2f" +
    "\044\uff2f\045\uff2f\051\uff2f\052\uff2f\053\uff2f\055\uff2f\056" +
    "\uff2f\111\uff2f\124\uff2f\001\002\000\014\006\uff02\011\uff02" +
    "\026\101\035\uff02\052\uff02\001\002\000\004\035\150\001" +
    "\002\000\004\026\101\001\002\000\004\035\105\001\002" +
    "\000\004\016\106\001\002\000\012\004\107\005\112\010" +
    "\110\011\111\001\002\000\060\002\uff6d\006\uff6d\007\uff6d" +
    "\011\uff6d\013\uff6d\016\144\017\uff6d\020\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\031\uff6d\037\uff6d\041\uff6d\044\uff6d\045\uff6d" +
    "\051\uff6d\052\uff6d\053\uff6d\055\uff6d\056\uff6d\111\uff6d\124" +
    "\uff6d\001\002\000\056\002\uff70\006\uff70\007\uff70\011\uff70" +
    "\013\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\031" +
    "\uff70\037\uff70\041\uff70\044\uff70\045\uff70\051\uff70\052\uff70" +
    "\053\uff70\055\uff70\056\uff70\111\uff70\124\uff70\001\002\000" +
    "\010\016\125\107\127\110\126\001\002\000\004\016\113" +
    "\001\002\000\016\054\121\107\117\110\115\112\114\113" +
    "\116\114\122\001\002\000\012\004\uff37\005\uff37\011\uff37" +
    "\016\uff37\001\002\000\012\004\uff38\005\uff38\011\uff38\016" +
    "\uff38\001\002\000\012\004\uff36\005\uff36\011\uff36\016\uff36" +
    "\001\002\000\012\004\uff39\005\uff39\011\uff39\016\uff39\001" +
    "\002\000\004\005\123\001\002\000\012\004\uff34\005\uff34" +
    "\011\uff34\016\uff34\001\002\000\012\004\uff35\005\uff35\011" +
    "\uff35\016\uff35\001\002\000\004\011\124\001\002\000\056" +
    "\002\uff6e\006\uff6e\007\uff6e\011\uff6e\013\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\031\uff6e\037\uff6e\041\uff6e" +
    "\044\uff6e\045\uff6e\051\uff6e\052\uff6e\053\uff6e\055\uff6e\056" +
    "\uff6e\111\uff6e\124\uff6e\001\002\000\016\054\121\107\117" +
    "\110\115\112\114\113\116\114\122\001\002\000\006\011" +
    "\uff6a\016\uff6a\001\002\000\006\011\uff6b\016\uff6b\001\002" +
    "\000\004\011\131\001\002\000\004\024\132\001\002\000" +
    "\004\011\133\001\002\000\004\016\134\001\002\000\006" +
    "\107\127\110\126\001\002\000\004\016\136\001\002\000" +
    "\004\004\137\001\002\000\004\025\140\001\002\000\056" +
    "\002\uff6c\006\uff6c\007\uff6c\011\uff6c\013\uff6c\017\uff6c\020" +
    "\uff6c\021\uff6c\022\uff6c\023\uff6c\031\uff6c\037\uff6c\041\uff6c" +
    "\044\uff6c\045\uff6c\051\uff6c\052\uff6c\053\uff6c\055\uff6c\056" +
    "\uff6c\111\uff6c\124\uff6c\001\002\000\004\016\142\001\002" +
    "\000\004\011\143\001\002\000\056\002\uff71\006\uff71\007" +
    "\uff71\011\uff71\013\uff71\017\uff71\020\uff71\021\uff71\022\uff71" +
    "\023\uff71\031\uff71\037\uff71\041\uff71\044\uff71\045\uff71\051" +
    "\uff71\052\uff71\053\uff71\055\uff71\056\uff71\111\uff71\124\uff71" +
    "\001\002\000\016\054\121\107\117\110\115\112\114\113" +
    "\116\114\122\001\002\000\004\016\146\001\002\000\004" +
    "\004\147\001\002\000\056\002\uff6f\006\uff6f\007\uff6f\011" +
    "\uff6f\013\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f" +
    "\031\uff6f\037\uff6f\041\uff6f\044\uff6f\045\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\055\uff6f\056\uff6f\111\uff6f\124\uff6f\001\002" +
    "\000\004\016\151\001\002\000\012\004\152\005\155\010" +
    "\153\011\154\001\002\000\060\002\uff73\006\uff73\007\uff73" +
    "\011\uff73\013\uff73\016\177\017\uff73\020\uff73\021\uff73\022" +
    "\uff73\023\uff73\031\uff73\037\uff73\041\uff73\044\uff73\045\uff73" +
    "\051\uff73\052\uff73\053\uff73\055\uff73\056\uff73\111\uff73\124" +
    "\uff73\001\002\000\056\002\uff76\006\uff76\007\uff76\011\uff76" +
    "\013\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\031" +
    "\uff76\037\uff76\041\uff76\044\uff76\045\uff76\051\uff76\052\uff76" +
    "\053\uff76\055\uff76\056\uff76\111\uff76\124\uff76\001\002\000" +
    "\010\016\162\107\127\110\126\001\002\000\004\016\156" +
    "\001\002\000\016\054\121\107\117\110\115\112\114\113" +
    "\116\114\122\001\002\000\004\005\160\001\002\000\004" +
    "\011\161\001\002\000\056\002\uff74\006\uff74\007\uff74\011" +
    "\uff74\013\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74" +
    "\031\uff74\037\uff74\041\uff74\044\uff74\045\uff74\051\uff74\052" +
    "\uff74\053\uff74\055\uff74\056\uff74\111\uff74\124\uff74\001\002" +
    "\000\016\054\121\107\117\110\115\112\114\113\116\114" +
    "\122\001\002\000\004\011\164\001\002\000\004\024\165" +
    "\001\002\000\004\011\166\001\002\000\004\016\167\001" +
    "\002\000\006\107\127\110\126\001\002\000\004\016\171" +
    "\001\002\000\004\004\172\001\002\000\004\025\173\001" +
    "\002\000\056\002\uff72\006\uff72\007\uff72\011\uff72\013\uff72" +
    "\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\031\uff72\037" +
    "\uff72\041\uff72\044\uff72\045\uff72\051\uff72\052\uff72\053\uff72" +
    "\055\uff72\056\uff72\111\uff72\124\uff72\001\002\000\004\016" +
    "\175\001\002\000\004\011\176\001\002\000\056\002\uff77" +
    "\006\uff77\007\uff77\011\uff77\013\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\031\uff77\037\uff77\041\uff77\044\uff77" +
    "\045\uff77\051\uff77\052\uff77\053\uff77\055\uff77\056\uff77\111" +
    "\uff77\124\uff77\001\002\000\016\054\121\107\117\110\115" +
    "\112\114\113\116\114\122\001\002\000\004\016\201\001" +
    "\002\000\004\004\202\001\002\000\056\002\uff75\006\uff75" +
    "\007\uff75\011\uff75\013\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045\uff75" +
    "\051\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75\124" +
    "\uff75\001\002\000\012\006\uff03\011\uff03\035\uff03\052\uff03" +
    "\001\002\000\006\013\205\023\206\001\002\000\004\023" +
    "\210\001\002\000\100\002\uff04\006\uff04\007\uff04\011\uff04" +
    "\017\uff04\020\uff04\021\uff04\022\uff04\023\uff04\026\uff04\031" +
    "\uff04\033\uff04\034\uff04\037\uff04\041\uff04\043\uff04\044\uff04" +
    "\045\uff04\046\uff04\051\uff04\052\uff04\053\uff04\055\uff04\056" +
    "\uff04\111\uff04\116\uff04\117\uff04\120\uff04\121\uff04\122\uff04" +
    "\124\uff04\001\002\000\054\002\uff66\006\uff66\007\uff66\011" +
    "\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\031\uff66" +
    "\037\uff66\041\uff66\044\uff66\045\uff66\051\uff66\052\uff66\053" +
    "\uff66\055\uff66\056\uff66\111\uff66\124\uff66\001\002\000\102" +
    "\002\uff05\006\uff05\007\uff05\011\uff05\017\uff05\020\uff05\021" +
    "\uff05\022\uff05\023\uff05\026\uff05\031\uff05\033\uff05\034\uff05" +
    "\037\uff05\041\uff05\043\uff05\044\uff05\045\uff05\046\uff05\051" +
    "\uff05\052\uff05\053\uff05\055\uff05\056\uff05\105\uff05\111\uff05" +
    "\116\uff05\117\uff05\120\uff05\121\uff05\122\uff05\124\uff05\001" +
    "\002\000\016\012\234\013\uff06\016\uff06\023\uff06\024\233" +
    "\077\232\001\002\000\010\013\205\016\221\023\206\001" +
    "\002\000\004\024\214\001\002\000\004\022\006\001\002" +
    "\000\004\011\216\001\002\000\004\025\217\001\002\000" +
    "\006\013\205\023\206\001\002\000\054\002\uff31\006\uff31" +
    "\007\uff31\011\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023" +
    "\uff31\031\uff31\037\uff31\041\uff31\044\uff31\045\uff31\051\uff31" +
    "\052\uff31\053\uff31\055\uff31\056\uff31\111\uff31\124\uff31\001" +
    "\002\000\004\015\223\001\002\000\074\002\uffb0\006\uffb0" +
    "\007\uffb0\011\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\026\uffb0\031\uffb0\033\uffb0\034\uffb0\037\uffb0\041\uffb0" +
    "\044\uffb0\045\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056" +
    "\uffb0\111\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0" +
    "\124\uffb0\001\002\000\004\016\224\001\002\000\010\004" +
    "\225\005\230\010\226\001\002\000\006\013\uffac\023\uffac" +
    "\001\002\000\006\013\uffaa\023\uffaa\001\002\000\006\013" +
    "\205\023\206\001\002\000\006\013\uffab\023\uffab\001\002" +
    "\000\074\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\026\uffad\031\uffad\033\uffad" +
    "\034\uffad\037\uffad\041\uffad\044\uffad\045\uffad\051\uffad\052" +
    "\uffad\053\uffad\055\uffad\056\uffad\111\uffad\116\uffad\117\uffad" +
    "\120\uffad\121\uffad\122\uffad\124\uffad\001\002\000\006\004" +
    "\302\100\303\001\002\000\014\017\246\020\242\021\245" +
    "\022\240\025\250\001\002\000\004\011\235\001\002\000" +
    "\012\012\234\013\uff06\016\uff06\023\uff06\001\002\000\010" +
    "\013\uff07\016\uff07\023\uff07\001\002\000\014\017\246\020" +
    "\242\021\245\022\240\025\uff7b\001\002\000\004\016\275" +
    "\001\002\000\014\017\246\020\242\021\245\022\240\025" +
    "\uff7a\001\002\000\004\016\270\001\002\000\014\017\246" +
    "\020\242\021\245\022\240\025\uff79\001\002\000\014\017" +
    "\246\020\242\021\245\022\240\025\uff78\001\002\000\004" +
    "\016\262\001\002\000\004\016\256\001\002\000\004\025" +
    "\253\001\002\000\004\023\077\001\002\000\004\023\252" +
    "\001\002\000\054\002\uff89\006\uff89\007\uff89\011\uff89\017" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\031\uff89\037\uff89" +
    "\041\uff89\044\uff89\045\uff89\051\uff89\052\uff89\053\uff89\055" +
    "\uff89\056\uff89\111\uff89\124\uff89\001\002\000\004\023\077" +
    "\001\002\000\006\013\205\023\206\001\002\000\054\002" +
    "\uff8d\006\uff8d\007\uff8d\011\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\031\uff8d\037\uff8d\041\uff8d\044\uff8d\045" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\055\uff8d\056\uff8d\111\uff8d" +
    "\124\uff8d\001\002\000\004\011\257\001\002\000\016\012" +
    "\260\017\uff86\020\uff86\021\uff86\022\uff86\025\uff86\001\002" +
    "\000\004\017\246\001\002\000\014\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\025\uff87\001\002\000\004\011\263\001\002" +
    "\000\016\012\264\017\uff80\020\uff80\021\uff80\022\uff80\025" +
    "\uff80\001\002\000\004\021\245\001\002\000\014\017\uff81" +
    "\020\uff81\021\uff81\022\uff81\025\uff81\001\002\000\004\025" +
    "\uff7c\001\002\000\004\025\uff7d\001\002\000\004\011\271" +
    "\001\002\000\016\012\272\017\uff82\020\uff82\021\uff82\022" +
    "\uff82\025\uff82\001\002\000\004\020\242\001\002\000\014" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\025\uff83\001\002\000" +
    "\004\025\uff7e\001\002\000\004\011\276\001\002\000\016" +
    "\012\277\017\uff84\020\uff84\021\uff84\022\uff84\025\uff84\001" +
    "\002\000\004\022\240\001\002\000\014\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\025\uff85\001\002\000\004\025\uff7f\001" +
    "\002\000\004\100\305\001\002\000\006\013\205\023\206" +
    "\001\002\000\054\002\uff16\006\uff16\007\uff16\011\uff16\017" +
    "\uff16\020\uff16\021\uff16\022\uff16\023\uff16\031\uff16\037\uff16" +
    "\041\uff16\044\uff16\045\uff16\051\uff16\052\uff16\053\uff16\055" +
    "\uff16\056\uff16\111\uff16\124\uff16\001\002\000\004\016\306" +
    "\001\002\000\004\015\307\001\002\000\004\101\310\001" +
    "\002\000\004\016\311\001\002\000\004\010\313\001\002" +
    "\000\004\102\320\001\002\000\006\012\315\016\314\001" +
    "\002\000\004\102\uff1a\001\002\000\004\016\316\001\002" +
    "\000\004\010\313\001\002\000\004\102\uff19\001\002\000" +
    "\006\013\205\023\206\001\002\000\054\002\uff21\006\uff21" +
    "\007\uff21\011\uff21\017\uff21\020\uff21\021\uff21\022\uff21\023" +
    "\uff21\031\uff21\037\uff21\041\uff21\044\uff21\045\uff21\051\uff21" +
    "\052\uff21\053\uff21\055\uff21\056\uff21\111\uff21\124\uff21\001" +
    "\002\000\006\011\323\103\324\001\002\000\004\016\327" +
    "\001\002\000\004\016\325\001\002\000\004\031\326\001" +
    "\002\000\004\023\uffe3\001\002\000\004\015\330\001\002" +
    "\000\004\016\331\001\002\000\004\057\332\001\002\000" +
    "\004\031\333\001\002\000\004\024\334\001\002\000\014" +
    "\004\335\005\343\010\340\014\336\025\342\001\002\000" +
    "\012\012\uff01\013\uff01\023\uff01\025\uff01\001\002\000\012" +
    "\012\uff00\013\uff00\023\uff00\025\uff00\001\002\000\004\012" +
    "\347\001\002\000\012\012\ufeff\013\ufeff\023\ufeff\025\ufeff" +
    "\001\002\000\004\025\345\001\002\000\006\013\205\023" +
    "\206\001\002\000\012\012\ufefe\013\ufefe\023\ufefe\025\ufefe" +
    "\001\002\000\054\002\uff69\006\uff69\007\uff69\011\uff69\017" +
    "\uff69\020\uff69\021\uff69\022\uff69\023\uff69\031\uff69\037\uff69" +
    "\041\uff69\044\uff69\045\uff69\051\uff69\052\uff69\053\uff69\055" +
    "\uff69\056\uff69\111\uff69\124\uff69\001\002\000\006\013\205" +
    "\023\206\001\002\000\054\002\uff68\006\uff68\007\uff68\011" +
    "\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\031\uff68" +
    "\037\uff68\041\uff68\044\uff68\045\uff68\051\uff68\052\uff68\053" +
    "\uff68\055\uff68\056\uff68\111\uff68\124\uff68\001\002\000\004" +
    "\016\350\001\002\000\012\004\335\005\343\010\340\014" +
    "\336\001\002\000\004\025\uff65\001\002\000\056\002\uff94" +
    "\006\uff94\007\uff94\011\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\026\uff94\031\uff94\037\uff94\041\uff94\044\uff94" +
    "\045\uff94\051\uff94\052\uff94\053\uff94\055\uff94\056\uff94\111" +
    "\uff94\124\uff94\001\002\000\016\012\234\013\uff06\016\uff06" +
    "\023\uff06\024\375\077\376\001\002\000\010\013\205\016" +
    "\363\023\206\001\002\000\004\024\356\001\002\000\004" +
    "\022\006\001\002\000\004\011\360\001\002\000\004\025" +
    "\361\001\002\000\006\013\205\023\206\001\002\000\054" +
    "\002\uff33\006\uff33\007\uff33\011\uff33\017\uff33\020\uff33\021" +
    "\uff33\022\uff33\023\uff33\031\uff33\037\uff33\041\uff33\044\uff33" +
    "\045\uff33\051\uff33\052\uff33\053\uff33\055\uff33\056\uff33\111" +
    "\uff33\124\uff33\001\002\000\004\015\365\001\002\000\074" +
    "\002\uffbc\006\uffbc\007\uffbc\011\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\026\uffbc\031\uffbc\033\uffbc\034\uffbc" +
    "\037\uffbc\041\uffbc\044\uffbc\045\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\055\uffbc\056\uffbc\111\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\122\uffbc\124\uffbc\001\002\000\004\016\366\001" +
    "\002\000\012\004\371\005\373\010\372\014\370\001\002" +
    "\000\006\013\205\023\206\001\002\000\006\013\uffb6\023" +
    "\uffb6\001\002\000\006\013\uffb8\023\uffb8\001\002\000\006" +
    "\013\uffb5\023\uffb5\001\002\000\006\013\uffb7\023\uffb7\001" +
    "\002\000\074\002\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\037\uffb9\041\uffb9\044\uffb9\045\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\055\uffb9\056\uffb9\111\uffb9\116\uffb9\117" +
    "\uffb9\120\uffb9\121\uffb9\122\uffb9\124\uffb9\001\002\000\014" +
    "\017\246\020\242\021\245\022\240\025\u0110\001\002\000" +
    "\006\004\377\100\u0100\001\002\000\004\100\u0102\001\002" +
    "\000\006\013\205\023\206\001\002\000\054\002\uff18\006" +
    "\uff18\007\uff18\011\uff18\017\uff18\020\uff18\021\uff18\022\uff18" +
    "\023\uff18\031\uff18\037\uff18\041\uff18\044\uff18\045\uff18\051" +
    "\uff18\052\uff18\053\uff18\055\uff18\056\uff18\111\uff18\124\uff18" +
    "\001\002\000\004\016\u0103\001\002\000\004\015\u0104\001" +
    "\002\000\004\101\u0105\001\002\000\004\016\u0106\001\002" +
    "\000\004\004\u0107\001\002\000\006\012\u010c\016\u010b\001" +
    "\002\000\004\102\u0109\001\002\000\006\013\205\023\206" +
    "\001\002\000\054\002\uff24\006\uff24\007\uff24\011\uff24\017" +
    "\uff24\020\uff24\021\uff24\022\uff24\023\uff24\031\uff24\037\uff24" +
    "\041\uff24\044\uff24\045\uff24\051\uff24\052\uff24\053\uff24\055" +
    "\uff24\056\uff24\111\uff24\124\uff24\001\002\000\004\102\uff20" +
    "\001\002\000\004\016\u010d\001\002\000\004\004\u0107\001" +
    "\002\000\004\102\uff1f\001\002\000\004\025\u0113\001\002" +
    "\000\004\023\077\001\002\000\004\023\u0112\001\002\000" +
    "\054\002\uff8b\006\uff8b\007\uff8b\011\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\031\uff8b\037\uff8b\041\uff8b\044" +
    "\uff8b\045\uff8b\051\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b" +
    "\111\uff8b\124\uff8b\001\002\000\004\023\077\001\002\000" +
    "\006\013\205\023\206\001\002\000\054\002\uff8f\006\uff8f" +
    "\007\uff8f\011\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\031\uff8f\037\uff8f\041\uff8f\044\uff8f\045\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\055\uff8f\056\uff8f\111\uff8f\124\uff8f\001" +
    "\002\000\012\017\246\020\242\021\245\022\240\001\002" +
    "\000\004\025\u0118\001\002\000\004\023\u0119\001\002\000" +
    "\004\026\101\001\002\000\054\002\uff29\006\uff29\007\uff29" +
    "\011\uff29\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\031" +
    "\uff29\037\uff29\041\uff29\044\uff29\045\uff29\051\uff29\052\uff29" +
    "\053\uff29\055\uff29\056\uff29\111\uff29\124\uff29\001\002\000" +
    "\004\011\u011c\001\002\000\004\016\u011d\001\002\000\004" +
    "\015\u011e\001\002\000\004\016\u011f\001\002\000\004\011" +
    "\u0120\001\002\000\006\013\205\023\206\001\002\000\056" +
    "\002\uff26\006\uff26\007\uff26\011\uff26\017\uff26\020\uff26\021" +
    "\uff26\022\uff26\023\uff26\026\101\031\uff26\037\uff26\041\uff26" +
    "\044\uff26\045\uff26\051\uff26\052\uff26\053\uff26\055\uff26\056" +
    "\uff26\111\uff26\124\uff26\001\002\000\054\002\uff25\006\uff25" +
    "\007\uff25\011\uff25\017\uff25\020\uff25\021\uff25\022\uff25\023" +
    "\uff25\031\uff25\037\uff25\041\uff25\044\uff25\045\uff25\051\uff25" +
    "\052\uff25\053\uff25\055\uff25\056\uff25\111\uff25\124\uff25\001" +
    "\002\000\016\012\234\013\uff06\016\uff06\023\uff06\024\u012c" +
    "\077\u012b\001\002\000\010\013\205\016\u0125\023\206\001" +
    "\002\000\004\015\u0127\001\002\000\074\002\uffb4\006\uffb4" +
    "\007\uffb4\011\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\026\uffb4\031\uffb4\033\uffb4\034\uffb4\037\uffb4\041\uffb4" +
    "\044\uffb4\045\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056" +
    "\uffb4\111\uffb4\116\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4" +
    "\124\uffb4\001\002\000\004\016\u0128\001\002\000\004\014" +
    "\u0129\001\002\000\006\013\205\023\206\001\002\000\074" +
    "\002\uffb1\006\uffb1\007\uffb1\011\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1" +
    "\037\uffb1\041\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\055\uffb1\056\uffb1\111\uffb1\116\uffb1\117\uffb1\120\uffb1" +
    "\121\uffb1\122\uffb1\124\uffb1\001\002\000\006\004\u0134\100" +
    "\u0135\001\002\000\014\017\246\020\242\021\245\022\240" +
    "\025\u012e\001\002\000\004\025\u0131\001\002\000\004\023" +
    "\077\001\002\000\004\023\u0130\001\002\000\054\002\uff8a" +
    "\006\uff8a\007\uff8a\011\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\031\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\055\uff8a\056\uff8a\111\uff8a\124" +
    "\uff8a\001\002\000\004\023\077\001\002\000\006\013\205" +
    "\023\206\001\002\000\054\002\uff8e\006\uff8e\007\uff8e\011" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\031\uff8e" +
    "\037\uff8e\041\uff8e\044\uff8e\045\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\055\uff8e\056\uff8e\111\uff8e\124\uff8e\001\002\000\004" +
    "\100\u0137\001\002\000\006\013\205\023\206\001\002\000" +
    "\054\002\uff15\006\uff15\007\uff15\011\uff15\017\uff15\020\uff15" +
    "\021\uff15\022\uff15\023\uff15\031\uff15\037\uff15\041\uff15\044" +
    "\uff15\045\uff15\051\uff15\052\uff15\053\uff15\055\uff15\056\uff15" +
    "\111\uff15\124\uff15\001\002\000\004\016\u0138\001\002\000" +
    "\004\015\u0139\001\002\000\004\101\u013a\001\002\000\004" +
    "\016\u013b\001\002\000\004\014\u013c\001\002\000\006\012" +
    "\u0141\016\u0140\001\002\000\004\102\u013e\001\002\000\006" +
    "\013\205\023\206\001\002\000\054\002\uff22\006\uff22\007" +
    "\uff22\011\uff22\017\uff22\020\uff22\021\uff22\022\uff22\023\uff22" +
    "\031\uff22\037\uff22\041\uff22\044\uff22\045\uff22\051\uff22\052" +
    "\uff22\053\uff22\055\uff22\056\uff22\111\uff22\124\uff22\001\002" +
    "\000\004\102\uff1c\001\002\000\004\016\u0142\001\002\000" +
    "\004\014\u013c\001\002\000\004\102\uff1b\001\002\000\010" +
    "\026\u0145\055\055\056\032\001\002\000\022\033\u0148\034" +
    "\u0149\115\u0151\116\u0150\117\u014c\120\u014e\121\u014b\122\u014a" +
    "\001\002\000\004\026\u0147\001\002\000\022\033\u0148\034" +
    "\u0149\115\u0151\116\u0150\117\u014c\120\u014e\121\u014b\122\u014a" +
    "\001\002\000\006\016\u01d5\023\u01d6\001\002\000\006\016" +
    "\u01a7\023\u01a8\001\002\000\004\023\u01a3\001\002\000\004" +
    "\023\u019a\001\002\000\004\023\u0196\001\002\000\054\002" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\031\uffe8\037\uffe8\041\uffe8\044\uffe8\045" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\111\uffe8" +
    "\124\uffe8\001\002\000\004\023\u0183\001\002\000\064\002" +
    "\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\031\uffe9\034\u0149\037\uffe9\041\uffe9\044" +
    "\uffe9\045\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9" +
    "\111\uffe9\120\u014e\121\u014b\122\u014a\124\uffe9\001\002\000" +
    "\004\023\u0179\001\002\000\004\023\u0152\001\002\000\004" +
    "\026\u0153\001\002\000\004\026\u0154\001\002\000\014\017" +
    "\u0159\020\005\021\036\022\006\124\035\001\002\000\004" +
    "\011\235\001\002\000\074\002\uffc4\006\uffc4\007\uffc4\011" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\u0176" +
    "\031\uffc4\033\uffc4\034\uffc4\037\uffc4\041\uffc4\044\uffc4\045" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4\111\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\124\uffc4\001" +
    "\002\000\004\011\235\001\002\000\004\011\235\001\002" +
    "\000\004\016\067\001\002\000\070\002\uffce\006\uffce\007" +
    "\uffce\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\031\uffce\034\uffce\037\uffce\041\uffce\044\uffce\045\uffce\051" +
    "\uffce\052\uffce\053\uffce\055\uffce\056\uffce\111\uffce\116\u015c" +
    "\117\u015d\120\uffce\121\uffce\122\uffce\124\uffce\001\002\000" +
    "\004\011\235\001\002\000\004\023\u0162\001\002\000\004" +
    "\023\u015e\001\002\000\004\026\u015f\001\002\000\004\026" +
    "\u0160\001\002\000\014\017\u0159\020\005\021\036\022\006" +
    "\124\035\001\002\000\064\002\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\031\uffd0" +
    "\034\uffd0\037\uffd0\041\uffd0\044\uffd0\045\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\111\uffd0\120\uffd0\121\uffd0" +
    "\122\uffd0\124\uffd0\001\002\000\004\026\u0163\001\002\000" +
    "\004\026\u0164\001\002\000\014\017\u0159\020\005\021\036" +
    "\022\006\124\035\001\002\000\066\002\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\031\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111\uffd1\117\u0166" +
    "\120\uffd1\121\uffd1\122\uffd1\124\uffd1\001\002\000\004\023" +
    "\u0167\001\002\000\004\026\u0168\001\002\000\004\026\u0169" +
    "\001\002\000\014\017\u0159\020\005\021\036\022\006\124" +
    "\035\001\002\000\064\002\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\031\uffd2\034" +
    "\uffd2\037\uffd2\041\uffd2\044\uffd2\045\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\055\uffd2\056\uffd2\111\uffd2\120\uffd2\121\uffd2\122" +
    "\uffd2\124\uffd2\001\002\000\010\013\205\016\u016c\023\206" +
    "\001\002\000\004\015\u016e\001\002\000\074\002\uffa9\006" +
    "\uffa9\007\uffa9\011\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\026\uffa9\031\uffa9\033\uffa9\034\uffa9\037\uffa9\041" +
    "\uffa9\044\uffa9\045\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9" +
    "\056\uffa9\111\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122" +
    "\uffa9\124\uffa9\001\002\000\004\016\u016f\001\002\000\012" +
    "\004\u0171\005\u0174\010\u0172\014\u0170\001\002\000\006\013" +
    "\uffa3\023\uffa3\001\002\000\006\013\uffa5\023\uffa5\001\002" +
    "\000\006\013\uffa2\023\uffa2\001\002\000\006\013\205\023" +
    "\206\001\002\000\006\013\uffa4\023\uffa4\001\002\000\074" +
    "\002\uffa6\006\uffa6\007\uffa6\011\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\026\uffa6\031\uffa6\033\uffa6\034\uffa6" +
    "\037\uffa6\041\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\055\uffa6\056\uffa6\111\uffa6\116\uffa6\117\uffa6\120\uffa6" +
    "\121\uffa6\122\uffa6\124\uffa6\001\002\000\074\002\uffc3\006" +
    "\uffc3\007\uffc3\011\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\026\u0177\031\uffc3\033\uffc3\034\uffc3\037\uffc3\041" +
    "\uffc3\044\uffc3\045\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3" +
    "\056\uffc3\111\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122" +
    "\uffc3\124\uffc3\001\002\000\014\017\u0159\020\005\021\036" +
    "\022\006\124\035\001\002\000\072\002\uffc2\006\uffc2\007" +
    "\uffc2\011\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\031\uffc2\033\uffc2\034\uffc2\037\uffc2\041\uffc2\044\uffc2\045" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\055\uffc2\056\uffc2\111\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\124\uffc2\001" +
    "\002\000\004\026\u017a\001\002\000\004\026\u017b\001\002" +
    "\000\014\017\u0159\020\005\021\036\022\006\124\035\001" +
    "\002\000\066\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\031\uffcd\034\uffcd\037" +
    "\uffcd\041\uffcd\044\uffcd\045\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\055\uffcd\056\uffcd\111\uffcd\117\u017d\120\uffcd\121\uffcd\122" +
    "\uffcd\124\uffcd\001\002\000\004\023\u017e\001\002\000\004" +
    "\026\u017f\001\002\000\004\026\u0180\001\002\000\014\017" +
    "\u0159\020\005\021\036\022\006\124\035\001\002\000\064" +
    "\002\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\031\uffcf\034\uffcf\037\uffcf\041\uffcf" +
    "\044\uffcf\045\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\111\uffcf\120\uffcf\121\uffcf\122\uffcf\124\uffcf\001\002" +
    "\000\054\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\037\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\111\uffe7\124\uffe7\001\002\000\004\026\u0184\001\002" +
    "\000\004\026\u0185\001\002\000\014\017\u0159\020\005\021" +
    "\036\022\006\124\035\001\002\000\060\002\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\031\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\055\uffd6\056\uffd6\111\uffd6\121\u0187\122" +
    "\u0188\124\uffd6\001\002\000\004\023\u018d\001\002\000\004" +
    "\023\u0189\001\002\000\004\026\u018a\001\002\000\004\026" +
    "\u018b\001\002\000\014\017\u0159\020\005\021\036\022\006" +
    "\124\035\001\002\000\054\002\uffd8\006\uffd8\007\uffd8\011" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\031\uffd8" +
    "\037\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\055\uffd8\056\uffd8\111\uffd8\124\uffd8\001\002\000\004" +
    "\026\u018e\001\002\000\004\026\u018f\001\002\000\014\017" +
    "\u0159\020\005\021\036\022\006\124\035\001\002\000\056" +
    "\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\031\uffd9\037\uffd9\041\uffd9\044\uffd9" +
    "\045\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056\uffd9\111" +
    "\uffd9\122\u0191\124\uffd9\001\002\000\004\023\u0192\001\002" +
    "\000\004\026\u0193\001\002\000\004\026\u0194\001\002\000" +
    "\014\017\u0159\020\005\021\036\022\006\124\035\001\002" +
    "\000\054\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\031\uffda\037\uffda\041\uffda" +
    "\044\uffda\045\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056" +
    "\uffda\111\uffda\124\uffda\001\002\000\004\026\u0197\001\002" +
    "\000\004\026\u0198\001\002\000\014\017\u0159\020\005\021" +
    "\036\022\006\124\035\001\002\000\064\002\uffcc\006\uffcc" +
    "\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\031\uffcc\034\uffcc\037\uffcc\041\uffcc\044\uffcc\045\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc\111\uffcc\120" +
    "\uffcc\121\uffcc\122\uffcc\124\uffcc\001\002\000\004\026\u019b" +
    "\001\002\000\004\026\u019c\001\002\000\014\017\u0159\020" +
    "\005\021\036\022\006\124\035\001\002\000\056\002\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\031\uffd5\037\uffd5\041\uffd5\044\uffd5\045\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\111\uffd5\122" +
    "\u019e\124\uffd5\001\002\000\004\023\u019f\001\002\000\004" +
    "\026\u01a0\001\002\000\004\026\u01a1\001\002\000\014\017" +
    "\u0159\020\005\021\036\022\006\124\035\001\002\000\054" +
    "\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\031\uffd7\037\uffd7\041\uffd7\044\uffd7" +
    "\045\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\111" +
    "\uffd7\124\uffd7\001\002\000\004\026\u01a4\001\002\000\004" +
    "\026\u01a5\001\002\000\014\017\u0159\020\005\021\036\022" +
    "\006\124\035\001\002\000\054\002\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\031" +
    "\uffd4\037\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\056\uffd4\111\uffd4\124\uffd4\001\002\000" +
    "\010\120\u01ae\121\u01ac\122\u01ad\001\002\000\004\026\u01a9" +
    "\001\002\000\004\026\u01aa\001\002\000\014\017\u0159\020" +
    "\005\021\036\022\006\124\035\001\002\000\054\002\uffdb" +
    "\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\031\uffdb\037\uffdb\041\uffdb\044\uffdb\045\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\111\uffdb\124" +
    "\uffdb\001\002\000\004\023\u01ca\001\002\000\004\023\u01c6" +
    "\001\002\000\004\023\u01af\001\002\000\004\026\u01b0\001" +
    "\002\000\004\026\u01b1\001\002\000\014\017\u0159\020\005" +
    "\021\036\022\006\124\035\001\002\000\056\002\uffde\006" +
    "\uffde\007\uffde\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\031\uffde\034\u01b3\037\uffde\041\uffde\044\uffde\045" +
    "\uffde\051\uffde\052\uffde\053\uffde\055\uffde\056\uffde\111\uffde" +
    "\124\uffde\001\002\000\004\016\u01b4\001\002\000\006\121" +
    "\u01b5\122\u01b6\001\002\000\004\023\u01bb\001\002\000\004" +
    "\023\u01b7\001\002\000\004\026\u01b8\001\002\000\004\026" +
    "\u01b9\001\002\000\014\017\u0159\020\005\021\036\022\006" +
    "\124\035\001\002\000\054\002\uffe0\006\uffe0\007\uffe0\011" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\031\uffe0" +
    "\037\uffe0\041\uffe0\044\uffe0\045\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\111\uffe0\124\uffe0\001\002\000\004" +
    "\026\u01bc\001\002\000\004\026\u01bd\001\002\000\014\017" +
    "\u0159\020\005\021\036\022\006\124\035\001\002\000\056" +
    "\002\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\031\uffe1\034\u01bf\037\uffe1\041\uffe1" +
    "\044\uffe1\045\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\056" +
    "\uffe1\111\uffe1\124\uffe1\001\002\000\004\016\u01c0\001\002" +
    "\000\004\122\u01c1\001\002\000\004\023\u01c2\001\002\000" +
    "\004\026\u01c3\001\002\000\004\026\u01c4\001\002\000\014" +
    "\017\u0159\020\005\021\036\022\006\124\035\001\002\000" +
    "\054\002\uffe2\006\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\031\uffe2\037\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\111\uffe2\124\uffe2\001\002\000\004\026\u01c7\001\002\000" +
    "\004\026\u01c8\001\002\000\014\017\u0159\020\005\021\036" +
    "\022\006\124\035\001\002\000\054\002\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\031\uffdc\037\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\055\uffdc\056\uffdc\111\uffdc\124\uffdc\001\002" +
    "\000\004\026\u01cb\001\002\000\004\026\u01cc\001\002\000" +
    "\014\017\u0159\020\005\021\036\022\006\124\035\001\002" +
    "\000\056\002\uffdd\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\031\uffdd\034\u01ce\037\uffdd" +
    "\041\uffdd\044\uffdd\045\uffdd\051\uffdd\052\uffdd\053\uffdd\055" +
    "\uffdd\056\uffdd\111\uffdd\124\uffdd\001\002\000\004\016\u01cf" +
    "\001\002\000\004\122\u01d0\001\002\000\004\023\u01d1\001" +
    "\002\000\004\026\u01d2\001\002\000\004\026\u01d3\001\002" +
    "\000\014\017\u0159\020\005\021\036\022\006\124\035\001" +
    "\002\000\054\002\uffdf\006\uffdf\007\uffdf\011\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\031\uffdf\037\uffdf\041" +
    "\uffdf\044\uffdf\045\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf" +
    "\056\uffdf\111\uffdf\124\uffdf\001\002\000\010\115\u01da\116" +
    "\u01db\117\u01dc\001\002\000\004\026\u01d7\001\002\000\004" +
    "\026\u01d8\001\002\000\014\017\u0159\020\005\021\036\022" +
    "\006\124\035\001\002\000\064\002\uffd3\006\uffd3\007\uffd3" +
    "\011\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\031" +
    "\uffd3\034\uffd3\037\uffd3\041\uffd3\044\uffd3\045\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\055\uffd3\056\uffd3\111\uffd3\120\uffd3\121" +
    "\uffd3\122\uffd3\124\uffd3\001\002\000\004\023\u01ec\001\002" +
    "\000\004\023\u01e1\001\002\000\004\023\u01dd\001\002\000" +
    "\004\026\u01de\001\002\000\004\026\u01df\001\002\000\014" +
    "\017\u0159\020\005\021\036\022\006\124\035\001\002\000" +
    "\064\002\uffc5\006\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\031\uffc5\034\uffc5\037\uffc5\041" +
    "\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\111\uffc5\120\uffc5\121\uffc5\122\uffc5\124\uffc5\001" +
    "\002\000\004\026\u01e2\001\002\000\004\026\u01e3\001\002" +
    "\000\014\017\u0159\020\005\021\036\022\006\124\035\001" +
    "\002\000\066\002\uffc6\006\uffc6\007\uffc6\011\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\031\uffc6\033\u01e5\034" +
    "\uffc6\037\uffc6\041\uffc6\044\uffc6\045\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\055\uffc6\056\uffc6\111\uffc6\120\uffc6\121\uffc6\122" +
    "\uffc6\124\uffc6\001\002\000\004\016\u01e6\001\002\000\004" +
    "\117\u01e7\001\002\000\004\023\u01e8\001\002\000\004\026" +
    "\u01e9\001\002\000\004\026\u01ea\001\002\000\014\017\u0159" +
    "\020\005\021\036\022\006\124\035\001\002\000\064\002" +
    "\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\031\uffc8\034\uffc8\037\uffc8\041\uffc8\044" +
    "\uffc8\045\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8" +
    "\111\uffc8\120\uffc8\121\uffc8\122\uffc8\124\uffc8\001\002\000" +
    "\004\026\u01ed\001\002\000\004\026\u01ee\001\002\000\014" +
    "\017\u0159\020\005\021\036\022\006\124\035\001\002\000" +
    "\066\002\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\031\uffc7\033\u01f0\034\uffc7\037" +
    "\uffc7\041\uffc7\044\uffc7\045\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\055\uffc7\056\uffc7\111\uffc7\120\uffc7\121\uffc7\122\uffc7\124" +
    "\uffc7\001\002\000\004\016\u01f1\001\002\000\006\116\u01f2" +
    "\117\u01f3\001\002\000\004\023\u01f8\001\002\000\004\023" +
    "\u01f4\001\002\000\004\026\u01f5\001\002\000\004\026\u01f6" +
    "\001\002\000\014\017\u0159\020\005\021\036\022\006\124" +
    "\035\001\002\000\064\002\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\031\uffc9\034" +
    "\uffc9\037\uffc9\041\uffc9\044\uffc9\045\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\111\uffc9\120\uffc9\121\uffc9\122" +
    "\uffc9\124\uffc9\001\002\000\004\026\u01f9\001\002\000\004" +
    "\026\u01fa\001\002\000\014\017\u0159\020\005\021\036\022" +
    "\006\124\035\001\002\000\066\002\uffca\006\uffca\007\uffca" +
    "\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\031" +
    "\uffca\033\u01fc\034\uffca\037\uffca\041\uffca\044\uffca\045\uffca" +
    "\051\uffca\052\uffca\053\uffca\055\uffca\056\uffca\111\uffca\120" +
    "\uffca\121\uffca\122\uffca\124\uffca\001\002\000\004\016\u01fd" +
    "\001\002\000\004\117\u01fe\001\002\000\004\023\u01ff\001" +
    "\002\000\004\026\u0200\001\002\000\004\026\u0201\001\002" +
    "\000\014\017\u0159\020\005\021\036\022\006\124\035\001" +
    "\002\000\064\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\031\uffcb\034\uffcb\037" +
    "\uffcb\041\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\055\uffcb\056\uffcb\111\uffcb\120\uffcb\121\uffcb\122\uffcb\124" +
    "\uffcb\001\002\000\054\002\uffeb\006\uffeb\007\uffeb\011\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\031\uffeb\037" +
    "\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\055\uffeb\056\uffeb\111\uffeb\124\uffeb\001\002\000\064\002" +
    "\uffec\006\uffec\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\031\uffec\034\u0149\037\uffec\041\uffec\044" +
    "\uffec\045\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec" +
    "\111\uffec\120\u014e\121\u014b\122\u014a\124\uffec\001\002\000" +
    "\054\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\031\uffea\037\uffea\041\uffea\044" +
    "\uffea\045\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea" +
    "\111\uffea\124\uffea\001\002\000\004\002\ufffe\001\002\000" +
    "\020\011\uff0a\066\uff0a\070\uff0a\071\uff0a\072\uff0a\073\uff0a" +
    "\074\uff0a\001\002\000\012\017\u0159\020\005\021\036\022" +
    "\006\001\002\000\004\011\235\001\002\000\004\011\235" +
    "\001\002\000\004\011\235\001\002\000\004\011\235\001" +
    "\002\000\010\013\205\016\u020e\023\206\001\002\000\004" +
    "\015\u0210\001\002\000\074\002\uffbb\006\uffbb\007\uffbb\011" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\031\uffbb\033\uffbb\034\uffbb\037\uffbb\041\uffbb\044\uffbb\045" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\111\uffbb" +
    "\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\124\uffbb\001" +
    "\002\000\004\016\u0211\001\002\000\012\004\371\005\373" +
    "\010\372\014\370\001\002\000\006\013\205\023\206\001" +
    "\002\000\074\002\uffba\006\uffba\007\uffba\011\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\026\uffba\031\uffba\033" +
    "\uffba\034\uffba\037\uffba\041\uffba\044\uffba\045\uffba\051\uffba" +
    "\052\uffba\053\uffba\055\uffba\056\uffba\111\uffba\116\uffba\117" +
    "\uffba\120\uffba\121\uffba\122\uffba\124\uffba\001\002\000\010" +
    "\013\205\016\u0215\023\206\001\002\000\004\015\u0217\001" +
    "\002\000\074\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\037\uffb3\041\uffb3\044\uffb3\045\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\055\uffb3\056\uffb3\111\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\121\uffb3\122\uffb3\124\uffb3\001\002\000\004" +
    "\016\u0218\001\002\000\004\014\u0219\001\002\000\006\013" +
    "\205\023\206\001\002\000\074\002\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\026" +
    "\uffb2\031\uffb2\033\uffb2\034\uffb2\037\uffb2\041\uffb2\044\uffb2" +
    "\045\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\111" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2\124\uffb2" +
    "\001\002\000\010\013\205\016\u021c\023\206\001\002\000" +
    "\004\015\u021e\001\002\000\074\002\uffa8\006\uffa8\007\uffa8" +
    "\011\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\026" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\037\uffa8\041\uffa8\044\uffa8" +
    "\045\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8\111" +
    "\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\124\uffa8" +
    "\001\002\000\004\016\u021f\001\002\000\012\004\u0171\005" +
    "\u0174\010\u0172\014\u0170\001\002\000\006\013\205\023\206" +
    "\001\002\000\074\002\uffa7\006\uffa7\007\uffa7\011\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\026\uffa7\031\uffa7" +
    "\033\uffa7\034\uffa7\037\uffa7\041\uffa7\044\uffa7\045\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\111\uffa7\116\uffa7" +
    "\117\uffa7\120\uffa7\121\uffa7\122\uffa7\124\uffa7\001\002\000" +
    "\010\013\205\016\u0223\023\206\001\002\000\004\015\u0225" +
    "\001\002\000\074\002\uffaf\006\uffaf\007\uffaf\011\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\037\uffaf\041\uffaf\044\uffaf\045\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\111\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\122\uffaf\124\uffaf\001\002\000" +
    "\004\016\u0226\001\002\000\010\004\225\005\230\010\226" +
    "\001\002\000\006\013\205\023\206\001\002\000\074\002" +
    "\uffae\006\uffae\007\uffae\011\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\026\uffae\031\uffae\033\uffae\034\uffae\037" +
    "\uffae\041\uffae\044\uffae\045\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\056\uffae\111\uffae\116\uffae\117\uffae\120\uffae\121" +
    "\uffae\122\uffae\124\uffae\001\002\000\004\025\u022a\001\002" +
    "\000\004\023\u022b\001\002\000\004\026\101\001\002\000" +
    "\054\002\uff28\006\uff28\007\uff28\011\uff28\017\uff28\020\uff28" +
    "\021\uff28\022\uff28\023\uff28\031\uff28\037\uff28\041\uff28\044" +
    "\uff28\045\uff28\051\uff28\052\uff28\053\uff28\055\uff28\056\uff28" +
    "\111\uff28\124\uff28\001\002\000\004\052\u022e\001\002\000" +
    "\004\011\u022f\001\002\000\006\013\205\023\206\001\002" +
    "\000\054\002\uff27\006\uff27\007\uff27\011\uff27\017\uff27\020" +
    "\uff27\021\uff27\022\uff27\023\uff27\031\uff27\037\uff27\041\uff27" +
    "\044\uff27\045\uff27\051\uff27\052\uff27\053\uff27\055\uff27\056" +
    "\uff27\111\uff27\124\uff27\001\002\000\060\002\uff04\006\uff04" +
    "\007\uff04\011\uff04\017\uff04\020\uff04\021\uff04\022\uff04\023" +
    "\uff04\026\uff04\031\uff04\037\uff04\041\uff04\044\uff04\045\uff04" +
    "\051\uff04\052\uff04\053\uff04\055\uff04\056\uff04\106\u0234\111" +
    "\uff04\124\uff04\001\002\000\056\002\uff92\006\uff92\007\uff92" +
    "\011\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\026" +
    "\uff92\031\uff92\037\uff92\041\uff92\044\uff92\045\uff92\051\uff92" +
    "\052\uff92\053\uff92\055\uff92\056\uff92\111\uff92\124\uff92\001" +
    "\002\000\004\105\u0238\001\002\000\006\013\205\023\u0235" +
    "\001\002\000\006\105\uff04\106\u0234\001\002\000\004\105" +
    "\uff91\001\002\000\004\105\uff90\001\002\000\006\013\205" +
    "\023\206\001\002\000\056\002\uff93\006\uff93\007\uff93\011" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\026\uff93" +
    "\031\uff93\037\uff93\041\uff93\044\uff93\045\uff93\051\uff93\052" +
    "\uff93\053\uff93\055\uff93\056\uff93\111\uff93\124\uff93\001\002" +
    "\000\006\011\u023d\017\u023c\001\002\000\004\015\u0261\001" +
    "\002\000\004\016\u025a\001\002\000\004\016\u0259\001\002" +
    "\000\004\046\u023f\001\002\000\004\016\u0240\001\002\000" +
    "\006\004\u0241\011\u0242\001\002\000\010\013\uff4f\016\uff4f" +
    "\023\uff4f\001\002\000\010\013\uff50\016\uff50\023\uff50\001" +
    "\002\000\004\016\u0244\001\002\000\006\030\u0246\065\u0245" +
    "\001\002\000\004\016\uff58\001\002\000\004\016\uff57\001" +
    "\002\000\004\016\u0248\001\002\000\006\004\u0241\011\u0242" +
    "\001\002\000\004\016\u024a\001\002\000\010\047\u024e\050" +
    "\u024c\111\u024d\001\002\000\004\016\u0253\001\002\000\004" +
    "\016\uff55\001\002\000\006\013\205\023\206\001\002\000" +
    "\004\016\uff56\001\002\000\004\026\101\001\002\000\054" +
    "\002\uff5a\006\uff5a\007\uff5a\011\uff5a\017\uff5a\020\uff5a\021" +
    "\uff5a\022\uff5a\023\uff5a\031\uff5a\037\uff5a\041\uff5a\044\uff5a" +
    "\045\uff5a\051\uff5a\052\uff5a\053\uff5a\055\uff5a\056\uff5a\111" +
    "\uff5a\124\uff5a\001\002\000\004\006\016\001\002\000\054" +
    "\002\uff59\006\uff59\007\uff59\011\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\023\uff59\031\uff59\037\uff59\041\uff59\044\uff59" +
    "\045\uff59\051\uff59\052\uff59\053\uff59\055\uff59\056\uff59\111" +
    "\uff59\124\uff59\001\002\000\004\004\u0254\001\002\000\004" +
    "\016\u0255\001\002\000\004\111\u0256\001\002\000\006\013" +
    "\205\023\206\001\002\000\004\026\101\001\002\000\054" +
    "\002\uff5b\006\uff5b\007\uff5b\011\uff5b\017\uff5b\020\uff5b\021" +
    "\uff5b\022\uff5b\023\uff5b\031\uff5b\037\uff5b\041\uff5b\044\uff5b" +
    "\045\uff5b\051\uff5b\052\uff5b\053\uff5b\055\uff5b\056\uff5b\111" +
    "\uff5b\124\uff5b\001\002\000\006\015\uff51\046\uff54\001\002" +
    "\000\004\011\u025b\001\002\000\004\016\u025c\001\002\000" +
    "\004\015\u025d\001\002\000\004\016\u025e\001\002\000\004" +
    "\004\u025f\001\002\000\004\016\u0260\001\002\000\004\046" +
    "\uff53\001\002\000\004\016\u0262\001\002\000\004\004\u0263" +
    "\001\002\000\004\016\u0264\001\002\000\004\046\uff52\001" +
    "\002\000\004\031\u0266\001\002\000\006\016\u0267\023\uffe6" +
    "\001\002\000\004\103\u0268\001\002\000\004\016\u0269\001" +
    "\002\000\004\031\u026a\001\002\000\004\023\uffe5\001\002" +
    "\000\006\004\u026c\011\u026d\001\002\000\004\016\u0283\001" +
    "\002\000\004\016\u027e\001\002\000\004\016\u026f\001\002" +
    "\000\004\042\u0270\001\002\000\004\023\077\001\002\000" +
    "\006\013\205\023\206\001\002\000\056\002\uff63\006\uff63" +
    "\007\uff63\011\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023" +
    "\uff63\031\uff63\037\uff63\041\uff63\043\u0273\044\uff63\045\uff63" +
    "\051\uff63\052\uff63\053\uff63\055\uff63\056\uff63\111\uff63\124" +
    "\uff63\001\002\000\006\016\u0275\023\077\001\002\000\054" +
    "\002\uff64\006\uff64\007\uff64\011\uff64\017\uff64\020\uff64\021" +
    "\uff64\022\uff64\023\uff64\031\uff64\037\uff64\041\uff64\044\uff64" +
    "\045\uff64\051\uff64\052\uff64\053\uff64\055\uff64\056\uff64\111" +
    "\uff64\124\uff64\001\002\000\006\004\u026c\011\u026d\001\002" +
    "\000\006\013\205\023\206\001\002\000\054\002\uff60\006" +
    "\uff60\007\uff60\011\uff60\017\uff60\020\uff60\021\uff60\022\uff60" +
    "\023\uff60\031\uff60\037\uff60\041\uff60\044\uff60\045\uff60\051" +
    "\uff60\052\uff60\053\uff60\055\uff60\056\uff60\111\uff60\124\uff60" +
    "\001\002\000\004\016\u0279\001\002\000\004\042\u027a\001" +
    "\002\000\004\023\077\001\002\000\006\013\205\023\206" +
    "\001\002\000\056\002\uff61\006\uff61\007\uff61\011\uff61\017" +
    "\uff61\020\uff61\021\uff61\022\uff61\023\uff61\031\uff61\037\uff61" +
    "\041\uff61\043\u0273\044\uff61\045\uff61\051\uff61\052\uff61\053" +
    "\uff61\055\uff61\056\uff61\111\uff61\124\uff61\001\002\000\054" +
    "\002\uff62\006\uff62\007\uff62\011\uff62\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\023\uff62\031\uff62\037\uff62\041\uff62\044\uff62" +
    "\045\uff62\051\uff62\052\uff62\053\uff62\055\uff62\056\uff62\111" +
    "\uff62\124\uff62\001\002\000\016\054\121\107\117\110\115" +
    "\112\114\113\116\114\122\001\002\000\004\016\u0280\001" +
    "\002\000\006\004\u0281\011\u0282\001\002\000\004\016\uff5e" +
    "\001\002\000\004\016\uff5c\001\002\000\016\054\121\107" +
    "\117\110\115\112\114\113\116\114\122\001\002\000\004" +
    "\016\u0285\001\002\000\006\004\u0286\011\u0287\001\002\000" +
    "\004\016\uff5f\001\002\000\004\016\uff5d\001\002\000\004" +
    "\024\uff2a\001\002\000\004\024\uff2b\001\002\000\004\024" +
    "\uff2c\001\002\000\004\024\uff2d\001\002\000\004\024\uff2e" +
    "\001\002\000\004\024\u02ae\001\002\000\004\024\u02a9\001" +
    "\002\000\016\012\234\013\uff06\016\uff06\023\uff06\024\u0290" +
    "\077\u0291\001\002\000\014\017\246\020\242\021\245\022" +
    "\240\025\u02a3\001\002\000\006\004\u0292\100\u0293\001\002" +
    "\000\004\100\u0295\001\002\000\006\013\205\023\206\001" +
    "\002\000\054\002\uff17\006\uff17\007\uff17\011\uff17\017\uff17" +
    "\020\uff17\021\uff17\022\uff17\023\uff17\031\uff17\037\uff17\041" +
    "\uff17\044\uff17\045\uff17\051\uff17\052\uff17\053\uff17\055\uff17" +
    "\056\uff17\111\uff17\124\uff17\001\002\000\004\016\u0296\001" +
    "\002\000\004\015\u0297\001\002\000\004\101\u0298\001\002" +
    "\000\004\016\u0299\001\002\000\004\005\u029b\001\002\000" +
    "\004\102\u02a0\001\002\000\006\012\u029d\016\u029c\001\002" +
    "\000\004\102\uff1e\001\002\000\004\016\u029e\001\002\000" +
    "\004\005\u029b\001\002\000\004\102\uff1d\001\002\000\006" +
    "\013\205\023\206\001\002\000\054\002\uff23\006\uff23\007" +
    "\uff23\011\uff23\017\uff23\020\uff23\021\uff23\022\uff23\023\uff23" +
    "\031\uff23\037\uff23\041\uff23\044\uff23\045\uff23\051\uff23\052" +
    "\uff23\053\uff23\055\uff23\056\uff23\111\uff23\124\uff23\001\002" +
    "\000\004\025\u02a6\001\002\000\004\023\077\001\002\000" +
    "\004\023\u02a5\001\002\000\054\002\uff88\006\uff88\007\uff88" +
    "\011\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\031" +
    "\uff88\037\uff88\041\uff88\044\uff88\045\uff88\051\uff88\052\uff88" +
    "\053\uff88\055\uff88\056\uff88\111\uff88\124\uff88\001\002\000" +
    "\004\023\077\001\002\000\006\013\205\023\206\001\002" +
    "\000\054\002\uff8c\006\uff8c\007\uff8c\011\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\031\uff8c\037\uff8c\041\uff8c" +
    "\044\uff8c\045\uff8c\051\uff8c\052\uff8c\053\uff8c\055\uff8c\056" +
    "\uff8c\111\uff8c\124\uff8c\001\002\000\004\021\036\001\002" +
    "\000\004\011\u02ab\001\002\000\004\025\u02ac\001\002\000" +
    "\006\013\205\023\206\001\002\000\054\002\uff30\006\uff30" +
    "\007\uff30\011\uff30\017\uff30\020\uff30\021\uff30\022\uff30\023" +
    "\uff30\031\uff30\037\uff30\041\uff30\044\uff30\045\uff30\051\uff30" +
    "\052\uff30\053\uff30\055\uff30\056\uff30\111\uff30\124\uff30\001" +
    "\002\000\004\022\006\001\002\000\004\011\u02b0\001\002" +
    "\000\004\025\u02b1\001\002\000\006\013\205\023\206\001" +
    "\002\000\054\002\uff32\006\uff32\007\uff32\011\uff32\017\uff32" +
    "\020\uff32\021\uff32\022\uff32\023\uff32\031\uff32\037\uff32\041" +
    "\uff32\044\uff32\045\uff32\051\uff32\052\uff32\053\uff32\055\uff32" +
    "\056\uff32\111\uff32\124\uff32\001\002\000\004\011\u02b4\001" +
    "\002\000\006\013\205\023\206\001\002\000\054\002\uff95" +
    "\006\uff95\007\uff95\011\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\031\uff95\037\uff95\041\uff95\044\uff95\045\uff95" +
    "\051\uff95\052\uff95\053\uff95\055\uff95\056\uff95\111\uff95\124" +
    "\uff95\001\002\000\004\004\u0306\001\002\000\004\015\u02eb" +
    "\001\002\000\004\011\u02e5\001\002\000\012\004\u02bb\011" +
    "\u02bd\110\u02ba\125\u02bc\001\002\000\006\004\u02e3\011\u02e4" +
    "\001\002\000\024\013\uff3f\023\uff3f\054\121\107\117\110" +
    "\115\112\114\113\116\114\122\126\u02e1\001\002\000\006" +
    "\004\u02dd\011\u02de\001\002\000\030\013\uff40\023\uff40\054" +
    "\121\107\117\110\115\112\114\113\116\114\122\126\u02db" +
    "\127\u02ce\130\u02cd\001\002\000\006\013\uff3e\023\uff3e\001" +
    "\002\000\006\013\205\023\206\001\002\000\060\002\uff4c" +
    "\006\uff4c\007\uff4c\011\uff4c\017\uff4c\020\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\026\101\031\uff4c\037\uff4c\041\uff4c\044\uff4c" +
    "\045\uff4c\046\uff4c\051\uff4c\052\uff4c\053\uff4c\055\uff4c\056" +
    "\uff4c\111\uff4c\124\uff4c\001\002\000\004\011\u02c2\001\002" +
    "\000\010\015\u02b9\016\u02c4\060\u02b8\001\002\000\056\002" +
    "\uff48\006\uff48\007\uff48\011\uff48\017\uff48\020\uff48\021\uff48" +
    "\022\uff48\023\uff48\031\uff48\037\uff48\041\uff48\044\uff48\045" +
    "\uff48\046\uff48\051\uff48\052\uff48\053\uff48\055\uff48\056\uff48" +
    "\111\uff48\124\uff48\001\002\000\004\015\u02c5\001\002\000" +
    "\004\016\u02c6\001\002\000\010\004\u02c7\011\u02c8\110\u02ba" +
    "\001\002\000\022\013\uff3f\023\uff3f\054\121\107\117\110" +
    "\115\112\114\113\116\114\122\001\002\000\026\013\uff40" +
    "\023\uff40\054\121\107\117\110\115\112\114\113\116\114" +
    "\122\127\u02ce\130\u02cd\001\002\000\006\013\205\023\206" +
    "\001\002\000\060\002\uff4b\006\uff4b\007\uff4b\011\uff4b\017" +
    "\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\026\101\031\uff4b" +
    "\037\uff4b\041\uff4b\044\uff4b\045\uff4b\046\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\055\uff4b\056\uff4b\111\uff4b\124\uff4b\001\002" +
    "\000\004\011\u02c2\001\002\000\056\002\uff4a\006\uff4a\007" +
    "\uff4a\011\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a" +
    "\031\uff4a\037\uff4a\041\uff4a\044\uff4a\045\uff4a\046\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\055\uff4a\056\uff4a\111\uff4a\124\uff4a" +
    "\001\002\000\004\011\u02d5\001\002\000\004\011\u02d2\001" +
    "\002\000\006\004\u02d0\011\u02d1\001\002\000\006\013\uff43" +
    "\023\uff43\001\002\000\006\013\uff45\023\uff45\001\002\000" +
    "\010\013\uff3b\023\uff3b\130\u02d3\001\002\000\004\011\u02d4" +
    "\001\002\000\006\013\uff3d\023\uff3d\001\002\000\010\013" +
    "\uff3a\023\uff3a\127\u02d6\001\002\000\004\011\u02d7\001\002" +
    "\000\006\013\uff3c\023\uff3c\001\002\000\006\004\u02d9\011" +
    "\u02da\001\002\000\006\013\uff46\023\uff46\001\002\000\006" +
    "\013\uff44\023\uff44\001\002\000\006\013\205\023\206\001" +
    "\002\000\056\002\uff0d\006\uff0d\007\uff0d\011\uff0d\017\uff0d" +
    "\020\uff0d\021\uff0d\022\uff0d\023\uff0d\031\uff0d\037\uff0d\041" +
    "\uff0d\044\uff0d\045\uff0d\046\uff0d\051\uff0d\052\uff0d\053\uff0d" +
    "\055\uff0d\056\uff0d\111\uff0d\124\uff0d\001\002\000\006\013" +
    "\205\023\206\001\002\000\006\013\205\023\206\001\002" +
    "\000\056\002\uff0f\006\uff0f\007\uff0f\011\uff0f\017\uff0f\020" +
    "\uff0f\021\uff0f\022\uff0f\023\uff0f\031\uff0f\037\uff0f\041\uff0f" +
    "\044\uff0f\045\uff0f\046\uff0f\051\uff0f\052\uff0f\053\uff0f\055" +
    "\uff0f\056\uff0f\111\uff0f\124\uff0f\001\002\000\056\002\uff0e" +
    "\006\uff0e\007\uff0e\011\uff0e\017\uff0e\020\uff0e\021\uff0e\022" +
    "\uff0e\023\uff0e\031\uff0e\037\uff0e\041\uff0e\044\uff0e\045\uff0e" +
    "\046\uff0e\051\uff0e\052\uff0e\053\uff0e\055\uff0e\056\uff0e\111" +
    "\uff0e\124\uff0e\001\002\000\006\013\205\023\206\001\002" +
    "\000\056\002\uff0c\006\uff0c\007\uff0c\011\uff0c\017\uff0c\020" +
    "\uff0c\021\uff0c\022\uff0c\023\uff0c\031\uff0c\037\uff0c\041\uff0c" +
    "\044\uff0c\045\uff0c\046\uff0c\051\uff0c\052\uff0c\053\uff0c\055" +
    "\uff0c\056\uff0c\111\uff0c\124\uff0c\001\002\000\006\013\uff41" +
    "\023\uff41\001\002\000\006\013\uff42\023\uff42\001\002\000" +
    "\004\015\u02e6\001\002\000\010\004\u02c7\011\u02c8\110\u02ba" +
    "\001\002\000\006\013\205\023\206\001\002\000\060\002" +
    "\uff4d\006\uff4d\007\uff4d\011\uff4d\017\uff4d\020\uff4d\021\uff4d" +
    "\022\uff4d\023\uff4d\026\101\031\uff4d\037\uff4d\041\uff4d\044" +
    "\uff4d\045\uff4d\046\uff4d\051\uff4d\052\uff4d\053\uff4d\055\uff4d" +
    "\056\uff4d\111\uff4d\124\uff4d\001\002\000\004\011\u02c2\001" +
    "\002\000\056\002\uff49\006\uff49\007\uff49\011\uff49\017\uff49" +
    "\020\uff49\021\uff49\022\uff49\023\uff49\031\uff49\037\uff49\041" +
    "\uff49\044\uff49\045\uff49\046\uff49\051\uff49\052\uff49\053\uff49" +
    "\055\uff49\056\uff49\111\uff49\124\uff49\001\002\000\004\016" +
    "\u02ec\001\002\000\012\004\u02c7\011\u02c8\057\u02ed\110\u02ba" +
    "\001\002\000\014\017\u02ee\020\u02ef\021\u02f1\022\u02f0\031" +
    "\u02f2\001\002\000\004\077\u0302\001\002\000\004\077\u02fe" +
    "\001\002\000\004\077\u02fa\001\002\000\004\077\u02f6\001" +
    "\002\000\004\024\u02f3\001\002\000\004\025\u02f4\001\002" +
    "\000\006\013\205\023\206\001\002\000\054\002\uff67\006" +
    "\uff67\007\uff67\011\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\031\uff67\037\uff67\041\uff67\044\uff67\045\uff67\051" +
    "\uff67\052\uff67\053\uff67\055\uff67\056\uff67\111\uff67\124\uff67" +
    "\001\002\000\004\004\u02f7\001\002\000\004\100\u02f8\001" +
    "\002\000\006\013\205\023\206\001\002\000\054\002\uff11" +
    "\006\uff11\007\uff11\011\uff11\017\uff11\020\uff11\021\uff11\022" +
    "\uff11\023\uff11\031\uff11\037\uff11\041\uff11\044\uff11\045\uff11" +
    "\051\uff11\052\uff11\053\uff11\055\uff11\056\uff11\111\uff11\124" +
    "\uff11\001\002\000\004\004\u02fb\001\002\000\004\100\u02fc" +
    "\001\002\000\006\013\205\023\206\001\002\000\054\002" +
    "\uff12\006\uff12\007\uff12\011\uff12\017\uff12\020\uff12\021\uff12" +
    "\022\uff12\023\uff12\031\uff12\037\uff12\041\uff12\044\uff12\045" +
    "\uff12\051\uff12\052\uff12\053\uff12\055\uff12\056\uff12\111\uff12" +
    "\124\uff12\001\002\000\004\004\u02ff\001\002\000\004\100" +
    "\u0300\001\002\000\006\013\205\023\206\001\002\000\054" +
    "\002\uff10\006\uff10\007\uff10\011\uff10\017\uff10\020\uff10\021" +
    "\uff10\022\uff10\023\uff10\031\uff10\037\uff10\041\uff10\044\uff10" +
    "\045\uff10\051\uff10\052\uff10\053\uff10\055\uff10\056\uff10\111" +
    "\uff10\124\uff10\001\002\000\004\004\u0303\001\002\000\004" +
    "\100\u0304\001\002\000\006\013\205\023\206\001\002\000" +
    "\054\002\uff13\006\uff13\007\uff13\011\uff13\017\uff13\020\uff13" +
    "\021\uff13\022\uff13\023\uff13\031\uff13\037\uff13\041\uff13\044" +
    "\uff13\045\uff13\051\uff13\052\uff13\053\uff13\055\uff13\056\uff13" +
    "\111\uff13\124\uff13\001\002\000\004\100\u0307\001\002\000" +
    "\004\016\u0308\001\002\000\004\015\u0309\001\002\000\004" +
    "\016\u030a\001\002\000\012\004\335\005\343\010\340\014" +
    "\336\001\002\000\006\013\205\023\206\001\002\000\054" +
    "\002\uff14\006\uff14\007\uff14\011\uff14\017\uff14\020\uff14\021" +
    "\uff14\022\uff14\023\uff14\031\uff14\037\uff14\041\uff14\044\uff14" +
    "\045\uff14\051\uff14\052\uff14\053\uff14\055\uff14\056\uff14\111" +
    "\uff14\124\uff14\001\002\000\012\004\u030e\005\u0312\011\u0311" +
    "\014\u030f\001\002\000\010\012\u031f\013\uff99\023\uff99\001" +
    "\002\000\010\012\u031c\013\uff9a\023\uff9a\001\002\000\006" +
    "\013\205\023\206\001\002\000\012\012\u0317\013\uff97\023" +
    "\uff97\060\u0316\001\002\000\010\012\u0313\013\uff98\023\uff98" +
    "\001\002\000\004\016\u0314\001\002\000\012\004\u030e\005" +
    "\u0312\011\u0311\014\u030f\001\002\000\006\013\uff9c\023\uff9c" +
    "\001\002\000\004\011\u031a\001\002\000\004\016\u0318\001" +
    "\002\000\012\004\u030e\005\u0312\011\u0311\014\u030f\001\002" +
    "\000\006\013\uff9b\023\uff9b\001\002\000\006\013\uff96\023" +
    "\uff96\001\002\000\054\002\uff9f\006\uff9f\007\uff9f\011\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\031\uff9f\037" +
    "\uff9f\041\uff9f\044\uff9f\045\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\056\uff9f\111\uff9f\124\uff9f\001\002\000\004\016" +
    "\u031d\001\002\000\012\004\u030e\005\u0312\011\u0311\014\u030f" +
    "\001\002\000\006\013\uff9e\023\uff9e\001\002\000\004\016" +
    "\u0320\001\002\000\012\004\u030e\005\u0312\011\u0311\014\u030f" +
    "\001\002\000\006\013\uff9d\023\uff9d\001\002\000\004\123" +
    "\u0323\001\002\000\004\023\u0324\001\002\000\054\002\uffc1" +
    "\006\uffc1\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\031\uffc1\037\uffc1\041\uffc1\044\uffc1\045\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\111\uffc1\124" +
    "\uffc1\001\002\000\004\026\101\001\002\000\004\011\u02c2" +
    "\001\002\000\004\046\u0328\001\002\000\004\016\u0329\001" +
    "\002\000\006\004\u0241\011\u0242\001\002\000\004\016\u032b" +
    "\001\002\000\006\030\u0246\065\u0245\001\002\000\004\016" +
    "\u032d\001\002\000\006\004\u0241\011\u0242\001\002\000\006" +
    "\013\205\023\206\001\002\000\054\002\uff4e\006\uff4e\007" +
    "\uff4e\011\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e" +
    "\031\uff4e\037\uff4e\041\uff4e\044\uff4e\045\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\055\uff4e\056\uff4e\111\uff4e\124\uff4e\001\002" +
    "\000\004\002\000\001\002\000\004\011\uff08\001\002\000" +
    "\006\011\uff09\067\uff09\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0330\000\076\002\007\004\064\005\045\006\047\007" +
    "\006\010\013\011\043\015\046\016\017\017\036\022\012" +
    "\031\050\032\037\035\041\042\011\046\016\053\040\055" +
    "\042\056\053\057\022\060\051\061\060\071\027\073\055" +
    "\076\024\105\057\106\026\112\061\116\044\117\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u016a" +
    "\036\u028d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\002\u0205\004\064\005\045\006\047\007\006" +
    "\010\013\011\043\015\046\016\017\017\036\022\012\031" +
    "\050\032\037\035\041\042\011\046\016\053\040\055\042" +
    "\056\053\057\022\060\051\061\060\071\027\073\055\076" +
    "\024\105\057\106\026\112\061\116\044\117\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0123\001\001\000\002\001\001\000\004\012\353\001" +
    "\001\000\004\013\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\002\065\004\064\005\045\006\047\007\006\010\013\011" +
    "\043\015\046\016\017\017\036\022\012\031\050\032\037" +
    "\035\041\042\011\046\016\053\040\055\042\056\053\057" +
    "\022\060\051\061\060\071\027\073\055\076\024\105\057" +
    "\106\026\112\061\116\044\117\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\077\001\001\000\006\030\101" +
    "\071\102\001\001\000\002\001\001\000\004\030\202\001" +
    "\001\000\002\001\001\000\004\030\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\127\001\001\000\002" +
    "\001\001\000\004\110\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\120\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\110\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\162\001\001\000\002\001\001\000\004\110\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\221\001\001\000\002\001\001\000\004" +
    "\060\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\236\025\240\026\242\027\243\127\246" +
    "\001\001\000\004\012\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\236\025\240\026\242\027\243" +
    "\127\300\001\001\000\002\001\001\000\014\024\236\025" +
    "\240\026\242\027\243\127\273\001\001\000\002\001\001" +
    "\000\014\024\236\025\240\026\242\027\243\127\266\001" +
    "\001\000\014\024\236\025\240\026\242\027\243\127\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\253\001\001\000\004\013\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\316\001\001\000\002\001\001\000" +
    "\004\013\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\340\040\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\363\001\001\000" +
    "\002\001\001\000\004\060\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\366\001\001\000\004\013\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\236\025\240\026" +
    "\242\027\243\127\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0113\001\001\000\004\013\u0114\001\001\000\002\001\001" +
    "\000\014\024\236\025\240\026\242\027\243\127\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u011a" +
    "\041\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u0120\001\001\000\006\030\u011a\041" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\236\025" +
    "\240\026\242\027\243\127\u012c\001\001\000\002\001\001" +
    "\000\004\023\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0131\001\001\000\004\013\u0132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u013e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0142\001\001\000\002\001\001\000\004" +
    "\071\u0145\001\001\000\006\113\u0203\115\u0202\001\001\000" +
    "\002\001\001\000\006\113\u014e\115\u014c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\115\u0181\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0155" +
    "\006\047\007\006\010\013\011\043\056\u0157\057\u0156\060" +
    "\u0154\061\u015a\114\u0159\001\001\000\004\012\u0123\001\001" +
    "\000\002\001\001\000\004\012\u016a\001\001\000\004\012" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0155\006\047" +
    "\007\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061" +
    "\u015a\114\u0160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0155\006\047\007\006\010" +
    "\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0155\006\047\007\006" +
    "\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114" +
    "\u0169\001\001\000\002\001\001\000\004\013\u016c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0155" +
    "\006\047\007\006\010\013\011\043\056\u0157\057\u0156\060" +
    "\u0154\061\u015a\114\u0177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0155\006\047\007" +
    "\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a" +
    "\114\u017b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u0155\006\047" +
    "\007\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061" +
    "\u015a\114\u0180\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0155\006" +
    "\047\007\006\010\013\011\043\056\u0157\057\u0156\060\u0154" +
    "\061\u015a\114\u0185\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0155\006\047\007\006\010\013\011\043\056" +
    "\u0157\057\u0156\060\u0154\061\u015a\114\u018b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0155\006\047\007\006\010\013\011\043\056\u0157\057\u0156" +
    "\060\u0154\061\u015a\114\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u0155\006\047\007\006\010\013\011\043\056\u0157\057" +
    "\u0156\060\u0154\061\u015a\114\u0194\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0155\006" +
    "\047\007\006\010\013\011\043\056\u0157\057\u0156\060\u0154" +
    "\061\u015a\114\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0155\006\047\007\006" +
    "\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114" +
    "\u019c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0155\006\047\007" +
    "\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a" +
    "\114\u01a1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0155\006\047\007\006\010\013" +
    "\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u01a5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0155\006\047\007\006\010" +
    "\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u01aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0155\006\047\007\006\010\013\011\043\056" +
    "\u0157\057\u0156\060\u0154\061\u015a\114\u01b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0155\006\047\007\006\010\013\011\043\056" +
    "\u0157\057\u0156\060\u0154\061\u015a\114\u01b9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0155\006\047\007\006\010\013\011\043\056\u0157\057\u0156" +
    "\060\u0154\061\u015a\114\u01bd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0155\006\047\007" +
    "\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a" +
    "\114\u01c4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0155\006\047\007\006\010\013" +
    "\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u01c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u0155\006\047\007\006\010\013\011\043\056" +
    "\u0157\057\u0156\060\u0154\061\u015a\114\u01cc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0155" +
    "\006\047\007\006\010\013\011\043\056\u0157\057\u0156\060" +
    "\u0154\061\u015a\114\u01d3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u0155\006\047\007\006\010\013\011\043\056\u0157\057\u0156" +
    "\060\u0154\061\u015a\114\u01d8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0155\006\047\007" +
    "\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a" +
    "\114\u01df\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u0155\006\047\007\006\010\013" +
    "\011\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u01e3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0155\006\047\007\006\010\013\011\043\056\u0157" +
    "\057\u0156\060\u0154\061\u015a\114\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0155" +
    "\006\047\007\006\010\013\011\043\056\u0157\057\u0156\060" +
    "\u0154\061\u015a\114\u01ee\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0155" +
    "\006\047\007\006\010\013\011\043\056\u0157\057\u0156\060" +
    "\u0154\061\u015a\114\u01f6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\u0155\006\047\007" +
    "\006\010\013\011\043\056\u0157\057\u0156\060\u0154\061\u015a" +
    "\114\u01fa\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0155\006\047\007\006\010\013\011" +
    "\043\056\u0157\057\u0156\060\u0154\061\u015a\114\u0201\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\u0204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u020b\057\u0209\060\u020a\061\u0208\001\001\000" +
    "\004\012\u0221\001\001\000\004\012\u021a\001\001\000\004" +
    "\012\u0213\001\001\000\004\012\u020c\001\001\000\004\013" +
    "\u020e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u0211\001\001\000\004\013\u0212\001" +
    "\001\000\002\001\001\000\004\013\u0215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0219\001\001\000\002\001\001\000\004" +
    "\013\u021c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u021f\001\001\000\004\013\u0220" +
    "\001\001\000\002\001\001\000\004\013\u0223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u0226\001\001\000\004\013\u0227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u022c" +
    "\045\u022b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u022f\001\001\000\002\001\001" +
    "\000\004\072\u0232\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0235\001\001\000\004\072\u0236\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0238\001" +
    "\001\000\002\001\001\000\006\077\u023d\104\u023a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u0246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0248\001\001\000\002\001" +
    "\001\000\004\101\u024a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u024e\001\001\000\002\001\001\000" +
    "\006\030\u0250\103\u024f\001\001\000\002\001\001\000\004" +
    "\016\u0251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0256\001\001" +
    "\000\006\030\u0250\103\u0257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u026d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0270\001\001\000\004\013\u0271\001" +
    "\001\000\004\034\u0273\001\001\000\004\023\u0275\001\001" +
    "\000\002\001\001\000\004\033\u0277\001\001\000\004\013" +
    "\u0276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u027a\001\001\000\004\013\u027b\001" +
    "\001\000\004\034\u027c\001\001\000\002\001\001\000\004" +
    "\110\u027e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u0283\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\024\236" +
    "\025\240\026\242\027\243\127\u02a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0293\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0299\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u029e\001\001\000\002\001\001\000\004" +
    "\013\u02a0\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u02a3\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u02a6\001\001\000\004\013\u02a7\001\001\000" +
    "\002\001\001\000\004\057\u02a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u02ac\001\001\000\002\001" +
    "\001\000\004\060\u02ae\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u02b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\u02be\126\u02bd\001\001\000\002\001\001\000\004" +
    "\110\u02d7\001\001\000\002\001\001\000\004\110\u02ce\001" +
    "\001\000\002\001\001\000\004\013\u02bf\001\001\000\004" +
    "\030\u02c0\001\001\000\006\073\055\106\u02c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\u02c8\126\u02bd\001\001\000\004\110" +
    "\u02d7\001\001\000\004\110\u02ce\001\001\000\004\013\u02c9" +
    "\001\001\000\004\030\u02ca\001\001\000\006\073\055\106" +
    "\u02cb\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u02db\001\001\000\002\001\001\000\004\013\u02df\001" +
    "\001\000\004\013\u02de\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\107\u02e6\126\u02bd\001\001\000\004\013\u02e7\001\001\000" +
    "\004\030\u02e8\001\001\000\006\073\055\106\u02e9\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\107\u02c8\126" +
    "\u02bd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u02f4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u02f8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u030a\001\001\000\004\013\u030b\001\001\000\002" +
    "\001\001\000\004\020\u030f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u031a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0318\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u031d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0325\001\001\000" +
    "\006\073\055\106\u0326\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0329\001\001\000\002\001\001\000" +
    "\004\100\u032b\001\001\000\002\001\001\000\004\102\u032d" +
    "\001\001\000\004\013\u032e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CLASESA ::= tipodeclase newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASESA ::= tipodeclase newline COMM salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASESA ::= tipodeclase newline COMM salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CLASESA ::= tipodeclase newline COMM salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipodeclase ::= IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodeclase ::= IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de la clase:  "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOSCLASES ::= metodos newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de metodo: "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // METODOSCLASES ::= propum newline salto salto DEC proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODOSCLASES ::= propum newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODOSCLASES ::= proprim newline salto salto DEC proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METODOSCLASES ::= propum newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+p);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METODOSCLASES ::= proprim newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                     System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODOSCLASES ::= proprom newline salto salto DEC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de metodos revisar: "+n);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOCLASES ::= propiedades newline salto salto DEC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error especificar el tipo de propiedad "+s);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q+" " +r);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDOCLASES ::= propu newline salto salto DEC propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTENIDOCLASES ::= propu newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDOCLASES ::= propri newline salto salto DEC propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p +" " +q);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDOCLASES ::= propu newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDOCLASES ::= propri newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOCLASES ::= propro newline salto salto DEC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                    System.out.println("Error en estructura de clases revisar: "+p );
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIP ::= cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIP ::= entero 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(c); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIP ::= real 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIP ::= identificador 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
          
            System.out.println(r); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		          
            System.out.println(s+""+c+""+t); 
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCIONESS ::= reducciondetipoente identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCIONESS ::= reducciondetipocadena identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCIONESS ::= reducciondetipobol identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCIONESS ::= reducciondetiporeal identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCIONESS ::= reducciondetipoente identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCIONESS ::= reducciondetipocadena identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCIONESS ::= reducciondetipobol identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCIONESS ::= reducciondetiporeal identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANTIDADDEPARAMETROS ::= PARAMETROSE CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANTIDADDEPARAMETROS ::= PARAMETROSC CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CANTIDADDEPARAMETROS ::= PARAMETROSB CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CANTIDADDEPARAMETROS ::= PARAMETROSR CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CANTIDADDEPARAMETROS ::= PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CANTIDADDEPARAMETROS ::= PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CANTIDADDEPARAMETROS ::= PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CANTIDADDEPARAMETROS ::= PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPOF ::= newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPOF ::= newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CUERPOF ::= newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPOF ::= newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CUERPOF ::= newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CUERPOF ::= newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CUERPOF ::= newline COMM TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPOF ::= newline COMM TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPOF ::= newline COMM TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CUERPOF ::= newline COMM TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CUERPOF ::= newline COMM TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CUERPOF ::= newline COMM TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // est ::= ifs libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // est ::= ifs libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // seguimiento ::= els libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // seguimiento ::= els libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // seguimiento ::= els CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // cond ::= entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cond ::= identificador libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cond ::= entero libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cond ::= identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // operacionesmatematicas ::= OPERADORESLOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OPERADORESLOGICOS ::= identificador and identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OPERADORESLOGICOS ::= identificador or identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OPERADORESLOGICOS ::= identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OPERADORESLOGICOS ::= identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // simbolosdeopera ::= porc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         int valor=0;
        try {
	valor= Integer.parseInt((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un entero"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FunE ::= reducciondetiporeal tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int x= 0;
         Double valor=0.0;
        try {
	valor= Double.parseDouble((String) s);
		x= 0;
	} catch (NumberFormatException nfe){
		x=1;
	}
          if(x==0){
            
		 System.out.println("Es un numero " +valor  ); 
	}else{
             System.out.println("No es un numero real"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // FunE ::= reducciondetipobol tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            String compara=(String)s;
          if(compara.compareTo("verdadero")==0||compara.compareTo("falso")==0){
          	 System.out.println("Cambio exitoso"); 
	}else{
             System.out.println("no se puede realizar el cambio"); 
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;
		
            
          
          	 System.out.println("Operacion matematica"); 
	
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FunE ::= tipo_ent identificador para tipo_ent libre identificador parb newline CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // contructoDes ::= constru para CANTIDADDEPARAMETROS parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TiposArr ::= identificador libre asignacion libre insta tipo_ent corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TiposArr ::= identificador libre asignacion libre insta tipo_cadena corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TiposArr ::= identificador libre asignacion libre insta tipo_real corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TiposArr ::= identificador libre asignacion libre insta tipo_bol corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
