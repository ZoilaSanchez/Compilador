
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\112\007\000" +
    "\002\116\005\000\002\116\011\000\002\115\027\000\002" +
    "\115\020\000\002\115\020\000\002\115\020\000\002\115" +
    "\011\000\002\115\011\000\002\115\011\000\002\113\027" +
    "\000\002\113\020\000\002\113\020\000\002\113\020\000" +
    "\002\113\011\000\002\113\011\000\002\113\011\000\002" +
    "\114\003\000\002\114\004\000\002\114\006\000\002\117" +
    "\006\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\005\000\002\006\007\000" +
    "\002\006\013\000\002\006\011\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\007" +
    "\005\000\002\007\007\000\002\007\013\000\002\007\011" +
    "\000\002\010\005\000\002\010\007\000\002\010\013\000" +
    "\002\010\011\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\011\005\000\002\011\007\000\002\011" +
    "\013\000\002\011\011\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\017\006\000\002\071\004\000" +
    "\002\071\007\000\002\071\004\000\002\072\004\000\002" +
    "\072\005\000\002\022\011\000\002\022\010\000\002\022" +
    "\011\000\002\022\011\000\002\024\006\000\002\024\004" +
    "\000\002\025\007\000\002\025\005\000\002\026\007\000" +
    "\002\026\005\000\002\027\006\000\002\027\004\000\002" +
    "\023\013\000\002\023\006\000\002\023\017\000\002\120" +
    "\003\000\002\120\003\000\002\031\015\000\002\031\016" +
    "\000\002\031\013\000\002\031\005\000\002\037\006\000" +
    "\002\032\011\000\002\032\010\000\002\034\011\000\002" +
    "\034\010\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\076\024\000\002\076\020" +
    "\000\002\103\004\000\002\100\003\000\002\100\003\000" +
    "\002\101\003\000\002\101\003\000\002\077\004\000\002" +
    "\077\012\000\002\077\007\000\002\104\004\000\002\102" +
    "\003\000\002\102\003\000\002\105\016\000\002\121\003" +
    "\000\002\106\010\000\002\106\006\000\002\106\010\000" +
    "\002\106\012\000\002\106\012\000\002\106\010\000\002" +
    "\106\003\000\002\107\005\000\002\107\005\000\002\107" +
    "\005\000\002\107\005\000\002\107\004\000\002\107\004" +
    "\000\002\107\003\000\002\107\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\035\011\000\002\035\011\000\002\035" +
    "\011\000\002\035\011\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\042\017\000\002\042\007\000\002\041\003\000\002" +
    "\045\006\000\002\046\016\000\002\046\016\000\002\046" +
    "\016\000\002\046\016\000\002\047\004\000\002\047\006" +
    "\000\002\050\004\000\002\050\006\000\002\051\004\000" +
    "\002\051\006\000\002\052\004\000\002\052\006\000\002" +
    "\053\007\000\002\053\007\000\002\053\007\000\002\053" +
    "\007\000\002\053\013\000\002\053\014\000\002\073\007" +
    "\000\002\073\007\000\002\073\007\000\002\073\007\000" +
    "\002\056\004\000\002\057\004\000\002\061\004\000\002" +
    "\060\004\000\002\012\005\000\002\012\003\000\002\013" +
    "\004\000\002\013\003\000\002\030\004\000\002\030\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\052\006\016\007\022\011\021\017\064\020" +
    "\005\021\036\022\006\023\004\031\057\037\027\041\024" +
    "\044\053\045\031\051\033\052\063\053\015\055\055\056" +
    "\032\111\011\124\035\001\002\000\054\002\uffed\006\uffed" +
    "\007\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\031\uffed\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed" +
    "\052\uffed\053\uffed\055\uffed\056\uffed\111\uffed\124\uffed\001" +
    "\002\000\004\016\u027c\001\002\000\004\016\u027b\001\002" +
    "\000\062\002\uffd6\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\026\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\055\uffd6\056\uffd6\111\uffd6\124\uffd6\001\002" +
    "\000\004\002\u027a\001\002\000\004\023\u026f\001\002\000" +
    "\054\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\031\ufff0\037\ufff0\041\ufff0\044" +
    "\ufff0\045\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0" +
    "\111\ufff0\124\ufff0\001\002\000\054\002\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\031\ufffa\037\ufffa\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\055\ufffa\056\ufffa\111\ufffa\124\ufffa\001\002" +
    "\000\062\002\uffd5\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\031\uffd5\033\uffd5" +
    "\034\uffd5\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\055\uffd5\056\uffd5\111\uffd5\124\uffd5\001\002" +
    "\000\004\016\u026c\001\002\000\004\016\u0257\001\002\000" +
    "\054\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\031\uffef\037\uffef\041\uffef\044" +
    "\uffef\045\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef" +
    "\111\uffef\124\uffef\001\002\000\054\002\uffb8\006\uffb8\007" +
    "\uffb8\011\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\031\uffb8\037\uffb8\041\uffb8\044\uffb8\045\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\055\uffb8\056\uffb8\111\uffb8\124\uffb8\001\002" +
    "\000\012\015\340\016\u0243\060\337\077\u0242\001\002\000" +
    "\004\016\u023f\001\002\000\016\011\u021d\070\u021f\071\u021e" +
    "\072\u021c\073\u021b\074\u0219\001\002\000\006\004\u0200\011" +
    "\u0201\001\002\000\054\002\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\031\ufff7\037" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\055\ufff7\056\ufff7\111\ufff7\124\ufff7\001\002\000\054\002" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\031\ufff6\037\ufff6\041\ufff6\044\ufff6\045" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\111\ufff6" +
    "\124\ufff6\001\002\000\004\016\u01fa\001\002\000\054\002" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\031\ufff8\037\ufff8\041\ufff8\044\ufff8\045" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\111\ufff8" +
    "\124\ufff8\001\002\000\004\016\u01cf\001\002\000\006\013" +
    "\071\023\u01c6\001\002\000\004\024\u01be\001\002\000\054" +
    "\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\031\ufff3\037\ufff3\041\ufff3\044\ufff3" +
    "\045\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\111" +
    "\ufff3\124\ufff3\001\002\000\004\016\u019d\001\002\000\004" +
    "\016\u019c\001\002\000\054\002\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\031\uffb7" +
    "\037\uffb7\041\uffb7\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\111\uffb7\124\uffb7\001\002\000\054" +
    "\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\031\ufff2\037\ufff2\041\ufff2\044\ufff2" +
    "\045\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056\ufff2\111" +
    "\ufff2\124\ufff2\001\002\000\054\002\uffee\006\uffee\007\uffee" +
    "\011\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\031" +
    "\uffee\037\uffee\041\uffee\044\uffee\045\uffee\051\uffee\052\uffee" +
    "\053\uffee\055\uffee\056\uffee\111\uffee\124\uffee\001\002\000" +
    "\054\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\031\ufff1\037\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1" +
    "\111\ufff1\124\ufff1\001\002\000\054\002\uffff\006\016\007" +
    "\022\011\021\017\064\020\005\021\036\022\006\023\004" +
    "\031\057\037\027\041\024\044\053\045\031\051\033\052" +
    "\063\053\015\055\055\056\032\111\011\124\035\001\002" +
    "\000\062\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\037\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\055\uffd4\056\uffd4\111\uffd4\124\uffd4\001\002" +
    "\000\004\023\u012e\001\002\000\054\002\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\031\ufffc\037\ufffc\041\ufffc\044\ufffc\045\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\055\ufffc\056\ufffc\111\ufffc\124\ufffc\001\002" +
    "\000\054\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\031\ufffb\037\ufffb\041\ufffb" +
    "\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\111\ufffb\124\ufffb\001\002\000\062\002\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\031\uffd7\033\uffd7\034\uffd7\037\uffd7\041\uffd7" +
    "\044\uffd7\045\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\056" +
    "\uffd7\111\uffd7\124\uffd7\001\002\000\054\002\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9\124\ufff9\001" +
    "\002\000\004\011\u010c\001\002\000\004\024\314\001\002" +
    "\000\012\011\224\066\227\067\226\076\230\001\002\000" +
    "\006\013\071\023\072\001\002\000\056\002\uff73\006\uff73" +
    "\007\uff73\011\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023" +
    "\uff73\031\uff73\037\uff73\041\uff73\044\uff73\045\uff73\046\uff73" +
    "\051\uff73\052\uff73\053\uff73\055\uff73\056\uff73\111\uff73\124" +
    "\uff73\001\002\000\004\016\176\001\002\000\054\002\ufff5" +
    "\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\045\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5\111\ufff5\124" +
    "\ufff5\001\002\000\004\011\075\001\002\000\054\002\ufff4" +
    "\006\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\031\ufff4\037\ufff4\041\ufff4\044\ufff4\045\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\111\ufff4\124" +
    "\ufff4\001\002\000\004\011\070\001\002\000\004\016\067" +
    "\001\002\000\054\002\001\006\016\007\022\011\021\017" +
    "\064\020\005\021\036\022\006\023\004\031\057\037\027" +
    "\041\024\044\053\045\031\051\033\052\063\053\015\055" +
    "\055\056\032\111\011\124\035\001\002\000\004\002\ufffd" +
    "\001\002\000\012\011\uff42\066\uff42\067\uff42\076\uff42\001" +
    "\002\000\006\013\071\023\072\001\002\000\004\023\074" +
    "\001\002\000\066\002\uff3b\006\uff3b\007\uff3b\011\uff3b\017" +
    "\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\026\uff3b\031\uff3b" +
    "\033\uff3b\034\uff3b\037\uff3b\041\uff3b\043\uff3b\044\uff3b\045" +
    "\uff3b\046\uff3b\051\uff3b\052\uff3b\053\uff3b\055\uff3b\056\uff3b" +
    "\111\uff3b\124\uff3b\001\002\000\054\002\uff92\006\uff92\007" +
    "\uff92\011\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\031\uff92\037\uff92\041\uff92\044\uff92\045\uff92\051\uff92\052" +
    "\uff92\053\uff92\055\uff92\056\uff92\111\uff92\124\uff92\001\002" +
    "\000\070\002\uff3c\006\uff3c\007\uff3c\011\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\022\uff3c\023\uff3c\026\uff3c\031\uff3c\033\uff3c" +
    "\034\uff3c\037\uff3c\041\uff3c\043\uff3c\044\uff3c\045\uff3c\046" +
    "\uff3c\051\uff3c\052\uff3c\053\uff3c\055\uff3c\056\uff3c\105\uff3c" +
    "\111\uff3c\124\uff3c\001\002\000\016\012\112\013\uff3d\016" +
    "\uff3d\023\uff3d\024\110\077\111\001\002\000\010\013\071" +
    "\016\077\023\072\001\002\000\004\015\101\001\002\000" +
    "\062\002\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\026\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\037\uffc7\041\uffc7\044\uffc7\045\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\055\uffc7\056\uffc7\111\uffc7\124\uffc7\001\002\000" +
    "\004\016\102\001\002\000\010\004\103\005\106\010\104" +
    "\001\002\000\006\013\uffc3\023\uffc3\001\002\000\006\013" +
    "\uffc1\023\uffc1\001\002\000\006\013\071\023\072\001\002" +
    "\000\006\013\uffc2\023\uffc2\001\002\000\062\002\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4\037\uffc4\041" +
    "\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\111\uffc4\124\uffc4\001\002\000\004\020\136\001" +
    "\002\000\006\004\115\100\116\001\002\000\004\011\113" +
    "\001\002\000\012\012\112\013\uff3d\016\uff3d\023\uff3d\001" +
    "\002\000\010\013\uff3e\016\uff3e\023\uff3e\001\002\000\004" +
    "\100\120\001\002\000\006\013\071\023\072\001\002\000" +
    "\054\002\uff4a\006\uff4a\007\uff4a\011\uff4a\017\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\031\uff4a\037\uff4a\041\uff4a\044" +
    "\uff4a\045\uff4a\051\uff4a\052\uff4a\053\uff4a\055\uff4a\056\uff4a" +
    "\111\uff4a\124\uff4a\001\002\000\004\016\121\001\002\000" +
    "\004\015\122\001\002\000\004\101\123\001\002\000\004" +
    "\016\124\001\002\000\004\010\126\001\002\000\004\102" +
    "\133\001\002\000\006\012\130\016\127\001\002\000\004" +
    "\102\uff4e\001\002\000\004\016\131\001\002\000\004\010" +
    "\126\001\002\000\004\102\uff4d\001\002\000\006\013\071" +
    "\023\072\001\002\000\054\002\uff55\006\uff55\007\uff55\011" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\031\uff55" +
    "\037\uff55\041\uff55\044\uff55\045\uff55\051\uff55\052\uff55\053" +
    "\uff55\055\uff55\056\uff55\111\uff55\124\uff55\001\002\000\004" +
    "\025\143\001\002\000\004\016\137\001\002\000\004\011" +
    "\140\001\002\000\006\012\141\025\uff9d\001\002\000\004" +
    "\020\136\001\002\000\004\025\uff9e\001\002\000\004\023" +
    "\144\001\002\000\004\026\147\001\002\000\006\013\071" +
    "\023\072\001\002\000\054\002\uffa4\006\uffa4\007\uffa4\011" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\031\uffa4" +
    "\037\uffa4\041\uffa4\044\uffa4\045\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\055\uffa4\056\uffa4\111\uffa4\124\uffa4\001\002\000\014" +
    "\006\uff39\011\uff39\026\147\035\uff39\052\uff39\001\002\000" +
    "\004\035\151\001\002\000\010\004\153\011\154\016\152" +
    "\001\002\000\004\011\170\001\002\000\006\013\uff99\023" +
    "\uff99\001\002\000\006\107\156\110\155\001\002\000\006" +
    "\011\uff96\016\uff96\001\002\000\006\011\uff97\016\uff97\001" +
    "\002\000\004\011\160\001\002\000\004\024\161\001\002" +
    "\000\004\011\162\001\002\000\004\016\163\001\002\000" +
    "\006\107\156\110\155\001\002\000\004\016\165\001\002" +
    "\000\004\004\166\001\002\000\004\025\167\001\002\000" +
    "\006\013\uff98\023\uff98\001\002\000\004\016\171\001\002" +
    "\000\004\064\172\001\002\000\004\016\173\001\002\000" +
    "\004\011\174\001\002\000\006\013\uff9a\023\uff9a\001\002" +
    "\000\012\006\uff3a\011\uff3a\035\uff3a\052\uff3a\001\002\000" +
    "\004\011\177\001\002\000\004\016\200\001\002\000\004" +
    "\015\201\001\002\000\004\016\202\001\002\000\004\057" +
    "\203\001\002\000\004\031\204\001\002\000\004\024\205" +
    "\001\002\000\014\004\206\005\214\010\211\014\207\025" +
    "\213\001\002\000\012\012\uff38\013\uff38\023\uff38\025\uff38" +
    "\001\002\000\012\012\uff37\013\uff37\023\uff37\025\uff37\001" +
    "\002\000\004\012\220\001\002\000\012\012\uff36\013\uff36" +
    "\023\uff36\025\uff36\001\002\000\004\025\216\001\002\000" +
    "\006\013\071\023\072\001\002\000\012\012\uff35\013\uff35" +
    "\023\uff35\025\uff35\001\002\000\054\002\uff95\006\uff95\007" +
    "\uff95\011\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\031\uff95\037\uff95\041\uff95\044\uff95\045\uff95\051\uff95\052" +
    "\uff95\053\uff95\055\uff95\056\uff95\111\uff95\124\uff95\001\002" +
    "\000\006\013\071\023\072\001\002\000\054\002\uff94\006" +
    "\uff94\007\uff94\011\uff94\017\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\031\uff94\037\uff94\041\uff94\044\uff94\045\uff94\051" +
    "\uff94\052\uff94\053\uff94\055\uff94\056\uff94\111\uff94\124\uff94" +
    "\001\002\000\004\016\221\001\002\000\012\004\206\005" +
    "\214\010\211\014\207\001\002\000\004\025\uff91\001\002" +
    "\000\054\002\uffab\006\uffab\007\uffab\011\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\031\uffab\037\uffab\041\uffab" +
    "\044\uffab\045\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056" +
    "\uffab\111\uffab\124\uffab\001\002\000\016\012\112\013\uff3d" +
    "\016\uff3d\023\uff3d\024\262\077\263\001\002\000\010\013" +
    "\071\016\250\023\072\001\002\000\004\024\243\001\002" +
    "\000\004\024\236\001\002\000\004\024\231\001\002\000" +
    "\004\022\006\001\002\000\004\011\233\001\002\000\004" +
    "\025\234\001\002\000\006\013\071\023\072\001\002\000" +
    "\054\002\uff65\006\uff65\007\uff65\011\uff65\017\uff65\020\uff65" +
    "\021\uff65\022\uff65\023\uff65\031\uff65\037\uff65\041\uff65\044" +
    "\uff65\045\uff65\051\uff65\052\uff65\053\uff65\055\uff65\056\uff65" +
    "\111\uff65\124\uff65\001\002\000\004\022\006\001\002\000" +
    "\004\011\240\001\002\000\004\025\241\001\002\000\006" +
    "\013\071\023\072\001\002\000\054\002\uff64\006\uff64\007" +
    "\uff64\011\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64" +
    "\031\uff64\037\uff64\041\uff64\044\uff64\045\uff64\051\uff64\052" +
    "\uff64\053\uff64\055\uff64\056\uff64\111\uff64\124\uff64\001\002" +
    "\000\004\022\006\001\002\000\004\011\245\001\002\000" +
    "\004\025\246\001\002\000\006\013\071\023\072\001\002" +
    "\000\054\002\uff63\006\uff63\007\uff63\011\uff63\017\uff63\020" +
    "\uff63\021\uff63\022\uff63\023\uff63\031\uff63\037\uff63\041\uff63" +
    "\044\uff63\045\uff63\051\uff63\052\uff63\053\uff63\055\uff63\056" +
    "\uff63\111\uff63\124\uff63\001\002\000\004\015\252\001\002" +
    "\000\062\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\037\uffd3\041\uffd3\044\uffd3\045\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\111\uffd3\124\uffd3\001\002" +
    "\000\004\016\253\001\002\000\012\004\255\005\260\010" +
    "\257\014\256\001\002\000\006\013\071\023\072\001\002" +
    "\000\006\013\uffcf\023\uffcf\001\002\000\006\013\uffcd\023" +
    "\uffcd\001\002\000\006\013\uffcc\023\uffcc\001\002\000\006" +
    "\013\uffce\023\uffce\001\002\000\062\002\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\026\uffd0\031\uffd0\033\uffd0\034\uffd0\037\uffd0\041\uffd0\044" +
    "\uffd0\045\uffd0\051\uffd0\052\uffd0\053\uffd0\055\uffd0\056\uffd0" +
    "\111\uffd0\124\uffd0\001\002\000\004\017\064\001\002\000" +
    "\006\004\264\100\265\001\002\000\004\100\267\001\002" +
    "\000\006\013\071\023\072\001\002\000\054\002\uff4c\006" +
    "\uff4c\007\uff4c\011\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c" +
    "\023\uff4c\031\uff4c\037\uff4c\041\uff4c\044\uff4c\045\uff4c\051" +
    "\uff4c\052\uff4c\053\uff4c\055\uff4c\056\uff4c\111\uff4c\124\uff4c" +
    "\001\002\000\004\016\270\001\002\000\004\015\271\001" +
    "\002\000\004\101\272\001\002\000\004\016\273\001\002" +
    "\000\004\004\274\001\002\000\006\012\301\016\300\001" +
    "\002\000\004\102\276\001\002\000\006\013\071\023\072" +
    "\001\002\000\054\002\uff58\006\uff58\007\uff58\011\uff58\017" +
    "\uff58\020\uff58\021\uff58\022\uff58\023\uff58\031\uff58\037\uff58" +
    "\041\uff58\044\uff58\045\uff58\051\uff58\052\uff58\053\uff58\055" +
    "\uff58\056\uff58\111\uff58\124\uff58\001\002\000\004\102\uff54" +
    "\001\002\000\004\016\302\001\002\000\004\004\274\001" +
    "\002\000\004\102\uff53\001\002\000\004\025\311\001\002" +
    "\000\004\011\306\001\002\000\006\012\307\025\uffa1\001" +
    "\002\000\004\017\064\001\002\000\004\025\uffa2\001\002" +
    "\000\004\023\144\001\002\000\006\013\071\023\072\001" +
    "\002\000\054\002\uffa6\006\uffa6\007\uffa6\011\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\031\uffa6\037\uffa6\041" +
    "\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6" +
    "\056\uffa6\111\uffa6\124\uffa6\001\002\000\012\017\316\020" +
    "\315\021\321\022\320\001\002\000\006\016\uff32\077\uff32" +
    "\001\002\000\006\016\uff34\077\uff34\001\002\000\004\016" +
    "\322\001\002\000\006\016\uff33\077\uff33\001\002\000\006" +
    "\016\uff31\077\uff31\001\002\000\004\011\323\001\002\000" +
    "\004\012\324\001\002\000\004\016\325\001\002\000\012" +
    "\017\316\020\315\021\321\022\320\001\002\000\004\016" +
    "\327\001\002\000\004\011\330\001\002\000\004\025\331" +
    "\001\002\000\004\023\332\001\002\000\004\011\333\001" +
    "\002\000\010\015\340\016\336\060\337\001\002\000\054" +
    "\002\uff5a\006\uff5a\007\uff5a\011\uff5a\017\uff5a\020\uff5a\021" +
    "\uff5a\022\uff5a\023\uff5a\031\uff5a\037\uff5a\041\uff5a\044\uff5a" +
    "\045\uff5a\051\uff5a\052\uff5a\053\uff5a\055\uff5a\056\uff5a\111" +
    "\uff5a\124\uff5a\001\002\000\054\002\uff5c\006\uff5c\007\uff5c" +
    "\011\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\031" +
    "\uff5c\037\uff5c\041\uff5c\044\uff5c\045\uff5c\051\uff5c\052\uff5c" +
    "\053\uff5c\055\uff5c\056\uff5c\111\uff5c\124\uff5c\001\002\000" +
    "\004\015\u0106\001\002\000\004\011\376\001\002\000\012" +
    "\004\342\011\344\110\341\125\343\001\002\000\006\004" +
    "\374\011\375\001\002\000\022\013\uff6b\023\uff6b\107\355" +
    "\110\353\112\351\113\352\114\357\126\367\001\002\000" +
    "\006\004\363\011\364\001\002\000\022\013\uff6c\023\uff6c" +
    "\107\355\110\353\112\351\113\352\114\357\126\354\001" +
    "\002\000\006\013\071\023\072\001\002\000\060\002\uff78" +
    "\006\uff78\007\uff78\011\uff78\017\uff78\020\uff78\021\uff78\022" +
    "\uff78\023\uff78\026\147\031\uff78\037\uff78\041\uff78\044\uff78" +
    "\045\uff78\046\uff78\051\uff78\052\uff78\053\uff78\055\uff78\056" +
    "\uff78\111\uff78\124\uff78\001\002\000\004\011\333\001\002" +
    "\000\056\002\uff74\006\uff74\007\uff74\011\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\031\uff74\037\uff74\041\uff74" +
    "\044\uff74\045\uff74\046\uff74\051\uff74\052\uff74\053\uff74\055" +
    "\uff74\056\uff74\111\uff74\124\uff74\001\002\000\006\004\uff68" +
    "\011\uff68\001\002\000\006\004\uff67\011\uff67\001\002\000" +
    "\006\004\uff69\011\uff69\001\002\000\006\013\071\023\072" +
    "\001\002\000\006\004\uff6a\011\uff6a\001\002\000\006\004" +
    "\360\011\361\001\002\000\006\004\uff66\011\uff66\001\002" +
    "\000\006\013\uff6f\023\uff6f\001\002\000\006\013\uff71\023" +
    "\uff71\001\002\000\056\002\uff44\006\uff44\007\uff44\011\uff44" +
    "\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44\031\uff44\037" +
    "\uff44\041\uff44\044\uff44\045\uff44\046\uff44\051\uff44\052\uff44" +
    "\053\uff44\055\uff44\056\uff44\111\uff44\124\uff44\001\002\000" +
    "\006\013\071\023\072\001\002\000\006\013\071\023\072" +
    "\001\002\000\056\002\uff46\006\uff46\007\uff46\011\uff46\017" +
    "\uff46\020\uff46\021\uff46\022\uff46\023\uff46\031\uff46\037\uff46" +
    "\041\uff46\044\uff46\045\uff46\046\uff46\051\uff46\052\uff46\053" +
    "\uff46\055\uff46\056\uff46\111\uff46\124\uff46\001\002\000\056" +
    "\002\uff45\006\uff45\007\uff45\011\uff45\017\uff45\020\uff45\021" +
    "\uff45\022\uff45\023\uff45\031\uff45\037\uff45\041\uff45\044\uff45" +
    "\045\uff45\046\uff45\051\uff45\052\uff45\053\uff45\055\uff45\056" +
    "\uff45\111\uff45\124\uff45\001\002\000\006\013\071\023\072" +
    "\001\002\000\006\004\371\011\372\001\002\000\006\013" +
    "\uff72\023\uff72\001\002\000\006\013\uff70\023\uff70\001\002" +
    "\000\056\002\uff43\006\uff43\007\uff43\011\uff43\017\uff43\020" +
    "\uff43\021\uff43\022\uff43\023\uff43\031\uff43\037\uff43\041\uff43" +
    "\044\uff43\045\uff43\046\uff43\051\uff43\052\uff43\053\uff43\055" +
    "\uff43\056\uff43\111\uff43\124\uff43\001\002\000\006\013\uff6d" +
    "\023\uff6d\001\002\000\006\013\uff6e\023\uff6e\001\002\000" +
    "\004\015\377\001\002\000\010\004\u0100\011\u0101\110\341" +
    "\001\002\000\020\013\uff6b\023\uff6b\107\355\110\353\112" +
    "\351\113\352\114\357\001\002\000\020\013\uff6c\023\uff6c" +
    "\107\355\110\353\112\351\113\352\114\357\001\002\000" +
    "\006\013\071\023\072\001\002\000\060\002\uff79\006\uff79" +
    "\007\uff79\011\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023" +
    "\uff79\026\147\031\uff79\037\uff79\041\uff79\044\uff79\045\uff79" +
    "\046\uff79\051\uff79\052\uff79\053\uff79\055\uff79\056\uff79\111" +
    "\uff79\124\uff79\001\002\000\004\011\333\001\002\000\056" +
    "\002\uff75\006\uff75\007\uff75\011\uff75\017\uff75\020\uff75\021" +
    "\uff75\022\uff75\023\uff75\031\uff75\037\uff75\041\uff75\044\uff75" +
    "\045\uff75\046\uff75\051\uff75\052\uff75\053\uff75\055\uff75\056" +
    "\uff75\111\uff75\124\uff75\001\002\000\004\016\u0107\001\002" +
    "\000\010\004\u0100\011\u0101\110\341\001\002\000\006\013" +
    "\071\023\072\001\002\000\060\002\uff77\006\uff77\007\uff77" +
    "\011\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\026" +
    "\147\031\uff77\037\uff77\041\uff77\044\uff77\045\uff77\046\uff77" +
    "\051\uff77\052\uff77\053\uff77\055\uff77\056\uff77\111\uff77\124" +
    "\uff77\001\002\000\004\011\333\001\002\000\056\002\uff76" +
    "\006\uff76\007\uff76\011\uff76\017\uff76\020\uff76\021\uff76\022" +
    "\uff76\023\uff76\031\uff76\037\uff76\041\uff76\044\uff76\045\uff76" +
    "\046\uff76\051\uff76\052\uff76\053\uff76\055\uff76\056\uff76\111" +
    "\uff76\124\uff76\001\002\000\016\012\112\013\uff3d\016\uff3d" +
    "\023\uff3d\024\u0115\077\u0114\001\002\000\010\013\071\016" +
    "\u010e\023\072\001\002\000\004\015\u0110\001\002\000\062" +
    "\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\026\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\037\uffcb\041\uffcb\044\uffcb\045\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\055\uffcb\056\uffcb\111\uffcb\124\uffcb\001\002\000\004" +
    "\016\u0111\001\002\000\004\014\u0112\001\002\000\006\013" +
    "\071\023\072\001\002\000\062\002\uffc8\006\uffc8\007\uffc8" +
    "\011\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\037\uffc8\041\uffc8\044\uffc8" +
    "\045\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\111" +
    "\uffc8\124\uffc8\001\002\000\006\004\u011e\100\u011f\001\002" +
    "\000\004\022\u0116\001\002\000\004\016\u011a\001\002\000" +
    "\004\023\144\001\002\000\006\013\071\023\072\001\002" +
    "\000\054\002\uffa5\006\uffa5\007\uffa5\011\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\031\uffa5\037\uffa5\041\uffa5" +
    "\044\uffa5\045\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056" +
    "\uffa5\111\uffa5\124\uffa5\001\002\000\004\011\u011b\001\002" +
    "\000\006\012\u011c\023\uff9f\001\002\000\004\022\u0116\001" +
    "\002\000\004\023\uffa0\001\002\000\004\100\u0121\001\002" +
    "\000\006\013\071\023\072\001\002\000\054\002\uff49\006" +
    "\uff49\007\uff49\011\uff49\017\uff49\020\uff49\021\uff49\022\uff49" +
    "\023\uff49\031\uff49\037\uff49\041\uff49\044\uff49\045\uff49\051" +
    "\uff49\052\uff49\053\uff49\055\uff49\056\uff49\111\uff49\124\uff49" +
    "\001\002\000\004\016\u0122\001\002\000\004\015\u0123\001" +
    "\002\000\004\101\u0124\001\002\000\004\016\u0125\001\002" +
    "\000\004\014\u0126\001\002\000\006\012\u012b\016\u012a\001" +
    "\002\000\004\102\u0128\001\002\000\006\013\071\023\072" +
    "\001\002\000\054\002\uff56\006\uff56\007\uff56\011\uff56\017" +
    "\uff56\020\uff56\021\uff56\022\uff56\023\uff56\031\uff56\037\uff56" +
    "\041\uff56\044\uff56\045\uff56\051\uff56\052\uff56\053\uff56\055" +
    "\uff56\056\uff56\111\uff56\124\uff56\001\002\000\004\102\uff50" +
    "\001\002\000\004\016\u012c\001\002\000\004\014\u0126\001" +
    "\002\000\004\102\uff4f\001\002\000\004\026\u012f\001\002" +
    "\000\004\033\u0130\001\002\000\004\016\u0171\001\002\000" +
    "\004\034\u0133\001\002\000\054\002\uffec\006\uffec\007\uffec" +
    "\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\031" +
    "\uffec\037\uffec\041\uffec\044\uffec\045\uffec\051\uffec\052\uffec" +
    "\053\uffec\055\uffec\056\uffec\111\uffec\124\uffec\001\002\000" +
    "\004\016\u0134\001\002\000\010\120\u0137\121\u0135\122\u0136" +
    "\001\002\000\004\023\u0166\001\002\000\004\023\u0162\001" +
    "\002\000\004\023\u0138\001\002\000\004\026\u0139\001\002" +
    "\000\004\026\u013a\001\002\000\014\017\064\020\005\021" +
    "\036\022\006\124\035\001\002\000\004\011\113\001\002" +
    "\000\062\002\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\026\u015f\031\uffdb\033\uffdb" +
    "\034\uffdb\037\uffdb\041\uffdb\044\uffdb\045\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\056\uffdb\111\uffdb\124\uffdb\001\002" +
    "\000\004\011\113\001\002\000\004\011\113\001\002\000" +
    "\056\002\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\031\uffe5\034\u0141\037\uffe5\041" +
    "\uffe5\044\uffe5\045\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5" +
    "\056\uffe5\111\uffe5\124\uffe5\001\002\000\004\011\113\001" +
    "\002\000\004\016\u0142\001\002\000\006\121\u0143\122\u0144" +
    "\001\002\000\004\023\u0149\001\002\000\004\023\u0145\001" +
    "\002\000\004\026\u0146\001\002\000\004\026\u0147\001\002" +
    "\000\014\017\064\020\005\021\036\022\006\124\035\001" +
    "\002\000\054\002\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\031\uffe7\037\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7" +
    "\056\uffe7\111\uffe7\124\uffe7\001\002\000\004\026\u014a\001" +
    "\002\000\004\026\u014b\001\002\000\014\017\064\020\005" +
    "\021\036\022\006\124\035\001\002\000\056\002\uffe8\006" +
    "\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\031\uffe8\034\u014d\037\uffe8\041\uffe8\044\uffe8\045" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\111\uffe8" +
    "\124\uffe8\001\002\000\004\016\u014e\001\002\000\004\122" +
    "\u014f\001\002\000\004\023\u0150\001\002\000\004\026\u0151" +
    "\001\002\000\004\026\u0152\001\002\000\014\017\064\020" +
    "\005\021\036\022\006\124\035\001\002\000\054\002\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\031\uffe9\037\uffe9\041\uffe9\044\uffe9\045\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\055\uffe9\056\uffe9\111\uffe9\124" +
    "\uffe9\001\002\000\010\013\071\016\u0155\023\072\001\002" +
    "\000\004\015\u0157\001\002\000\062\002\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\026\uffc0\031\uffc0\033\uffc0\034\uffc0\037\uffc0\041\uffc0\044" +
    "\uffc0\045\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0" +
    "\111\uffc0\124\uffc0\001\002\000\004\016\u0158\001\002\000" +
    "\012\004\u0159\005\u015d\010\u015b\014\u015a\001\002\000\006" +
    "\013\uffbc\023\uffbc\001\002\000\006\013\uffba\023\uffba\001" +
    "\002\000\006\013\uffb9\023\uffb9\001\002\000\006\013\071" +
    "\023\072\001\002\000\006\013\uffbb\023\uffbb\001\002\000" +
    "\062\002\uffbd\006\uffbd\007\uffbd\011\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\026\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\037\uffbd\041\uffbd\044\uffbd\045\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\055\uffbd\056\uffbd\111\uffbd\124\uffbd\001\002\000" +
    "\062\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\026\u0160\031\uffda\033\uffda\034" +
    "\uffda\037\uffda\041\uffda\044\uffda\045\uffda\051\uffda\052\uffda" +
    "\053\uffda\055\uffda\056\uffda\111\uffda\124\uffda\001\002\000" +
    "\014\017\064\020\005\021\036\022\006\124\035\001\002" +
    "\000\060\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\037\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\055\uffd9\056\uffd9\111\uffd9\124\uffd9\001\002\000\004" +
    "\026\u0163\001\002\000\004\026\u0164\001\002\000\014\017" +
    "\064\020\005\021\036\022\006\124\035\001\002\000\054" +
    "\002\uffe3\006\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\031\uffe3\037\uffe3\041\uffe3\044\uffe3" +
    "\045\uffe3\051\uffe3\052\uffe3\053\uffe3\055\uffe3\056\uffe3\111" +
    "\uffe3\124\uffe3\001\002\000\004\026\u0167\001\002\000\004" +
    "\026\u0168\001\002\000\014\017\064\020\005\021\036\022" +
    "\006\124\035\001\002\000\056\002\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\031" +
    "\uffe4\034\u016a\037\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\056\uffe4\111\uffe4\124\uffe4\001" +
    "\002\000\004\016\u016b\001\002\000\004\122\u016c\001\002" +
    "\000\004\023\u016d\001\002\000\004\026\u016e\001\002\000" +
    "\004\026\u016f\001\002\000\014\017\064\020\005\021\036" +
    "\022\006\124\035\001\002\000\054\002\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\031\uffe6\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\055\uffe6\056\uffe6\111\uffe6\124\uffe6\001\002" +
    "\000\010\115\u0173\116\u0172\117\u0174\001\002\000\004\023" +
    "\u0190\001\002\000\004\023\u0179\001\002\000\004\023\u0175" +
    "\001\002\000\004\026\u0176\001\002\000\004\026\u0177\001" +
    "\002\000\014\017\064\020\005\021\036\022\006\124\035" +
    "\001\002\000\004\034\uffdc\001\002\000\004\026\u017a\001" +
    "\002\000\004\026\u017b\001\002\000\014\017\064\020\005" +
    "\021\036\022\006\124\035\001\002\000\006\033\u017d\034" +
    "\uffde\001\002\000\004\016\u017e\001\002\000\006\116\u017f" +
    "\117\u0180\001\002\000\004\023\u0185\001\002\000\004\023" +
    "\u0181\001\002\000\004\026\u0182\001\002\000\004\026\u0183" +
    "\001\002\000\014\017\064\020\005\021\036\022\006\124" +
    "\035\001\002\000\004\034\uffe0\001\002\000\004\026\u0186" +
    "\001\002\000\004\026\u0187\001\002\000\014\017\064\020" +
    "\005\021\036\022\006\124\035\001\002\000\006\033\u0189" +
    "\034\uffe1\001\002\000\004\016\u018a\001\002\000\004\117" +
    "\u018b\001\002\000\004\023\u018c\001\002\000\004\026\u018d" +
    "\001\002\000\004\026\u018e\001\002\000\014\017\064\020" +
    "\005\021\036\022\006\124\035\001\002\000\004\034\uffe2" +
    "\001\002\000\004\026\u0191\001\002\000\004\026\u0192\001" +
    "\002\000\014\017\064\020\005\021\036\022\006\124\035" +
    "\001\002\000\006\033\u0194\034\uffdd\001\002\000\004\016" +
    "\u0195\001\002\000\004\117\u0196\001\002\000\004\023\u0197" +
    "\001\002\000\004\026\u0198\001\002\000\004\026\u0199\001" +
    "\002\000\014\017\064\020\005\021\036\022\006\124\035" +
    "\001\002\000\004\034\uffdf\001\002\000\004\002\ufffe\001" +
    "\002\000\016\011\uff41\070\uff41\071\uff41\072\uff41\073\uff41" +
    "\074\uff41\001\002\000\012\017\064\020\005\021\036\022" +
    "\006\001\002\000\004\011\113\001\002\000\004\011\113" +
    "\001\002\000\004\011\113\001\002\000\004\011\113\001" +
    "\002\000\010\013\071\016\u01a3\023\072\001\002\000\004" +
    "\015\u01a5\001\002\000\062\002\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\037\uffd2\041\uffd2\044\uffd2\045" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\111\uffd2" +
    "\124\uffd2\001\002\000\004\016\u01a6\001\002\000\012\004" +
    "\255\005\260\010\257\014\256\001\002\000\006\013\071" +
    "\023\072\001\002\000\062\002\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111\uffd1" +
    "\124\uffd1\001\002\000\010\013\071\016\u01aa\023\072\001" +
    "\002\000\004\015\u01ac\001\002\000\062\002\uffca\006\uffca" +
    "\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\026\uffca\031\uffca\033\uffca\034\uffca\037\uffca\041\uffca" +
    "\044\uffca\045\uffca\051\uffca\052\uffca\053\uffca\055\uffca\056" +
    "\uffca\111\uffca\124\uffca\001\002\000\004\016\u01ad\001\002" +
    "\000\004\014\u01ae\001\002\000\006\013\071\023\072\001" +
    "\002\000\062\002\uffc9\006\uffc9\007\uffc9\011\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\031\uffc9\033" +
    "\uffc9\034\uffc9\037\uffc9\041\uffc9\044\uffc9\045\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\055\uffc9\056\uffc9\111\uffc9\124\uffc9\001" +
    "\002\000\010\013\071\016\u01b1\023\072\001\002\000\004" +
    "\015\u01b3\001\002\000\062\002\uffbf\006\uffbf\007\uffbf\011" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\037\uffbf\041\uffbf\044\uffbf\045" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\111\uffbf" +
    "\124\uffbf\001\002\000\004\016\u01b4\001\002\000\012\004" +
    "\u0159\005\u015d\010\u015b\014\u015a\001\002\000\006\013\071" +
    "\023\072\001\002\000\062\002\uffbe\006\uffbe\007\uffbe\011" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\037\uffbe\041\uffbe\044\uffbe\045" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\111\uffbe" +
    "\124\uffbe\001\002\000\010\013\071\016\u01b8\023\072\001" +
    "\002\000\004\015\u01ba\001\002\000\062\002\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\026\uffc6\031\uffc6\033\uffc6\034\uffc6\037\uffc6\041\uffc6" +
    "\044\uffc6\045\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\111\uffc6\124\uffc6\001\002\000\004\016\u01bb\001\002" +
    "\000\010\004\103\005\106\010\104\001\002\000\006\013" +
    "\071\023\072\001\002\000\062\002\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\037\uffc5\041\uffc5\044\uffc5" +
    "\045\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056\uffc5\111" +
    "\uffc5\124\uffc5\001\002\000\004\025\u01bf\001\002\000\004" +
    "\023\u01c0\001\002\000\004\026\147\001\002\000\054\002" +
    "\uff5b\006\uff5b\007\uff5b\011\uff5b\017\uff5b\020\uff5b\021\uff5b" +
    "\022\uff5b\023\uff5b\031\uff5b\037\uff5b\041\uff5b\044\uff5b\045" +
    "\uff5b\051\uff5b\052\uff5b\053\uff5b\055\uff5b\056\uff5b\111\uff5b" +
    "\124\uff5b\001\002\000\004\052\u01c3\001\002\000\004\011" +
    "\u01c4\001\002\000\006\013\071\023\072\001\002\000\054" +
    "\002\uff59\006\uff59\007\uff59\011\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\023\uff59\031\uff59\037\uff59\041\uff59\044\uff59" +
    "\045\uff59\051\uff59\052\uff59\053\uff59\055\uff59\056\uff59\111" +
    "\uff59\124\uff59\001\002\000\056\002\uff3b\006\uff3b\007\uff3b" +
    "\011\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\031" +
    "\uff3b\037\uff3b\041\uff3b\044\uff3b\045\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\055\uff3b\056\uff3b\106\u01c9\111\uff3b\124\uff3b\001" +
    "\002\000\054\002\uffa9\006\uffa9\007\uffa9\011\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\031\uffa9\037\uffa9\041" +
    "\uffa9\044\uffa9\045\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9" +
    "\056\uffa9\111\uffa9\124\uffa9\001\002\000\004\105\u01cd\001" +
    "\002\000\006\013\071\023\u01ca\001\002\000\006\105\uff3b" +
    "\106\u01c9\001\002\000\004\105\uffa8\001\002\000\004\105" +
    "\uffa7\001\002\000\006\013\071\023\072\001\002\000\054" +
    "\002\uffaa\006\uffaa\007\uffaa\011\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\031\uffaa\037\uffaa\041\uffaa\044\uffaa" +
    "\045\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\056\uffaa\111" +
    "\uffaa\124\uffaa\001\002\000\006\011\u01d1\017\u01d2\001\002" +
    "\000\004\015\u01f6\001\002\000\004\016\u01f5\001\002\000" +
    "\004\016\u01ee\001\002\000\004\046\u01d4\001\002\000\004" +
    "\016\u01d5\001\002\000\006\004\u01d6\011\u01d7\001\002\000" +
    "\010\013\uff7c\016\uff7c\023\uff7c\001\002\000\010\013\uff7d" +
    "\016\uff7d\023\uff7d\001\002\000\004\016\u01d9\001\002\000" +
    "\006\030\u01db\065\u01da\001\002\000\004\016\uff85\001\002" +
    "\000\004\016\uff84\001\002\000\004\016\u01dd\001\002\000" +
    "\006\004\u01d6\011\u01d7\001\002\000\004\016\u01df\001\002" +
    "\000\010\047\u01e3\050\u01e1\111\u01e2\001\002\000\004\016" +
    "\u01e8\001\002\000\004\016\uff82\001\002\000\006\013\071" +
    "\023\072\001\002\000\004\016\uff83\001\002\000\004\026" +
    "\147\001\002\000\054\002\uff87\006\uff87\007\uff87\011\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\031\uff87\037" +
    "\uff87\041\uff87\044\uff87\045\uff87\051\uff87\052\uff87\053\uff87" +
    "\055\uff87\056\uff87\111\uff87\124\uff87\001\002\000\004\006" +
    "\016\001\002\000\054\002\uff86\006\uff86\007\uff86\011\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\031\uff86\037" +
    "\uff86\041\uff86\044\uff86\045\uff86\051\uff86\052\uff86\053\uff86" +
    "\055\uff86\056\uff86\111\uff86\124\uff86\001\002\000\004\004" +
    "\u01e9\001\002\000\004\016\u01ea\001\002\000\004\111\u01eb" +
    "\001\002\000\006\013\071\023\072\001\002\000\004\026" +
    "\147\001\002\000\054\002\uff88\006\uff88\007\uff88\011\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\031\uff88\037" +
    "\uff88\041\uff88\044\uff88\045\uff88\051\uff88\052\uff88\053\uff88" +
    "\055\uff88\056\uff88\111\uff88\124\uff88\001\002\000\004\011" +
    "\u01ef\001\002\000\004\016\u01f0\001\002\000\004\015\u01f1" +
    "\001\002\000\004\016\u01f2\001\002\000\004\004\u01f3\001" +
    "\002\000\004\016\u01f4\001\002\000\004\046\uff80\001\002" +
    "\000\006\015\uff7e\046\uff81\001\002\000\004\016\u01f7\001" +
    "\002\000\004\004\u01f8\001\002\000\004\016\u01f9\001\002" +
    "\000\004\046\uff7f\001\002\000\004\031\u01fb\001\002\000" +
    "\006\016\u01fc\023\uffeb\001\002\000\004\103\u01fd\001\002" +
    "\000\004\016\u01fe\001\002\000\004\031\u01ff\001\002\000" +
    "\004\023\uffea\001\002\000\004\016\u0214\001\002\000\004" +
    "\016\u020f\001\002\000\004\016\u0203\001\002\000\004\042" +
    "\u0204\001\002\000\004\023\144\001\002\000\006\013\071" +
    "\023\072\001\002\000\056\002\uff8f\006\uff8f\007\uff8f\011" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\031\uff8f" +
    "\037\uff8f\041\uff8f\043\u0207\044\uff8f\045\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\055\uff8f\056\uff8f\111\uff8f\124\uff8f\001\002" +
    "\000\006\004\u0200\011\u0201\001\002\000\054\002\uff90\006" +
    "\uff90\007\uff90\011\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\031\uff90\037\uff90\041\uff90\044\uff90\045\uff90\051" +
    "\uff90\052\uff90\053\uff90\055\uff90\056\uff90\111\uff90\124\uff90" +
    "\001\002\000\004\016\u020a\001\002\000\004\042\u020b\001" +
    "\002\000\004\023\144\001\002\000\006\013\071\023\072" +
    "\001\002\000\056\002\uff8d\006\uff8d\007\uff8d\011\uff8d\017" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\031\uff8d\037\uff8d" +
    "\041\uff8d\043\u0207\044\uff8d\045\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\055\uff8d\056\uff8d\111\uff8d\124\uff8d\001\002\000\054" +
    "\002\uff8e\006\uff8e\007\uff8e\011\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\031\uff8e\037\uff8e\041\uff8e\044\uff8e" +
    "\045\uff8e\051\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e\111" +
    "\uff8e\124\uff8e\001\002\000\004\064\u0210\001\002\000\004" +
    "\016\u0211\001\002\000\006\004\u0212\011\u0213\001\002\000" +
    "\004\016\uff8b\001\002\000\004\016\uff89\001\002\000\004" +
    "\064\u0215\001\002\000\004\016\u0216\001\002\000\006\004" +
    "\u0217\011\u0218\001\002\000\004\016\uff8c\001\002\000\004" +
    "\016\uff8a\001\002\000\004\024\uff5d\001\002\000\004\024" +
    "\u023a\001\002\000\004\024\uff5e\001\002\000\004\024\uff5f" +
    "\001\002\000\016\012\112\013\uff3d\016\uff3d\023\uff3d\024" +
    "\u0220\077\u0221\001\002\000\004\024\uff60\001\002\000\004" +
    "\024\uff61\001\002\000\004\021\036\001\002\000\006\004" +
    "\u0222\100\u0223\001\002\000\004\100\u0225\001\002\000\006" +
    "\013\071\023\072\001\002\000\054\002\uff4b\006\uff4b\007" +
    "\uff4b\011\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b" +
    "\031\uff4b\037\uff4b\041\uff4b\044\uff4b\045\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\055\uff4b\056\uff4b\111\uff4b\124\uff4b\001\002" +
    "\000\004\016\u0226\001\002\000\004\015\u0227\001\002\000" +
    "\004\101\u0228\001\002\000\004\016\u0229\001\002\000\004" +
    "\005\u022b\001\002\000\004\102\u0230\001\002\000\006\012" +
    "\u022d\016\u022c\001\002\000\004\102\uff52\001\002\000\004" +
    "\016\u022e\001\002\000\004\005\u022b\001\002\000\004\102" +
    "\uff51\001\002\000\006\013\071\023\072\001\002\000\054" +
    "\002\uff57\006\uff57\007\uff57\011\uff57\017\uff57\020\uff57\021" +
    "\uff57\022\uff57\023\uff57\031\uff57\037\uff57\041\uff57\044\uff57" +
    "\045\uff57\051\uff57\052\uff57\053\uff57\055\uff57\056\uff57\111" +
    "\uff57\124\uff57\001\002\000\004\025\u0237\001\002\000\004" +
    "\011\u0234\001\002\000\006\012\u0235\025\uff9b\001\002\000" +
    "\004\021\036\001\002\000\004\025\uff9c\001\002\000\004" +
    "\023\144\001\002\000\006\013\071\023\072\001\002\000" +
    "\054\002\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\031\uffa3\037\uffa3\041\uffa3\044" +
    "\uffa3\045\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3" +
    "\111\uffa3\124\uffa3\001\002\000\004\021\036\001\002\000" +
    "\004\011\u023c\001\002\000\004\025\u023d\001\002\000\006" +
    "\013\071\023\072\001\002\000\054\002\uff62\006\uff62\007" +
    "\uff62\011\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62" +
    "\031\uff62\037\uff62\041\uff62\044\uff62\045\uff62\051\uff62\052" +
    "\uff62\053\uff62\055\uff62\056\uff62\111\uff62\124\uff62\001\002" +
    "\000\004\011\u0240\001\002\000\006\013\071\023\072\001" +
    "\002\000\054\002\uffac\006\uffac\007\uffac\011\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\031\uffac\037\uffac\041" +
    "\uffac\044\uffac\045\uffac\051\uffac\052\uffac\053\uffac\055\uffac" +
    "\056\uffac\111\uffac\124\uffac\001\002\000\004\004\u0250\001" +
    "\002\000\004\015\u0244\001\002\000\004\016\u0245\001\002" +
    "\000\012\004\u0100\011\u0101\057\u0246\110\341\001\002\000" +
    "\014\017\316\020\315\021\321\022\320\031\u0248\001\002" +
    "\000\004\077\u024c\001\002\000\004\024\u0249\001\002\000" +
    "\004\025\u024a\001\002\000\006\013\071\023\072\001\002" +
    "\000\054\002\uff93\006\uff93\007\uff93\011\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\023\uff93\031\uff93\037\uff93\041\uff93" +
    "\044\uff93\045\uff93\051\uff93\052\uff93\053\uff93\055\uff93\056" +
    "\uff93\111\uff93\124\uff93\001\002\000\004\004\u024d\001\002" +
    "\000\004\100\u024e\001\002\000\006\013\071\023\072\001" +
    "\002\000\054\002\uff47\006\uff47\007\uff47\011\uff47\017\uff47" +
    "\020\uff47\021\uff47\022\uff47\023\uff47\031\uff47\037\uff47\041" +
    "\uff47\044\uff47\045\uff47\051\uff47\052\uff47\053\uff47\055\uff47" +
    "\056\uff47\111\uff47\124\uff47\001\002\000\004\100\u0251\001" +
    "\002\000\004\016\u0252\001\002\000\004\015\u0253\001\002" +
    "\000\004\016\u0254\001\002\000\012\004\206\005\214\010" +
    "\211\014\207\001\002\000\006\013\071\023\072\001\002" +
    "\000\054\002\uff48\006\uff48\007\uff48\011\uff48\017\uff48\020" +
    "\uff48\021\uff48\022\uff48\023\uff48\031\uff48\037\uff48\041\uff48" +
    "\044\uff48\045\uff48\051\uff48\052\uff48\053\uff48\055\uff48\056" +
    "\uff48\111\uff48\124\uff48\001\002\000\012\004\u0258\005\u025c" +
    "\011\u025b\014\u0259\001\002\000\010\012\u0269\013\uffb0\023" +
    "\uffb0\001\002\000\010\012\u0266\013\uffb1\023\uffb1\001\002" +
    "\000\006\013\071\023\072\001\002\000\012\012\u0261\013" +
    "\uffae\023\uffae\060\u0260\001\002\000\010\012\u025d\013\uffaf" +
    "\023\uffaf\001\002\000\004\016\u025e\001\002\000\012\004" +
    "\u0258\005\u025c\011\u025b\014\u0259\001\002\000\006\013\uffb3" +
    "\023\uffb3\001\002\000\004\011\u0264\001\002\000\004\016" +
    "\u0262\001\002\000\012\004\u0258\005\u025c\011\u025b\014\u0259" +
    "\001\002\000\006\013\uffb2\023\uffb2\001\002\000\006\013" +
    "\uffad\023\uffad\001\002\000\054\002\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\031" +
    "\uffb6\037\uffb6\041\uffb6\044\uffb6\045\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\055\uffb6\056\uffb6\111\uffb6\124\uffb6\001\002\000" +
    "\004\016\u0267\001\002\000\012\004\u0258\005\u025c\011\u025b" +
    "\014\u0259\001\002\000\006\013\uffb5\023\uffb5\001\002\000" +
    "\004\016\u026a\001\002\000\012\004\u0258\005\u025c\011\u025b" +
    "\014\u0259\001\002\000\006\013\uffb4\023\uffb4\001\002\000" +
    "\004\123\u026d\001\002\000\004\023\u026e\001\002\000\054" +
    "\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\031\uffd8\037\uffd8\041\uffd8\044\uffd8" +
    "\045\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\111" +
    "\uffd8\124\uffd8\001\002\000\004\026\147\001\002\000\004" +
    "\011\333\001\002\000\004\046\u0272\001\002\000\004\016" +
    "\u0273\001\002\000\006\004\u01d6\011\u01d7\001\002\000\004" +
    "\016\u0275\001\002\000\006\030\u01db\065\u01da\001\002\000" +
    "\004\016\u0277\001\002\000\006\004\u01d6\011\u01d7\001\002" +
    "\000\006\013\071\023\072\001\002\000\054\002\uff7b\006" +
    "\uff7b\007\uff7b\011\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\031\uff7b\037\uff7b\041\uff7b\044\uff7b\045\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\055\uff7b\056\uff7b\111\uff7b\124\uff7b" +
    "\001\002\000\004\002\000\001\002\000\004\011\uff3f\001" +
    "\002\000\004\011\uff40\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027a\000\076\002\007\004\064\005\045\006\047\007" +
    "\006\010\013\011\043\015\046\016\017\017\036\022\012" +
    "\031\050\032\037\035\041\042\011\046\016\053\040\055" +
    "\042\056\053\057\022\060\051\061\060\071\027\073\055" +
    "\076\024\105\057\106\025\112\061\116\044\117\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0153" +
    "\036\u0219\001\001\000\004\033\u0201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01c6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\002\u019a\004\064\005\045\006\047" +
    "\007\006\010\013\011\043\015\046\016\017\017\036\022" +
    "\012\031\050\032\037\035\041\042\011\046\016\053\040" +
    "\055\042\056\053\057\022\060\051\061\060\071\027\073" +
    "\055\076\024\105\057\106\025\112\061\116\044\117\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u010c\001\001\000\002\001\001\000\004\012" +
    "\224\001\001\000\004\013\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\002\065\004\064\005\045\006\047\007\006\010" +
    "\013\011\043\015\046\016\017\017\036\022\012\031\050" +
    "\032\037\035\041\042\011\046\016\053\040\055\042\056" +
    "\053\057\022\060\051\061\060\071\027\073\055\076\024" +
    "\105\057\106\025\112\061\116\044\117\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\134\001\001\000\002\001\001\000\004" +
    "\012\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\131\001\001\000\002\001\001\000\004\013\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\141" +
    "\001\001\000\002\001\001\000\004\023\144\001\001\000" +
    "\004\030\147\001\001\000\004\013\145\001\001\000\002" +
    "\001\001\000\004\030\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\211\040\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\234\001\001\000\002\001\001\000\004\060" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\241\001\001\000\002\001\001\000\004\060\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\253\001\001\000\004" +
    "\013\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\303\056\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\307\056\304\001\001\000\002" +
    "\001\001\000\004\023\311\001\001\000\004\013\312\001" +
    "\001\000\002\001\001\000\004\043\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\334\073\055\106\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\344\001\001\000\002\001" +
    "\001\000\004\110\367\001\001\000\002\001\001\000\004" +
    "\110\355\001\001\000\004\013\345\001\001\000\004\030" +
    "\346\001\001\000\006\073\055\106\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\365\001\001\000\004" +
    "\013\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\u0101\001\001" +
    "\000\004\110\367\001\001\000\004\110\355\001\001\000" +
    "\004\013\u0102\001\001\000\004\030\u0103\001\001\000\006" +
    "\073\055\106\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u0107\001\001\000\004\013\u0108\001\001" +
    "\000\004\030\u0109\001\001\000\006\073\055\106\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u010e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0116\001\001\000" +
    "\002\001\001\000\004\023\u0117\001\001\000\004\013\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u011f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u0130" +
    "\001\001\000\002\001\001\000\004\115\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u013b\006\047\007\006" +
    "\010\013\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114" +
    "\u013e\001\001\000\004\012\u010c\001\001\000\002\001\001" +
    "\000\004\012\u0153\001\001\000\004\012\224\001\001\000" +
    "\002\001\001\000\004\012\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u013b\006\047" +
    "\007\006\010\013\011\043\056\u013d\057\u013c\060\u013a\061" +
    "\u013f\114\u0147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u013b\006\047\007\006\010" +
    "\013\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u013b\006\047\007\006\010\013\011\043\056" +
    "\u013d\057\u013c\060\u013a\061\u013f\114\u0152\001\001\000\002" +
    "\001\001\000\004\013\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u015b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u013b\006\047\007\006\010" +
    "\013\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u013b\006\047\007\006\010\013\011\043" +
    "\056\u013d\057\u013c\060\u013a\061\u013f\114\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u013b\006\047\007\006\010\013\011\043\056\u013d\057" +
    "\u013c\060\u013a\061\u013f\114\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u013b\006\047" +
    "\007\006\010\013\011\043\056\u013d\057\u013c\060\u013a\061" +
    "\u013f\114\u016f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u013b\006\047" +
    "\007\006\010\013\011\043\056\u013d\057\u013c\060\u013a\061" +
    "\u013f\114\u0177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u013b\006\047\007\006\010" +
    "\013\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114\u017b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u013b\006\047\007\006\010" +
    "\013\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114\u0183" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u013b\006\047\007\006\010\013\011\043" +
    "\056\u013d\057\u013c\060\u013a\061\u013f\114\u0187\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u013b\006\047\007\006\010\013\011\043\056\u013d\057\u013c" +
    "\060\u013a\061\u013f\114\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u013b\006\047" +
    "\007\006\010\013\011\043\056\u013d\057\u013c\060\u013a\061" +
    "\u013f\114\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u013b\006\047\007\006\010\013" +
    "\011\043\056\u013d\057\u013c\060\u013a\061\u013f\114\u0199\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u01a0\057\u019e\060\u019f\061\u019d\001\001\000" +
    "\004\012\u01b6\001\001\000\004\012\u01af\001\001\000\004" +
    "\012\u01a8\001\001\000\004\012\u01a1\001\001\000\004\013" +
    "\u01a3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u01a6\001\001\000\004\013\u01a7\001" +
    "\001\000\002\001\001\000\004\013\u01aa\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u01ae\001\001\000\002\001\001\000\004" +
    "\013\u01b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u01b4\001\001\000\004\013\u01b5" +
    "\001\001\000\002\001\001\000\004\013\u01b8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u01bb\001\001\000\004\013\u01bc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u01c1" +
    "\045\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01c4\001\001\000\002\001\001" +
    "\000\004\072\u01c7\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u01ca\001\001\000\004\072\u01cb\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u01cd\001" +
    "\001\000\002\001\001\000\006\077\u01d2\104\u01cf\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u01d7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u01db\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u01dd\001\001\000\002\001" +
    "\001\000\004\101\u01df\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01e3\001\001\000\002\001\001\000" +
    "\006\030\u01e5\103\u01e4\001\001\000\002\001\001\000\004" +
    "\016\u01e6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u01eb\001\001" +
    "\000\006\030\u01e5\103\u01ec\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0204" +
    "\001\001\000\004\013\u0205\001\001\000\004\034\u0207\001" +
    "\001\000\004\033\u0208\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u020b\001\001\000" +
    "\004\013\u020c\001\001\000\004\034\u020d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0231\057\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0229\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u022e\001\001\000\002\001" +
    "\001\000\004\013\u0230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u0235\057\u0232\001\001\000\002\001\001\000\004\023\u0237" +
    "\001\001\000\004\013\u0238\001\001\000\002\001\001\000" +
    "\004\057\u023a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u023d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\u0107\001\001\000\004\043\u0246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u024a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u024e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0254\001\001\000\004\013\u0255\001\001\000" +
    "\002\001\001\000\004\020\u0259\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u025e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u026a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u026f\001\001" +
    "\000\006\073\055\106\u0270\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0273\001\001\000\002\001\001" +
    "\000\004\100\u0275\001\001\000\002\001\001\000\004\102" +
    "\u0277\001\001\000\004\013\u0278\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPOF ::= newline TABULA retornar identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPORE ::= CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPORE",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
