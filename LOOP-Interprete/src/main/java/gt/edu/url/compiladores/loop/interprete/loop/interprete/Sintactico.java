
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\352\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\112\006\000\002\112\006\000\002\112\007\000\002" +
    "\116\005\000\002\116\011\000\002\115\027\000\002\115" +
    "\020\000\002\115\020\000\002\115\020\000\002\115\011" +
    "\000\002\115\011\000\002\115\011\000\002\113\027\000" +
    "\002\113\020\000\002\113\020\000\002\113\020\000\002" +
    "\113\011\000\002\113\011\000\002\113\011\000\002\114" +
    "\003\000\002\114\004\000\002\114\006\000\002\117\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\007\000\002" +
    "\006\013\000\002\006\011\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\007\005" +
    "\000\002\007\007\000\002\007\013\000\002\007\011\000" +
    "\002\010\005\000\002\010\007\000\002\010\013\000\002" +
    "\010\011\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\011\005\000\002\011\007\000\002\011\013" +
    "\000\002\011\011\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\005\000\002\017\006\000\002\071\004\000\002" +
    "\071\007\000\002\071\004\000\002\072\004\000\002\072" +
    "\005\000\002\022\011\000\002\022\011\000\002\022\011" +
    "\000\002\022\011\000\002\022\010\000\002\022\010\000" +
    "\002\022\010\000\002\022\010\000\002\024\007\000\002" +
    "\024\005\000\002\025\007\000\002\025\005\000\002\026" +
    "\007\000\002\026\005\000\002\027\007\000\002\027\005" +
    "\000\002\127\004\000\002\127\004\000\002\127\004\000" +
    "\002\127\004\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\127\003\000\002\023\013\000\002\023" +
    "\007\000\002\023\013\000\002\023\013\000\002\023\007" +
    "\000\002\023\020\000\002\120\003\000\002\120\003\000" +
    "\002\031\015\000\002\031\016\000\002\031\013\000\002" +
    "\031\005\000\002\037\006\000\002\032\012\000\002\032" +
    "\011\000\002\034\012\000\002\034\011\000\002\034\005" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\076\024\000\002\076\020\000\002" +
    "\103\004\000\002\100\003\000\002\100\003\000\002\101" +
    "\003\000\002\101\003\000\002\077\004\000\002\077\012" +
    "\000\002\077\007\000\002\104\004\000\002\102\003\000" +
    "\002\102\003\000\002\105\016\000\002\106\010\000\002" +
    "\106\006\000\002\106\010\000\002\106\012\000\002\106" +
    "\012\000\002\106\010\000\002\106\003\000\002\107\005" +
    "\000\002\107\005\000\002\107\005\000\002\107\005\000" +
    "\002\107\004\000\002\107\004\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\126\007\000\002\126" +
    "\007\000\002\126\005\000\002\126\005\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\035" +
    "\013\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\042\010\000" +
    "\002\042\007\000\002\045\006\000\002\041\011\000\002" +
    "\041\012\000\002\046\016\000\002\046\016\000\002\046" +
    "\016\000\002\046\016\000\002\047\004\000\002\047\006" +
    "\000\002\050\004\000\002\050\006\000\002\051\004\000" +
    "\002\051\006\000\002\052\004\000\002\052\006\000\002" +
    "\053\007\000\002\053\007\000\002\053\007\000\002\053" +
    "\007\000\002\053\013\000\002\053\014\000\002\053\014" +
    "\000\002\053\014\000\002\053\014\000\002\073\007\000" +
    "\002\073\007\000\002\073\007\000\002\073\007\000\002" +
    "\056\004\000\002\057\004\000\002\061\004\000\002\060" +
    "\004\000\002\012\005\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\030\004\000\002\030\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02be\000\052\006\016\007\022\011\021\017\065\020" +
    "\005\021\037\022\006\023\004\031\060\037\026\041\024" +
    "\044\054\045\031\051\033\052\064\053\015\055\056\056" +
    "\032\111\011\124\035\001\002\000\054\002\uffec\006\uffec" +
    "\007\uffec\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\031\uffec\037\uffec\041\uffec\044\uffec\045\uffec\051\uffec" +
    "\052\uffec\053\uffec\055\uffec\056\uffec\111\uffec\124\uffec\001" +
    "\002\000\004\016\u02c0\001\002\000\004\016\u02bf\001\002" +
    "\000\062\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\037\uffd3\041\uffd3\044\uffd3\045\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\055\uffd3\056\uffd3\111\uffd3\124\uffd3\001\002" +
    "\000\004\002\u02be\001\002\000\004\023\u02b3\001\002\000" +
    "\054\002\ufffa\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\031\ufffa\037\ufffa\041\ufffa\044" +
    "\ufffa\045\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa" +
    "\111\ufffa\124\ufffa\001\002\000\062\002\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\026\uffd2\031\uffd2\033\uffd2\034\uffd2\037\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2" +
    "\111\uffd2\124\uffd2\001\002\000\054\002\uffef\006\uffef\007" +
    "\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052" +
    "\uffef\053\uffef\055\uffef\056\uffef\111\uffef\124\uffef\001\002" +
    "\000\004\016\u02b0\001\002\000\004\016\u029b\001\002\000" +
    "\054\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\031\uffee\037\uffee\041\uffee\044" +
    "\uffee\045\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee" +
    "\111\uffee\124\uffee\001\002\000\054\002\uffb5\006\uffb5\007" +
    "\uffb5\011\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\031\uffb5\037\uffb5\041\uffb5\044\uffb5\045\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\055\uffb5\056\uffb5\111\uffb5\124\uffb5\001\002" +
    "\000\012\015\u0247\016\u0245\060\u0246\077\u0244\001\002\000" +
    "\004\016\u0241\001\002\000\020\011\u021d\066\u021b\070\u021a" +
    "\071\u0219\072\u0218\073\u0217\074\u0216\001\002\000\004\016" +
    "\u01f9\001\002\000\054\002\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\031\ufff7\037" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\055\ufff7\056\ufff7\111\ufff7\124\ufff7\001\002\000\004\016" +
    "\u01f3\001\002\000\054\002\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\031\ufff6\037" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\055\ufff6\056\ufff6\111\ufff6\124\ufff6\001\002\000\054\002" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\031\ufff8\037\ufff8\041\ufff8\044\ufff8\045" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\111\ufff8" +
    "\124\ufff8\001\002\000\004\016\u01c8\001\002\000\006\013" +
    "\151\023\u01bf\001\002\000\004\024\u01b7\001\002\000\054" +
    "\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\031\ufff3\037\ufff3\041\ufff3\044\ufff3" +
    "\045\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\111" +
    "\ufff3\124\ufff3\001\002\000\004\016\u0196\001\002\000\054" +
    "\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\031\uffb4\037\uffb4\041\uffb4\044\uffb4" +
    "\045\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\111" +
    "\uffb4\124\uffb4\001\002\000\004\016\u0195\001\002\000\054" +
    "\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\111" +
    "\ufff0\124\ufff0\001\002\000\054\002\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031" +
    "\ufff2\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\056\ufff2\111\ufff2\124\ufff2\001\002\000" +
    "\054\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\031\uffed\037\uffed\041\uffed\044" +
    "\uffed\045\uffed\051\uffed\052\uffed\053\uffed\055\uffed\056\uffed" +
    "\111\uffed\124\uffed\001\002\000\054\002\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\031\ufff1\037\ufff1\041\ufff1\044\ufff1\045\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\055\ufff1\056\ufff1\111\ufff1\124\ufff1\001\002" +
    "\000\054\002\uffff\006\016\007\022\011\021\017\065\020" +
    "\005\021\037\022\006\023\004\031\060\037\026\041\024" +
    "\044\054\045\031\051\033\052\064\053\015\055\056\056" +
    "\032\111\011\124\035\001\002\000\062\002\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\026\uffd1\031\uffd1\033\uffd1\034\uffd1\037\uffd1\041\uffd1" +
    "\044\uffd1\045\uffd1\051\uffd1\052\uffd1\053\uffd1\055\uffd1\056" +
    "\uffd1\111\uffd1\124\uffd1\001\002\000\004\023\u0125\001\002" +
    "\000\054\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\031\ufffc\037\ufffc\041\ufffc" +
    "\044\ufffc\045\ufffc\051\ufffc\052\ufffc\053\ufffc\055\ufffc\056" +
    "\ufffc\111\ufffc\124\ufffc\001\002\000\054\002\ufffb\006\ufffb" +
    "\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\031\ufffb\037\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\055\ufffb\056\ufffb\111\ufffb\124\ufffb\001" +
    "\002\000\062\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\031\uffd4\033" +
    "\uffd4\034\uffd4\037\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\055\uffd4\056\uffd4\111\uffd4\124\uffd4\001" +
    "\002\000\054\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\031\ufff9\037\ufff9\041" +
    "\ufff9\044\ufff9\045\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9" +
    "\056\ufff9\111\ufff9\124\ufff9\001\002\000\004\011\u0104\001" +
    "\002\000\004\024\367\001\002\000\006\011\314\076\316" +
    "\001\002\000\006\013\151\023\152\001\002\000\056\002" +
    "\uff61\006\uff61\007\uff61\011\uff61\017\uff61\020\uff61\021\uff61" +
    "\022\uff61\023\uff61\031\uff61\037\uff61\041\uff61\044\uff61\045" +
    "\uff61\046\uff61\051\uff61\052\uff61\053\uff61\055\uff61\056\uff61" +
    "\111\uff61\124\uff61\001\002\000\004\016\266\001\002\000" +
    "\054\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\031\ufff5\037\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5\056\ufff5" +
    "\111\ufff5\124\ufff5\001\002\000\006\011\155\067\157\001" +
    "\002\000\054\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\031\ufff4\037\ufff4\041" +
    "\ufff4\044\ufff4\045\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4" +
    "\056\ufff4\111\ufff4\124\ufff4\001\002\000\004\011\150\001" +
    "\002\000\006\011\071\016\070\001\002\000\054\002\001" +
    "\006\016\007\022\011\021\017\065\020\005\021\037\022" +
    "\006\023\004\031\060\037\026\041\024\044\054\045\031" +
    "\051\033\052\064\053\015\055\056\056\032\111\011\124" +
    "\035\001\002\000\004\002\ufffd\001\002\000\006\011\uff25" +
    "\076\uff25\001\002\000\004\024\072\001\002\000\004\017" +
    "\073\001\002\000\004\016\074\001\002\000\004\011\075" +
    "\001\002\000\004\025\076\001\002\000\004\023\077\001" +
    "\002\000\004\023\100\001\002\000\004\026\103\001\002" +
    "\000\054\002\uff49\006\uff49\007\uff49\011\uff49\017\uff49\020" +
    "\uff49\021\uff49\022\uff49\023\uff49\031\uff49\037\uff49\041\uff49" +
    "\044\uff49\045\uff49\051\uff49\052\uff49\053\uff49\055\uff49\056" +
    "\uff49\111\uff49\124\uff49\001\002\000\004\035\105\001\002" +
    "\000\014\006\uff1c\011\uff1c\026\103\035\uff1c\052\uff1c\001" +
    "\002\000\012\006\uff1d\011\uff1d\035\uff1d\052\uff1d\001\002" +
    "\000\004\016\106\001\002\000\012\004\107\005\112\010" +
    "\110\011\111\001\002\000\060\002\uff87\006\uff87\007\uff87" +
    "\011\uff87\013\uff87\016\144\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\031\uff87\037\uff87\041\uff87\044\uff87\045\uff87" +
    "\051\uff87\052\uff87\053\uff87\055\uff87\056\uff87\111\uff87\124" +
    "\uff87\001\002\000\056\002\uff8a\006\uff8a\007\uff8a\011\uff8a" +
    "\013\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\031" +
    "\uff8a\037\uff8a\041\uff8a\044\uff8a\045\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\055\uff8a\056\uff8a\111\uff8a\124\uff8a\001\002\000" +
    "\010\016\125\107\127\110\126\001\002\000\004\016\113" +
    "\001\002\000\016\054\120\107\117\110\116\112\114\113" +
    "\115\114\122\001\002\000\012\004\uff51\005\uff51\011\uff51" +
    "\016\uff51\001\002\000\012\004\uff50\005\uff50\011\uff50\016" +
    "\uff50\001\002\000\012\004\uff52\005\uff52\011\uff52\016\uff52" +
    "\001\002\000\012\004\uff53\005\uff53\011\uff53\016\uff53\001" +
    "\002\000\012\004\uff4e\005\uff4e\011\uff4e\016\uff4e\001\002" +
    "\000\004\005\123\001\002\000\012\004\uff4f\005\uff4f\011" +
    "\uff4f\016\uff4f\001\002\000\004\011\124\001\002\000\056" +
    "\002\uff88\006\uff88\007\uff88\011\uff88\013\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\031\uff88\037\uff88\041\uff88" +
    "\044\uff88\045\uff88\051\uff88\052\uff88\053\uff88\055\uff88\056" +
    "\uff88\111\uff88\124\uff88\001\002\000\016\054\120\107\117" +
    "\110\116\112\114\113\115\114\122\001\002\000\006\011" +
    "\uff84\016\uff84\001\002\000\006\011\uff85\016\uff85\001\002" +
    "\000\004\011\131\001\002\000\004\024\132\001\002\000" +
    "\004\011\133\001\002\000\004\016\134\001\002\000\006" +
    "\107\127\110\126\001\002\000\004\016\136\001\002\000" +
    "\004\004\137\001\002\000\004\025\140\001\002\000\056" +
    "\002\uff86\006\uff86\007\uff86\011\uff86\013\uff86\017\uff86\020" +
    "\uff86\021\uff86\022\uff86\023\uff86\031\uff86\037\uff86\041\uff86" +
    "\044\uff86\045\uff86\051\uff86\052\uff86\053\uff86\055\uff86\056" +
    "\uff86\111\uff86\124\uff86\001\002\000\004\016\142\001\002" +
    "\000\004\011\143\001\002\000\056\002\uff8b\006\uff8b\007" +
    "\uff8b\011\uff8b\013\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\031\uff8b\037\uff8b\041\uff8b\044\uff8b\045\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\055\uff8b\056\uff8b\111\uff8b\124\uff8b" +
    "\001\002\000\016\054\120\107\117\110\116\112\114\113" +
    "\115\114\122\001\002\000\004\016\146\001\002\000\004" +
    "\004\147\001\002\000\056\002\uff89\006\uff89\007\uff89\011" +
    "\uff89\013\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\031\uff89\037\uff89\041\uff89\044\uff89\045\uff89\051\uff89\052" +
    "\uff89\053\uff89\055\uff89\056\uff89\111\uff89\124\uff89\001\002" +
    "\000\006\013\151\023\152\001\002\000\004\023\154\001" +
    "\002\000\066\002\uff1e\006\uff1e\007\uff1e\011\uff1e\017\uff1e" +
    "\020\uff1e\021\uff1e\022\uff1e\023\uff1e\026\uff1e\031\uff1e\033" +
    "\uff1e\034\uff1e\037\uff1e\041\uff1e\043\uff1e\044\uff1e\045\uff1e" +
    "\046\uff1e\051\uff1e\052\uff1e\053\uff1e\055\uff1e\056\uff1e\111" +
    "\uff1e\124\uff1e\001\002\000\054\002\uff80\006\uff80\007\uff80" +
    "\011\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\031" +
    "\uff80\037\uff80\041\uff80\044\uff80\045\uff80\051\uff80\052\uff80" +
    "\053\uff80\055\uff80\056\uff80\111\uff80\124\uff80\001\002\000" +
    "\070\002\uff1f\006\uff1f\007\uff1f\011\uff1f\017\uff1f\020\uff1f" +
    "\021\uff1f\022\uff1f\023\uff1f\026\uff1f\031\uff1f\033\uff1f\034" +
    "\uff1f\037\uff1f\041\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\055\uff1f\056\uff1f\105\uff1f\111" +
    "\uff1f\124\uff1f\001\002\000\016\012\200\013\uff20\016\uff20" +
    "\023\uff20\024\177\077\176\001\002\000\010\013\151\016" +
    "\165\023\152\001\002\000\004\024\160\001\002\000\004" +
    "\022\006\001\002\000\004\011\162\001\002\000\004\025" +
    "\163\001\002\000\006\013\151\023\152\001\002\000\054" +
    "\002\uff4b\006\uff4b\007\uff4b\011\uff4b\017\uff4b\020\uff4b\021" +
    "\uff4b\022\uff4b\023\uff4b\031\uff4b\037\uff4b\041\uff4b\044\uff4b" +
    "\045\uff4b\051\uff4b\052\uff4b\053\uff4b\055\uff4b\056\uff4b\111" +
    "\uff4b\124\uff4b\001\002\000\004\015\167\001\002\000\062" +
    "\002\uffc4\006\uffc4\007\uffc4\011\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\026\uffc4\031\uffc4\033\uffc4\034\uffc4" +
    "\037\uffc4\041\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\111\uffc4\124\uffc4\001\002\000\004" +
    "\016\170\001\002\000\010\004\171\005\174\010\172\001" +
    "\002\000\006\013\uffc0\023\uffc0\001\002\000\006\013\uffbe" +
    "\023\uffbe\001\002\000\006\013\151\023\152\001\002\000" +
    "\006\013\uffbf\023\uffbf\001\002\000\062\002\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\026\uffc1\031\uffc1\033\uffc1\034\uffc1\037\uffc1\041\uffc1" +
    "\044\uffc1\045\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056" +
    "\uffc1\111\uffc1\124\uffc1\001\002\000\006\004\246\100\247" +
    "\001\002\000\014\017\212\020\206\021\211\022\204\025" +
    "\214\001\002\000\004\011\201\001\002\000\012\012\200" +
    "\013\uff20\016\uff20\023\uff20\001\002\000\010\013\uff21\016" +
    "\uff21\023\uff21\001\002\000\014\017\212\020\206\021\211" +
    "\022\204\025\uff8f\001\002\000\004\016\241\001\002\000" +
    "\014\017\212\020\206\021\211\022\204\025\uff8e\001\002" +
    "\000\004\016\234\001\002\000\014\017\212\020\206\021" +
    "\211\022\204\025\uff8d\001\002\000\014\017\212\020\206" +
    "\021\211\022\204\025\uff8c\001\002\000\004\016\226\001" +
    "\002\000\004\016\222\001\002\000\004\025\217\001\002" +
    "\000\004\023\100\001\002\000\004\023\216\001\002\000" +
    "\054\002\uff9d\006\uff9d\007\uff9d\011\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\031\uff9d\037\uff9d\041\uff9d\044" +
    "\uff9d\045\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d" +
    "\111\uff9d\124\uff9d\001\002\000\004\023\100\001\002\000" +
    "\006\013\151\023\152\001\002\000\054\002\uffa1\006\uffa1" +
    "\007\uffa1\011\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\031\uffa1\037\uffa1\041\uffa1\044\uffa1\045\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\055\uffa1\056\uffa1\111\uffa1\124\uffa1\001" +
    "\002\000\004\011\223\001\002\000\016\012\224\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\025\uff9a\001\002\000\004\017" +
    "\212\001\002\000\014\017\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\025\uff9b\001\002\000\004\011\227\001\002\000\016\012" +
    "\230\017\uff94\020\uff94\021\uff94\022\uff94\025\uff94\001\002" +
    "\000\004\021\211\001\002\000\014\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\025\uff95\001\002\000\004\025\uff90\001\002" +
    "\000\004\025\uff91\001\002\000\004\011\235\001\002\000" +
    "\016\012\236\017\uff96\020\uff96\021\uff96\022\uff96\025\uff96" +
    "\001\002\000\004\020\206\001\002\000\014\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\025\uff97\001\002\000\004\025\uff92" +
    "\001\002\000\004\011\242\001\002\000\016\012\243\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\025\uff98\001\002\000\004" +
    "\022\204\001\002\000\014\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\025\uff99\001\002\000\004\025\uff93\001\002\000\004" +
    "\100\251\001\002\000\006\013\151\023\152\001\002\000" +
    "\054\002\uff30\006\uff30\007\uff30\011\uff30\017\uff30\020\uff30" +
    "\021\uff30\022\uff30\023\uff30\031\uff30\037\uff30\041\uff30\044" +
    "\uff30\045\uff30\051\uff30\052\uff30\053\uff30\055\uff30\056\uff30" +
    "\111\uff30\124\uff30\001\002\000\004\016\252\001\002\000" +
    "\004\015\253\001\002\000\004\101\254\001\002\000\004" +
    "\016\255\001\002\000\004\010\257\001\002\000\004\102" +
    "\264\001\002\000\006\012\261\016\260\001\002\000\004" +
    "\102\uff34\001\002\000\004\016\262\001\002\000\004\010" +
    "\257\001\002\000\004\102\uff33\001\002\000\006\013\151" +
    "\023\152\001\002\000\054\002\uff3b\006\uff3b\007\uff3b\011" +
    "\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\031\uff3b" +
    "\037\uff3b\041\uff3b\044\uff3b\045\uff3b\051\uff3b\052\uff3b\053" +
    "\uff3b\055\uff3b\056\uff3b\111\uff3b\124\uff3b\001\002\000\004" +
    "\011\267\001\002\000\004\016\270\001\002\000\004\015" +
    "\271\001\002\000\004\016\272\001\002\000\004\057\273" +
    "\001\002\000\004\031\274\001\002\000\004\024\275\001" +
    "\002\000\014\004\300\005\304\010\301\014\276\025\303" +
    "\001\002\000\012\012\uff1a\013\uff1a\023\uff1a\025\uff1a\001" +
    "\002\000\004\012\310\001\002\000\012\012\uff1b\013\uff1b" +
    "\023\uff1b\025\uff1b\001\002\000\012\012\uff19\013\uff19\023" +
    "\uff19\025\uff19\001\002\000\004\025\306\001\002\000\006" +
    "\013\151\023\152\001\002\000\012\012\uff18\013\uff18\023" +
    "\uff18\025\uff18\001\002\000\054\002\uff83\006\uff83\007\uff83" +
    "\011\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\031" +
    "\uff83\037\uff83\041\uff83\044\uff83\045\uff83\051\uff83\052\uff83" +
    "\053\uff83\055\uff83\056\uff83\111\uff83\124\uff83\001\002\000" +
    "\006\013\151\023\152\001\002\000\054\002\uff82\006\uff82" +
    "\007\uff82\011\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\031\uff82\037\uff82\041\uff82\044\uff82\045\uff82\051\uff82" +
    "\052\uff82\053\uff82\055\uff82\056\uff82\111\uff82\124\uff82\001" +
    "\002\000\004\016\311\001\002\000\012\004\300\005\304" +
    "\010\301\014\276\001\002\000\004\025\uff7f\001\002\000" +
    "\054\002\uffa8\006\uffa8\007\uffa8\011\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\031\uffa8\037\uffa8\041\uffa8\044" +
    "\uffa8\045\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\111\uffa8\124\uffa8\001\002\000\016\012\200\013\uff20\016" +
    "\uff20\023\uff20\024\337\077\336\001\002\000\010\013\151" +
    "\016\324\023\152\001\002\000\004\024\317\001\002\000" +
    "\004\022\006\001\002\000\004\011\321\001\002\000\004" +
    "\025\322\001\002\000\006\013\151\023\152\001\002\000" +
    "\054\002\uff4d\006\uff4d\007\uff4d\011\uff4d\017\uff4d\020\uff4d" +
    "\021\uff4d\022\uff4d\023\uff4d\031\uff4d\037\uff4d\041\uff4d\044" +
    "\uff4d\045\uff4d\051\uff4d\052\uff4d\053\uff4d\055\uff4d\056\uff4d" +
    "\111\uff4d\124\uff4d\001\002\000\004\015\326\001\002\000" +
    "\062\002\uffd0\006\uffd0\007\uffd0\011\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\026\uffd0\031\uffd0\033\uffd0\034" +
    "\uffd0\037\uffd0\041\uffd0\044\uffd0\045\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\055\uffd0\056\uffd0\111\uffd0\124\uffd0\001\002\000" +
    "\004\016\327\001\002\000\012\004\332\005\334\010\333" +
    "\014\331\001\002\000\006\013\151\023\152\001\002\000" +
    "\006\013\uffca\023\uffca\001\002\000\006\013\uffcc\023\uffcc" +
    "\001\002\000\006\013\uffc9\023\uffc9\001\002\000\006\013" +
    "\uffcb\023\uffcb\001\002\000\062\002\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\026" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\037\uffcd\041\uffcd\044\uffcd" +
    "\045\uffcd\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\111" +
    "\uffcd\124\uffcd\001\002\000\006\004\347\100\350\001\002" +
    "\000\014\017\212\020\206\021\211\022\204\025\341\001" +
    "\002\000\004\025\344\001\002\000\004\023\100\001\002" +
    "\000\004\023\343\001\002\000\054\002\uff9f\006\uff9f\007" +
    "\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f" +
    "\031\uff9f\037\uff9f\041\uff9f\044\uff9f\045\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\055\uff9f\056\uff9f\111\uff9f\124\uff9f\001\002" +
    "\000\004\023\100\001\002\000\006\013\151\023\152\001" +
    "\002\000\054\002\uffa3\006\uffa3\007\uffa3\011\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\031\uffa3\037\uffa3\041" +
    "\uffa3\044\uffa3\045\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3" +
    "\056\uffa3\111\uffa3\124\uffa3\001\002\000\004\100\352\001" +
    "\002\000\006\013\151\023\152\001\002\000\054\002\uff32" +
    "\006\uff32\007\uff32\011\uff32\017\uff32\020\uff32\021\uff32\022" +
    "\uff32\023\uff32\031\uff32\037\uff32\041\uff32\044\uff32\045\uff32" +
    "\051\uff32\052\uff32\053\uff32\055\uff32\056\uff32\111\uff32\124" +
    "\uff32\001\002\000\004\016\353\001\002\000\004\015\354" +
    "\001\002\000\004\101\355\001\002\000\004\016\356\001" +
    "\002\000\004\004\357\001\002\000\006\012\364\016\363" +
    "\001\002\000\004\102\361\001\002\000\006\013\151\023" +
    "\152\001\002\000\054\002\uff3e\006\uff3e\007\uff3e\011\uff3e" +
    "\017\uff3e\020\uff3e\021\uff3e\022\uff3e\023\uff3e\031\uff3e\037" +
    "\uff3e\041\uff3e\044\uff3e\045\uff3e\051\uff3e\052\uff3e\053\uff3e" +
    "\055\uff3e\056\uff3e\111\uff3e\124\uff3e\001\002\000\004\102" +
    "\uff3a\001\002\000\004\016\365\001\002\000\004\004\357" +
    "\001\002\000\004\102\uff39\001\002\000\012\017\212\020" +
    "\206\021\211\022\204\001\002\000\004\025\371\001\002" +
    "\000\004\023\372\001\002\000\004\026\103\001\002\000" +
    "\054\002\uff43\006\uff43\007\uff43\011\uff43\017\uff43\020\uff43" +
    "\021\uff43\022\uff43\023\uff43\031\uff43\037\uff43\041\uff43\044" +
    "\uff43\045\uff43\051\uff43\052\uff43\053\uff43\055\uff43\056\uff43" +
    "\111\uff43\124\uff43\001\002\000\004\011\375\001\002\000" +
    "\004\016\376\001\002\000\004\015\377\001\002\000\004" +
    "\016\u0100\001\002\000\004\011\u0101\001\002\000\006\013" +
    "\151\023\152\001\002\000\056\002\uff40\006\uff40\007\uff40" +
    "\011\uff40\017\uff40\020\uff40\021\uff40\022\uff40\023\uff40\026" +
    "\103\031\uff40\037\uff40\041\uff40\044\uff40\045\uff40\051\uff40" +
    "\052\uff40\053\uff40\055\uff40\056\uff40\111\uff40\124\uff40\001" +
    "\002\000\054\002\uff3f\006\uff3f\007\uff3f\011\uff3f\017\uff3f" +
    "\020\uff3f\021\uff3f\022\uff3f\023\uff3f\031\uff3f\037\uff3f\041" +
    "\uff3f\044\uff3f\045\uff3f\051\uff3f\052\uff3f\053\uff3f\055\uff3f" +
    "\056\uff3f\111\uff3f\124\uff3f\001\002\000\016\012\200\013" +
    "\uff20\016\uff20\023\uff20\024\u010c\077\u010d\001\002\000\010" +
    "\013\151\016\u0106\023\152\001\002\000\004\015\u0108\001" +
    "\002\000\062\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\037\uffc8\041\uffc8\044\uffc8\045\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\055\uffc8\056\uffc8\111\uffc8\124\uffc8\001" +
    "\002\000\004\016\u0109\001\002\000\004\014\u010a\001\002" +
    "\000\006\013\151\023\152\001\002\000\062\002\uffc5\006" +
    "\uffc5\007\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\026\uffc5\031\uffc5\033\uffc5\034\uffc5\037\uffc5\041" +
    "\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\111\uffc5\124\uffc5\001\002\000\014\017\212\020" +
    "\206\021\211\022\204\025\u011f\001\002\000\006\004\u010e" +
    "\100\u010f\001\002\000\004\100\u0111\001\002\000\006\013" +
    "\151\023\152\001\002\000\054\002\uff2f\006\uff2f\007\uff2f" +
    "\011\uff2f\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f\031" +
    "\uff2f\037\uff2f\041\uff2f\044\uff2f\045\uff2f\051\uff2f\052\uff2f" +
    "\053\uff2f\055\uff2f\056\uff2f\111\uff2f\124\uff2f\001\002\000" +
    "\004\016\u0112\001\002\000\004\015\u0113\001\002\000\004" +
    "\101\u0114\001\002\000\004\016\u0115\001\002\000\004\014" +
    "\u0116\001\002\000\006\012\u011b\016\u011a\001\002\000\004" +
    "\102\u0118\001\002\000\006\013\151\023\152\001\002\000" +
    "\054\002\uff3c\006\uff3c\007\uff3c\011\uff3c\017\uff3c\020\uff3c" +
    "\021\uff3c\022\uff3c\023\uff3c\031\uff3c\037\uff3c\041\uff3c\044" +
    "\uff3c\045\uff3c\051\uff3c\052\uff3c\053\uff3c\055\uff3c\056\uff3c" +
    "\111\uff3c\124\uff3c\001\002\000\004\102\uff36\001\002\000" +
    "\004\016\u011c\001\002\000\004\014\u0116\001\002\000\004" +
    "\102\uff35\001\002\000\004\025\u0122\001\002\000\004\023" +
    "\100\001\002\000\004\023\u0121\001\002\000\054\002\uff9e" +
    "\006\uff9e\007\uff9e\011\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\031\uff9e\037\uff9e\041\uff9e\044\uff9e\045\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\055\uff9e\056\uff9e\111\uff9e\124" +
    "\uff9e\001\002\000\004\023\100\001\002\000\006\013\151" +
    "\023\152\001\002\000\054\002\uffa2\006\uffa2\007\uffa2\011" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\031\uffa2" +
    "\037\uffa2\041\uffa2\044\uffa2\045\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\055\uffa2\056\uffa2\111\uffa2\124\uffa2\001\002\000\004" +
    "\026\u0126\001\002\000\006\033\u0128\034\u0129\001\002\000" +
    "\054\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\031\uffea\037\uffea\041\uffea\044" +
    "\uffea\045\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea" +
    "\111\uffea\124\uffea\001\002\000\004\016\u016a\001\002\000" +
    "\004\016\u012c\001\002\000\056\002\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\031" +
    "\uffeb\034\u0129\037\uffeb\041\uffeb\044\uffeb\045\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\055\uffeb\056\uffeb\111\uffeb\124\uffeb\001" +
    "\002\000\054\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\031\uffe9\037\uffe9\041" +
    "\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\111\uffe9\124\uffe9\001\002\000\010\120\u012f\121" +
    "\u012d\122\u012e\001\002\000\004\023\u015f\001\002\000\004" +
    "\023\u015b\001\002\000\004\023\u0130\001\002\000\004\026" +
    "\u0131\001\002\000\004\026\u0132\001\002\000\014\017\u0137" +
    "\020\005\021\037\022\006\124\035\001\002\000\004\011" +
    "\201\001\002\000\062\002\uffd8\006\uffd8\007\uffd8\011\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\u0158\031" +
    "\uffd8\033\uffd8\034\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\111\uffd8\124" +
    "\uffd8\001\002\000\004\011\201\001\002\000\004\011\201" +
    "\001\002\000\004\016\070\001\002\000\056\002\uffe2\006" +
    "\uffe2\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\031\uffe2\034\u013a\037\uffe2\041\uffe2\044\uffe2\045" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\111\uffe2" +
    "\124\uffe2\001\002\000\004\011\201\001\002\000\004\016" +
    "\u013b\001\002\000\006\121\u013c\122\u013d\001\002\000\004" +
    "\023\u0142\001\002\000\004\023\u013e\001\002\000\004\026" +
    "\u013f\001\002\000\004\026\u0140\001\002\000\014\017\u0137" +
    "\020\005\021\037\022\006\124\035\001\002\000\054\002" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\031\uffe4\037\uffe4\041\uffe4\044\uffe4\045" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\056\uffe4\111\uffe4" +
    "\124\uffe4\001\002\000\004\026\u0143\001\002\000\004\026" +
    "\u0144\001\002\000\014\017\u0137\020\005\021\037\022\006" +
    "\124\035\001\002\000\056\002\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\031\uffe5" +
    "\034\u0146\037\uffe5\041\uffe5\044\uffe5\045\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\055\uffe5\056\uffe5\111\uffe5\124\uffe5\001\002" +
    "\000\004\016\u0147\001\002\000\004\122\u0148\001\002\000" +
    "\004\023\u0149\001\002\000\004\026\u014a\001\002\000\004" +
    "\026\u014b\001\002\000\014\017\u0137\020\005\021\037\022" +
    "\006\124\035\001\002\000\054\002\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\031" +
    "\uffe6\037\uffe6\041\uffe6\044\uffe6\045\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\056\uffe6\111\uffe6\124\uffe6\001\002\000" +
    "\010\013\151\016\u014e\023\152\001\002\000\004\015\u0150" +
    "\001\002\000\062\002\uffbd\006\uffbd\007\uffbd\011\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\026\uffbd\031\uffbd" +
    "\033\uffbd\034\uffbd\037\uffbd\041\uffbd\044\uffbd\045\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd\111\uffbd\124\uffbd" +
    "\001\002\000\004\016\u0151\001\002\000\012\004\u0152\005" +
    "\u0156\010\u0154\014\u0153\001\002\000\006\013\uffb9\023\uffb9" +
    "\001\002\000\006\013\uffb7\023\uffb7\001\002\000\006\013" +
    "\uffb6\023\uffb6\001\002\000\006\013\151\023\152\001\002" +
    "\000\006\013\uffb8\023\uffb8\001\002\000\062\002\uffba\006" +
    "\uffba\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\026\uffba\031\uffba\033\uffba\034\uffba\037\uffba\041" +
    "\uffba\044\uffba\045\uffba\051\uffba\052\uffba\053\uffba\055\uffba" +
    "\056\uffba\111\uffba\124\uffba\001\002\000\062\002\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\026\u0159\031\uffd7\033\uffd7\034\uffd7\037\uffd7\041" +
    "\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7" +
    "\056\uffd7\111\uffd7\124\uffd7\001\002\000\014\017\u0137\020" +
    "\005\021\037\022\006\124\035\001\002\000\060\002\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\031\uffd6\033\uffd6\034\uffd6\037\uffd6\041\uffd6" +
    "\044\uffd6\045\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056" +
    "\uffd6\111\uffd6\124\uffd6\001\002\000\004\026\u015c\001\002" +
    "\000\004\026\u015d\001\002\000\014\017\u0137\020\005\021" +
    "\037\022\006\124\035\001\002\000\054\002\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\031\uffe0\037\uffe0\041\uffe0\044\uffe0\045\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\055\uffe0\056\uffe0\111\uffe0\124\uffe0\001" +
    "\002\000\004\026\u0160\001\002\000\004\026\u0161\001\002" +
    "\000\014\017\u0137\020\005\021\037\022\006\124\035\001" +
    "\002\000\056\002\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\031\uffe1\034\u0163\037" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\111\uffe1\124\uffe1\001\002\000\004\016" +
    "\u0164\001\002\000\004\122\u0165\001\002\000\004\023\u0166" +
    "\001\002\000\004\026\u0167\001\002\000\004\026\u0168\001" +
    "\002\000\014\017\u0137\020\005\021\037\022\006\124\035" +
    "\001\002\000\054\002\uffe3\006\uffe3\007\uffe3\011\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3\037\uffe3" +
    "\041\uffe3\044\uffe3\045\uffe3\051\uffe3\052\uffe3\053\uffe3\055" +
    "\uffe3\056\uffe3\111\uffe3\124\uffe3\001\002\000\010\115\u016c" +
    "\116\u016b\117\u016d\001\002\000\004\023\u0189\001\002\000" +
    "\004\023\u0172\001\002\000\004\023\u016e\001\002\000\004" +
    "\026\u016f\001\002\000\004\026\u0170\001\002\000\014\017" +
    "\u0137\020\005\021\037\022\006\124\035\001\002\000\056" +
    "\002\uffd9\006\uffd9\007\uffd9\011\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\031\uffd9\034\uffd9\037\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\051\uffd9\052\uffd9\053\uffd9\055\uffd9\056" +
    "\uffd9\111\uffd9\124\uffd9\001\002\000\004\026\u0173\001\002" +
    "\000\004\026\u0174\001\002\000\014\017\u0137\020\005\021" +
    "\037\022\006\124\035\001\002\000\060\002\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\031\uffdb\033\u0176\034\uffdb\037\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\111" +
    "\uffdb\124\uffdb\001\002\000\004\016\u0177\001\002\000\006" +
    "\116\u0178\117\u0179\001\002\000\004\023\u017e\001\002\000" +
    "\004\023\u017a\001\002\000\004\026\u017b\001\002\000\004" +
    "\026\u017c\001\002\000\014\017\u0137\020\005\021\037\022" +
    "\006\124\035\001\002\000\056\002\uffdd\006\uffdd\007\uffdd" +
    "\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\031" +
    "\uffdd\034\uffdd\037\uffdd\041\uffdd\044\uffdd\045\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\055\uffdd\056\uffdd\111\uffdd\124\uffdd\001" +
    "\002\000\004\026\u017f\001\002\000\004\026\u0180\001\002" +
    "\000\014\017\u0137\020\005\021\037\022\006\124\035\001" +
    "\002\000\060\002\uffde\006\uffde\007\uffde\011\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\031\uffde\033\u0182\034" +
    "\uffde\037\uffde\041\uffde\044\uffde\045\uffde\051\uffde\052\uffde" +
    "\053\uffde\055\uffde\056\uffde\111\uffde\124\uffde\001\002\000" +
    "\004\016\u0183\001\002\000\004\117\u0184\001\002\000\004" +
    "\023\u0185\001\002\000\004\026\u0186\001\002\000\004\026" +
    "\u0187\001\002\000\014\017\u0137\020\005\021\037\022\006" +
    "\124\035\001\002\000\056\002\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\031\uffdf" +
    "\034\uffdf\037\uffdf\041\uffdf\044\uffdf\045\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\055\uffdf\056\uffdf\111\uffdf\124\uffdf\001\002" +
    "\000\004\026\u018a\001\002\000\004\026\u018b\001\002\000" +
    "\014\017\u0137\020\005\021\037\022\006\124\035\001\002" +
    "\000\060\002\uffda\006\uffda\007\uffda\011\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\031\uffda\033\u018d\034\uffda" +
    "\037\uffda\041\uffda\044\uffda\045\uffda\051\uffda\052\uffda\053" +
    "\uffda\055\uffda\056\uffda\111\uffda\124\uffda\001\002\000\004" +
    "\016\u018e\001\002\000\004\117\u018f\001\002\000\004\023" +
    "\u0190\001\002\000\004\026\u0191\001\002\000\004\026\u0192" +
    "\001\002\000\014\017\u0137\020\005\021\037\022\006\124" +
    "\035\001\002\000\056\002\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\031\uffdc\034" +
    "\uffdc\037\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\055\uffdc\056\uffdc\111\uffdc\124\uffdc\001\002\000" +
    "\004\002\ufffe\001\002\000\020\011\uff24\066\uff24\070\uff24" +
    "\071\uff24\072\uff24\073\uff24\074\uff24\001\002\000\012\017" +
    "\u0137\020\005\021\037\022\006\001\002\000\004\011\201" +
    "\001\002\000\004\011\201\001\002\000\004\011\201\001" +
    "\002\000\004\011\201\001\002\000\010\013\151\016\u019c" +
    "\023\152\001\002\000\004\015\u019e\001\002\000\062\002" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\026\uffcf\031\uffcf\033\uffcf\034\uffcf\037" +
    "\uffcf\041\uffcf\044\uffcf\045\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\055\uffcf\056\uffcf\111\uffcf\124\uffcf\001\002\000\004\016" +
    "\u019f\001\002\000\012\004\332\005\334\010\333\014\331" +
    "\001\002\000\006\013\151\023\152\001\002\000\062\002" +
    "\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\026\uffce\031\uffce\033\uffce\034\uffce\037" +
    "\uffce\041\uffce\044\uffce\045\uffce\051\uffce\052\uffce\053\uffce" +
    "\055\uffce\056\uffce\111\uffce\124\uffce\001\002\000\010\013" +
    "\151\016\u01a3\023\152\001\002\000\004\015\u01a5\001\002" +
    "\000\062\002\uffc7\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\037\uffc7\041\uffc7\044\uffc7\045\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\055\uffc7\056\uffc7\111\uffc7\124\uffc7\001\002" +
    "\000\004\016\u01a6\001\002\000\004\014\u01a7\001\002\000" +
    "\006\013\151\023\152\001\002\000\062\002\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\026\uffc6\031\uffc6\033\uffc6\034\uffc6\037\uffc6\041\uffc6" +
    "\044\uffc6\045\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056" +
    "\uffc6\111\uffc6\124\uffc6\001\002\000\010\013\151\016\u01aa" +
    "\023\152\001\002\000\004\015\u01ac\001\002\000\062\002" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\026\uffbc\031\uffbc\033\uffbc\034\uffbc\037" +
    "\uffbc\041\uffbc\044\uffbc\045\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\111\uffbc\124\uffbc\001\002\000\004\016" +
    "\u01ad\001\002\000\012\004\u0152\005\u0156\010\u0154\014\u0153" +
    "\001\002\000\006\013\151\023\152\001\002\000\062\002" +
    "\uffbb\006\uffbb\007\uffbb\011\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\026\uffbb\031\uffbb\033\uffbb\034\uffbb\037" +
    "\uffbb\041\uffbb\044\uffbb\045\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\111\uffbb\124\uffbb\001\002\000\010\013" +
    "\151\016\u01b1\023\152\001\002\000\004\015\u01b3\001\002" +
    "\000\062\002\uffc3\006\uffc3\007\uffc3\011\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\026\uffc3\031\uffc3\033\uffc3" +
    "\034\uffc3\037\uffc3\041\uffc3\044\uffc3\045\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\111\uffc3\124\uffc3\001\002" +
    "\000\004\016\u01b4\001\002\000\010\004\171\005\174\010" +
    "\172\001\002\000\006\013\151\023\152\001\002\000\062" +
    "\002\uffc2\006\uffc2\007\uffc2\011\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\031\uffc2\033\uffc2\034\uffc2" +
    "\037\uffc2\041\uffc2\044\uffc2\045\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\055\uffc2\056\uffc2\111\uffc2\124\uffc2\001\002\000\004" +
    "\025\u01b8\001\002\000\004\023\u01b9\001\002\000\004\026" +
    "\103\001\002\000\054\002\uff42\006\uff42\007\uff42\011\uff42" +
    "\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42\031\uff42\037" +
    "\uff42\041\uff42\044\uff42\045\uff42\051\uff42\052\uff42\053\uff42" +
    "\055\uff42\056\uff42\111\uff42\124\uff42\001\002\000\004\052" +
    "\u01bc\001\002\000\004\011\u01bd\001\002\000\006\013\151" +
    "\023\152\001\002\000\054\002\uff41\006\uff41\007\uff41\011" +
    "\uff41\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41\031\uff41" +
    "\037\uff41\041\uff41\044\uff41\045\uff41\051\uff41\052\uff41\053" +
    "\uff41\055\uff41\056\uff41\111\uff41\124\uff41\001\002\000\056" +
    "\002\uff1e\006\uff1e\007\uff1e\011\uff1e\017\uff1e\020\uff1e\021" +
    "\uff1e\022\uff1e\023\uff1e\031\uff1e\037\uff1e\041\uff1e\044\uff1e" +
    "\045\uff1e\051\uff1e\052\uff1e\053\uff1e\055\uff1e\056\uff1e\106" +
    "\u01c2\111\uff1e\124\uff1e\001\002\000\054\002\uffa6\006\uffa6" +
    "\007\uffa6\011\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\031\uffa6\037\uffa6\041\uffa6\044\uffa6\045\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\055\uffa6\056\uffa6\111\uffa6\124\uffa6\001" +
    "\002\000\004\105\u01c6\001\002\000\006\013\151\023\u01c3" +
    "\001\002\000\006\105\uff1e\106\u01c2\001\002\000\004\105" +
    "\uffa5\001\002\000\004\105\uffa4\001\002\000\006\013\151" +
    "\023\152\001\002\000\054\002\uffa7\006\uffa7\007\uffa7\011" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\031\uffa7" +
    "\037\uffa7\041\uffa7\044\uffa7\045\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\055\uffa7\056\uffa7\111\uffa7\124\uffa7\001\002\000\006" +
    "\011\u01ca\017\u01cb\001\002\000\004\015\u01ef\001\002\000" +
    "\004\016\u01ee\001\002\000\004\016\u01e7\001\002\000\004" +
    "\046\u01cd\001\002\000\004\016\u01ce\001\002\000\006\004" +
    "\u01cf\011\u01d0\001\002\000\010\013\uff69\016\uff69\023\uff69" +
    "\001\002\000\010\013\uff6a\016\uff6a\023\uff6a\001\002\000" +
    "\004\016\u01d2\001\002\000\006\030\u01d4\065\u01d3\001\002" +
    "\000\004\016\uff72\001\002\000\004\016\uff71\001\002\000" +
    "\004\016\u01d6\001\002\000\006\004\u01cf\011\u01d0\001\002" +
    "\000\004\016\u01d8\001\002\000\010\047\u01dc\050\u01da\111" +
    "\u01db\001\002\000\004\016\u01e1\001\002\000\004\016\uff6f" +
    "\001\002\000\006\013\151\023\152\001\002\000\004\016" +
    "\uff70\001\002\000\004\026\103\001\002\000\054\002\uff74" +
    "\006\uff74\007\uff74\011\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\031\uff74\037\uff74\041\uff74\044\uff74\045\uff74" +
    "\051\uff74\052\uff74\053\uff74\055\uff74\056\uff74\111\uff74\124" +
    "\uff74\001\002\000\004\006\016\001\002\000\054\002\uff73" +
    "\006\uff73\007\uff73\011\uff73\017\uff73\020\uff73\021\uff73\022" +
    "\uff73\023\uff73\031\uff73\037\uff73\041\uff73\044\uff73\045\uff73" +
    "\051\uff73\052\uff73\053\uff73\055\uff73\056\uff73\111\uff73\124" +
    "\uff73\001\002\000\004\004\u01e2\001\002\000\004\016\u01e3" +
    "\001\002\000\004\111\u01e4\001\002\000\006\013\151\023" +
    "\152\001\002\000\004\026\103\001\002\000\054\002\uff75" +
    "\006\uff75\007\uff75\011\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\031\uff75\037\uff75\041\uff75\044\uff75\045\uff75" +
    "\051\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75\124" +
    "\uff75\001\002\000\004\011\u01e8\001\002\000\004\016\u01e9" +
    "\001\002\000\004\015\u01ea\001\002\000\004\016\u01eb\001" +
    "\002\000\004\004\u01ec\001\002\000\004\016\u01ed\001\002" +
    "\000\004\046\uff6d\001\002\000\006\015\uff6b\046\uff6e\001" +
    "\002\000\004\016\u01f0\001\002\000\004\004\u01f1\001\002" +
    "\000\004\016\u01f2\001\002\000\004\046\uff6c\001\002\000" +
    "\004\031\u01f4\001\002\000\006\016\u01f5\023\uffe8\001\002" +
    "\000\004\103\u01f6\001\002\000\004\016\u01f7\001\002\000" +
    "\004\031\u01f8\001\002\000\004\023\uffe7\001\002\000\006" +
    "\004\u01fa\011\u01fb\001\002\000\004\016\u0211\001\002\000" +
    "\004\016\u020c\001\002\000\004\016\u01fd\001\002\000\004" +
    "\042\u01fe\001\002\000\004\023\100\001\002\000\006\013" +
    "\151\023\152\001\002\000\056\002\uff7d\006\uff7d\007\uff7d" +
    "\011\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\031" +
    "\uff7d\037\uff7d\041\uff7d\043\u0201\044\uff7d\045\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\055\uff7d\056\uff7d\111\uff7d\124\uff7d\001" +
    "\002\000\006\016\u0203\023\100\001\002\000\054\002\uff7e" +
    "\006\uff7e\007\uff7e\011\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\031\uff7e\037\uff7e\041\uff7e\044\uff7e\045\uff7e" +
    "\051\uff7e\052\uff7e\053\uff7e\055\uff7e\056\uff7e\111\uff7e\124" +
    "\uff7e\001\002\000\006\004\u01fa\011\u01fb\001\002\000\006" +
    "\013\151\023\152\001\002\000\054\002\uff7a\006\uff7a\007" +
    "\uff7a\011\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a" +
    "\031\uff7a\037\uff7a\041\uff7a\044\uff7a\045\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\055\uff7a\056\uff7a\111\uff7a\124\uff7a\001\002" +
    "\000\004\016\u0207\001\002\000\004\042\u0208\001\002\000" +
    "\004\023\100\001\002\000\006\013\151\023\152\001\002" +
    "\000\056\002\uff7b\006\uff7b\007\uff7b\011\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\023\uff7b\031\uff7b\037\uff7b\041\uff7b" +
    "\043\u0201\044\uff7b\045\uff7b\051\uff7b\052\uff7b\053\uff7b\055" +
    "\uff7b\056\uff7b\111\uff7b\124\uff7b\001\002\000\054\002\uff7c" +
    "\006\uff7c\007\uff7c\011\uff7c\017\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\031\uff7c\037\uff7c\041\uff7c\044\uff7c\045\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\055\uff7c\056\uff7c\111\uff7c\124" +
    "\uff7c\001\002\000\016\054\120\107\117\110\116\112\114" +
    "\113\115\114\122\001\002\000\004\016\u020e\001\002\000" +
    "\006\004\u020f\011\u0210\001\002\000\004\016\uff78\001\002" +
    "\000\004\016\uff76\001\002\000\016\054\120\107\117\110" +
    "\116\112\114\113\115\114\122\001\002\000\004\016\u0213" +
    "\001\002\000\006\004\u0214\011\u0215\001\002\000\004\016" +
    "\uff79\001\002\000\004\016\uff77\001\002\000\004\024\uff44" +
    "\001\002\000\004\024\uff45\001\002\000\004\024\uff46\001" +
    "\002\000\004\024\uff47\001\002\000\004\024\uff48\001\002" +
    "\000\004\024\u023c\001\002\000\004\024\u0237\001\002\000" +
    "\016\012\200\013\uff20\016\uff20\023\uff20\024\u021f\077\u021e" +
    "\001\002\000\006\004\u0227\100\u0228\001\002\000\014\017" +
    "\212\020\206\021\211\022\204\025\u0221\001\002\000\004" +
    "\025\u0224\001\002\000\004\023\100\001\002\000\004\023" +
    "\u0223\001\002\000\054\002\uff9c\006\uff9c\007\uff9c\011\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\031\uff9c\037" +
    "\uff9c\041\uff9c\044\uff9c\045\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\055\uff9c\056\uff9c\111\uff9c\124\uff9c\001\002\000\004\023" +
    "\100\001\002\000\006\013\151\023\152\001\002\000\054" +
    "\002\uffa0\006\uffa0\007\uffa0\011\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\031\uffa0\037\uffa0\041\uffa0\044\uffa0" +
    "\045\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\111" +
    "\uffa0\124\uffa0\001\002\000\004\100\u022a\001\002\000\006" +
    "\013\151\023\152\001\002\000\054\002\uff31\006\uff31\007" +
    "\uff31\011\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023\uff31" +
    "\031\uff31\037\uff31\041\uff31\044\uff31\045\uff31\051\uff31\052" +
    "\uff31\053\uff31\055\uff31\056\uff31\111\uff31\124\uff31\001\002" +
    "\000\004\016\u022b\001\002\000\004\015\u022c\001\002\000" +
    "\004\101\u022d\001\002\000\004\016\u022e\001\002\000\004" +
    "\005\u0230\001\002\000\004\102\u0235\001\002\000\006\012" +
    "\u0232\016\u0231\001\002\000\004\102\uff38\001\002\000\004" +
    "\016\u0233\001\002\000\004\005\u0230\001\002\000\004\102" +
    "\uff37\001\002\000\006\013\151\023\152\001\002\000\054" +
    "\002\uff3d\006\uff3d\007\uff3d\011\uff3d\017\uff3d\020\uff3d\021" +
    "\uff3d\022\uff3d\023\uff3d\031\uff3d\037\uff3d\041\uff3d\044\uff3d" +
    "\045\uff3d\051\uff3d\052\uff3d\053\uff3d\055\uff3d\056\uff3d\111" +
    "\uff3d\124\uff3d\001\002\000\004\021\037\001\002\000\004" +
    "\011\u0239\001\002\000\004\025\u023a\001\002\000\006\013" +
    "\151\023\152\001\002\000\054\002\uff4a\006\uff4a\007\uff4a" +
    "\011\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\031" +
    "\uff4a\037\uff4a\041\uff4a\044\uff4a\045\uff4a\051\uff4a\052\uff4a" +
    "\053\uff4a\055\uff4a\056\uff4a\111\uff4a\124\uff4a\001\002\000" +
    "\004\022\006\001\002\000\004\011\u023e\001\002\000\004" +
    "\025\u023f\001\002\000\006\013\151\023\152\001\002\000" +
    "\054\002\uff4c\006\uff4c\007\uff4c\011\uff4c\017\uff4c\020\uff4c" +
    "\021\uff4c\022\uff4c\023\uff4c\031\uff4c\037\uff4c\041\uff4c\044" +
    "\uff4c\045\uff4c\051\uff4c\052\uff4c\053\uff4c\055\uff4c\056\uff4c" +
    "\111\uff4c\124\uff4c\001\002\000\004\011\u0242\001\002\000" +
    "\006\013\151\023\152\001\002\000\054\002\uffa9\006\uffa9" +
    "\007\uffa9\011\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\031\uffa9\037\uffa9\041\uffa9\044\uffa9\045\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\055\uffa9\056\uffa9\111\uffa9\124\uffa9\001" +
    "\002\000\004\004\u0294\001\002\000\004\015\u0279\001\002" +
    "\000\004\011\u0273\001\002\000\012\004\u0249\011\u024b\110" +
    "\u0248\125\u024a\001\002\000\006\004\u0271\011\u0272\001\002" +
    "\000\024\013\uff59\023\uff59\054\120\107\117\110\116\112" +
    "\114\113\115\114\122\126\u026f\001\002\000\006\004\u026b" +
    "\011\u026c\001\002\000\030\013\uff5a\023\uff5a\054\120\107" +
    "\117\110\116\112\114\113\115\114\122\126\u0269\127\u025c" +
    "\130\u025b\001\002\000\006\013\uff58\023\uff58\001\002\000" +
    "\006\013\151\023\152\001\002\000\060\002\uff66\006\uff66" +
    "\007\uff66\011\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023" +
    "\uff66\026\103\031\uff66\037\uff66\041\uff66\044\uff66\045\uff66" +
    "\046\uff66\051\uff66\052\uff66\053\uff66\055\uff66\056\uff66\111" +
    "\uff66\124\uff66\001\002\000\004\011\u0250\001\002\000\010" +
    "\015\u0247\016\u0252\060\u0246\001\002\000\056\002\uff62\006" +
    "\uff62\007\uff62\011\uff62\017\uff62\020\uff62\021\uff62\022\uff62" +
    "\023\uff62\031\uff62\037\uff62\041\uff62\044\uff62\045\uff62\046" +
    "\uff62\051\uff62\052\uff62\053\uff62\055\uff62\056\uff62\111\uff62" +
    "\124\uff62\001\002\000\004\015\u0253\001\002\000\004\016" +
    "\u0254\001\002\000\010\004\u0255\011\u0256\110\u0248\001\002" +
    "\000\022\013\uff59\023\uff59\054\120\107\117\110\116\112" +
    "\114\113\115\114\122\001\002\000\026\013\uff5a\023\uff5a" +
    "\054\120\107\117\110\116\112\114\113\115\114\122\127" +
    "\u025c\130\u025b\001\002\000\006\013\151\023\152\001\002" +
    "\000\060\002\uff65\006\uff65\007\uff65\011\uff65\017\uff65\020" +
    "\uff65\021\uff65\022\uff65\023\uff65\026\103\031\uff65\037\uff65" +
    "\041\uff65\044\uff65\045\uff65\046\uff65\051\uff65\052\uff65\053" +
    "\uff65\055\uff65\056\uff65\111\uff65\124\uff65\001\002\000\004" +
    "\011\u0250\001\002\000\056\002\uff64\006\uff64\007\uff64\011" +
    "\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\031\uff64" +
    "\037\uff64\041\uff64\044\uff64\045\uff64\046\uff64\051\uff64\052" +
    "\uff64\053\uff64\055\uff64\056\uff64\111\uff64\124\uff64\001\002" +
    "\000\004\011\u0263\001\002\000\004\011\u0260\001\002\000" +
    "\006\004\u025e\011\u025f\001\002\000\006\013\uff5d\023\uff5d" +
    "\001\002\000\006\013\uff5f\023\uff5f\001\002\000\010\013" +
    "\uff55\023\uff55\130\u0261\001\002\000\004\011\u0262\001\002" +
    "\000\006\013\uff57\023\uff57\001\002\000\010\013\uff54\023" +
    "\uff54\127\u0264\001\002\000\004\011\u0265\001\002\000\006" +
    "\013\uff56\023\uff56\001\002\000\006\004\u0267\011\u0268\001" +
    "\002\000\006\013\uff60\023\uff60\001\002\000\006\013\uff5e" +
    "\023\uff5e\001\002\000\006\013\151\023\152\001\002\000" +
    "\056\002\uff27\006\uff27\007\uff27\011\uff27\017\uff27\020\uff27" +
    "\021\uff27\022\uff27\023\uff27\031\uff27\037\uff27\041\uff27\044" +
    "\uff27\045\uff27\046\uff27\051\uff27\052\uff27\053\uff27\055\uff27" +
    "\056\uff27\111\uff27\124\uff27\001\002\000\006\013\151\023" +
    "\152\001\002\000\006\013\151\023\152\001\002\000\056" +
    "\002\uff29\006\uff29\007\uff29\011\uff29\017\uff29\020\uff29\021" +
    "\uff29\022\uff29\023\uff29\031\uff29\037\uff29\041\uff29\044\uff29" +
    "\045\uff29\046\uff29\051\uff29\052\uff29\053\uff29\055\uff29\056" +
    "\uff29\111\uff29\124\uff29\001\002\000\056\002\uff28\006\uff28" +
    "\007\uff28\011\uff28\017\uff28\020\uff28\021\uff28\022\uff28\023" +
    "\uff28\031\uff28\037\uff28\041\uff28\044\uff28\045\uff28\046\uff28" +
    "\051\uff28\052\uff28\053\uff28\055\uff28\056\uff28\111\uff28\124" +
    "\uff28\001\002\000\006\013\151\023\152\001\002\000\056" +
    "\002\uff26\006\uff26\007\uff26\011\uff26\017\uff26\020\uff26\021" +
    "\uff26\022\uff26\023\uff26\031\uff26\037\uff26\041\uff26\044\uff26" +
    "\045\uff26\046\uff26\051\uff26\052\uff26\053\uff26\055\uff26\056" +
    "\uff26\111\uff26\124\uff26\001\002\000\006\013\uff5b\023\uff5b" +
    "\001\002\000\006\013\uff5c\023\uff5c\001\002\000\004\015" +
    "\u0274\001\002\000\010\004\u0255\011\u0256\110\u0248\001\002" +
    "\000\006\013\151\023\152\001\002\000\060\002\uff67\006" +
    "\uff67\007\uff67\011\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\026\103\031\uff67\037\uff67\041\uff67\044\uff67\045" +
    "\uff67\046\uff67\051\uff67\052\uff67\053\uff67\055\uff67\056\uff67" +
    "\111\uff67\124\uff67\001\002\000\004\011\u0250\001\002\000" +
    "\056\002\uff63\006\uff63\007\uff63\011\uff63\017\uff63\020\uff63" +
    "\021\uff63\022\uff63\023\uff63\031\uff63\037\uff63\041\uff63\044" +
    "\uff63\045\uff63\046\uff63\051\uff63\052\uff63\053\uff63\055\uff63" +
    "\056\uff63\111\uff63\124\uff63\001\002\000\004\016\u027a\001" +
    "\002\000\012\004\u0255\011\u0256\057\u027b\110\u0248\001\002" +
    "\000\014\017\u027c\020\u027d\021\u027f\022\u027e\031\u0280\001" +
    "\002\000\004\077\u0290\001\002\000\004\077\u028c\001\002" +
    "\000\004\077\u0288\001\002\000\004\077\u0284\001\002\000" +
    "\004\024\u0281\001\002\000\004\025\u0282\001\002\000\006" +
    "\013\151\023\152\001\002\000\054\002\uff81\006\uff81\007" +
    "\uff81\011\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81" +
    "\031\uff81\037\uff81\041\uff81\044\uff81\045\uff81\051\uff81\052" +
    "\uff81\053\uff81\055\uff81\056\uff81\111\uff81\124\uff81\001\002" +
    "\000\004\004\u0285\001\002\000\004\100\u0286\001\002\000" +
    "\006\013\151\023\152\001\002\000\054\002\uff2b\006\uff2b" +
    "\007\uff2b\011\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023" +
    "\uff2b\031\uff2b\037\uff2b\041\uff2b\044\uff2b\045\uff2b\051\uff2b" +
    "\052\uff2b\053\uff2b\055\uff2b\056\uff2b\111\uff2b\124\uff2b\001" +
    "\002\000\004\004\u0289\001\002\000\004\100\u028a\001\002" +
    "\000\006\013\151\023\152\001\002\000\054\002\uff2c\006" +
    "\uff2c\007\uff2c\011\uff2c\017\uff2c\020\uff2c\021\uff2c\022\uff2c" +
    "\023\uff2c\031\uff2c\037\uff2c\041\uff2c\044\uff2c\045\uff2c\051" +
    "\uff2c\052\uff2c\053\uff2c\055\uff2c\056\uff2c\111\uff2c\124\uff2c" +
    "\001\002\000\004\004\u028d\001\002\000\004\100\u028e\001" +
    "\002\000\006\013\151\023\152\001\002\000\054\002\uff2a" +
    "\006\uff2a\007\uff2a\011\uff2a\017\uff2a\020\uff2a\021\uff2a\022" +
    "\uff2a\023\uff2a\031\uff2a\037\uff2a\041\uff2a\044\uff2a\045\uff2a" +
    "\051\uff2a\052\uff2a\053\uff2a\055\uff2a\056\uff2a\111\uff2a\124" +
    "\uff2a\001\002\000\004\004\u0291\001\002\000\004\100\u0292" +
    "\001\002\000\006\013\151\023\152\001\002\000\054\002" +
    "\uff2d\006\uff2d\007\uff2d\011\uff2d\017\uff2d\020\uff2d\021\uff2d" +
    "\022\uff2d\023\uff2d\031\uff2d\037\uff2d\041\uff2d\044\uff2d\045" +
    "\uff2d\051\uff2d\052\uff2d\053\uff2d\055\uff2d\056\uff2d\111\uff2d" +
    "\124\uff2d\001\002\000\004\100\u0295\001\002\000\004\016" +
    "\u0296\001\002\000\004\015\u0297\001\002\000\004\016\u0298" +
    "\001\002\000\012\004\300\005\304\010\301\014\276\001" +
    "\002\000\006\013\151\023\152\001\002\000\054\002\uff2e" +
    "\006\uff2e\007\uff2e\011\uff2e\017\uff2e\020\uff2e\021\uff2e\022" +
    "\uff2e\023\uff2e\031\uff2e\037\uff2e\041\uff2e\044\uff2e\045\uff2e" +
    "\051\uff2e\052\uff2e\053\uff2e\055\uff2e\056\uff2e\111\uff2e\124" +
    "\uff2e\001\002\000\012\004\u029c\005\u02a0\011\u029f\014\u029d" +
    "\001\002\000\010\012\u02ad\013\uffad\023\uffad\001\002\000" +
    "\010\012\u02aa\013\uffae\023\uffae\001\002\000\006\013\151" +
    "\023\152\001\002\000\012\012\u02a5\013\uffab\023\uffab\060" +
    "\u02a4\001\002\000\010\012\u02a1\013\uffac\023\uffac\001\002" +
    "\000\004\016\u02a2\001\002\000\012\004\u029c\005\u02a0\011" +
    "\u029f\014\u029d\001\002\000\006\013\uffb0\023\uffb0\001\002" +
    "\000\004\011\u02a8\001\002\000\004\016\u02a6\001\002\000" +
    "\012\004\u029c\005\u02a0\011\u029f\014\u029d\001\002\000\006" +
    "\013\uffaf\023\uffaf\001\002\000\006\013\uffaa\023\uffaa\001" +
    "\002\000\054\002\uffb3\006\uffb3\007\uffb3\011\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\031\uffb3\037\uffb3\041" +
    "\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3" +
    "\056\uffb3\111\uffb3\124\uffb3\001\002\000\004\016\u02ab\001" +
    "\002\000\012\004\u029c\005\u02a0\011\u029f\014\u029d\001\002" +
    "\000\006\013\uffb2\023\uffb2\001\002\000\004\016\u02ae\001" +
    "\002\000\012\004\u029c\005\u02a0\011\u029f\014\u029d\001\002" +
    "\000\006\013\uffb1\023\uffb1\001\002\000\004\123\u02b1\001" +
    "\002\000\004\023\u02b2\001\002\000\054\002\uffd5\006\uffd5" +
    "\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\031\uffd5\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\055\uffd5\056\uffd5\111\uffd5\124\uffd5\001" +
    "\002\000\004\026\103\001\002\000\004\011\u0250\001\002" +
    "\000\004\046\u02b6\001\002\000\004\016\u02b7\001\002\000" +
    "\006\004\u01cf\011\u01d0\001\002\000\004\016\u02b9\001\002" +
    "\000\006\030\u01d4\065\u01d3\001\002\000\004\016\u02bb\001" +
    "\002\000\006\004\u01cf\011\u01d0\001\002\000\006\013\151" +
    "\023\152\001\002\000\054\002\uff68\006\uff68\007\uff68\011" +
    "\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\031\uff68" +
    "\037\uff68\041\uff68\044\uff68\045\uff68\051\uff68\052\uff68\053" +
    "\uff68\055\uff68\056\uff68\111\uff68\124\uff68\001\002\000\004" +
    "\002\000\001\002\000\004\011\uff22\001\002\000\006\011" +
    "\uff23\067\uff23\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02be\000\100\002\007\004\065\005\046\006\050\007" +
    "\006\010\012\011\044\015\047\016\017\017\035\022\011" +
    "\031\051\032\040\035\042\042\013\046\016\053\041\055" +
    "\043\056\054\057\022\060\052\061\061\071\027\073\056" +
    "\076\024\105\060\106\026\112\062\116\045\117\033\131" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u014c\036\u021b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01bf\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\002\u0193\004\065" +
    "\005\046\006\050\007\006\010\012\011\044\015\047\016" +
    "\017\017\035\022\011\031\051\032\040\035\042\042\013" +
    "\046\016\053\041\055\043\056\054\057\022\060\052\061" +
    "\061\071\027\073\056\076\024\105\060\106\026\112\062" +
    "\116\045\117\033\131\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0104\001\001\000" +
    "\002\001\001\000\004\012\314\001\001\000\004\013\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\002\066\004\065\005" +
    "\046\006\050\007\006\010\012\011\044\015\047\016\017" +
    "\017\035\022\011\031\051\032\040\035\042\042\013\046" +
    "\016\053\041\055\043\056\054\057\022\060\052\061\061" +
    "\071\027\073\056\076\024\105\060\106\026\112\062\116" +
    "\045\117\033\131\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\100\001\001\000\004\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\127\001\001" +
    "\000\002\001\001\000\004\110\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\165\001\001\000\002\001\001\000\004\060\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\202\025\204\026\206\027\207\127\212\001\001\000" +
    "\004\012\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\202\025\204\026\206\027\207\127\244\001" +
    "\001\000\002\001\001\000\014\024\202\025\204\026\206" +
    "\027\207\127\237\001\001\000\002\001\001\000\014\024" +
    "\202\025\204\026\206\027\207\127\232\001\001\000\014" +
    "\024\202\025\204\026\206\027\207\127\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\217\001\001\000\004\013\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\262\001\001\000\002\001\001\000\004\013\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\301\040" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\324\001\001\000\002\001" +
    "\001\000\004\060\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\327\001\001\000\004\013\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\202\025" +
    "\204\026\206\027\207\127\337\001\001\000\002\001\001" +
    "\000\004\023\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\344\001\001\000\004\013\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\365\001\001\000\002\001\001\000\014" +
    "\024\202\025\204\026\206\027\207\127\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\373\041\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0101\001\001\000\006\030\373\041\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u010a\001\001\000\002" +
    "\001\001\000\014\024\202\025\204\026\206\027\207\127" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u0122\001\001\000" +
    "\004\013\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\113\u0129\115\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0133\006\050\007\006\010\012\011" +
    "\044\056\u0135\057\u0134\060\u0132\061\u0138\114\u0137\001\001" +
    "\000\004\012\u0104\001\001\000\002\001\001\000\004\012" +
    "\u014c\001\001\000\004\012\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0133\006" +
    "\050\007\006\010\012\011\044\056\u0135\057\u0134\060\u0132" +
    "\061\u0138\114\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0133\006\050\007\006" +
    "\010\012\011\044\056\u0135\057\u0134\060\u0132\061\u0138\114" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u0133\006\050\007\006\010\012\011\044" +
    "\056\u0135\057\u0134\060\u0132\061\u0138\114\u014b\001\001\000" +
    "\002\001\001\000\004\013\u014e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0133\006\050\007\006" +
    "\010\012\011\044\056\u0135\057\u0134\060\u0132\061\u0138\114" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0133\006\050\007\006\010\012\011" +
    "\044\056\u0135\057\u0134\060\u0132\061\u0138\114\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\u0133\006\050\007\006\010\012\011\044\056\u0135" +
    "\057\u0134\060\u0132\061\u0138\114\u0161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0133\006" +
    "\050\007\006\010\012\011\044\056\u0135\057\u0134\060\u0132" +
    "\061\u0138\114\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0133\006" +
    "\050\007\006\010\012\011\044\056\u0135\057\u0134\060\u0132" +
    "\061\u0138\114\u0170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0133\006\050\007\006" +
    "\010\012\011\044\056\u0135\057\u0134\060\u0132\061\u0138\114" +
    "\u0174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u0133\006\050\007\006" +
    "\010\012\011\044\056\u0135\057\u0134\060\u0132\061\u0138\114" +
    "\u017c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\u0133\006\050\007\006\010\012\011" +
    "\044\056\u0135\057\u0134\060\u0132\061\u0138\114\u0180\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u0133\006\050\007\006\010\012\011\044\056\u0135\057" +
    "\u0134\060\u0132\061\u0138\114\u0187\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\u0133\006" +
    "\050\007\006\010\012\011\044\056\u0135\057\u0134\060\u0132" +
    "\061\u0138\114\u018b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u0133\006\050\007\006\010" +
    "\012\011\044\056\u0135\057\u0134\060\u0132\061\u0138\114\u0192" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\056\u0199\057\u0197\060\u0198\061\u0196\001\001" +
    "\000\004\012\u01af\001\001\000\004\012\u01a8\001\001\000" +
    "\004\012\u01a1\001\001\000\004\012\u019a\001\001\000\004" +
    "\013\u019c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u019f\001\001\000\004\013\u01a0" +
    "\001\001\000\002\001\001\000\004\013\u01a3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01a7\001\001\000\002\001\001\000" +
    "\004\013\u01aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u01ad\001\001\000\004\013" +
    "\u01ae\001\001\000\002\001\001\000\004\013\u01b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u01b4\001\001\000\004\013\u01b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\u01ba\045\u01b9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u01bd\001\001\000\002\001" +
    "\001\000\004\072\u01c0\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01c3\001\001\000\004\072\u01c4\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u01c6" +
    "\001\001\000\002\001\001\000\006\077\u01cb\104\u01c8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u01d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u01d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\u01d6\001\001\000\002" +
    "\001\001\000\004\101\u01d8\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01dc\001\001\000\002\001\001" +
    "\000\006\030\u01de\103\u01dd\001\001\000\002\001\001\000" +
    "\004\016\u01df\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u01e4\001" +
    "\001\000\006\030\u01de\103\u01e5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u01fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u01fe\001\001\000\004\013\u01ff" +
    "\001\001\000\004\034\u0201\001\001\000\004\023\u0203\001" +
    "\001\000\002\001\001\000\004\033\u0205\001\001\000\004" +
    "\013\u0204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0208\001\001\000\004\013\u0209" +
    "\001\001\000\004\034\u020a\001\001\000\002\001\001\000" +
    "\004\110\u020c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\u0211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\202\025\204\026\206\027\207\127\u021f" +
    "\001\001\000\002\001\001\000\004\023\u0221\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0224\001\001" +
    "\000\004\013\u0225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0228\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u022e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0233\001\001\000\002\001\001\000\004\013\u0235\001\001" +
    "\000\002\001\001\000\004\057\u0237\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u023a\001\001\000\002" +
    "\001\001\000\004\060\u023c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u023f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u024c\126\u024b\001\001\000\002\001\001\000" +
    "\004\110\u0265\001\001\000\002\001\001\000\004\110\u025c" +
    "\001\001\000\002\001\001\000\004\013\u024d\001\001\000" +
    "\004\030\u024e\001\001\000\006\073\056\106\u0250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u0256\126\u024b\001\001\000\004" +
    "\110\u0265\001\001\000\004\110\u025c\001\001\000\004\013" +
    "\u0257\001\001\000\004\030\u0258\001\001\000\006\073\056" +
    "\106\u0259\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0269\001\001\000\002\001\001\000\004\013\u026d" +
    "\001\001\000\004\013\u026c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u026f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\u0274\126\u024b\001\001\000\004\013\u0275\001\001" +
    "\000\004\030\u0276\001\001\000\006\073\056\106\u0277\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\u0256" +
    "\126\u024b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u0282\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0286\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u028a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u028e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0292\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0298\001\001\000\004\013\u0299\001\001\000" +
    "\002\001\001\000\004\020\u029d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u02a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u02a2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u02a6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u02ab\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u02ae\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u02b3\001\001" +
    "\000\006\073\056\106\u02b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u02b7\001\001\000\002\001\001" +
    "\000\004\100\u02b9\001\001\000\002\001\001\000\004\102" +
    "\u02bb\001\001\000\004\013\u02bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= Funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lineas ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CLASESA ::= tipodeclase newline salto METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCIONESS ::= reducciondetipoente identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCIONESS ::= reducciondetipocadena identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCIONESS ::= reducciondetipobol identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCIONESS ::= reducciondetiporeal identificador para CANTIDADDEPARAMETROS parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCIONESS ::= reducciondetipoente identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCIONESS ::= reducciondetipocadena identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCIONESS ::= reducciondetipobol identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCIONESS ::= reducciondetiporeal identificador para parb CUERPOF newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CANTIDADDEPARAMETROS ::= PARAMETROSE CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CANTIDADDEPARAMETROS ::= PARAMETROSC CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CANTIDADDEPARAMETROS ::= PARAMETROSB CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CANTIDADDEPARAMETROS ::= PARAMETROSR CANTIDADDEPARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CANTIDADDEPARAMETROS ::= PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CANTIDADDEPARAMETROS ::= PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CANTIDADDEPARAMETROS ::= PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CANTIDADDEPARAMETROS ::= PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CANTIDADDEPARAMETROS",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPOF ::= newline TABULA retornar libre identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPOF ::= newline TABULA retornar libre boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPOF ::= newline TABULA retornar libre entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CUERPOF ::= newline TABULA retornar libre real libre simbolosdeopera real identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CUERPOF ::= newline TABULA retornar libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CUERPOF ::= newline TABULA retornar libre identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // est ::= ifs libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // est ::= ifs libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // seguimiento ::= els libre cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // seguimiento ::= els libre cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // seguimiento ::= els CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cond ::= entero libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cond ::= identificador libre simbolosdeopera libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cond ::= entero libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cond ::= identificador libre simbolosdeopera libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ASIGNA ::= SUBIR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operacionesmatematicas ::= OPERADORESLOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OPERADORESLOGICOS ::= identificador and identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OPERADORESLOGICOS ::= identificador or identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OPERADORESLOGICOS ::= identificador and identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPERADORESLOGICOS ::= identificador or identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORESLOGICOS",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // simbolosdeopera ::= porc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FunE ::= reducciondetiporeal tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FunE ::= reducciondetipobol tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FunE ::= tipo_ent identificador para tipo_ent libre identificador parb newline CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // contructoDes ::= constru para CANTIDADDEPARAMETROS parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TiposArr ::= identificador libre asignacion libre insta tipo_ent corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TiposArr ::= identificador libre asignacion libre insta tipo_cadena corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TiposArr ::= identificador libre asignacion libre insta tipo_real corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TiposArr ::= identificador libre asignacion libre insta tipo_bol corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SUBIR ::= identificador asignacion SI identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SUBIR ::= identificador asignacion SI entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SUBIR ::= identificador asignacion identificador SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SUBIR ::= identificador asignacion entero SIme finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SUBIR",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
