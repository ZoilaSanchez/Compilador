
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\006\000\002\005" +
    "\012\000\002\006\006\000\002\006\012\000\002\007\006" +
    "\000\002\007\012\000\002\010\006\000\002\010\012\000" +
    "\002\014\003\000\002\014\003\000\002\015\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\016\006\000" +
    "\002\021\012\000\002\021\011\000\002\021\012\000\002" +
    "\021\012\000\002\023\007\000\002\023\005\000\002\024" +
    "\007\000\002\024\005\000\002\025\007\000\002\025\005" +
    "\000\002\026\007\000\002\026\005\000\002\022\013\000" +
    "\002\022\006\000\002\030\015\000\002\030\016\000\002" +
    "\030\013\000\002\030\005\000\002\036\006\000\002\031" +
    "\011\000\002\031\010\000\002\033\011\000\002\033\010" +
    "\000\002\032\007\000\002\032\007\000\002\032\007\000" +
    "\002\032\007\000\002\034\013\000\002\034\013\000\002" +
    "\034\013\000\002\034\013\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\041\017\000\002\041\007\000\002\040\011\000" +
    "\002\040\012\000\002\044\006\000\002\011\005\000\002" +
    "\011\003\000\002\012\004\000\002\012\003\000\002\027" +
    "\004\000\002\027\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\032\006\011\007\010\011\036\017\023\020" +
    "\014\021\020\022\035\030\022\037\024\042\013\050\027" +
    "\051\005\001\002\000\034\002\001\006\011\007\010\011" +
    "\036\017\023\020\014\021\020\022\035\030\022\037\024" +
    "\042\013\050\027\051\005\001\002\000\004\011\u010c\001" +
    "\002\000\034\002\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\030\uffeb\037\uffeb\042\uffeb\050" +
    "\uffeb\051\uffeb\001\002\000\034\002\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\030\ufff9\037" +
    "\ufff9\042\ufff9\050\ufff9\051\ufff9\001\002\000\004\016\u0109" +
    "\001\002\000\004\016\364\001\002\000\034\002\uffea\006" +
    "\uffea\007\uffea\011\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\030\uffea\037\uffea\042\uffea\050\uffea\051\uffea\001\002\000" +
    "\004\024\334\001\002\000\004\016\311\001\002\000\004" +
    "\002\310\001\002\000\034\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\030\ufff8\037\ufff8" +
    "\042\ufff8\050\ufff8\051\ufff8\001\002\000\034\002\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\030\ufffe\037\ufffe\042\ufffe\050\ufffe\051\ufffe\001\002\000" +
    "\004\016\251\001\002\000\034\002\ufffd\006\ufffd\007\ufffd" +
    "\011\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\030\ufffd\037" +
    "\ufffd\042\ufffd\050\ufffd\051\ufffd\001\002\000\004\016\224" +
    "\001\002\000\004\016\154\001\002\000\006\004\123\011" +
    "\124\001\002\000\034\002\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\030\ufff4\037\ufff4\042" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\034\002\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\030" +
    "\ufffa\037\ufffa\042\ufffa\050\ufffa\051\ufffa\001\002\000\004" +
    "\024\113\001\002\000\034\002\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\030\ufff7\037\ufff7" +
    "\042\ufff7\050\ufff7\051\ufff7\001\002\000\034\002\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\030\ufffb\037\ufffb\042\ufffb\050\ufffb\051\ufffb\001\002\000" +
    "\034\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\030\ufff5\037\ufff5\042\ufff5\050\ufff5\051" +
    "\ufff5\001\002\000\034\002\ufffc\006\ufffc\007\ufffc\011\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\030\ufffc\037\ufffc\042" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\034\002\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\030" +
    "\ufff6\037\ufff6\042\ufff6\050\ufff6\051\ufff6\001\002\000\004" +
    "\016\052\001\002\000\004\016\037\001\002\000\004\015" +
    "\040\001\002\000\004\016\041\001\002\000\004\056\042" +
    "\001\002\000\004\030\043\001\002\000\004\024\044\001" +
    "\002\000\004\025\045\001\002\000\006\013\046\023\047" +
    "\001\002\000\004\023\051\001\002\000\040\002\uffb2\006" +
    "\uffb2\007\uffb2\011\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\026\uffb2\030\uffb2\037\uffb2\041\uffb2\042\uffb2\050\uffb2\051" +
    "\uffb2\001\002\000\034\002\uffce\006\uffce\007\uffce\011\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\030\uffce\037\uffce\042" +
    "\uffce\050\uffce\051\uffce\001\002\000\040\002\uffb3\006\uffb3" +
    "\007\uffb3\011\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\026" +
    "\uffb3\030\uffb3\037\uffb3\041\uffb3\042\uffb3\050\uffb3\051\uffb3" +
    "\001\002\000\004\011\053\001\002\000\014\012\064\013" +
    "\uffb4\016\uffb4\023\uffb4\024\063\001\002\000\010\013\046" +
    "\016\055\023\047\001\002\000\004\015\057\001\002\000" +
    "\034\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\030\ufff1\037\ufff1\042\ufff1\050\ufff1\051" +
    "\ufff1\001\002\000\004\016\060\001\002\000\004\014\061" +
    "\001\002\000\006\013\046\023\047\001\002\000\034\002" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\030\ufff0\037\ufff0\042\ufff0\050\ufff0\051\ufff0\001" +
    "\002\000\004\022\067\001\002\000\004\011\065\001\002" +
    "\000\012\012\064\013\uffb4\016\uffb4\023\uffb4\001\002\000" +
    "\010\013\uffb5\016\uffb5\023\uffb5\001\002\000\004\016\107" +
    "\001\002\000\004\023\071\001\002\000\004\026\074\001" +
    "\002\000\006\013\046\023\047\001\002\000\034\002\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\030\uffdd\037\uffdd\042\uffdd\050\uffdd\051\uffdd\001\002" +
    "\000\012\011\uffb0\026\074\034\uffb0\051\uffb0\001\002\000" +
    "\004\034\076\001\002\000\006\004\100\016\077\001\002" +
    "\000\004\011\101\001\002\000\006\013\uffd1\023\uffd1\001" +
    "\002\000\004\016\102\001\002\000\004\063\103\001\002" +
    "\000\004\016\104\001\002\000\004\011\105\001\002\000" +
    "\006\013\uffd2\023\uffd2\001\002\000\010\011\uffb1\034\uffb1" +
    "\051\uffb1\001\002\000\004\011\110\001\002\000\006\012" +
    "\111\023\uffd7\001\002\000\004\022\067\001\002\000\004" +
    "\023\uffd8\001\002\000\004\025\114\001\002\000\004\023" +
    "\115\001\002\000\004\026\074\001\002\000\034\002\uffb9" +
    "\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\030\uffb9\037\uffb9\042\uffb9\050\uffb9\051\uffb9\001\002" +
    "\000\004\051\120\001\002\000\004\011\121\001\002\000" +
    "\006\013\046\023\047\001\002\000\034\002\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\030" +
    "\uffb6\037\uffb6\042\uffb6\050\uffb6\051\uffb6\001\002\000\004" +
    "\016\147\001\002\000\004\016\142\001\002\000\004\016" +
    "\126\001\002\000\004\040\127\001\002\000\004\023\071" +
    "\001\002\000\006\013\046\023\047\001\002\000\036\002" +
    "\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\030\uffca\037\uffca\041\132\042\uffca\050\uffca\051" +
    "\uffca\001\002\000\006\004\123\011\124\001\002\000\034" +
    "\002\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\030\uffcb\037\uffcb\042\uffcb\050\uffcb\051\uffcb" +
    "\001\002\000\004\016\135\001\002\000\004\040\136\001" +
    "\002\000\004\023\071\001\002\000\006\013\046\023\047" +
    "\001\002\000\036\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\030\uffc8\037\uffc8\041\132" +
    "\042\uffc8\050\uffc8\051\uffc8\001\002\000\034\002\uffc9\006" +
    "\uffc9\007\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\030\uffc9\037\uffc9\042\uffc9\050\uffc9\051\uffc9\001\002\000" +
    "\004\063\143\001\002\000\004\016\144\001\002\000\006" +
    "\004\145\011\146\001\002\000\004\016\uffc6\001\002\000" +
    "\004\016\uffc4\001\002\000\004\063\150\001\002\000\004" +
    "\016\151\001\002\000\006\004\152\011\153\001\002\000" +
    "\004\016\uffc7\001\002\000\004\016\uffc5\001\002\000\012" +
    "\011\155\066\160\067\157\076\161\001\002\000\014\012" +
    "\064\013\uffb4\016\uffb4\023\uffb4\024\212\001\002\000\010" +
    "\013\046\016\204\023\047\001\002\000\004\024\176\001" +
    "\002\000\004\024\170\001\002\000\004\024\162\001\002" +
    "\000\004\022\163\001\002\000\004\016\164\001\002\000" +
    "\004\011\165\001\002\000\004\025\166\001\002\000\006" +
    "\013\046\023\047\001\002\000\034\002\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\030\uffc3" +
    "\037\uffc3\042\uffc3\050\uffc3\051\uffc3\001\002\000\004\022" +
    "\171\001\002\000\004\016\172\001\002\000\004\011\173" +
    "\001\002\000\004\025\174\001\002\000\006\013\046\023" +
    "\047\001\002\000\034\002\uffc2\006\uffc2\007\uffc2\011\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\030\uffc2\037\uffc2\042" +
    "\uffc2\050\uffc2\051\uffc2\001\002\000\004\022\177\001\002" +
    "\000\004\016\200\001\002\000\004\011\201\001\002\000" +
    "\004\025\202\001\002\000\006\013\046\023\047\001\002" +
    "\000\034\002\uffc1\006\uffc1\007\uffc1\011\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\030\uffc1\037\uffc1\042\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\004\015\206\001\002\000\034\002" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\030\ufff3\037\ufff3\042\ufff3\050\ufff3\051\ufff3\001" +
    "\002\000\004\016\207\001\002\000\004\004\210\001\002" +
    "\000\006\013\046\023\047\001\002\000\034\002\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\030\ufff2\037\ufff2\042\ufff2\050\ufff2\051\ufff2\001\002\000" +
    "\004\017\213\001\002\000\004\016\220\001\002\000\004" +
    "\025\215\001\002\000\004\023\071\001\002\000\006\013" +
    "\046\023\047\001\002\000\034\002\uffde\006\uffde\007\uffde" +
    "\011\uffde\017\uffde\020\uffde\021\uffde\022\uffde\030\uffde\037" +
    "\uffde\042\uffde\050\uffde\051\uffde\001\002\000\004\011\221" +
    "\001\002\000\006\012\222\025\uffd9\001\002\000\004\017" +
    "\213\001\002\000\004\025\uffda\001\002\000\004\011\225" +
    "\001\002\000\004\016\226\001\002\000\004\015\227\001" +
    "\002\000\004\016\230\001\002\000\004\056\231\001\002" +
    "\000\004\030\232\001\002\000\004\024\233\001\002\000" +
    "\014\004\235\005\242\010\236\014\234\025\241\001\002" +
    "\000\006\012\uffae\025\uffae\001\002\000\006\012\uffaf\025" +
    "\uffaf\001\002\000\006\012\uffad\025\uffad\001\002\000\004" +
    "\025\247\001\002\000\004\012\244\001\002\000\006\013" +
    "\046\023\047\001\002\000\006\012\uffac\025\uffac\001\002" +
    "\000\034\002\uffd0\006\uffd0\007\uffd0\011\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\030\uffd0\037\uffd0\042\uffd0\050\uffd0" +
    "\051\uffd0\001\002\000\004\016\245\001\002\000\012\004" +
    "\235\005\242\010\236\014\234\001\002\000\004\025\uffcc" +
    "\001\002\000\006\013\046\023\047\001\002\000\034\002" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\030\uffcf\037\uffcf\042\uffcf\050\uffcf\051\uffcf\001" +
    "\002\000\016\011\256\070\261\071\257\072\255\073\254" +
    "\074\252\001\002\000\004\024\uffbb\001\002\000\004\024" +
    "\302\001\002\000\004\024\uffbc\001\002\000\004\024\uffbd" +
    "\001\002\000\014\012\064\013\uffb4\016\uffb4\023\uffb4\024" +
    "\270\001\002\000\004\024\uffbe\001\002\000\010\013\046" +
    "\016\262\023\047\001\002\000\004\024\uffbf\001\002\000" +
    "\004\015\264\001\002\000\034\002\uffed\006\uffed\007\uffed" +
    "\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\030\uffed\037" +
    "\uffed\042\uffed\050\uffed\051\uffed\001\002\000\004\016\265" +
    "\001\002\000\004\005\266\001\002\000\006\013\046\023" +
    "\047\001\002\000\034\002\uffec\006\uffec\007\uffec\011\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\030\uffec\037\uffec\042" +
    "\uffec\050\uffec\051\uffec\001\002\000\004\021\272\001\002" +
    "\000\004\025\277\001\002\000\004\016\273\001\002\000" +
    "\004\011\274\001\002\000\006\012\275\025\uffd3\001\002" +
    "\000\004\021\272\001\002\000\004\025\uffd4\001\002\000" +
    "\004\023\071\001\002\000\006\013\046\023\047\001\002" +
    "\000\034\002\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\030\uffdb\037\uffdb\042\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\004\021\303\001\002\000\004\016" +
    "\304\001\002\000\004\011\305\001\002\000\004\025\306" +
    "\001\002\000\006\013\046\023\047\001\002\000\034\002" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\030\uffc0\037\uffc0\042\uffc0\050\uffc0\051\uffc0\001" +
    "\002\000\004\002\000\001\002\000\004\011\312\001\002" +
    "\000\014\012\064\013\uffb4\016\uffb4\023\uffb4\024\322\001" +
    "\002\000\010\013\046\016\314\023\047\001\002\000\004" +
    "\015\316\001\002\000\034\002\uffef\006\uffef\007\uffef\011" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\030\uffef\037\uffef" +
    "\042\uffef\050\uffef\051\uffef\001\002\000\004\016\317\001" +
    "\002\000\004\010\320\001\002\000\006\013\046\023\047" +
    "\001\002\000\034\002\uffee\006\uffee\007\uffee\011\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\030\uffee\037\uffee\042\uffee" +
    "\050\uffee\051\uffee\001\002\000\004\020\324\001\002\000" +
    "\004\025\331\001\002\000\004\016\325\001\002\000\004" +
    "\011\326\001\002\000\006\012\327\025\uffd5\001\002\000" +
    "\004\020\324\001\002\000\004\025\uffd6\001\002\000\004" +
    "\023\071\001\002\000\006\013\046\023\047\001\002\000" +
    "\034\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\030\uffdc\037\uffdc\042\uffdc\050\uffdc\051" +
    "\uffdc\001\002\000\012\017\336\020\335\021\341\022\340" +
    "\001\002\000\004\016\uffa9\001\002\000\004\016\uffab\001" +
    "\002\000\004\016\342\001\002\000\004\016\uffaa\001\002" +
    "\000\004\016\uffa8\001\002\000\004\011\343\001\002\000" +
    "\004\012\344\001\002\000\004\016\345\001\002\000\012" +
    "\017\336\020\335\021\341\022\340\001\002\000\004\016" +
    "\347\001\002\000\004\011\350\001\002\000\004\025\351" +
    "\001\002\000\004\023\352\001\002\000\004\026\074\001" +
    "\002\000\034\002\uffba\006\uffba\007\uffba\011\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\030\uffba\037\uffba\042\uffba\050" +
    "\uffba\051\uffba\001\002\000\004\011\355\001\002\000\004" +
    "\016\356\001\002\000\004\015\357\001\002\000\004\016" +
    "\360\001\002\000\004\011\361\001\002\000\006\013\046" +
    "\023\047\001\002\000\036\002\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\026\074\030\uffb8" +
    "\037\uffb8\042\uffb8\050\uffb8\051\uffb8\001\002\000\034\002" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\030\uffb7\037\uffb7\042\uffb7\050\uffb7\051\uffb7\001" +
    "\002\000\012\004\365\005\371\011\370\014\366\001\002" +
    "\000\010\012\u0106\013\uffe3\023\uffe3\001\002\000\010\012" +
    "\u0103\013\uffe4\023\uffe4\001\002\000\006\013\046\023\047" +
    "\001\002\000\012\012\376\013\uffe1\023\uffe1\057\375\001" +
    "\002\000\010\012\372\013\uffe2\023\uffe2\001\002\000\004" +
    "\016\373\001\002\000\012\004\365\005\371\011\370\014" +
    "\366\001\002\000\006\013\uffe6\023\uffe6\001\002\000\004" +
    "\011\u0101\001\002\000\004\016\377\001\002\000\012\004" +
    "\365\005\371\011\370\014\366\001\002\000\006\013\uffe5" +
    "\023\uffe5\001\002\000\006\013\uffe0\023\uffe0\001\002\000" +
    "\034\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\030\uffe9\037\uffe9\042\uffe9\050\uffe9\051" +
    "\uffe9\001\002\000\004\016\u0104\001\002\000\012\004\365" +
    "\005\371\011\370\014\366\001\002\000\006\013\uffe8\023" +
    "\uffe8\001\002\000\004\016\u0107\001\002\000\012\004\365" +
    "\005\371\011\370\014\366\001\002\000\006\013\uffe7\023" +
    "\uffe7\001\002\000\004\011\u010a\001\002\000\006\013\046" +
    "\023\047\001\002\000\034\002\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\030\uffdf\037\uffdf" +
    "\042\uffdf\050\uffdf\051\uffdf\001\002\000\006\013\046\023" +
    "\047\001\002\000\034\002\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\030\uffcd\037\uffcd\042" +
    "\uffcd\050\uffcd\051\uffcd\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\040\002\014\003\003\004\016\005\027\006" +
    "\033\007\031\010\024\014\020\015\005\016\011\021\032" +
    "\030\030\031\025\034\006\041\015\001\001\000\040\002" +
    "\u010d\003\003\004\016\005\027\006\033\007\031\010\024" +
    "\014\020\015\005\016\011\021\032\030\030\031\025\034" +
    "\006\041\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\053\001\001\000\002\001\001\000\004" +
    "\012\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\061\001\001" +
    "\000\002\001\001\000\004\024\067\001\001\000\004\011" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\071\001\001\000\004\027\074\001" +
    "\001\000\004\012\072\001\001\000\002\001\001\000\004" +
    "\027\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\116\044\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\127\001\001\000\004\012\130\001\001\000\004" +
    "\033\132\001\001\000\004\032\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\136" +
    "\001\001\000\004\012\137\001\001\000\004\033\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\155\001\001\000" +
    "\002\001\001\000\004\012\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\210\001\001\000\002\001\001\000\004\023\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\215" +
    "\001\001\000\004\012\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\236\037\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\245\001\001\000\002\001\001\000\004\012" +
    "\247\001\001\000\002\001\001\000\006\011\257\035\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\266\001\001\000\002\001\001\000\004\026" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\275\001\001\000" +
    "\002\001\001\000\004\022\277\001\001\000\004\012\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\312\001\001\000\002\001\001\000\004\012\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\320\001\001\000\002\001\001" +
    "\000\004\025\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\327" +
    "\001\001\000\002\001\001\000\004\022\331\001\001\000" +
    "\004\012\332\001\001\000\002\001\001\000\004\042\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\353\040\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\361\001\001\000\006\027\353\040\362\001\001\000\002" +
    "\001\001\000\004\017\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u010a\001\001\000\002\001\001\000\004\012\u010c\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECENTERO ::= tipo_ent libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECENTERO ::= tipo_ent libre VARSECUE libre asignacion libre entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECCADENA ::= tipo_cadena libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECCADENA ::= tipo_cadena libre VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECBOLEAN ::= tipo_bol libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECBOLEAN ::= tipo_bol libre VARSECUE libre asignacion libre boleano finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLAREAL ::= tipo_real libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLAREAL ::= tipo_real libre VARSECUE libre asignacion libre real finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONESS ::= tipo_ent libre identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONESS ::= tipo_cadena libre identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONESS ::= tipo_bol libre identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONESS ::= tipo_real libre identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // datos ::= tipodatos coma libre tipodatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunE ::= tipo_ent libre tipo_ca para tipo_cadena libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunE ::= tipo_ent libre tipo_ca2 para tipo_cadena libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunE ::= tipo_ent libre tipo_ca3 para tipo_cadena libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunE ::= tipo_real libre Tipofun para tipo_real libre identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipodatos ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipodatos ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipodatos ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipodatos ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
