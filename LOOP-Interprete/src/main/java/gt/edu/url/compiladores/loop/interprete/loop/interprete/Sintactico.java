
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\112\007\000\002\116\005\000" +
    "\002\116\011\000\002\115\027\000\002\115\020\000\002" +
    "\115\020\000\002\115\020\000\002\115\011\000\002\115" +
    "\011\000\002\115\011\000\002\113\027\000\002\113\020" +
    "\000\002\113\020\000\002\113\020\000\002\113\011\000" +
    "\002\113\011\000\002\113\011\000\002\114\003\000\002" +
    "\114\004\000\002\114\006\000\002\117\006\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\006\007\000\002\006\013\000" +
    "\002\006\011\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\007\005\000\002\007" +
    "\007\000\002\007\013\000\002\007\011\000\002\010\005" +
    "\000\002\010\007\000\002\010\013\000\002\010\011\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\011\005\000\002\011\007\000\002\011\013\000\002\011" +
    "\011\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\005" +
    "\000\002\017\006\000\002\071\004\000\002\071\007\000" +
    "\002\071\004\000\002\072\004\000\002\072\005\000\002" +
    "\022\011\000\002\022\010\000\002\022\011\000\002\022" +
    "\011\000\002\024\006\000\002\024\004\000\002\025\007" +
    "\000\002\025\005\000\002\026\007\000\002\026\005\000" +
    "\002\027\006\000\002\027\004\000\002\023\013\000\002" +
    "\023\006\000\002\023\017\000\002\120\003\000\002\120" +
    "\003\000\002\031\015\000\002\031\016\000\002\031\013" +
    "\000\002\031\005\000\002\037\006\000\002\032\011\000" +
    "\002\032\010\000\002\034\011\000\002\034\010\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\076\024\000\002\076\020\000\002\103\004" +
    "\000\002\100\003\000\002\100\003\000\002\101\003\000" +
    "\002\101\003\000\002\077\004\000\002\077\012\000\002" +
    "\077\007\000\002\104\004\000\002\102\003\000\002\102" +
    "\003\000\002\105\016\000\002\121\003\000\002\106\010" +
    "\000\002\106\006\000\002\106\010\000\002\106\012\000" +
    "\002\106\012\000\002\106\010\000\002\107\005\000\002" +
    "\107\005\000\002\107\005\000\002\107\005\000\002\107" +
    "\004\000\002\107\004\000\002\107\003\000\002\107\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\035\011\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\042\017\000\002\042\007\000" +
    "\002\041\003\000\002\045\006\000\002\046\016\000\002" +
    "\046\016\000\002\046\016\000\002\046\016\000\002\047" +
    "\004\000\002\047\006\000\002\050\004\000\002\050\006" +
    "\000\002\051\004\000\002\051\006\000\002\052\004\000" +
    "\002\052\006\000\002\053\007\000\002\053\007\000\002" +
    "\053\007\000\002\053\007\000\002\053\013\000\002\053" +
    "\014\000\002\056\004\000\002\057\004\000\002\061\004" +
    "\000\002\060\004\000\002\012\005\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\030\004\000\002" +
    "\030\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u026d\000\050\006\015\007\021\011\020\017\062\020" +
    "\004\021\035\022\005\031\055\037\026\041\023\044\052" +
    "\045\030\051\032\052\061\053\014\055\054\056\031\111" +
    "\010\124\034\001\002\000\004\016\u026f\001\002\000\004" +
    "\016\u026e\001\002\000\060\002\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\026\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\037\uffd7\041\uffd7\044\uffd7\045\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\055\uffd7\056\uffd7\111\uffd7\124\uffd7" +
    "\001\002\000\004\002\u026d\001\002\000\004\023\u0262\001" +
    "\002\000\052\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\031\ufff0\037\ufff0\041\ufff0\044" +
    "\ufff0\045\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0" +
    "\111\ufff0\124\ufff0\001\002\000\060\002\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6" +
    "\031\uffd6\033\uffd6\034\uffd6\037\uffd6\041\uffd6\044\uffd6\045" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\111\uffd6" +
    "\124\uffd6\001\002\000\052\002\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\031\ufffa\037\ufffa" +
    "\041\ufffa\044\ufffa\045\ufffa\051\ufffa\052\ufffa\053\ufffa\055" +
    "\ufffa\056\ufffa\111\ufffa\124\ufffa\001\002\000\004\016\u025f" +
    "\001\002\000\004\016\u024a\001\002\000\052\002\uffef\006" +
    "\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\031\uffef\037\uffef\041\uffef\044\uffef\045\uffef\051\uffef\052" +
    "\uffef\053\uffef\055\uffef\056\uffef\111\uffef\124\uffef\001\002" +
    "\000\052\002\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\031\uffb9\037\uffb9\041\uffb9\044\uffb9" +
    "\045\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\111" +
    "\uffb9\124\uffb9\001\002\000\012\015\336\016\u0236\060\335" +
    "\077\u0235\001\002\000\004\016\u0232\001\002\000\016\011" +
    "\u0210\070\u0212\071\u0211\072\u020f\073\u020e\074\u020c\001\002" +
    "\000\006\004\u01f3\011\u01f4\001\002\000\052\002\ufff7\006" +
    "\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\031\ufff7\037\ufff7\041\ufff7\044\ufff7\045\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\055\ufff7\056\ufff7\111\ufff7\124\ufff7\001\002" +
    "\000\052\002\ufff6\006\ufff6\007\ufff6\011\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\031\ufff6\037\ufff6\041\ufff6\044\ufff6" +
    "\045\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\111" +
    "\ufff6\124\ufff6\001\002\000\004\016\u01ed\001\002\000\052" +
    "\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\031\ufff8\037\ufff8\041\ufff8\044\ufff8\045\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\111\ufff8\124" +
    "\ufff8\001\002\000\004\016\u01c2\001\002\000\006\013\067" +
    "\023\u01b9\001\002\000\004\024\u01b1\001\002\000\052\002" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\031\ufff3\037\ufff3\041\ufff3\044\ufff3\045\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\111\ufff3\124\ufff3" +
    "\001\002\000\004\016\u0190\001\002\000\004\016\u018f\001" +
    "\002\000\052\002\uffb8\006\uffb8\007\uffb8\011\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\031\uffb8\037\uffb8\041\uffb8\044" +
    "\uffb8\045\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\111\uffb8\124\uffb8\001\002\000\052\002\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031\ufff2" +
    "\037\ufff2\041\ufff2\044\ufff2\045\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\055\ufff2\056\ufff2\111\ufff2\124\ufff2\001\002\000\052" +
    "\002\uffee\006\uffee\007\uffee\011\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\031\uffee\037\uffee\041\uffee\044\uffee\045\uffee" +
    "\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee\111\uffee\124" +
    "\uffee\001\002\000\052\002\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\037\ufff1\041" +
    "\ufff1\044\ufff1\045\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1" +
    "\056\ufff1\111\ufff1\124\ufff1\001\002\000\052\002\uffff\006" +
    "\015\007\021\011\020\017\062\020\004\021\035\022\005" +
    "\031\055\037\026\041\023\044\052\045\030\051\032\052" +
    "\061\053\014\055\054\056\031\111\010\124\034\001\002" +
    "\000\060\002\uffd5\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\026\uffd5\031\uffd5\033\uffd5\034\uffd5" +
    "\037\uffd5\041\uffd5\044\uffd5\045\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\055\uffd5\056\uffd5\111\uffd5\124\uffd5\001\002\000\004" +
    "\023\u0121\001\002\000\052\002\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\037\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\051\ufffc\052\ufffc\053\ufffc\055" +
    "\ufffc\056\ufffc\111\ufffc\124\ufffc\001\002\000\052\002\ufffb" +
    "\006\ufffb\007\ufffb\011\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\031\ufffb\037\ufffb\041\ufffb\044\ufffb\045\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\055\ufffb\056\ufffb\111\ufffb\124\ufffb\001" +
    "\002\000\060\002\uffd8\006\uffd8\007\uffd8\011\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\026\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\037\uffd8\041\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\055\uffd8\056\uffd8\111\uffd8\124\uffd8\001\002\000" +
    "\052\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9\045" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\056\ufff9\111\ufff9" +
    "\124\ufff9\001\002\000\004\011\377\001\002\000\004\024" +
    "\312\001\002\000\012\011\222\066\225\067\224\076\226" +
    "\001\002\000\006\013\067\023\070\001\002\000\004\016" +
    "\174\001\002\000\052\002\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\031\ufff5\037\ufff5\041" +
    "\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5\053\ufff5\055\ufff5" +
    "\056\ufff5\111\ufff5\124\ufff5\001\002\000\004\011\073\001" +
    "\002\000\052\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\031\ufff4\037\ufff4\041\ufff4\044" +
    "\ufff4\045\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4" +
    "\111\ufff4\124\ufff4\001\002\000\004\011\066\001\002\000" +
    "\004\016\065\001\002\000\052\002\001\006\015\007\021" +
    "\011\020\017\062\020\004\021\035\022\005\031\055\037" +
    "\026\041\023\044\052\045\030\051\032\052\061\053\014" +
    "\055\054\056\031\111\010\124\034\001\002\000\004\002" +
    "\ufffd\001\002\000\012\011\uff48\066\uff48\067\uff48\076\uff48" +
    "\001\002\000\006\013\067\023\070\001\002\000\004\023" +
    "\072\001\002\000\064\002\uff41\006\uff41\007\uff41\011\uff41" +
    "\017\uff41\020\uff41\021\uff41\022\uff41\026\uff41\031\uff41\033" +
    "\uff41\034\uff41\037\uff41\041\uff41\043\uff41\044\uff41\045\uff41" +
    "\046\uff41\051\uff41\052\uff41\053\uff41\055\uff41\056\uff41\111" +
    "\uff41\124\uff41\001\002\000\052\002\uff93\006\uff93\007\uff93" +
    "\011\uff93\017\uff93\020\uff93\021\uff93\022\uff93\031\uff93\037" +
    "\uff93\041\uff93\044\uff93\045\uff93\051\uff93\052\uff93\053\uff93" +
    "\055\uff93\056\uff93\111\uff93\124\uff93\001\002\000\066\002" +
    "\uff42\006\uff42\007\uff42\011\uff42\017\uff42\020\uff42\021\uff42" +
    "\022\uff42\026\uff42\031\uff42\033\uff42\034\uff42\037\uff42\041" +
    "\uff42\043\uff42\044\uff42\045\uff42\046\uff42\051\uff42\052\uff42" +
    "\053\uff42\055\uff42\056\uff42\105\uff42\111\uff42\124\uff42\001" +
    "\002\000\016\012\110\013\uff43\016\uff43\023\uff43\024\107" +
    "\077\106\001\002\000\010\013\067\016\075\023\070\001" +
    "\002\000\004\015\077\001\002\000\060\002\uffc8\006\uffc8" +
    "\007\uffc8\011\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\026" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\037\uffc8\041\uffc8\044\uffc8" +
    "\045\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\111" +
    "\uffc8\124\uffc8\001\002\000\004\016\100\001\002\000\010" +
    "\004\101\005\104\010\102\001\002\000\006\013\uffc4\023" +
    "\uffc4\001\002\000\006\013\uffc2\023\uffc2\001\002\000\006" +
    "\013\067\023\070\001\002\000\006\013\uffc3\023\uffc3\001" +
    "\002\000\060\002\uffc5\006\uffc5\007\uffc5\011\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\026\uffc5\031\uffc5\033\uffc5\034" +
    "\uffc5\037\uffc5\041\uffc5\044\uffc5\045\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\055\uffc5\056\uffc5\111\uffc5\124\uffc5\001\002\000" +
    "\006\004\154\100\155\001\002\000\004\020\114\001\002" +
    "\000\004\011\111\001\002\000\012\012\110\013\uff43\016" +
    "\uff43\023\uff43\001\002\000\010\013\uff44\016\uff44\023\uff44" +
    "\001\002\000\004\025\121\001\002\000\004\016\115\001" +
    "\002\000\004\011\116\001\002\000\006\012\117\025\uff9e" +
    "\001\002\000\004\020\114\001\002\000\004\025\uff9f\001" +
    "\002\000\004\023\122\001\002\000\004\026\125\001\002" +
    "\000\006\013\067\023\070\001\002\000\052\002\uffa5\006" +
    "\uffa5\007\uffa5\011\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\031\uffa5\037\uffa5\041\uffa5\044\uffa5\045\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\055\uffa5\056\uffa5\111\uffa5\124\uffa5\001\002" +
    "\000\014\006\uff3f\011\uff3f\026\125\035\uff3f\052\uff3f\001" +
    "\002\000\004\035\127\001\002\000\010\004\131\011\132" +
    "\016\130\001\002\000\004\011\146\001\002\000\006\013" +
    "\uff9a\023\uff9a\001\002\000\006\107\134\110\133\001\002" +
    "\000\006\011\uff97\016\uff97\001\002\000\006\011\uff98\016" +
    "\uff98\001\002\000\004\011\136\001\002\000\004\024\137" +
    "\001\002\000\004\011\140\001\002\000\004\016\141\001" +
    "\002\000\006\107\134\110\133\001\002\000\004\016\143" +
    "\001\002\000\004\004\144\001\002\000\004\025\145\001" +
    "\002\000\006\013\uff99\023\uff99\001\002\000\004\016\147" +
    "\001\002\000\004\064\150\001\002\000\004\016\151\001" +
    "\002\000\004\011\152\001\002\000\006\013\uff9b\023\uff9b" +
    "\001\002\000\012\006\uff40\011\uff40\035\uff40\052\uff40\001" +
    "\002\000\004\100\157\001\002\000\006\013\067\023\070" +
    "\001\002\000\052\002\uff4c\006\uff4c\007\uff4c\011\uff4c\017" +
    "\uff4c\020\uff4c\021\uff4c\022\uff4c\031\uff4c\037\uff4c\041\uff4c" +
    "\044\uff4c\045\uff4c\051\uff4c\052\uff4c\053\uff4c\055\uff4c\056" +
    "\uff4c\111\uff4c\124\uff4c\001\002\000\004\016\160\001\002" +
    "\000\004\015\161\001\002\000\004\101\162\001\002\000" +
    "\004\016\163\001\002\000\004\010\165\001\002\000\004" +
    "\102\172\001\002\000\006\012\167\016\166\001\002\000" +
    "\004\102\uff50\001\002\000\004\016\170\001\002\000\004" +
    "\010\165\001\002\000\004\102\uff4f\001\002\000\006\013" +
    "\067\023\070\001\002\000\052\002\uff57\006\uff57\007\uff57" +
    "\011\uff57\017\uff57\020\uff57\021\uff57\022\uff57\031\uff57\037" +
    "\uff57\041\uff57\044\uff57\045\uff57\051\uff57\052\uff57\053\uff57" +
    "\055\uff57\056\uff57\111\uff57\124\uff57\001\002\000\004\011" +
    "\175\001\002\000\004\016\176\001\002\000\004\015\177" +
    "\001\002\000\004\016\200\001\002\000\004\057\201\001" +
    "\002\000\004\031\202\001\002\000\004\024\203\001\002" +
    "\000\014\004\206\005\211\010\207\014\204\025\212\001" +
    "\002\000\012\012\uff3d\013\uff3d\023\uff3d\025\uff3d\001\002" +
    "\000\004\012\216\001\002\000\012\012\uff3e\013\uff3e\023" +
    "\uff3e\025\uff3e\001\002\000\012\012\uff3c\013\uff3c\023\uff3c" +
    "\025\uff3c\001\002\000\004\025\214\001\002\000\012\012" +
    "\uff3b\013\uff3b\023\uff3b\025\uff3b\001\002\000\006\013\067" +
    "\023\070\001\002\000\052\002\uff96\006\uff96\007\uff96\011" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\031\uff96\037\uff96" +
    "\041\uff96\044\uff96\045\uff96\051\uff96\052\uff96\053\uff96\055" +
    "\uff96\056\uff96\111\uff96\124\uff96\001\002\000\006\013\067" +
    "\023\070\001\002\000\052\002\uff95\006\uff95\007\uff95\011" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\031\uff95\037\uff95" +
    "\041\uff95\044\uff95\045\uff95\051\uff95\052\uff95\053\uff95\055" +
    "\uff95\056\uff95\111\uff95\124\uff95\001\002\000\004\016\217" +
    "\001\002\000\012\004\206\005\211\010\207\014\204\001" +
    "\002\000\004\025\uff92\001\002\000\052\002\uffac\006\uffac" +
    "\007\uffac\011\uffac\017\uffac\020\uffac\021\uffac\022\uffac\031" +
    "\uffac\037\uffac\041\uffac\044\uffac\045\uffac\051\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\111\uffac\124\uffac\001\002\000" +
    "\016\012\110\013\uff43\016\uff43\023\uff43\024\260\077\261" +
    "\001\002\000\010\013\067\016\246\023\070\001\002\000" +
    "\004\024\241\001\002\000\004\024\234\001\002\000\004" +
    "\024\227\001\002\000\004\022\005\001\002\000\004\011" +
    "\231\001\002\000\004\025\232\001\002\000\006\013\067" +
    "\023\070\001\002\000\052\002\uff67\006\uff67\007\uff67\011" +
    "\uff67\017\uff67\020\uff67\021\uff67\022\uff67\031\uff67\037\uff67" +
    "\041\uff67\044\uff67\045\uff67\051\uff67\052\uff67\053\uff67\055" +
    "\uff67\056\uff67\111\uff67\124\uff67\001\002\000\004\022\005" +
    "\001\002\000\004\011\236\001\002\000\004\025\237\001" +
    "\002\000\006\013\067\023\070\001\002\000\052\002\uff66" +
    "\006\uff66\007\uff66\011\uff66\017\uff66\020\uff66\021\uff66\022" +
    "\uff66\031\uff66\037\uff66\041\uff66\044\uff66\045\uff66\051\uff66" +
    "\052\uff66\053\uff66\055\uff66\056\uff66\111\uff66\124\uff66\001" +
    "\002\000\004\022\005\001\002\000\004\011\243\001\002" +
    "\000\004\025\244\001\002\000\006\013\067\023\070\001" +
    "\002\000\052\002\uff65\006\uff65\007\uff65\011\uff65\017\uff65" +
    "\020\uff65\021\uff65\022\uff65\031\uff65\037\uff65\041\uff65\044" +
    "\uff65\045\uff65\051\uff65\052\uff65\053\uff65\055\uff65\056\uff65" +
    "\111\uff65\124\uff65\001\002\000\004\015\250\001\002\000" +
    "\060\002\uffd4\006\uffd4\007\uffd4\011\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\026\uffd4\031\uffd4\033\uffd4\034\uffd4\037" +
    "\uffd4\041\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\055\uffd4\056\uffd4\111\uffd4\124\uffd4\001\002\000\004\016" +
    "\251\001\002\000\012\004\254\005\256\010\255\014\253" +
    "\001\002\000\006\013\067\023\070\001\002\000\006\013" +
    "\uffce\023\uffce\001\002\000\006\013\uffd0\023\uffd0\001\002" +
    "\000\006\013\uffcd\023\uffcd\001\002\000\006\013\uffcf\023" +
    "\uffcf\001\002\000\060\002\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\026\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\037\uffd1\041\uffd1\044\uffd1\045\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\055\uffd1\056\uffd1\111\uffd1\124\uffd1\001" +
    "\002\000\004\017\062\001\002\000\006\004\262\100\263" +
    "\001\002\000\004\100\265\001\002\000\006\013\067\023" +
    "\070\001\002\000\052\002\uff4e\006\uff4e\007\uff4e\011\uff4e" +
    "\017\uff4e\020\uff4e\021\uff4e\022\uff4e\031\uff4e\037\uff4e\041" +
    "\uff4e\044\uff4e\045\uff4e\051\uff4e\052\uff4e\053\uff4e\055\uff4e" +
    "\056\uff4e\111\uff4e\124\uff4e\001\002\000\004\016\266\001" +
    "\002\000\004\015\267\001\002\000\004\101\270\001\002" +
    "\000\004\016\271\001\002\000\004\004\272\001\002\000" +
    "\006\012\277\016\276\001\002\000\004\102\274\001\002" +
    "\000\006\013\067\023\070\001\002\000\052\002\uff5a\006" +
    "\uff5a\007\uff5a\011\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a" +
    "\031\uff5a\037\uff5a\041\uff5a\044\uff5a\045\uff5a\051\uff5a\052" +
    "\uff5a\053\uff5a\055\uff5a\056\uff5a\111\uff5a\124\uff5a\001\002" +
    "\000\004\102\uff56\001\002\000\004\016\300\001\002\000" +
    "\004\004\272\001\002\000\004\102\uff55\001\002\000\004" +
    "\025\307\001\002\000\004\011\304\001\002\000\006\012" +
    "\305\025\uffa2\001\002\000\004\017\062\001\002\000\004" +
    "\025\uffa3\001\002\000\004\023\122\001\002\000\006\013" +
    "\067\023\070\001\002\000\052\002\uffa7\006\uffa7\007\uffa7" +
    "\011\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\031\uffa7\037" +
    "\uffa7\041\uffa7\044\uffa7\045\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\055\uffa7\056\uffa7\111\uffa7\124\uffa7\001\002\000\012\017" +
    "\314\020\313\021\317\022\316\001\002\000\006\016\uff38" +
    "\077\uff38\001\002\000\006\016\uff3a\077\uff3a\001\002\000" +
    "\004\016\320\001\002\000\006\016\uff39\077\uff39\001\002" +
    "\000\006\016\uff37\077\uff37\001\002\000\004\011\321\001" +
    "\002\000\004\012\322\001\002\000\004\016\323\001\002" +
    "\000\012\017\314\020\313\021\317\022\316\001\002\000" +
    "\004\016\325\001\002\000\004\011\326\001\002\000\004" +
    "\025\327\001\002\000\004\023\330\001\002\000\004\011" +
    "\331\001\002\000\010\015\336\016\334\060\335\001\002" +
    "\000\052\002\uff5c\006\uff5c\007\uff5c\011\uff5c\017\uff5c\020" +
    "\uff5c\021\uff5c\022\uff5c\031\uff5c\037\uff5c\041\uff5c\044\uff5c" +
    "\045\uff5c\051\uff5c\052\uff5c\053\uff5c\055\uff5c\056\uff5c\111" +
    "\uff5c\124\uff5c\001\002\000\052\002\uff5e\006\uff5e\007\uff5e" +
    "\011\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e\031\uff5e\037" +
    "\uff5e\041\uff5e\044\uff5e\045\uff5e\051\uff5e\052\uff5e\053\uff5e" +
    "\055\uff5e\056\uff5e\111\uff5e\124\uff5e\001\002\000\004\015" +
    "\371\001\002\000\004\011\363\001\002\000\010\004\340" +
    "\011\341\110\337\001\002\000\006\004\361\011\362\001" +
    "\002\000\020\013\uff6d\023\uff6d\107\351\110\350\112\346" +
    "\113\347\114\353\001\002\000\020\013\uff6e\023\uff6e\107" +
    "\351\110\350\112\346\113\347\114\353\001\002\000\006" +
    "\013\067\023\070\001\002\000\056\002\uff79\006\uff79\007" +
    "\uff79\011\uff79\017\uff79\020\uff79\021\uff79\022\uff79\026\125" +
    "\031\uff79\037\uff79\041\uff79\044\uff79\045\uff79\046\uff79\051" +
    "\uff79\052\uff79\053\uff79\055\uff79\056\uff79\111\uff79\124\uff79" +
    "\001\002\000\004\011\331\001\002\000\054\002\uff75\006" +
    "\uff75\007\uff75\011\uff75\017\uff75\020\uff75\021\uff75\022\uff75" +
    "\031\uff75\037\uff75\041\uff75\044\uff75\045\uff75\046\uff75\051" +
    "\uff75\052\uff75\053\uff75\055\uff75\056\uff75\111\uff75\124\uff75" +
    "\001\002\000\006\004\uff6a\011\uff6a\001\002\000\006\004" +
    "\uff69\011\uff69\001\002\000\006\004\uff6b\011\uff6b\001\002" +
    "\000\006\004\uff6c\011\uff6c\001\002\000\006\004\354\011" +
    "\355\001\002\000\006\004\uff68\011\uff68\001\002\000\006" +
    "\013\uff71\023\uff71\001\002\000\006\013\uff73\023\uff73\001" +
    "\002\000\006\004\357\011\360\001\002\000\006\013\uff74" +
    "\023\uff74\001\002\000\006\013\uff72\023\uff72\001\002\000" +
    "\006\013\uff6f\023\uff6f\001\002\000\006\013\uff70\023\uff70" +
    "\001\002\000\004\015\364\001\002\000\010\004\340\011" +
    "\341\110\337\001\002\000\006\013\067\023\070\001\002" +
    "\000\056\002\uff7a\006\uff7a\007\uff7a\011\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\026\125\031\uff7a\037\uff7a\041\uff7a" +
    "\044\uff7a\045\uff7a\046\uff7a\051\uff7a\052\uff7a\053\uff7a\055" +
    "\uff7a\056\uff7a\111\uff7a\124\uff7a\001\002\000\004\011\331" +
    "\001\002\000\054\002\uff76\006\uff76\007\uff76\011\uff76\017" +
    "\uff76\020\uff76\021\uff76\022\uff76\031\uff76\037\uff76\041\uff76" +
    "\044\uff76\045\uff76\046\uff76\051\uff76\052\uff76\053\uff76\055" +
    "\uff76\056\uff76\111\uff76\124\uff76\001\002\000\004\016\372" +
    "\001\002\000\010\004\340\011\341\110\337\001\002\000" +
    "\006\013\067\023\070\001\002\000\056\002\uff78\006\uff78" +
    "\007\uff78\011\uff78\017\uff78\020\uff78\021\uff78\022\uff78\026" +
    "\125\031\uff78\037\uff78\041\uff78\044\uff78\045\uff78\046\uff78" +
    "\051\uff78\052\uff78\053\uff78\055\uff78\056\uff78\111\uff78\124" +
    "\uff78\001\002\000\004\011\331\001\002\000\054\002\uff77" +
    "\006\uff77\007\uff77\011\uff77\017\uff77\020\uff77\021\uff77\022" +
    "\uff77\031\uff77\037\uff77\041\uff77\044\uff77\045\uff77\046\uff77" +
    "\051\uff77\052\uff77\053\uff77\055\uff77\056\uff77\111\uff77\124" +
    "\uff77\001\002\000\016\012\110\013\uff43\016\uff43\023\uff43" +
    "\024\u0107\077\u0108\001\002\000\010\013\067\016\u0101\023" +
    "\070\001\002\000\004\015\u0103\001\002\000\060\002\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\026\uffcc\031\uffcc\033\uffcc\034\uffcc\037\uffcc\041\uffcc" +
    "\044\uffcc\045\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056" +
    "\uffcc\111\uffcc\124\uffcc\001\002\000\004\016\u0104\001\002" +
    "\000\004\014\u0105\001\002\000\006\013\067\023\070\001" +
    "\002\000\060\002\uffc9\006\uffc9\007\uffc9\011\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\026\uffc9\031\uffc9\033\uffc9\034" +
    "\uffc9\037\uffc9\041\uffc9\044\uffc9\045\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\055\uffc9\056\uffc9\111\uffc9\124\uffc9\001\002\000" +
    "\004\022\u0119\001\002\000\006\004\u0109\100\u010a\001\002" +
    "\000\004\100\u010c\001\002\000\006\013\067\023\070\001" +
    "\002\000\052\002\uff4b\006\uff4b\007\uff4b\011\uff4b\017\uff4b" +
    "\020\uff4b\021\uff4b\022\uff4b\031\uff4b\037\uff4b\041\uff4b\044" +
    "\uff4b\045\uff4b\051\uff4b\052\uff4b\053\uff4b\055\uff4b\056\uff4b" +
    "\111\uff4b\124\uff4b\001\002\000\004\016\u010d\001\002\000" +
    "\004\015\u010e\001\002\000\004\101\u010f\001\002\000\004" +
    "\016\u0110\001\002\000\004\014\u0111\001\002\000\006\012" +
    "\u0116\016\u0115\001\002\000\004\102\u0113\001\002\000\006" +
    "\013\067\023\070\001\002\000\052\002\uff58\006\uff58\007" +
    "\uff58\011\uff58\017\uff58\020\uff58\021\uff58\022\uff58\031\uff58" +
    "\037\uff58\041\uff58\044\uff58\045\uff58\051\uff58\052\uff58\053" +
    "\uff58\055\uff58\056\uff58\111\uff58\124\uff58\001\002\000\004" +
    "\102\uff52\001\002\000\004\016\u0117\001\002\000\004\014" +
    "\u0111\001\002\000\004\102\uff51\001\002\000\004\016\u011d" +
    "\001\002\000\004\023\122\001\002\000\006\013\067\023" +
    "\070\001\002\000\052\002\uffa6\006\uffa6\007\uffa6\011\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\031\uffa6\037\uffa6\041" +
    "\uffa6\044\uffa6\045\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6" +
    "\056\uffa6\111\uffa6\124\uffa6\001\002\000\004\011\u011e\001" +
    "\002\000\006\012\u011f\023\uffa0\001\002\000\004\022\u0119" +
    "\001\002\000\004\023\uffa1\001\002\000\004\026\u0122\001" +
    "\002\000\004\033\u0123\001\002\000\004\016\u0164\001\002" +
    "\000\004\034\u0126\001\002\000\052\002\uffed\006\uffed\007" +
    "\uffed\011\uffed\017\uffed\020\uffed\021\uffed\022\uffed\031\uffed" +
    "\037\uffed\041\uffed\044\uffed\045\uffed\051\uffed\052\uffed\053" +
    "\uffed\055\uffed\056\uffed\111\uffed\124\uffed\001\002\000\004" +
    "\016\u0127\001\002\000\010\120\u012a\121\u0128\122\u0129\001" +
    "\002\000\004\023\u0159\001\002\000\004\023\u0155\001\002" +
    "\000\004\023\u012b\001\002\000\004\026\u012c\001\002\000" +
    "\004\026\u012d\001\002\000\014\017\062\020\004\021\035" +
    "\022\005\124\034\001\002\000\004\011\111\001\002\000" +
    "\060\002\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\026\u0152\031\uffdc\033\uffdc\034\uffdc\037" +
    "\uffdc\041\uffdc\044\uffdc\045\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\055\uffdc\056\uffdc\111\uffdc\124\uffdc\001\002\000\004\011" +
    "\111\001\002\000\004\011\111\001\002\000\054\002\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\031\uffe6\034\u0134\037\uffe6\041\uffe6\044\uffe6\045\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\111\uffe6\124" +
    "\uffe6\001\002\000\004\011\111\001\002\000\004\016\u0135" +
    "\001\002\000\006\121\u0136\122\u0137\001\002\000\004\023" +
    "\u013c\001\002\000\004\023\u0138\001\002\000\004\026\u0139" +
    "\001\002\000\004\026\u013a\001\002\000\014\017\062\020" +
    "\004\021\035\022\005\124\034\001\002\000\052\002\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\031\uffe8\037\uffe8\041\uffe8\044\uffe8\045\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\055\uffe8\056\uffe8\111\uffe8\124\uffe8\001" +
    "\002\000\004\026\u013d\001\002\000\004\026\u013e\001\002" +
    "\000\014\017\062\020\004\021\035\022\005\124\034\001" +
    "\002\000\054\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\031\uffe9\034\u0140\037\uffe9\041" +
    "\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\056\uffe9\111\uffe9\124\uffe9\001\002\000\004\016\u0141\001" +
    "\002\000\004\122\u0142\001\002\000\004\023\u0143\001\002" +
    "\000\004\026\u0144\001\002\000\004\026\u0145\001\002\000" +
    "\014\017\062\020\004\021\035\022\005\124\034\001\002" +
    "\000\052\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\031\uffea\037\uffea\041\uffea\044\uffea" +
    "\045\uffea\051\uffea\052\uffea\053\uffea\055\uffea\056\uffea\111" +
    "\uffea\124\uffea\001\002\000\010\013\067\016\u0148\023\070" +
    "\001\002\000\004\015\u014a\001\002\000\060\002\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\026\uffc1\031\uffc1\033\uffc1\034\uffc1\037\uffc1\041\uffc1\044" +
    "\uffc1\045\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1" +
    "\111\uffc1\124\uffc1\001\002\000\004\016\u014b\001\002\000" +
    "\012\004\u014d\005\u0150\010\u014e\014\u014c\001\002\000\006" +
    "\013\uffbb\023\uffbb\001\002\000\006\013\uffbd\023\uffbd\001" +
    "\002\000\006\013\uffba\023\uffba\001\002\000\006\013\067" +
    "\023\070\001\002\000\006\013\uffbc\023\uffbc\001\002\000" +
    "\060\002\uffbe\006\uffbe\007\uffbe\011\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\026\uffbe\031\uffbe\033\uffbe\034\uffbe\037" +
    "\uffbe\041\uffbe\044\uffbe\045\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\055\uffbe\056\uffbe\111\uffbe\124\uffbe\001\002\000\060\002" +
    "\uffdb\006\uffdb\007\uffdb\011\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\026\u0153\031\uffdb\033\uffdb\034\uffdb\037\uffdb\041" +
    "\uffdb\044\uffdb\045\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb" +
    "\056\uffdb\111\uffdb\124\uffdb\001\002\000\014\017\062\020" +
    "\004\021\035\022\005\124\034\001\002\000\056\002\uffda" +
    "\006\uffda\007\uffda\011\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\031\uffda\033\uffda\034\uffda\037\uffda\041\uffda\044\uffda" +
    "\045\uffda\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\111" +
    "\uffda\124\uffda\001\002\000\004\026\u0156\001\002\000\004" +
    "\026\u0157\001\002\000\014\017\062\020\004\021\035\022" +
    "\005\124\034\001\002\000\052\002\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\031\uffe4\037" +
    "\uffe4\041\uffe4\044\uffe4\045\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\055\uffe4\056\uffe4\111\uffe4\124\uffe4\001\002\000\004\026" +
    "\u015a\001\002\000\004\026\u015b\001\002\000\014\017\062" +
    "\020\004\021\035\022\005\124\034\001\002\000\054\002" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\031\uffe5\034\u015d\037\uffe5\041\uffe5\044\uffe5\045" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\111\uffe5" +
    "\124\uffe5\001\002\000\004\016\u015e\001\002\000\004\122" +
    "\u015f\001\002\000\004\023\u0160\001\002\000\004\026\u0161" +
    "\001\002\000\004\026\u0162\001\002\000\014\017\062\020" +
    "\004\021\035\022\005\124\034\001\002\000\052\002\uffe7" +
    "\006\uffe7\007\uffe7\011\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\031\uffe7\037\uffe7\041\uffe7\044\uffe7\045\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\055\uffe7\056\uffe7\111\uffe7\124\uffe7\001" +
    "\002\000\010\115\u0165\116\u0166\117\u0167\001\002\000\004" +
    "\023\u0177\001\002\000\004\023\u016c\001\002\000\004\023" +
    "\u0168\001\002\000\004\026\u0169\001\002\000\004\026\u016a" +
    "\001\002\000\014\017\062\020\004\021\035\022\005\124" +
    "\034\001\002\000\004\034\uffdd\001\002\000\004\026\u016d" +
    "\001\002\000\004\026\u016e\001\002\000\014\017\062\020" +
    "\004\021\035\022\005\124\034\001\002\000\006\033\u0170" +
    "\034\uffde\001\002\000\004\016\u0171\001\002\000\004\117" +
    "\u0172\001\002\000\004\023\u0173\001\002\000\004\026\u0174" +
    "\001\002\000\004\026\u0175\001\002\000\014\017\062\020" +
    "\004\021\035\022\005\124\034\001\002\000\004\034\uffe0" +
    "\001\002\000\004\026\u0178\001\002\000\004\026\u0179\001" +
    "\002\000\014\017\062\020\004\021\035\022\005\124\034" +
    "\001\002\000\006\033\u017b\034\uffdf\001\002\000\004\016" +
    "\u017c\001\002\000\006\116\u017d\117\u017e\001\002\000\004" +
    "\023\u0183\001\002\000\004\023\u017f\001\002\000\004\026" +
    "\u0180\001\002\000\004\026\u0181\001\002\000\014\017\062" +
    "\020\004\021\035\022\005\124\034\001\002\000\004\034" +
    "\uffe1\001\002\000\004\026\u0184\001\002\000\004\026\u0185" +
    "\001\002\000\014\017\062\020\004\021\035\022\005\124" +
    "\034\001\002\000\006\033\u0187\034\uffe2\001\002\000\004" +
    "\016\u0188\001\002\000\004\117\u0189\001\002\000\004\023" +
    "\u018a\001\002\000\004\026\u018b\001\002\000\004\026\u018c" +
    "\001\002\000\014\017\062\020\004\021\035\022\005\124" +
    "\034\001\002\000\004\034\uffe3\001\002\000\004\002\ufffe" +
    "\001\002\000\016\011\uff47\070\uff47\071\uff47\072\uff47\073" +
    "\uff47\074\uff47\001\002\000\012\017\062\020\004\021\035" +
    "\022\005\001\002\000\004\011\111\001\002\000\004\011" +
    "\111\001\002\000\004\011\111\001\002\000\004\011\111" +
    "\001\002\000\010\013\067\016\u0196\023\070\001\002\000" +
    "\004\015\u0198\001\002\000\060\002\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb\031" +
    "\uffcb\033\uffcb\034\uffcb\037\uffcb\041\uffcb\044\uffcb\045\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\111\uffcb\124" +
    "\uffcb\001\002\000\004\016\u0199\001\002\000\004\014\u019a" +
    "\001\002\000\006\013\067\023\070\001\002\000\060\002" +
    "\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\026\uffca\031\uffca\033\uffca\034\uffca\037\uffca\041" +
    "\uffca\044\uffca\045\uffca\051\uffca\052\uffca\053\uffca\055\uffca" +
    "\056\uffca\111\uffca\124\uffca\001\002\000\010\013\067\016" +
    "\u019d\023\070\001\002\000\004\015\u019f\001\002\000\060" +
    "\002\uffd3\006\uffd3\007\uffd3\011\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\026\uffd3\031\uffd3\033\uffd3\034\uffd3\037\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\051\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\056\uffd3\111\uffd3\124\uffd3\001\002\000\004\016\u01a0" +
    "\001\002\000\012\004\254\005\256\010\255\014\253\001" +
    "\002\000\006\013\067\023\070\001\002\000\060\002\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\026\uffd2\031\uffd2\033\uffd2\034\uffd2\037\uffd2\041\uffd2" +
    "\044\uffd2\045\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056" +
    "\uffd2\111\uffd2\124\uffd2\001\002\000\010\013\067\016\u01a4" +
    "\023\070\001\002\000\004\015\u01a6\001\002\000\060\002" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\026\uffc0\031\uffc0\033\uffc0\034\uffc0\037\uffc0\041" +
    "\uffc0\044\uffc0\045\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\111\uffc0\124\uffc0\001\002\000\004\016\u01a7\001" +
    "\002\000\012\004\u014d\005\u0150\010\u014e\014\u014c\001\002" +
    "\000\006\013\067\023\070\001\002\000\060\002\uffbf\006" +
    "\uffbf\007\uffbf\011\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\026\uffbf\031\uffbf\033\uffbf\034\uffbf\037\uffbf\041\uffbf\044" +
    "\uffbf\045\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf" +
    "\111\uffbf\124\uffbf\001\002\000\010\013\067\016\u01ab\023" +
    "\070\001\002\000\004\015\u01ad\001\002\000\060\002\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\026\uffc7\031\uffc7\033\uffc7\034\uffc7\037\uffc7\041\uffc7" +
    "\044\uffc7\045\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056" +
    "\uffc7\111\uffc7\124\uffc7\001\002\000\004\016\u01ae\001\002" +
    "\000\010\004\101\005\104\010\102\001\002\000\006\013" +
    "\067\023\070\001\002\000\060\002\uffc6\006\uffc6\007\uffc6" +
    "\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\037\uffc6\041\uffc6\044\uffc6\045\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\111\uffc6\124" +
    "\uffc6\001\002\000\004\025\u01b2\001\002\000\004\023\u01b3" +
    "\001\002\000\004\026\125\001\002\000\052\002\uff5d\006" +
    "\uff5d\007\uff5d\011\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d" +
    "\031\uff5d\037\uff5d\041\uff5d\044\uff5d\045\uff5d\051\uff5d\052" +
    "\uff5d\053\uff5d\055\uff5d\056\uff5d\111\uff5d\124\uff5d\001\002" +
    "\000\004\052\u01b6\001\002\000\004\011\u01b7\001\002\000" +
    "\006\013\067\023\070\001\002\000\052\002\uff5b\006\uff5b" +
    "\007\uff5b\011\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\031" +
    "\uff5b\037\uff5b\041\uff5b\044\uff5b\045\uff5b\051\uff5b\052\uff5b" +
    "\053\uff5b\055\uff5b\056\uff5b\111\uff5b\124\uff5b\001\002\000" +
    "\054\002\uff41\006\uff41\007\uff41\011\uff41\017\uff41\020\uff41" +
    "\021\uff41\022\uff41\031\uff41\037\uff41\041\uff41\044\uff41\045" +
    "\uff41\051\uff41\052\uff41\053\uff41\055\uff41\056\uff41\106\u01bc" +
    "\111\uff41\124\uff41\001\002\000\052\002\uffaa\006\uffaa\007" +
    "\uffaa\011\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\031\uffaa" +
    "\037\uffaa\041\uffaa\044\uffaa\045\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\111\uffaa\124\uffaa\001\002\000\004" +
    "\105\u01c0\001\002\000\006\013\067\023\u01bd\001\002\000" +
    "\006\105\uff41\106\u01bc\001\002\000\004\105\uffa9\001\002" +
    "\000\004\105\uffa8\001\002\000\006\013\067\023\070\001" +
    "\002\000\052\002\uffab\006\uffab\007\uffab\011\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\031\uffab\037\uffab\041\uffab\044" +
    "\uffab\045\uffab\051\uffab\052\uffab\053\uffab\055\uffab\056\uffab" +
    "\111\uffab\124\uffab\001\002\000\006\011\u01c4\017\u01c5\001" +
    "\002\000\004\015\u01e9\001\002\000\004\016\u01e8\001\002" +
    "\000\004\016\u01e1\001\002\000\004\046\u01c7\001\002\000" +
    "\004\016\u01c8\001\002\000\006\004\u01c9\011\u01ca\001\002" +
    "\000\010\013\uff7d\016\uff7d\023\uff7d\001\002\000\010\013" +
    "\uff7e\016\uff7e\023\uff7e\001\002\000\004\016\u01cc\001\002" +
    "\000\006\030\u01cd\065\u01ce\001\002\000\004\016\uff85\001" +
    "\002\000\004\016\uff86\001\002\000\004\016\u01d0\001\002" +
    "\000\006\004\u01c9\011\u01ca\001\002\000\004\016\u01d2\001" +
    "\002\000\010\047\u01d6\050\u01d4\111\u01d5\001\002\000\004" +
    "\016\u01db\001\002\000\004\016\uff83\001\002\000\006\013" +
    "\067\023\070\001\002\000\004\016\uff84\001\002\000\004" +
    "\026\125\001\002\000\052\002\uff88\006\uff88\007\uff88\011" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\031\uff88\037\uff88" +
    "\041\uff88\044\uff88\045\uff88\051\uff88\052\uff88\053\uff88\055" +
    "\uff88\056\uff88\111\uff88\124\uff88\001\002\000\004\006\015" +
    "\001\002\000\052\002\uff87\006\uff87\007\uff87\011\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\031\uff87\037\uff87\041\uff87" +
    "\044\uff87\045\uff87\051\uff87\052\uff87\053\uff87\055\uff87\056" +
    "\uff87\111\uff87\124\uff87\001\002\000\004\004\u01dc\001\002" +
    "\000\004\016\u01dd\001\002\000\004\111\u01de\001\002\000" +
    "\006\013\067\023\070\001\002\000\004\026\125\001\002" +
    "\000\052\002\uff89\006\uff89\007\uff89\011\uff89\017\uff89\020" +
    "\uff89\021\uff89\022\uff89\031\uff89\037\uff89\041\uff89\044\uff89" +
    "\045\uff89\051\uff89\052\uff89\053\uff89\055\uff89\056\uff89\111" +
    "\uff89\124\uff89\001\002\000\004\011\u01e2\001\002\000\004" +
    "\016\u01e3\001\002\000\004\015\u01e4\001\002\000\004\016" +
    "\u01e5\001\002\000\004\004\u01e6\001\002\000\004\016\u01e7" +
    "\001\002\000\004\046\uff81\001\002\000\006\015\uff7f\046" +
    "\uff82\001\002\000\004\016\u01ea\001\002\000\004\004\u01eb" +
    "\001\002\000\004\016\u01ec\001\002\000\004\046\uff80\001" +
    "\002\000\004\031\u01ee\001\002\000\006\016\u01ef\023\uffec" +
    "\001\002\000\004\103\u01f0\001\002\000\004\016\u01f1\001" +
    "\002\000\004\031\u01f2\001\002\000\004\023\uffeb\001\002" +
    "\000\004\016\u0207\001\002\000\004\016\u0202\001\002\000" +
    "\004\016\u01f6\001\002\000\004\042\u01f7\001\002\000\004" +
    "\023\122\001\002\000\006\013\067\023\070\001\002\000" +
    "\054\002\uff90\006\uff90\007\uff90\011\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\031\uff90\037\uff90\041\uff90\043\u01fa\044" +
    "\uff90\045\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90" +
    "\111\uff90\124\uff90\001\002\000\006\004\u01f3\011\u01f4\001" +
    "\002\000\052\002\uff91\006\uff91\007\uff91\011\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\031\uff91\037\uff91\041\uff91\044" +
    "\uff91\045\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91" +
    "\111\uff91\124\uff91\001\002\000\004\016\u01fd\001\002\000" +
    "\004\042\u01fe\001\002\000\004\023\122\001\002\000\006" +
    "\013\067\023\070\001\002\000\054\002\uff8e\006\uff8e\007" +
    "\uff8e\011\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\031\uff8e" +
    "\037\uff8e\041\uff8e\043\u01fa\044\uff8e\045\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\055\uff8e\056\uff8e\111\uff8e\124\uff8e\001\002" +
    "\000\052\002\uff8f\006\uff8f\007\uff8f\011\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\031\uff8f\037\uff8f\041\uff8f\044\uff8f" +
    "\045\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\056\uff8f\111" +
    "\uff8f\124\uff8f\001\002\000\004\064\u0203\001\002\000\004" +
    "\016\u0204\001\002\000\006\004\u0205\011\u0206\001\002\000" +
    "\004\016\uff8c\001\002\000\004\016\uff8a\001\002\000\004" +
    "\064\u0208\001\002\000\004\016\u0209\001\002\000\006\004" +
    "\u020a\011\u020b\001\002\000\004\016\uff8d\001\002\000\004" +
    "\016\uff8b\001\002\000\004\024\uff5f\001\002\000\004\024" +
    "\u022d\001\002\000\004\024\uff60\001\002\000\004\024\uff61" +
    "\001\002\000\016\012\110\013\uff43\016\uff43\023\uff43\024" +
    "\u0213\077\u0214\001\002\000\004\024\uff62\001\002\000\004" +
    "\024\uff63\001\002\000\004\021\035\001\002\000\006\004" +
    "\u0215\100\u0216\001\002\000\004\100\u0218\001\002\000\006" +
    "\013\067\023\070\001\002\000\052\002\uff4d\006\uff4d\007" +
    "\uff4d\011\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\031\uff4d" +
    "\037\uff4d\041\uff4d\044\uff4d\045\uff4d\051\uff4d\052\uff4d\053" +
    "\uff4d\055\uff4d\056\uff4d\111\uff4d\124\uff4d\001\002\000\004" +
    "\016\u0219\001\002\000\004\015\u021a\001\002\000\004\101" +
    "\u021b\001\002\000\004\016\u021c\001\002\000\004\005\u021e" +
    "\001\002\000\004\102\u0223\001\002\000\006\012\u0220\016" +
    "\u021f\001\002\000\004\102\uff54\001\002\000\004\016\u0221" +
    "\001\002\000\004\005\u021e\001\002\000\004\102\uff53\001" +
    "\002\000\006\013\067\023\070\001\002\000\052\002\uff59" +
    "\006\uff59\007\uff59\011\uff59\017\uff59\020\uff59\021\uff59\022" +
    "\uff59\031\uff59\037\uff59\041\uff59\044\uff59\045\uff59\051\uff59" +
    "\052\uff59\053\uff59\055\uff59\056\uff59\111\uff59\124\uff59\001" +
    "\002\000\004\025\u022a\001\002\000\004\011\u0227\001\002" +
    "\000\006\012\u0228\025\uff9c\001\002\000\004\021\035\001" +
    "\002\000\004\025\uff9d\001\002\000\004\023\122\001\002" +
    "\000\006\013\067\023\070\001\002\000\052\002\uffa4\006" +
    "\uffa4\007\uffa4\011\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\031\uffa4\037\uffa4\041\uffa4\044\uffa4\045\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\055\uffa4\056\uffa4\111\uffa4\124\uffa4\001\002" +
    "\000\004\021\035\001\002\000\004\011\u022f\001\002\000" +
    "\004\025\u0230\001\002\000\006\013\067\023\070\001\002" +
    "\000\052\002\uff64\006\uff64\007\uff64\011\uff64\017\uff64\020" +
    "\uff64\021\uff64\022\uff64\031\uff64\037\uff64\041\uff64\044\uff64" +
    "\045\uff64\051\uff64\052\uff64\053\uff64\055\uff64\056\uff64\111" +
    "\uff64\124\uff64\001\002\000\004\011\u0233\001\002\000\006" +
    "\013\067\023\070\001\002\000\052\002\uffad\006\uffad\007" +
    "\uffad\011\uffad\017\uffad\020\uffad\021\uffad\022\uffad\031\uffad" +
    "\037\uffad\041\uffad\044\uffad\045\uffad\051\uffad\052\uffad\053" +
    "\uffad\055\uffad\056\uffad\111\uffad\124\uffad\001\002\000\004" +
    "\004\u0243\001\002\000\004\015\u0237\001\002\000\004\016" +
    "\u0238\001\002\000\012\004\340\011\341\057\u0239\110\337" +
    "\001\002\000\014\017\314\020\313\021\317\022\316\031" +
    "\u023b\001\002\000\004\077\u023f\001\002\000\004\024\u023c" +
    "\001\002\000\004\025\u023d\001\002\000\006\013\067\023" +
    "\070\001\002\000\052\002\uff94\006\uff94\007\uff94\011\uff94" +
    "\017\uff94\020\uff94\021\uff94\022\uff94\031\uff94\037\uff94\041" +
    "\uff94\044\uff94\045\uff94\051\uff94\052\uff94\053\uff94\055\uff94" +
    "\056\uff94\111\uff94\124\uff94\001\002\000\004\004\u0240\001" +
    "\002\000\004\100\u0241\001\002\000\006\013\067\023\070" +
    "\001\002\000\052\002\uff49\006\uff49\007\uff49\011\uff49\017" +
    "\uff49\020\uff49\021\uff49\022\uff49\031\uff49\037\uff49\041\uff49" +
    "\044\uff49\045\uff49\051\uff49\052\uff49\053\uff49\055\uff49\056" +
    "\uff49\111\uff49\124\uff49\001\002\000\004\100\u0244\001\002" +
    "\000\004\016\u0245\001\002\000\004\015\u0246\001\002\000" +
    "\004\016\u0247\001\002\000\012\004\206\005\211\010\207" +
    "\014\204\001\002\000\006\013\067\023\070\001\002\000" +
    "\052\002\uff4a\006\uff4a\007\uff4a\011\uff4a\017\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\031\uff4a\037\uff4a\041\uff4a\044\uff4a\045" +
    "\uff4a\051\uff4a\052\uff4a\053\uff4a\055\uff4a\056\uff4a\111\uff4a" +
    "\124\uff4a\001\002\000\012\004\u024c\005\u024f\011\u024e\014" +
    "\u024b\001\002\000\010\012\u025c\013\uffb2\023\uffb2\001\002" +
    "\000\010\012\u0259\013\uffb1\023\uffb1\001\002\000\006\013" +
    "\067\023\070\001\002\000\012\012\u0254\013\uffaf\023\uffaf" +
    "\060\u0253\001\002\000\010\012\u0250\013\uffb0\023\uffb0\001" +
    "\002\000\004\016\u0251\001\002\000\012\004\u024c\005\u024f" +
    "\011\u024e\014\u024b\001\002\000\006\013\uffb4\023\uffb4\001" +
    "\002\000\004\011\u0257\001\002\000\004\016\u0255\001\002" +
    "\000\012\004\u024c\005\u024f\011\u024e\014\u024b\001\002\000" +
    "\006\013\uffb3\023\uffb3\001\002\000\006\013\uffae\023\uffae" +
    "\001\002\000\052\002\uffb7\006\uffb7\007\uffb7\011\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\031\uffb7\037\uffb7\041\uffb7" +
    "\044\uffb7\045\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056" +
    "\uffb7\111\uffb7\124\uffb7\001\002\000\004\016\u025a\001\002" +
    "\000\012\004\u024c\005\u024f\011\u024e\014\u024b\001\002\000" +
    "\006\013\uffb5\023\uffb5\001\002\000\004\016\u025d\001\002" +
    "\000\012\004\u024c\005\u024f\011\u024e\014\u024b\001\002\000" +
    "\006\013\uffb6\023\uffb6\001\002\000\004\123\u0260\001\002" +
    "\000\004\023\u0261\001\002\000\052\002\uffd9\006\uffd9\007" +
    "\uffd9\011\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\031\uffd9" +
    "\037\uffd9\041\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\055\uffd9\056\uffd9\111\uffd9\124\uffd9\001\002\000\004" +
    "\026\125\001\002\000\004\011\331\001\002\000\004\046" +
    "\u0265\001\002\000\004\016\u0266\001\002\000\006\004\u01c9" +
    "\011\u01ca\001\002\000\004\016\u0268\001\002\000\006\030" +
    "\u01cd\065\u01ce\001\002\000\004\016\u026a\001\002\000\006" +
    "\004\u01c9\011\u01ca\001\002\000\006\013\067\023\070\001" +
    "\002\000\052\002\uff7c\006\uff7c\007\uff7c\011\uff7c\017\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\031\uff7c\037\uff7c\041\uff7c\044" +
    "\uff7c\045\uff7c\051\uff7c\052\uff7c\053\uff7c\055\uff7c\056\uff7c" +
    "\111\uff7c\124\uff7c\001\002\000\004\002\000\001\002\000" +
    "\004\011\uff45\001\002\000\004\011\uff46\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u026d\000\074\002\006\004\062\005\044\006\046\007" +
    "\005\010\011\011\042\015\045\016\016\017\035\022\012" +
    "\031\047\032\036\035\040\042\010\046\015\053\037\055" +
    "\041\056\052\057\021\060\050\061\056\071\026\076\023" +
    "\105\055\106\024\112\057\116\043\117\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u0146\036\u020c\001\001\000\004" +
    "\033\u01f4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01b9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\002" +
    "\u018d\004\062\005\044\006\046\007\005\010\011\011\042" +
    "\015\045\016\016\017\035\022\012\031\047\032\036\035" +
    "\040\042\010\046\015\053\037\055\041\056\052\057\021" +
    "\060\050\061\056\071\026\076\023\105\055\106\024\112" +
    "\057\116\043\117\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\377\001\001\000\002" +
    "\001\001\000\004\012\222\001\001\000\004\013\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\002\063\004\062\005\044\006\046\007\005" +
    "\010\011\011\042\015\045\016\016\017\035\022\012\031" +
    "\047\032\036\035\040\042\010\046\015\053\037\055\041" +
    "\056\052\057\021\060\050\061\056\071\026\076\023\105" +
    "\055\106\024\112\057\116\043\117\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\112\001\001\000\004\012" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\117\001\001\000\002\001\001\000\004" +
    "\023\122\001\001\000\004\030\125\001\001\000\004\013" +
    "\123\001\001\000\002\001\001\000\004\030\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\170\001\001\000\002\001\001\000\004" +
    "\013\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\207\040\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\212\001\001\000\002\001\001" +
    "\000\004\013\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\232\001\001\000\002\001\001\000\004\060\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\237\001\001\000\002\001\001\000\004\060\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\251\001\001\000\004\013" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\301\056\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\305\056\302\001\001\000\002\001" +
    "\001\000\004\023\307\001\001\000\004\013\310\001\001" +
    "\000\002\001\001\000\004\043\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\332\106\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\341\001\001\000\002\001\001\000\004" +
    "\110\355\001\001\000\004\110\351\001\001\000\004\013" +
    "\342\001\001\000\004\030\343\001\001\000\004\106\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\364\001\001\000\004\013\365\001\001\000\004\030\366" +
    "\001\001\000\004\106\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\372\001\001\000\004\013\373" +
    "\001\001\000\004\030\374\001\001\000\004\106\375\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0105\001\001\000\002" +
    "\001\001\000\004\025\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u011a\001\001\000\004\013\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u0123" +
    "\001\001\000\002\001\001\000\004\115\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\u012e\006\046\007\005" +
    "\010\011\011\042\056\u0130\057\u012f\060\u012d\061\u0132\114" +
    "\u0131\001\001\000\004\012\377\001\001\000\002\001\001" +
    "\000\004\012\u0146\001\001\000\004\012\222\001\001\000" +
    "\002\001\001\000\004\012\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u012e\006\046" +
    "\007\005\010\011\011\042\056\u0130\057\u012f\060\u012d\061" +
    "\u0132\114\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u012e\006\046\007\005\010" +
    "\011\011\042\056\u0130\057\u012f\060\u012d\061\u0132\114\u013e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u012e\006\046\007\005\010\011\011\042\056" +
    "\u0130\057\u012f\060\u012d\061\u0132\114\u0145\001\001\000\002" +
    "\001\001\000\004\013\u0148\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u014e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u012e\006\046\007\005\010" +
    "\011\011\042\056\u0130\057\u012f\060\u012d\061\u0132\114\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\u012e\006\046\007\005\010\011\011\042" +
    "\056\u0130\057\u012f\060\u012d\061\u0132\114\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\u012e\006\046\007\005\010\011\011\042\056\u0130\057" +
    "\u012f\060\u012d\061\u0132\114\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u012e\006\046" +
    "\007\005\010\011\011\042\056\u0130\057\u012f\060\u012d\061" +
    "\u0132\114\u0162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u012e\006\046" +
    "\007\005\010\011\011\042\056\u0130\057\u012f\060\u012d\061" +
    "\u0132\114\u016a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u012e\006\046\007\005\010" +
    "\011\011\042\056\u0130\057\u012f\060\u012d\061\u0132\114\u016e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u012e\006\046\007\005\010\011\011\042\056" +
    "\u0130\057\u012f\060\u012d\061\u0132\114\u0175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u012e\006\046\007\005\010\011\011\042\056\u0130\057\u012f" +
    "\060\u012d\061\u0132\114\u0179\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\u012e\006\046\007\005\010\011\011\042\056\u0130\057\u012f" +
    "\060\u012d\061\u0132\114\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\u012e\006\046" +
    "\007\005\010\011\011\042\056\u0130\057\u012f\060\u012d\061" +
    "\u0132\114\u0185\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\u012e\006\046\007\005\010\011" +
    "\011\042\056\u0130\057\u012f\060\u012d\061\u0132\114\u018c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\u0192\057\u0191\060\u0193\061\u0190\001\001\000" +
    "\004\012\u01a9\001\001\000\004\012\u01a2\001\001\000\004" +
    "\012\u019b\001\001\000\004\012\u0194\001\001\000\004\013" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u019a\001\001\000" +
    "\002\001\001\000\004\013\u019d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u01a0\001" +
    "\001\000\004\013\u01a1\001\001\000\002\001\001\000\004" +
    "\013\u01a4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u01a7\001\001\000\004\013\u01a8" +
    "\001\001\000\002\001\001\000\004\013\u01ab\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u01ae\001\001\000\004\013\u01af\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u01b4" +
    "\045\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u01b7\001\001\000\002\001\001" +
    "\000\004\072\u01ba\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u01bd\001\001\000\004\072\u01be\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u01c0\001" +
    "\001\000\002\001\001\000\006\077\u01c5\104\u01c2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u01ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u01ce\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u01d0\001\001\000\002\001" +
    "\001\000\004\101\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01d6\001\001\000\002\001\001\000" +
    "\006\030\u01d8\103\u01d7\001\001\000\002\001\001\000\004" +
    "\016\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u01de\001\001" +
    "\000\006\030\u01d8\103\u01df\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u01f7" +
    "\001\001\000\004\013\u01f8\001\001\000\004\034\u01fa\001" +
    "\001\000\004\033\u01fb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u01fe\001\001\000" +
    "\004\013\u01ff\001\001\000\004\034\u0200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0224\057\u0225\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u021c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\u0221\001\001\000\002\001" +
    "\001\000\004\013\u0223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u0228\057\u0225\001\001\000\002\001\001\000\004\023\u022a" +
    "\001\001\000\004\013\u022b\001\001\000\002\001\001\000" +
    "\004\057\u022d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\372\001\001\000\004\043\u0239\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u023d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0247\001\001\000\004\013\u0248\001\001\000" +
    "\002\001\001\000\004\020\u024c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u025a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u025d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0262\001\001" +
    "\000\004\106\u0263\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0266\001\001\000\002\001\001\000\004" +
    "\100\u0268\001\001\000\002\001\001\000\004\102\u026a\001" +
    "\001\000\004\013\u026b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= COMM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // codigoli ::= CILCOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // codigoli ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // codigoli ::= Whiles 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigoli ::= CLASESA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigoli ::= BIBLIOTECAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CLASESA ::= tipodeclase newline salto CONTENIDOCLASES METODOSCLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESA",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodeclase ::= clase libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipodeclase ::= clase libre IDmayu libre herencia libre IDmayu 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodeclase",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODOSCLASES ::= metodos libre propum newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOSCLASES ::= metodos libre propum newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODOSCLASES ::= metodos libre proprim newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODOSCLASES ::= metodos libre proprom newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSCLASES",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-20)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOCLASES ::= propiedades libre propu newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOCLASES ::= propiedades libre propri newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOCLASES ::= propiedades libre propro newline salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASES",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC ::= DECLARACION salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC ::= DECLARACION salto salto DEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BIBLIOTECAS ::= paquetes libre extension newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BIBLIOTECAS",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECENTERO ::= estatico libre reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECCADENA ::= estatico libre reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECBOLEAN ::= estatico libre reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLAREAL ::= estatico libre reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMM ::= comentario finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMM ::= comentarios newline cuerpocomentarios comfin finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMM ::= comentarios finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMM",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpocomentarios ::= comentariose finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpocomentarios ::= comentariose newline cuerpocomentarios 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpocomentarios",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPOF ::= newline TABULA retornar identificador sumores identificador para identificador libre sumores libre entero parb 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sumores ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sumores ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumores",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre INCREMENTOS libre entero libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-17)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CILCOS ::= desdes libre INICIALES whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID libre haccer finales cuerpociclos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CILCOS",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpociclos ::= TABULA Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpociclos",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICIONES ::= opcadnum 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICIONES ::= condicionales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONES",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INCREMENTOS ::= sumarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INCREMENTOS ::= restarr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTOS",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INICIALES ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INICIALES ::= tipo_ent libre identificador libre asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INICIALES ::= ID asignacion libre entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIALES",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ID ::= identificador libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPCIONESID ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPCIONESID ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESID",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Whiles ::= haccer newline TABULA ASIGNA whiles libre OPCIONESID libre CONDICIONES libre OPCIONESID finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Whiles",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPORE ::= CUERPOF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPORE",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNA ::= identificador asignacion operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNA ::= identificador libre asignacion libre operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIGNA ::= identificador pun identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ASIGNA ::= identificador asignacion operacionesmatematicas finales TABULA ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operacionesmatematicas ::= entero simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operacionesmatematicas ::= identificador simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operacionesmatematicas ::= entero simbolosdeopera identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // operacionesmatematicas ::= identificador simbolosdeopera entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // operacionesmatematicas ::= SIGme identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operacionesmatematicas ::= SIGme entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operacionesmatematicas ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operacionesmatematicas ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionesmatematicas",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // simbolosdeopera ::= SIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // simbolosdeopera ::= SIGme 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // simbolosdeopera ::= SIGdiv 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // simbolosdeopera ::= SIGpor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simbolosdeopera ::= SIGex 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("simbolosdeopera",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CUERPOD ::= ASIGNA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
