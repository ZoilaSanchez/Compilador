
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\006\000\002\005\012\000\002\006\006\000\002\006" +
    "\012\000\002\007\006\000\002\007\012\000\002\010\006" +
    "\000\002\010\012\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\005" +
    "\000\002\016\006\000\002\021\012\000\002\021\011\000" +
    "\002\021\012\000\002\021\012\000\002\023\007\000\002" +
    "\023\005\000\002\024\007\000\002\024\005\000\002\025" +
    "\007\000\002\025\005\000\002\026\007\000\002\026\005" +
    "\000\002\022\013\000\002\022\006\000\002\030\015\000" +
    "\002\030\013\000\002\030\005\000\002\031\011\000\002" +
    "\031\010\000\002\033\011\000\002\033\010\000\002\032" +
    "\007\000\002\032\007\000\002\032\007\000\002\032\007" +
    "\000\002\011\005\000\002\011\003\000\002\012\004\000" +
    "\002\012\003\000\002\027\004\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\026\006\010\007\006\011\032\017\020\020" +
    "\012\021\015\022\031\030\016\037\021\051\005\001\002" +
    "\000\030\002\001\006\010\007\006\011\032\017\020\020" +
    "\012\021\015\022\031\030\016\037\021\051\005\001\002" +
    "\000\004\011\274\001\002\000\004\016\271\001\002\000" +
    "\030\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\030\uffed\037\uffed\051\uffed\001\002\000" +
    "\004\016\244\001\002\000\030\002\uffec\006\uffec\007\uffec" +
    "\011\uffec\017\uffec\020\uffec\021\uffec\022\uffec\030\uffec\037" +
    "\uffec\051\uffec\001\002\000\004\016\221\001\002\000\004" +
    "\002\220\001\002\000\030\002\ufffe\006\ufffe\007\ufffe\011" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\030\ufffe\037\ufffe" +
    "\051\ufffe\001\002\000\004\016\175\001\002\000\004\016" +
    "\163\001\002\000\030\002\ufffd\006\ufffd\007\ufffd\011\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\030\ufffd\037\ufffd\051" +
    "\ufffd\001\002\000\004\016\140\001\002\000\006\004\107" +
    "\011\110\001\002\000\030\002\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\030\ufff6\037\ufff6" +
    "\051\ufff6\001\002\000\030\002\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\030\ufffa\037\ufffa" +
    "\051\ufffa\001\002\000\030\002\ufff9\006\ufff9\007\ufff9\011" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\030\ufff9\037\ufff9" +
    "\051\ufff9\001\002\000\030\002\ufffb\006\ufffb\007\ufffb\011" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\030\ufffb\037\ufffb" +
    "\051\ufffb\001\002\000\030\002\ufff7\006\ufff7\007\ufff7\011" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\030\ufff7\037\ufff7" +
    "\051\ufff7\001\002\000\030\002\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\030\ufffc\037\ufffc" +
    "\051\ufffc\001\002\000\030\002\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\030\ufff8\037\ufff8" +
    "\051\ufff8\001\002\000\004\016\046\001\002\000\004\016" +
    "\033\001\002\000\004\015\034\001\002\000\004\016\035" +
    "\001\002\000\004\056\036\001\002\000\004\030\037\001" +
    "\002\000\004\024\040\001\002\000\004\025\041\001\002" +
    "\000\006\013\042\023\043\001\002\000\004\023\045\001" +
    "\002\000\032\002\uffc4\006\uffc4\007\uffc4\011\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\030\uffc4\037\uffc4\041\uffc4\051" +
    "\uffc4\001\002\000\030\002\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\030\uffd1\037\uffd1\051" +
    "\uffd1\001\002\000\032\002\uffc5\006\uffc5\007\uffc5\011\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\030\uffc5\037\uffc5\041" +
    "\uffc5\051\uffc5\001\002\000\004\011\047\001\002\000\014" +
    "\012\060\013\uffc6\016\uffc6\023\uffc6\024\057\001\002\000" +
    "\010\013\042\016\051\023\043\001\002\000\004\015\053" +
    "\001\002\000\030\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\030\ufff3\037\ufff3\051\ufff3" +
    "\001\002\000\004\016\054\001\002\000\004\014\055\001" +
    "\002\000\006\013\042\023\043\001\002\000\030\002\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\030\ufff2\037\ufff2\051\ufff2\001\002\000\004\022\063" +
    "\001\002\000\004\011\061\001\002\000\012\012\060\013" +
    "\uffc6\016\uffc6\023\uffc6\001\002\000\010\013\uffc7\016\uffc7" +
    "\023\uffc7\001\002\000\004\016\103\001\002\000\004\023" +
    "\065\001\002\000\004\026\071\001\002\000\006\013\042" +
    "\023\043\001\002\000\030\002\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\030\uffdf\037\uffdf" +
    "\051\uffdf\001\002\000\004\034\073\001\002\000\006\026" +
    "\071\034\uffc2\001\002\000\004\034\uffc3\001\002\000\006" +
    "\004\075\016\074\001\002\000\004\011\076\001\002\000" +
    "\006\013\uffd3\023\uffd3\001\002\000\004\016\077\001\002" +
    "\000\004\063\100\001\002\000\004\016\101\001\002\000" +
    "\004\011\102\001\002\000\006\013\uffd4\023\uffd4\001\002" +
    "\000\004\011\104\001\002\000\006\012\105\023\uffd9\001" +
    "\002\000\004\022\063\001\002\000\004\023\uffda\001\002" +
    "\000\004\016\133\001\002\000\004\016\126\001\002\000" +
    "\004\016\112\001\002\000\004\040\113\001\002\000\004" +
    "\023\065\001\002\000\006\013\042\023\043\001\002\000" +
    "\032\002\uffce\006\uffce\007\uffce\011\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\030\uffce\037\uffce\041\116\051\uffce\001" +
    "\002\000\006\004\107\011\110\001\002\000\030\002\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\030\uffcf\037\uffcf\051\uffcf\001\002\000\004\016\121" +
    "\001\002\000\004\040\122\001\002\000\004\023\065\001" +
    "\002\000\006\013\042\023\043\001\002\000\032\002\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\030\uffcc\037\uffcc\041\116\051\uffcc\001\002\000\030" +
    "\002\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\030\uffcd\037\uffcd\051\uffcd\001\002\000\004" +
    "\063\127\001\002\000\004\016\130\001\002\000\006\004" +
    "\131\011\132\001\002\000\004\016\uffca\001\002\000\004" +
    "\016\uffc8\001\002\000\004\063\134\001\002\000\004\016" +
    "\135\001\002\000\006\004\136\011\137\001\002\000\004" +
    "\016\uffcb\001\002\000\004\016\uffc9\001\002\000\004\011" +
    "\141\001\002\000\014\012\060\013\uffc6\016\uffc6\023\uffc6" +
    "\024\151\001\002\000\010\013\042\016\143\023\043\001" +
    "\002\000\004\015\145\001\002\000\030\002\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\030" +
    "\ufff5\037\ufff5\051\ufff5\001\002\000\004\016\146\001\002" +
    "\000\004\004\147\001\002\000\006\013\042\023\043\001" +
    "\002\000\030\002\ufff4\006\ufff4\007\ufff4\011\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\030\ufff4\037\ufff4\051\ufff4\001" +
    "\002\000\004\017\152\001\002\000\004\016\157\001\002" +
    "\000\004\025\154\001\002\000\004\023\065\001\002\000" +
    "\006\013\042\023\043\001\002\000\030\002\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\030" +
    "\uffe0\037\uffe0\051\uffe0\001\002\000\004\011\160\001\002" +
    "\000\006\012\161\025\uffdb\001\002\000\004\017\152\001" +
    "\002\000\004\025\uffdc\001\002\000\004\011\164\001\002" +
    "\000\004\016\165\001\002\000\004\015\166\001\002\000" +
    "\004\016\167\001\002\000\004\056\170\001\002\000\004" +
    "\030\171\001\002\000\004\024\172\001\002\000\004\025" +
    "\173\001\002\000\006\013\042\023\043\001\002\000\030" +
    "\002\uffd2\006\uffd2\007\uffd2\011\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\030\uffd2\037\uffd2\051\uffd2\001\002\000\004" +
    "\011\176\001\002\000\014\012\060\013\uffc6\016\uffc6\023" +
    "\uffc6\024\206\001\002\000\010\013\042\016\200\023\043" +
    "\001\002\000\004\015\202\001\002\000\030\002\uffef\006" +
    "\uffef\007\uffef\011\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\030\uffef\037\uffef\051\uffef\001\002\000\004\016\203\001" +
    "\002\000\004\005\204\001\002\000\006\013\042\023\043" +
    "\001\002\000\030\002\uffee\006\uffee\007\uffee\011\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\030\uffee\037\uffee\051\uffee" +
    "\001\002\000\004\021\210\001\002\000\004\025\215\001" +
    "\002\000\004\016\211\001\002\000\004\011\212\001\002" +
    "\000\006\012\213\025\uffd5\001\002\000\004\021\210\001" +
    "\002\000\004\025\uffd6\001\002\000\004\023\065\001\002" +
    "\000\006\013\042\023\043\001\002\000\030\002\uffdd\006" +
    "\uffdd\007\uffdd\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\030\uffdd\037\uffdd\051\uffdd\001\002\000\004\002\000\001" +
    "\002\000\004\011\222\001\002\000\014\012\060\013\uffc6" +
    "\016\uffc6\023\uffc6\024\232\001\002\000\010\013\042\016" +
    "\224\023\043\001\002\000\004\015\226\001\002\000\030" +
    "\002\ufff1\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\030\ufff1\037\ufff1\051\ufff1\001\002\000\004" +
    "\016\227\001\002\000\004\010\230\001\002\000\006\013" +
    "\042\023\043\001\002\000\030\002\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\030\ufff0\037" +
    "\ufff0\051\ufff0\001\002\000\004\020\234\001\002\000\004" +
    "\025\241\001\002\000\004\016\235\001\002\000\004\011" +
    "\236\001\002\000\006\012\237\025\uffd7\001\002\000\004" +
    "\020\234\001\002\000\004\025\uffd8\001\002\000\004\023" +
    "\065\001\002\000\006\013\042\023\043\001\002\000\030" +
    "\002\uffde\006\uffde\007\uffde\011\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\030\uffde\037\uffde\051\uffde\001\002\000\012" +
    "\004\246\005\251\011\250\014\245\001\002\000\010\012" +
    "\266\013\uffe6\023\uffe6\001\002\000\010\012\263\013\uffe5" +
    "\023\uffe5\001\002\000\006\013\042\023\043\001\002\000" +
    "\012\012\256\013\uffe3\023\uffe3\057\255\001\002\000\010" +
    "\012\252\013\uffe4\023\uffe4\001\002\000\004\016\253\001" +
    "\002\000\012\004\246\005\251\011\250\014\245\001\002" +
    "\000\006\013\uffe8\023\uffe8\001\002\000\004\011\261\001" +
    "\002\000\004\016\257\001\002\000\012\004\246\005\251" +
    "\011\250\014\245\001\002\000\006\013\uffe7\023\uffe7\001" +
    "\002\000\006\013\uffe2\023\uffe2\001\002\000\030\002\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\030\uffeb\037\uffeb\051\uffeb\001\002\000\004\016\264" +
    "\001\002\000\012\004\246\005\251\011\250\014\245\001" +
    "\002\000\006\013\uffe9\023\uffe9\001\002\000\004\016\267" +
    "\001\002\000\012\004\246\005\251\011\250\014\245\001" +
    "\002\000\006\013\uffea\023\uffea\001\002\000\004\011\272" +
    "\001\002\000\006\013\042\023\043\001\002\000\030\002" +
    "\uffe1\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\030\uffe1\037\uffe1\051\uffe1\001\002\000\006\013" +
    "\042\023\043\001\002\000\030\002\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\030\uffd0\037" +
    "\uffd0\051\uffd0\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\034\002\012\003\003\004\013\005\023\006" +
    "\027\007\025\010\021\014\016\015\006\016\010\021\026" +
    "\030\024\031\022\001\001\000\034\002\275\003\003\004" +
    "\013\005\023\006\027\007\025\010\021\014\016\015\006" +
    "\016\010\021\026\030\024\031\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\047\001\001\000\002\001\001" +
    "\000\004\012\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\055" +
    "\001\001\000\002\001\001\000\004\024\063\001\001\000" +
    "\004\011\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\065\001\001\000\004\027" +
    "\067\001\001\000\004\012\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\113\001\001\000\004\012\114\001" +
    "\001\000\004\033\116\001\001\000\004\032\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\122\001\001\000\004\012\123\001\001\000\004" +
    "\033\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\141" +
    "\001\001\000\002\001\001\000\004\012\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\147\001\001\000\002\001\001\000" +
    "\004\023\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\154\001\001\000\004\012\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\173\001\001\000\002\001\001\000\004" +
    "\011\176\001\001\000\002\001\001\000\004\012\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\204\001\001\000\002\001" +
    "\001\000\004\026\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\213\001\001\000\002\001\001\000\004\022\215\001\001" +
    "\000\004\012\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\222\001\001\000\002\001\001\000\004" +
    "\012\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\230\001\001" +
    "\000\002\001\001\000\004\025\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\237\001\001\000\002\001\001\000\004\022" +
    "\241\001\001\000\004\012\242\001\001\000\002\001\001" +
    "\000\004\017\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\272" +
    "\001\001\000\002\001\001\000\004\012\274\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECENTERO ::= tipo_ent libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECENTERO ::= tipo_ent libre VARSECUE libre asignacion libre entero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECCADENA ::= tipo_cadena libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECCADENA ::= tipo_cadena libre VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECBOLEAN ::= tipo_bol libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECBOLEAN ::= tipo_bol libre VARSECUE libre asignacion libre boleano finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLAREAL ::= tipo_real libre VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLAREAL ::= tipo_real libre VARSECUE libre asignacion libre real finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONESS ::= tipo_ent libre identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONESS ::= tipo_cadena libre identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONESS ::= tipo_bol libre identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONESS ::= tipo_real libre identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROSE ::= tipo_ent libre identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROSE ::= tipo_ent libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROSR ::= tipo_real libre identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROSR ::= tipo_real libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
