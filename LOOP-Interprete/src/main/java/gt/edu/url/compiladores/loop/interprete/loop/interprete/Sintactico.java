
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.loop.interprete.loop.interprete;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\003" +
    "\012\000\002\003\006\000\002\066\005\000\002\070\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\011\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\007\005\000\002\007\011\000\002\010\005" +
    "\000\002\010\011\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\011\005\000\002\011\011\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\017" +
    "\006\000\002\022\011\000\002\022\010\000\002\022\011" +
    "\000\002\022\011\000\002\024\006\000\002\024\004\000" +
    "\002\025\007\000\002\025\005\000\002\026\007\000\002" +
    "\026\005\000\002\027\006\000\002\027\004\000\002\023" +
    "\013\000\002\023\006\000\002\031\015\000\002\031\016" +
    "\000\002\031\013\000\002\031\005\000\002\037\006\000" +
    "\002\032\011\000\002\032\010\000\002\034\011\000\002" +
    "\034\010\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\035\011\000\002\035\011" +
    "\000\002\035\011\000\002\035\011\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\042\017\000\002\042\007\000\002\041" +
    "\011\000\002\041\012\000\002\045\006\000\002\046\016" +
    "\000\002\046\016\000\002\046\016\000\002\046\016\000" +
    "\002\047\004\000\002\047\006\000\002\050\004\000\002" +
    "\050\006\000\002\051\004\000\002\051\006\000\002\052" +
    "\004\000\002\052\006\000\002\053\007\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\013\000" +
    "\002\053\014\000\002\056\004\000\002\057\004\000\002" +
    "\061\004\000\002\060\004\000\002\012\005\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\030\004" +
    "\000\002\030\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\034\006\014\007\020\011\017\017\046\020" +
    "\005\021\025\022\006\031\043\037\004\041\022\044\041" +
    "\051\024\052\045\001\002\000\004\016\u016f\001\002\000" +
    "\004\016\u016e\001\002\000\004\016\u016d\001\002\000\036" +
    "\002\uffed\006\uffed\007\uffed\011\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\031\uffed\037\uffed\041\uffed\044\uffed\051\uffed" +
    "\052\uffed\001\002\000\004\002\u016c\001\002\000\036\002" +
    "\ufffa\006\ufffa\007\ufffa\011\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\031\ufffa\037\ufffa\041\ufffa\044\ufffa\051\ufffa\052" +
    "\ufffa\001\002\000\036\002\uffec\006\uffec\007\uffec\011\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\031\uffec\037\uffec\041" +
    "\uffec\044\uffec\051\uffec\052\uffec\001\002\000\036\002\ufff5" +
    "\006\ufff5\007\ufff5\011\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\031\ufff5\037\ufff5\041\ufff5\044\ufff5\051\ufff5\052\ufff5" +
    "\001\002\000\004\016\u0157\001\002\000\036\002\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\031\ufff4\037\ufff4\041\ufff4\044\ufff4\051\ufff4\052\ufff4\001" +
    "\002\000\036\002\uffd7\006\uffd7\007\uffd7\011\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\031\uffd7\037\uffd7\041\uffd7\044" +
    "\uffd7\051\uffd7\052\uffd7\001\002\000\006\016\u0143\077\u0142" +
    "\001\002\000\004\016\u013f\001\002\000\016\011\u0112\070" +
    "\u0115\071\u0113\072\u0111\073\u0110\074\u010e\001\002\000\006" +
    "\004\365\011\366\001\002\000\036\002\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\031\ufff8" +
    "\037\ufff8\041\ufff8\044\ufff8\051\ufff8\052\ufff8\001\002\000" +
    "\004\024\355\001\002\000\004\016\354\001\002\000\036" +
    "\002\uffd6\006\uffd6\007\uffd6\011\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\031\uffd6\037\uffd6\041\uffd6\044\uffd6\051\uffd6" +
    "\052\uffd6\001\002\000\036\002\ufff3\006\ufff3\007\ufff3\011" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\031\ufff3\037\ufff3" +
    "\041\ufff3\044\ufff3\051\ufff3\052\ufff3\001\002\000\036\002" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\031\ufff7\037\ufff7\041\ufff7\044\ufff7\051\ufff7\052" +
    "\ufff7\001\002\000\036\002\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\031\ufff6\037\ufff6\041" +
    "\ufff6\044\ufff6\051\ufff6\052\ufff6\001\002\000\036\002\uffff" +
    "\006\014\007\020\011\017\017\046\020\005\021\025\022" +
    "\006\031\043\037\004\041\022\044\041\051\024\052\045" +
    "\001\002\000\036\002\uffeb\006\uffeb\007\uffeb\011\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\031\uffeb\037\uffeb\041\uffeb" +
    "\044\uffeb\051\uffeb\052\uffeb\001\002\000\036\002\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\031\ufffc\037\ufffc\041\ufffc\044\ufffc\051\ufffc\052\ufffc\001" +
    "\002\000\036\002\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\031\ufffb\037\ufffb\041\ufffb\044" +
    "\ufffb\051\ufffb\052\ufffb\001\002\000\036\002\uffee\006\uffee" +
    "\007\uffee\011\uffee\017\uffee\020\uffee\021\uffee\022\uffee\031" +
    "\uffee\037\uffee\041\uffee\044\uffee\051\uffee\052\uffee\001\002" +
    "\000\036\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\031\ufff9\037\ufff9\041\ufff9\044\ufff9" +
    "\051\ufff9\052\ufff9\001\002\000\004\011\311\001\002\000" +
    "\004\024\261\001\002\000\012\011\171\066\174\067\173" +
    "\076\175\001\002\000\004\016\144\001\002\000\004\011" +
    "\057\001\002\000\004\011\052\001\002\000\004\016\051" +
    "\001\002\000\036\002\001\006\014\007\020\011\017\017" +
    "\046\020\005\021\025\022\006\031\043\037\004\041\022" +
    "\044\041\051\024\052\045\001\002\000\004\002\ufffd\001" +
    "\002\000\012\011\uff8f\066\uff8f\067\uff8f\076\uff8f\001\002" +
    "\000\006\013\053\023\054\001\002\000\004\023\056\001" +
    "\002\000\042\002\uff88\006\uff88\007\uff88\011\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\026\uff88\031\uff88\037\uff88\041" +
    "\uff88\043\uff88\044\uff88\051\uff88\052\uff88\001\002\000\036" +
    "\002\uffb9\006\uffb9\007\uffb9\011\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\031\uffb9\037\uffb9\041\uffb9\044\uffb9\051\uffb9" +
    "\052\uffb9\001\002\000\042\002\uff89\006\uff89\007\uff89\011" +
    "\uff89\017\uff89\020\uff89\021\uff89\022\uff89\026\uff89\031\uff89" +
    "\037\uff89\041\uff89\043\uff89\044\uff89\051\uff89\052\uff89\001" +
    "\002\000\016\012\074\013\uff8a\016\uff8a\023\uff8a\024\073" +
    "\077\072\001\002\000\010\013\053\016\061\023\054\001" +
    "\002\000\004\015\063\001\002\000\036\002\uffe2\006\uffe2" +
    "\007\uffe2\011\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\031" +
    "\uffe2\037\uffe2\041\uffe2\044\uffe2\051\uffe2\052\uffe2\001\002" +
    "\000\004\016\064\001\002\000\010\004\065\005\070\010" +
    "\066\001\002\000\006\013\uffe0\023\uffe0\001\002\000\006" +
    "\013\uffde\023\uffde\001\002\000\006\013\053\023\054\001" +
    "\002\000\006\013\uffdf\023\uffdf\001\002\000\036\002\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\031\uffe1\037\uffe1\041\uffe1\044\uffe1\051\uffe1\052\uffe1" +
    "\001\002\000\006\004\124\100\125\001\002\000\004\020" +
    "\100\001\002\000\004\011\075\001\002\000\012\012\074" +
    "\013\uff8a\016\uff8a\023\uff8a\001\002\000\010\013\uff8b\016" +
    "\uff8b\023\uff8b\001\002\000\004\025\105\001\002\000\004" +
    "\016\101\001\002\000\004\011\102\001\002\000\006\012" +
    "\103\025\uffc1\001\002\000\004\020\100\001\002\000\004" +
    "\025\uffc2\001\002\000\004\023\106\001\002\000\004\026" +
    "\111\001\002\000\006\013\053\023\054\001\002\000\036" +
    "\002\uffc8\006\uffc8\007\uffc8\011\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\031\uffc8\037\uffc8\041\uffc8\044\uffc8\051\uffc8" +
    "\052\uffc8\001\002\000\014\011\uff86\026\111\033\uff86\035" +
    "\uff86\052\uff86\001\002\000\004\035\113\001\002\000\006" +
    "\004\115\016\114\001\002\000\004\011\116\001\002\000" +
    "\006\013\uffbd\023\uffbd\001\002\000\004\016\117\001\002" +
    "\000\004\064\120\001\002\000\004\016\121\001\002\000" +
    "\004\011\122\001\002\000\006\013\uffbe\023\uffbe\001\002" +
    "\000\012\011\uff87\033\uff87\035\uff87\052\uff87\001\002\000" +
    "\004\100\127\001\002\000\006\013\053\023\054\001\002" +
    "\000\036\002\uff93\006\uff93\007\uff93\011\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\031\uff93\037\uff93\041\uff93\044\uff93" +
    "\051\uff93\052\uff93\001\002\000\004\016\130\001\002\000" +
    "\004\015\131\001\002\000\004\101\132\001\002\000\004" +
    "\016\133\001\002\000\004\010\135\001\002\000\004\102" +
    "\142\001\002\000\006\012\137\016\136\001\002\000\004" +
    "\102\uff97\001\002\000\004\016\140\001\002\000\004\010" +
    "\135\001\002\000\004\102\uff96\001\002\000\006\013\053" +
    "\023\054\001\002\000\036\002\uff9e\006\uff9e\007\uff9e\011" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\031\uff9e\037\uff9e" +
    "\041\uff9e\044\uff9e\051\uff9e\052\uff9e\001\002\000\004\011" +
    "\145\001\002\000\004\016\146\001\002\000\004\015\147" +
    "\001\002\000\004\016\150\001\002\000\004\057\151\001" +
    "\002\000\004\031\152\001\002\000\004\024\153\001\002" +
    "\000\014\004\154\005\161\010\157\014\155\025\162\001" +
    "\002\000\012\012\uff85\013\uff85\023\uff85\025\uff85\001\002" +
    "\000\012\012\uff84\013\uff84\023\uff84\025\uff84\001\002\000" +
    "\004\012\166\001\002\000\012\012\uff83\013\uff83\023\uff83" +
    "\025\uff83\001\002\000\004\025\164\001\002\000\012\012" +
    "\uff82\013\uff82\023\uff82\025\uff82\001\002\000\006\013\053" +
    "\023\054\001\002\000\036\002\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\031\uffbc\037\uffbc" +
    "\041\uffbc\044\uffbc\051\uffbc\052\uffbc\001\002\000\006\013" +
    "\053\023\054\001\002\000\036\002\uffbb\006\uffbb\007\uffbb" +
    "\011\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\031\uffbb\037" +
    "\uffbb\041\uffbb\044\uffbb\051\uffbb\052\uffbb\001\002\000\004" +
    "\016\167\001\002\000\012\004\154\005\161\010\157\014" +
    "\155\001\002\000\004\025\uffb8\001\002\000\016\012\074" +
    "\013\uff8a\016\uff8a\023\uff8a\024\227\077\230\001\002\000" +
    "\010\013\053\016\215\023\054\001\002\000\004\024\210" +
    "\001\002\000\004\024\203\001\002\000\004\024\176\001" +
    "\002\000\004\022\006\001\002\000\004\011\200\001\002" +
    "\000\004\025\201\001\002\000\006\013\053\023\054\001" +
    "\002\000\036\002\uffaf\006\uffaf\007\uffaf\011\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\031\uffaf\037\uffaf\041\uffaf\044" +
    "\uffaf\051\uffaf\052\uffaf\001\002\000\004\022\006\001\002" +
    "\000\004\011\205\001\002\000\004\025\206\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uffae\006\uffae" +
    "\007\uffae\011\uffae\017\uffae\020\uffae\021\uffae\022\uffae\031" +
    "\uffae\037\uffae\041\uffae\044\uffae\051\uffae\052\uffae\001\002" +
    "\000\004\022\006\001\002\000\004\011\212\001\002\000" +
    "\004\025\213\001\002\000\006\013\053\023\054\001\002" +
    "\000\036\002\uffad\006\uffad\007\uffad\011\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\031\uffad\037\uffad\041\uffad\044\uffad" +
    "\051\uffad\052\uffad\001\002\000\004\015\217\001\002\000" +
    "\036\002\uffea\006\uffea\007\uffea\011\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\031\uffea\037\uffea\041\uffea\044\uffea\051" +
    "\uffea\052\uffea\001\002\000\004\016\220\001\002\000\012" +
    "\004\222\005\225\010\224\014\223\001\002\000\006\013" +
    "\053\023\054\001\002\000\006\013\uffe8\023\uffe8\001\002" +
    "\000\006\013\uffe6\023\uffe6\001\002\000\006\013\uffe5\023" +
    "\uffe5\001\002\000\006\013\uffe7\023\uffe7\001\002\000\036" +
    "\002\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\031\uffe9\037\uffe9\041\uffe9\044\uffe9\051\uffe9" +
    "\052\uffe9\001\002\000\004\017\046\001\002\000\006\004" +
    "\231\100\232\001\002\000\004\100\234\001\002\000\006" +
    "\013\053\023\054\001\002\000\036\002\uff95\006\uff95\007" +
    "\uff95\011\uff95\017\uff95\020\uff95\021\uff95\022\uff95\031\uff95" +
    "\037\uff95\041\uff95\044\uff95\051\uff95\052\uff95\001\002\000" +
    "\004\016\235\001\002\000\004\015\236\001\002\000\004" +
    "\101\237\001\002\000\004\016\240\001\002\000\004\004" +
    "\241\001\002\000\006\012\246\016\245\001\002\000\004" +
    "\102\243\001\002\000\006\013\053\023\054\001\002\000" +
    "\036\002\uffa1\006\uffa1\007\uffa1\011\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\031\uffa1\037\uffa1\041\uffa1\044\uffa1\051" +
    "\uffa1\052\uffa1\001\002\000\004\102\uff9d\001\002\000\004" +
    "\016\247\001\002\000\004\004\241\001\002\000\004\102" +
    "\uff9c\001\002\000\004\025\256\001\002\000\004\011\253" +
    "\001\002\000\006\012\254\025\uffc5\001\002\000\004\017" +
    "\046\001\002\000\004\025\uffc6\001\002\000\004\023\106" +
    "\001\002\000\006\013\053\023\054\001\002\000\036\002" +
    "\uffca\006\uffca\007\uffca\011\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\031\uffca\037\uffca\041\uffca\044\uffca\051\uffca\052" +
    "\uffca\001\002\000\012\017\263\020\262\021\266\022\265" +
    "\001\002\000\006\016\uff7f\077\uff7f\001\002\000\006\016" +
    "\uff81\077\uff81\001\002\000\004\016\267\001\002\000\006" +
    "\016\uff80\077\uff80\001\002\000\006\016\uff7e\077\uff7e\001" +
    "\002\000\004\011\270\001\002\000\004\012\271\001\002" +
    "\000\004\016\272\001\002\000\012\017\263\020\262\021" +
    "\266\022\265\001\002\000\004\016\274\001\002\000\004" +
    "\011\275\001\002\000\004\025\276\001\002\000\004\023" +
    "\277\001\002\000\004\026\111\001\002\000\036\002\uffa6" +
    "\006\uffa6\007\uffa6\011\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\031\uffa6\037\uffa6\041\uffa6\044\uffa6\051\uffa6\052\uffa6" +
    "\001\002\000\004\011\302\001\002\000\004\016\303\001" +
    "\002\000\004\015\304\001\002\000\004\016\305\001\002" +
    "\000\004\011\306\001\002\000\006\013\053\023\054\001" +
    "\002\000\040\002\uffa4\006\uffa4\007\uffa4\011\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\026\111\031\uffa4\037\uffa4\041" +
    "\uffa4\044\uffa4\051\uffa4\052\uffa4\001\002\000\036\002\uffa3" +
    "\006\uffa3\007\uffa3\011\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\031\uffa3\037\uffa3\041\uffa3\044\uffa3\051\uffa3\052\uffa3" +
    "\001\002\000\016\012\074\013\uff8a\016\uff8a\023\uff8a\024" +
    "\321\077\322\001\002\000\010\013\053\016\313\023\054" +
    "\001\002\000\004\015\315\001\002\000\036\002\uffe4\006" +
    "\uffe4\007\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\031\uffe4\037\uffe4\041\uffe4\044\uffe4\051\uffe4\052\uffe4\001" +
    "\002\000\004\016\316\001\002\000\004\014\317\001\002" +
    "\000\006\013\053\023\054\001\002\000\036\002\uffe3\006" +
    "\uffe3\007\uffe3\011\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\031\uffe3\037\uffe3\041\uffe3\044\uffe3\051\uffe3\052\uffe3\001" +
    "\002\000\004\022\343\001\002\000\006\004\323\100\324" +
    "\001\002\000\004\100\326\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uff92\006\uff92\007\uff92\011\uff92" +
    "\017\uff92\020\uff92\021\uff92\022\uff92\031\uff92\037\uff92\041" +
    "\uff92\044\uff92\051\uff92\052\uff92\001\002\000\004\016\327" +
    "\001\002\000\004\015\330\001\002\000\004\101\331\001" +
    "\002\000\004\016\332\001\002\000\004\014\333\001\002" +
    "\000\006\012\340\016\337\001\002\000\004\102\335\001" +
    "\002\000\006\013\053\023\054\001\002\000\036\002\uff9f" +
    "\006\uff9f\007\uff9f\011\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\031\uff9f\037\uff9f\041\uff9f\044\uff9f\051\uff9f\052\uff9f" +
    "\001\002\000\004\102\uff99\001\002\000\004\016\341\001" +
    "\002\000\004\014\333\001\002\000\004\102\uff98\001\002" +
    "\000\004\016\347\001\002\000\004\023\106\001\002\000" +
    "\006\013\053\023\054\001\002\000\036\002\uffc9\006\uffc9" +
    "\007\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\031" +
    "\uffc9\037\uffc9\041\uffc9\044\uffc9\051\uffc9\052\uffc9\001\002" +
    "\000\004\011\350\001\002\000\006\012\351\023\uffc3\001" +
    "\002\000\004\022\343\001\002\000\004\023\uffc4\001\002" +
    "\000\004\002\ufffe\001\002\000\016\011\uff8e\070\uff8e\071" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\001\002\000\004\025\356" +
    "\001\002\000\004\023\357\001\002\000\004\026\111\001" +
    "\002\000\036\002\uffa5\006\uffa5\007\uffa5\011\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\031\uffa5\037\uffa5\041\uffa5\044" +
    "\uffa5\051\uffa5\052\uffa5\001\002\000\004\052\362\001\002" +
    "\000\004\011\363\001\002\000\006\013\053\023\054\001" +
    "\002\000\036\002\uffa2\006\uffa2\007\uffa2\011\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\031\uffa2\037\uffa2\041\uffa2\044" +
    "\uffa2\051\uffa2\052\uffa2\001\002\000\004\016\u0109\001\002" +
    "\000\004\016\u0104\001\002\000\004\016\370\001\002\000" +
    "\004\042\371\001\002\000\004\023\106\001\002\000\006" +
    "\013\053\023\054\001\002\000\040\002\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\031\uffb6" +
    "\037\uffb6\041\uffb6\043\374\044\uffb6\051\uffb6\052\uffb6\001" +
    "\002\000\006\004\365\011\366\001\002\000\036\002\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\031\uffb7\037\uffb7\041\uffb7\044\uffb7\051\uffb7\052\uffb7" +
    "\001\002\000\004\016\377\001\002\000\004\042\u0100\001" +
    "\002\000\004\023\106\001\002\000\006\013\053\023\054" +
    "\001\002\000\040\002\uffb4\006\uffb4\007\uffb4\011\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\031\uffb4\037\uffb4\041\uffb4" +
    "\043\374\044\uffb4\051\uffb4\052\uffb4\001\002\000\036\002" +
    "\uffb5\006\uffb5\007\uffb5\011\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\031\uffb5\037\uffb5\041\uffb5\044\uffb5\051\uffb5\052" +
    "\uffb5\001\002\000\004\064\u0105\001\002\000\004\016\u0106" +
    "\001\002\000\006\004\u0107\011\u0108\001\002\000\004\016" +
    "\uffb2\001\002\000\004\016\uffb0\001\002\000\004\064\u010a" +
    "\001\002\000\004\016\u010b\001\002\000\006\004\u010c\011" +
    "\u010d\001\002\000\004\016\uffb3\001\002\000\004\016\uffb1" +
    "\001\002\000\004\024\uffa7\001\002\000\004\024\u013a\001" +
    "\002\000\004\024\uffa8\001\002\000\004\024\uffa9\001\002" +
    "\000\016\012\074\013\uff8a\016\uff8a\023\uff8a\024\u0120\077" +
    "\u0121\001\002\000\004\024\uffaa\001\002\000\010\013\053" +
    "\016\u0116\023\054\001\002\000\004\024\uffab\001\002\000" +
    "\004\015\u0118\001\002\000\036\002\uffdd\006\uffdd\007\uffdd" +
    "\011\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\031\uffdd\037" +
    "\uffdd\041\uffdd\044\uffdd\051\uffdd\052\uffdd\001\002\000\004" +
    "\016\u0119\001\002\000\012\004\u011b\005\u011e\010\u011c\014" +
    "\u011a\001\002\000\006\013\uffd9\023\uffd9\001\002\000\006" +
    "\013\uffdb\023\uffdb\001\002\000\006\013\uffd8\023\uffd8\001" +
    "\002\000\006\013\053\023\054\001\002\000\006\013\uffda" +
    "\023\uffda\001\002\000\036\002\uffdc\006\uffdc\007\uffdc\011" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\031\uffdc\037\uffdc" +
    "\041\uffdc\044\uffdc\051\uffdc\052\uffdc\001\002\000\004\021" +
    "\025\001\002\000\006\004\u0122\100\u0123\001\002\000\004" +
    "\100\u0125\001\002\000\006\013\053\023\054\001\002\000" +
    "\036\002\uff94\006\uff94\007\uff94\011\uff94\017\uff94\020\uff94" +
    "\021\uff94\022\uff94\031\uff94\037\uff94\041\uff94\044\uff94\051" +
    "\uff94\052\uff94\001\002\000\004\016\u0126\001\002\000\004" +
    "\015\u0127\001\002\000\004\101\u0128\001\002\000\004\016" +
    "\u0129\001\002\000\004\005\u012b\001\002\000\004\102\u0130" +
    "\001\002\000\006\012\u012d\016\u012c\001\002\000\004\102" +
    "\uff9b\001\002\000\004\016\u012e\001\002\000\004\005\u012b" +
    "\001\002\000\004\102\uff9a\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uffa0\006\uffa0\007\uffa0\011\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\031\uffa0\037\uffa0\041" +
    "\uffa0\044\uffa0\051\uffa0\052\uffa0\001\002\000\004\025\u0137" +
    "\001\002\000\004\011\u0134\001\002\000\006\012\u0135\025" +
    "\uffbf\001\002\000\004\021\025\001\002\000\004\025\uffc0" +
    "\001\002\000\004\023\106\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\031\uffc7\037\uffc7\041" +
    "\uffc7\044\uffc7\051\uffc7\052\uffc7\001\002\000\004\021\025" +
    "\001\002\000\004\011\u013c\001\002\000\004\025\u013d\001" +
    "\002\000\006\013\053\023\054\001\002\000\036\002\uffac" +
    "\006\uffac\007\uffac\011\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\031\uffac\037\uffac\041\uffac\044\uffac\051\uffac\052\uffac" +
    "\001\002\000\004\011\u0140\001\002\000\006\013\053\023" +
    "\054\001\002\000\036\002\uffcb\006\uffcb\007\uffcb\011\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\031\uffcb\037\uffcb\041" +
    "\uffcb\044\uffcb\051\uffcb\052\uffcb\001\002\000\004\004\u0150" +
    "\001\002\000\004\015\u0144\001\002\000\004\016\u0145\001" +
    "\002\000\004\057\u0146\001\002\000\014\017\263\020\262" +
    "\021\266\022\265\031\u0148\001\002\000\004\077\u014c\001" +
    "\002\000\004\024\u0149\001\002\000\004\025\u014a\001\002" +
    "\000\006\013\053\023\054\001\002\000\036\002\uffba\006" +
    "\uffba\007\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\031\uffba\037\uffba\041\uffba\044\uffba\051\uffba\052\uffba\001" +
    "\002\000\004\004\u014d\001\002\000\004\100\u014e\001\002" +
    "\000\006\013\053\023\054\001\002\000\036\002\uff90\006" +
    "\uff90\007\uff90\011\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\031\uff90\037\uff90\041\uff90\044\uff90\051\uff90\052\uff90\001" +
    "\002\000\004\100\u0151\001\002\000\004\016\u0152\001\002" +
    "\000\004\015\u0153\001\002\000\004\016\u0154\001\002\000" +
    "\012\004\154\005\161\010\157\014\155\001\002\000\006" +
    "\013\053\023\054\001\002\000\036\002\uff91\006\uff91\007" +
    "\uff91\011\uff91\017\uff91\020\uff91\021\uff91\022\uff91\031\uff91" +
    "\037\uff91\041\uff91\044\uff91\051\uff91\052\uff91\001\002\000" +
    "\012\004\u0158\005\u015c\011\u015b\014\u0159\001\002\000\010" +
    "\012\u0169\013\uffcf\023\uffcf\001\002\000\010\012\u0166\013" +
    "\uffd0\023\uffd0\001\002\000\006\013\053\023\054\001\002" +
    "\000\012\012\u0161\013\uffcd\023\uffcd\060\u0160\001\002\000" +
    "\010\012\u015d\013\uffce\023\uffce\001\002\000\004\016\u015e" +
    "\001\002\000\012\004\u0158\005\u015c\011\u015b\014\u0159\001" +
    "\002\000\006\013\uffd2\023\uffd2\001\002\000\004\011\u0164" +
    "\001\002\000\004\016\u0162\001\002\000\012\004\u0158\005" +
    "\u015c\011\u015b\014\u0159\001\002\000\006\013\uffd1\023\uffd1" +
    "\001\002\000\006\013\uffcc\023\uffcc\001\002\000\036\002" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\031\uffd5\037\uffd5\041\uffd5\044\uffd5\051\uffd5\052" +
    "\uffd5\001\002\000\004\016\u0167\001\002\000\012\004\u0158" +
    "\005\u015c\011\u015b\014\u0159\001\002\000\006\013\uffd4\023" +
    "\uffd4\001\002\000\004\016\u016a\001\002\000\012\004\u0158" +
    "\005\u015c\011\u015b\014\u0159\001\002\000\006\013\uffd3\023" +
    "\uffd3\001\002\000\004\002\000\001\002\000\004\011\uff8c" +
    "\001\002\000\004\011\uff8d\001\002\000\004\031\u0170\001" +
    "\002\000\006\016\u0172\023\u0173\001\002\000\036\002\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\031\ufff1\037\ufff1\041\ufff1\044\ufff1\051\ufff1\052\ufff1" +
    "\001\002\000\004\103\u0179\001\002\000\004\026\111\001" +
    "\002\000\004\033\u0175\001\002\000\004\016\u0177\001\002" +
    "\000\036\002\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\031\ufff0\037\ufff0\041\ufff0\044\ufff0" +
    "\051\ufff0\052\ufff0\001\002\000\006\013\053\023\054\001" +
    "\002\000\036\002\uffef\006\uffef\007\uffef\011\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\031\uffef\037\uffef\041\uffef\044" +
    "\uffef\051\uffef\052\uffef\001\002\000\004\016\u017a\001\002" +
    "\000\004\031\u017b\001\002\000\004\023\u0173\001\002\000" +
    "\036\002\ufff2\006\ufff2\007\ufff2\011\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\031\ufff2\037\ufff2\041\ufff2\044\ufff2\051" +
    "\ufff2\052\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\060\002\007\003\022\004\046\005\033\006" +
    "\035\007\006\010\011\011\032\015\034\016\015\017\025" +
    "\022\010\031\036\032\027\035\030\042\012\046\014\053" +
    "\026\055\031\056\041\057\020\060\037\061\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0113\036\u010e\001\001\000\004\033\366\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\352\003\022\004\046\005\033" +
    "\006\035\007\006\010\011\011\032\015\034\016\015\017" +
    "\025\022\010\031\036\032\027\035\030\042\012\046\014" +
    "\053\026\055\031\056\041\057\020\060\037\061\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\311\001" +
    "\001\000\002\001\001\000\004\012\171\001\001\000\002" +
    "\001\001\000\004\012\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\047\003\022\004\046\005\033" +
    "\006\035\007\006\010\011\011\032\015\034\016\015\017" +
    "\025\022\010\031\036\032\027\035\030\042\012\046\014" +
    "\053\026\055\031\056\041\057\020\060\037\061\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\076\001\001" +
    "\000\004\012\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\103\001\001\000\002\001" +
    "\001\000\004\023\106\001\001\000\004\030\111\001\001" +
    "\000\004\013\107\001\001\000\002\001\001\000\004\030" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\140\001\001\000\002\001" +
    "\001\000\004\013\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\157\040\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\162\001\001\000" +
    "\002\001\001\000\004\013\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\201\001\001\000\002\001\001\000\004\060\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\206" +
    "\001\001\000\002\001\001\000\004\060\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\220\001\001\000\004\013\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\250" +
    "\056\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\254\056\251\001\001\000\002\001\001" +
    "\000\004\023\256\001\001\000\004\013\257\001\001\000" +
    "\002\001\001\000\004\043\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\300\041\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\306\001\001\000\006\030" +
    "\300\041\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\317" +
    "\001\001\000\002\001\001\000\004\025\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\344\001\001\000\004\013\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\360\045\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\371\001\001\000" +
    "\004\013\372\001\001\000\004\034\374\001\001\000\004" +
    "\033\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0100\001\001\000\004\013\u0101" +
    "\001\001\000\004\034\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\u0131\057\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u012e\001\001\000\002\001\001\000\004\013\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0135\057\u0132\001\001" +
    "\000\002\001\001\000\004\023\u0137\001\001\000\004\013" +
    "\u0138\001\001\000\002\001\001\000\004\057\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u0146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u0154\001\001\000" +
    "\004\013\u0155\001\001\000\002\001\001\000\004\020\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u015e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u016a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u0170\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0173\001\001\000\004" +
    "\070\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u017b\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= codigoli 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= lineas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= lineas S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= codigoli S 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigoli ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigoli ::= MES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigoli ::= FUNCIONESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // codigoli ::= Linstancias 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // codigoli ::= CLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigoli",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lineas ::= est 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lineas ::= FunE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lineas ::= contructoDes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lineas ::= Arrays 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lineas ::= TiposArr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lineas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLASES ::= identificadorC libre IDmayu libre herencia libre IDmayu CuerpoClases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CLASES ::= identificadorC libre IDmayu CuerpoClases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CuerpoClases ::= newline TABULA Propiedades 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CuerpoClases",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Propiedades ::= propiedades libre finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= DECENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= DECCADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= DECBOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= DECLAREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECENTERO ::= reducciondetipoente VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECENTERO ::= reducciondetipoente VARSECUE libre asignacion libre Compaentero finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECENTERO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Compaentero ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Compaentero ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Compaentero ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Compaentero ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compaentero",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECCADENA ::= reducciondetipocadena VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECCADENA ::= reducciondetipocadena VARSECUE libre asignacion libre cadena finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECCADENA",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECBOLEAN ::= reducciondetipobol VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECBOLEAN ::= reducciondetipobol VARSECUE libre asignacion libre Compboo finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECBOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Compboo ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Compboo ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Compboo ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compboo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLAREAL ::= reducciondetiporeal VARSECUE finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLAREAL ::= reducciondetiporeal VARSECUE libre asignacion libre Compreal finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Compreal ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Compreal ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Compreal ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Compreal ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Compreal",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MES ::= Mentrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MES ::= Msalida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Mentrada ::= entrada libre TIP finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Mentrada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIP ::= cadena coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIP ::= entero coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIP ::= real coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIP ::= identificador coma libre TIP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIP ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIP ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIP ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIP ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIP ::= identificador pun identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIP",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Msalida ::= salida libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Msalida",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCIONESS ::= reducciondetipoente identificador para PARAMETROSE parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCIONESS ::= reducciondetipocadena identificador para PARAMETROSC CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNCIONESS ::= reducciondetipobol identificador para PARAMETROSB parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNCIONESS ::= reducciondetiporeal identificador para PARAMETROSR parb CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONESS",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROSE ::= reducciondetipoente identificador coma PARAMETROSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROSE ::= reducciondetipoente identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROSC ::= tipo_cadena libre identificador coma PARAMETROSC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAMETROSC ::= tipo_cadena libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSC",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAMETROSB ::= tipo_bol libre identificador coma PARAMETROSB 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAMETROSB ::= tipo_bol libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSB",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAMETROSR ::= reducciondetiporeal identificador coma PARAMETROSR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAMETROSR ::= reducciondetiporeal identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSR",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPOF ::= newline TABULA retornar libre identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPOF ::= newline TABULA retornar entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOF",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Linstancias ::= IDmayu libre identificador libre asignacion libre insta IDmayu para datos parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Linstancias ::= identificador libre asignacion libre insta IDmayu para parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linstancias ::= borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Linstancias",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // datos ::= tipodatoss coma libre tipodatoss 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // est ::= ifs cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // est ::= ifs cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("est",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // seguimiento ::= els cond libre entoncess CUERPOF finales seguimiento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // seguimiento ::= els cond libre entoncess CUERPOF finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("seguimiento",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= entero libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= identificador libre opnum libre entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= entero libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond ::= identificador libre opnum libre identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunE ::= reducciondetipoente tipo_ca para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FunE ::= reducciondetipoente tipo_ca2 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FunE ::= reducciondetipoente tipo_ca3 para reducciondetipocadena identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FunE ::= reducciondetiporeal Tipofun para reducciondetiporeal identificador parb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FunE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipofun ::= tipo_ca4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipofun ::= tipo_ca5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Tipofun ::= tipo_ca6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipofun ::= tipo_ca7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipofun ::= tipo_ca8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Tipofun",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contructoDes ::= constru para tipodatosnombre libre identificador coma libre tipodatosnombre libre identificador parb newline CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contructoDes ::= destruir para parb newline CUERPODES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contructoDes",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPOD ::= TABULA identificador libre asignacion libre identificador finales CUERPOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOD",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPODES ::= TABULA borrar identificador finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPODES",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Arrays ::= reducciondetipoente identificador corchetea entero corcheteb libre asignacion llava libre Numeros llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Arrays ::= reducciondetiporeal identificador corchetea entero corcheteb libre asignacion llava libre NumerosRe llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Arrays ::= reducciondetipocadena identificador corchetea entero corcheteb libre asignacion llava libre CadenasA llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Arrays ::= reducciondetipobol identificador corchetea entero corcheteb libre asignacion llava libre CadenaBO llavb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arrays",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Numeros ::= entero libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Numeros ::= entero coma libre Numeros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Numeros",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NumerosRe ::= real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NumerosRe ::= real coma libre NumerosRe 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumerosRe",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CadenasA ::= cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CadenasA ::= cadena coma libre CadenasA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenasA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CadenaBO ::= boleano libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CadenaBO ::= boleano coma libre CadenaBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CadenaBO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TiposArr ::= reducciondetipoente identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TiposArr ::= reducciondetiporeal identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TiposArr ::= reducciondetipobol identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TiposArr ::= reducciondetipocadena identificador corchetea corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TiposArr ::= identificador corchetea entero corcheteb libre asignacion libre tipodatoss finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TiposArr ::= identificador libre asignacion libre insta tipodatosnombre corchetea entero corcheteb finales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TiposArr",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // reducciondetipoente ::= tipo_ent libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipoente",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // reducciondetiporeal ::= tipo_real libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetiporeal",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // reducciondetipobol ::= tipo_bol libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipobol",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // reducciondetipocadena ::= tipo_cadena libre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reducciondetipocadena",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARSECUE ::= identificador coma VARSECUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VARSECUE ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARSECUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // finales ::= fin_de_linea newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // finales ::= newline 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finales",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TABULA ::= salto TABULA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TABULA ::= salto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABULA",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipodatoss ::= entero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipodatoss ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipodatoss ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipodatoss ::= real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatoss",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipodatosnombre ::= tipo_ent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipodatosnombre ::= tipo_cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipodatosnombre ::= tipo_bol 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipodatosnombre ::= tipo_real 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodatosnombre",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
